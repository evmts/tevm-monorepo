{"version":3,"sources":["../src/index.js","../src/BaseState.ts","../src/AppState.ts"],"sourcesContent":["export * from './AppState.js'\nexport * from './BaseState.js'\n","import { create } from 'zustand'\nimport { devtools, persist } from 'zustand/middleware'\n\nexport interface BaseStateOptions {\n\tpersist: { name: string; version: number } | undefined\n}\n\nconst identityFn = <T>(thing: T) => thing\n\n/**\n * To protect against stale state we never want to acces\n * state with this.someProp but instead want to always\n * use this.get() to get the state\n */\nconst VALID_KEYS = new Set(['get', 'set', 'createStore'])\n/**\n * The base class that other pieces of state extend from\n * I made this class based because it reduces the boilerplate\n * of using zustand with typescript a fair amount\n *\n * @see https://docs.pmnd.rs/zustand\n */\nexport abstract class BaseState<T extends {}> {\n\t/**\n\t * Get latest zustand state\n\t */\n\tprotected get!: () => T\n\n\t/**\n\t * Set zustand state.   Zustand will automatically\n\t * persist the other keys in the state.\n\t *\n\t * @see https://docs.pmnd.rs/zustand/guides/updating-state\n\t */\n\tprotected set!: (\n\t\tstateTransition: Partial<T> | ((state: T) => Partial<T>),\n\t) => void\n\n\tconstructor(\n\t\tprivate readonly _options: BaseStateOptions = { persist: undefined },\n\t) {\n\t\t// We never want to this.accessProperty\n\t\t// We want to always get() first to get latest zustand state\n\t\t// rome-ignore lint/correctness/noConstructorReturn: <explanation>\n\t\treturn new Proxy(this, {\n\t\t\tget(target, prop) {\n\t\t\t\tif (!VALID_KEYS.has(prop as string)) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Access state with this.get().${String(\n\t\t\t\t\t\t\tprop,\n\t\t\t\t\t\t)} rather than this.${String(prop)}`,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\treturn (target as any)[prop]\n\t\t\t},\n\t\t})\n\t}\n\n\t/**\n\t * @parameter enableDev\n\t * @returns zustand store\n\t */\n\tcreateStore = (enableDev = false) => {\n\t\t/**\n\t\t * @see https://docs.pmnd.rs/zustand/integrations/persisting-store-data\n\t\t */\n\t\tconst persistMiddleware = (\n\t\t\tthis._options.persist ? persist : identityFn\n\t\t) as typeof persist\n\t\tif (enableDev) {\n\t\t\treturn create<T>(\n\t\t\t\tdevtools(\n\t\t\t\t\tpersistMiddleware((set, get) => {\n\t\t\t\t\t\tthis.set = set\n\t\t\t\t\t\tthis.get = get as () => T\n\t\t\t\t\t\treturn { ...this }\n\t\t\t\t\t\t// rome-ignore lint/style/noNonNullAssertion: <explanation>\n\t\t\t\t\t}, this._options.persist!) as any,\n\t\t\t\t) as any,\n\t\t\t)\n\t\t}\n\t\t/**\n\t\t * @see https://docs.pmnd.rs/zustand/getting-started/introduction#first-create-a-store\n\t\t */\n\t\treturn create<T>(\n\t\t\tpersistMiddleware<T>((set, get) => {\n\t\t\t\tthis.set = set\n\t\t\t\tthis.get = get\n\t\t\t\treturn this as unknown as T\n\t\t\t\t// rome-ignore lint/style/noNonNullAssertion: <explanation>\n\t\t\t}, this._options.persist!) as any,\n\t\t)\n\t}\n}\n","import { BaseState } from './BaseState.js'\n/**\n * Class representing the EVMts state\n * @extends {BaseState<{count: number}>}\n */\nexport class AppState extends BaseState<AppState> {\n\t/**\n\t * Hello world\n\t */\n\tpublic readonly count: number = 0\n\t/**\n\t * Hello world\n\t */\n\tpublic readonly setCount = (count: number) => this.set({ count })\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,qBAAuB;AACvB,wBAAkC;AAMlC,IAAM,aAAa,CAAI,UAAa;AAOpC,IAAM,aAAa,oBAAI,IAAI,CAAC,OAAO,OAAO,aAAa,CAAC;AAQjD,IAAe,YAAf,MAAuC;AAAA,EAgB7C,YACkB,WAA6B,EAAE,SAAS,OAAU,GAClE;AADgB;AAKjB,WAAO,IAAI,MAAM,MAAM;AAAA,MACtB,IAAI,QAAQ,MAAM;AACjB,YAAI,CAAC,WAAW,IAAI,IAAc,GAAG;AACpC,gBAAM,IAAI;AAAA,YACT,gCAAgC;AAAA,cAC/B;AAAA,YACD,CAAC,qBAAqB,OAAO,IAAI,CAAC;AAAA,UACnC;AAAA,QACD;AACA,eAAQ,OAAe,IAAI;AAAA,MAC5B;AAAA,IACD,CAAC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EA9BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BV,cAAc,CAAC,YAAY,UAAU;AAIpC,UAAM,oBACL,KAAK,SAAS,UAAU,4BAAU;AAEnC,QAAI,WAAW;AACd,iBAAO;AAAA,YACN;AAAA,UACC,kBAAkB,CAAC,KAAK,QAAQ;AAC/B,iBAAK,MAAM;AACX,iBAAK,MAAM;AACX,mBAAO,EAAE,GAAG,KAAK;AAAA,UAElB,GAAG,KAAK,SAAS,OAAQ;AAAA,QAC1B;AAAA,MACD;AAAA,IACD;AAIA,eAAO;AAAA,MACN,kBAAqB,CAAC,KAAK,QAAQ;AAClC,aAAK,MAAM;AACX,aAAK,MAAM;AACX,eAAO;AAAA,MAER,GAAG,KAAK,SAAS,OAAQ;AAAA,IAC1B;AAAA,EACD;AACD;;;ACxFO,IAAM,WAAN,cAAuB,UAAoB;AAAA;AAAA;AAAA;AAAA,EAIjC,QAAgB;AAAA;AAAA;AAAA;AAAA,EAIhB,WAAW,CAAC,UAAkB,KAAK,IAAI,EAAE,MAAM,CAAC;AACjE;","names":[]}