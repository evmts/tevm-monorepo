import { createAddress } from '@tevm/address'
import { transports } from '@tevm/test-utils'
import { describe, expect, it } from 'vitest'
import { createBaseState } from '../createBaseState.js'
import { getProof } from './getProof.js'

describe(getProof.name, () => {
	it('getProof from fork url', async () => {
		const state = createBaseState({
			fork: {
				transport: transports.optimism,
				blockTag: 420n,
			},
		})
		await state.ready()
		expect(await getProof(state)(createAddress(0))).toMatchInlineSnapshot(`
			{
			  "accountProof": [
			    "0xf90211a0f736a0538cb21a8e0b184a7f2cd3332af3e70106cfc8f5fff18a4dff0dd56212a0b313b06de698fb955870a7d3b5116db7baaff39e6ea5ed5e40bfdb3daa0e7f78a03b8ad86d708955f4b429171e8d21621adcb36ea910c0a51ac684583af4a4567ba0359e1d54019ce9014e6fa07059797719d9993e6e1ff7fdf7017792ad1f208b2ea06599a37348fb05df5ce646346ee99dc0622debf0abbccf3b1b2fef248be864f6a0a6edb394fc8086077553cf9b912600a5a53291df8bd4dfd43ac5484ee7daa8b1a03d3b493a6378d38c238745a23b7a5cab608a209dfc1c61fe4f425c621298ccd9a0736729a2e5d5cd29faebb86535070b917bffd962ea4ad330d34802c1888443b0a0004052144436e8ce0c8780eac20c7966808f88567fe6d722dd76cf8f4e6f9bd3a000d99170f1ff20c8f7d335fa73e6a5ee1a017e7c5cfc3717e72c30e00fab3727a03714a8938d3c82b182e7c92b6393cd904b0094e8ab947b48b733ef5ae60c534fa0135ceb73d0102eed2fc1991d812713c2192d892a3f9634f7291ac146b253b5f0a0dd7e02c9abc5f9bca6ace36c77b8b80e9b67e63a44234f89741c83811679d46ca071c6445a16eaca76bd692cfeb0ff4bbe0633d8baa4e443f63e69557892d5274ea0099566dce09773a6646aa62b7b2d1bdef08ae997dcdb4aa6dc665d00d1e9e1f3a06cf7ecd616eae8946e30b1b25bb0f029e575cbc50a808a76408e175fea13d1ef80",
			    "0xf90211a0c58a07ec45884a3d5f4bd22f27c35fe7cddceeef666f0bb6d07c002e1da1be36a0949f3900c7143fd9d0ce22591a293e3dd937688919fe43d51411d01d26b9e2f1a0a9382f6526753c610e579f2b0125f13959b22b37ca102a201b09e69b9777903da05a000331c746019cc852bff8e03d3077d79e2e1feb3e54465a4daf78f733b53ea0ad0243e9d1afb44a3f16e2a1dd27fcc45641027d8330391cd422905b5772e5d3a08fdf9685bc00c5503f055b4527beca8a62d72d4427ef5556bda6a9bf9a4b21cda0324b6c194926b470f50f7a00444d0a91e9619cf0b9ef47209613395af2db8df2a0c21d8c4b9f56d8658be61fd54f27fd0f6d8533c6bef0a9ee2dbc921a1572cc76a0b4d62f32a460463bdb46ac1b1cd844517d96be3d8def39729062b3e890934dc0a03bab5e4f636396b7b78664f3560896a70a587ed2d385c9958476aa836cdcbf1ba0d36a531daa05acfd02f6d9674a976ac893e0ed6307b0368d42fb58f5b120b560a0a0aafb91eccf51033f02587a2449900811131de5da2470d48563797ce534b0f4a0a7dac7eea3a6f9a0a1df1a965852986547a5aa4f0bc978e6962a90f03556dfb2a0a8c3edd68ac70ac34dcc0b8d8534ce06f482585102dadee6671a93afe95acec4a05269c202a2add95113ad81c771fcde004c21a24586dc6235429d06a4373a0829a05ab864ad3b08dd8b3d92278049f40d881a3ef79d0b9202934db478ea3e56d0d480",
			    "0xf90211a093c6cddf9209e9cb9412e644c45d8890e747ec19a84ad611cf25ae6fbe616847a06147a1f7b15e1ba886b98b0b02bb9fd325d72abe6ef55b591ddced18da66aa3ca0460e1edb473736c40656f44f0dc5a79510ec8c36d4976fcbb2214d9ea27f0a2fa0d93e1bf022654a61e141a23b396fe6b408a5381264a6165fbde787dce2c609d1a03629acac4784bd2725eb1d80318b87da738da7f6199a76db923a18a428e32079a0ad5f2af6e2888a9e70eb0c59e2ceea18372fe3501ea6f301e450b4cb53bbea58a0d6830a676a2072b1b962f165e9303d2e769424dd600cbfb3e6aad1cbf1386c9da0395164fe12bd391d97d9f97dac5e2287f561b54afb4cda71425f9eb6631a99bca01bb2cc08d1644153d8d78d0cfe8ad60ad73b734c65b7851a8e57de4f45cfaa35a02ab09e7e810f18841bdcb017dd3f127e578793331ed4fcb0e361e1ca8504ae2ea0510ab5638dff2a8e3e7dec0710c89df2d9c7d264d68a3d73c8790ed05373f343a0df71607a5589a0edb61001f4491dd2b4f808f36b861fd1afe46b6dae67f2ace0a09ac821d9d6aae4df60e4770288f2eac782dc59522cfa7d4529c2afca46357ef1a0c7244d90b51bd64a40b9ba4e2bd5ead0b3734e621eb9efa44884faebd2b2cc52a0459385678509e27dcf458f113b54fb0764d57f50587590d433851bb889980881a0fbd8dfb938a6b6418a0afe0e4058a891d5cc45e1503dc82267ca699b4bd38a7380",
			    "0xf901d1a06a94c53fd85c5e8ea9b29a8128ec0c308b9fe38713e8528646155fa84faeeab2a01a647fd81190027077938350985932f4a6fe3a7a5db98ecd511f1c83240d831ba011df7413462f7a99ace7461c305623561bbe9c16d7dba3be1e082c00446e747aa0a3379d351335195fbcb1c02db6e2f464946b875deaac5c6d1728ce53302397f7a0529d154bbf9e033eac500b1fe523622c4b7d77a656ed51538220e61710db4ccba05785aa9d1749bafbc9cb3f47f48e25d99d477e93a5cec413ec9335f4708fe87780a01e97c2b8733173eacc12297457431e06a79c94ad38c69e3bb70236b5585c8709a0960219233452e8dc036b89f397c3d4f1befc68923e7afbad00b0f2d759b33563a020218bf4159de8814281f28b4e8664524a659d0d2fd1625d30fe3f8c5c8a2d5380a052431d0c9644b99bc8b55a805f30bd869540e1a194f5ad8862a87303e1dca3eea00a0b2724d02cb3d60f56c40ae1a903fbb682382e519a79f6a2c076f05147bc4aa0898909fa994a2d7e00039d0f37216161994f0d8b46e7728e296f3a54cabd4a4ca010d895754455b5ecf1d8b44ab4380fc65ce59efb838f2b8b23446669ceebd6f1a0d079c46480348bc019763aa6a97ca7f1196d1246d9efe753d637a9ec642fe1db80",
			    "0xf8689f20b17b52a829da181e8e2e32c3bee866b2ac593636e5f0fb725817d9ec02a8b846f8440480a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
			  ],
			  "address": "0x0000000000000000000000000000000000000000",
			  "balance": "0x0",
			  "codeHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
			  "nonce": "0x0",
			  "storageHash": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
			  "storageProof": [],
			}
		`)
	})

	it('throws error if attempting to getProof with no fork uri', () => {
		const state = createBaseState({})
		expect(() => getProof(state)(createAddress(0))).rejects.toThrowErrorMatchingInlineSnapshot(
			'[Error: getProof only implemented in fork mode atm because tevm at this moment does not merkilize the state]',
		)
	})
})
