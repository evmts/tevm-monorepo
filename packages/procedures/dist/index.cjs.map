{"version":3,"sources":["../src/anvil/anvilDropTransactionProcedure.js","../src/dumpstate/dumpStateProcedure.js","../src/anvil/anvilDumpStateProcedure.js","../src/anvil/anvilGetAutomineProcedure.js","../src/anvil/anvilImpersonateAccountProcedure.js","../src/anvil/anvilLoadStateProcedure.js","../src/anvil/anvilResetProcedure.js","../src/setaccount/setAccountProcedure.js","../src/anvil/anvilSetBalanceProcedure.js","../src/anvil/anvilSetCodeProcedure.js","../src/anvil/anvilSetCoinbaseProcedure.js","../src/anvil/anvilSetNonceProcedure.js","../src/anvil/anvilSetStorageAtProcedure.js","../src/anvil/anvilStopImpersonatingAccountProcedure.js","../src/utils/parseBlockTag.js","../src/call/callProcedure.js","../src/debug/debugTraceCallProcedure.js","../src/debug/debugTraceTransactionProcedure.js","../src/eth/blockNumberProcedure.js","../src/eth/chainIdProcedure.js","../src/eth/ethBlobBaseFeeProcedure.js","../src/eth/ethCallProcedure.js","../src/eth/ethCoinbaseProcedure.js","../src/eth/ethEstimateGasProcedure.js","../src/utils/txToJsonRpcTx.js","../src/utils/blockToJsonRpcBlock.js","../src/eth/ethGetBlockByHashProcedure.js","../src/eth/ethGetBlockByNumberProcedure.js","../src/eth/ethGetBlockTransactionCountByHashProcedure.js","../src/eth/ethGetBlockTransactionCountByNumberProcedure.js","../src/eth/ethGetFilterChangesProcedure.js","../src/eth/ethGetFilterLogsProcedure.js","../src/eth/ethGetLogsProcedure.js","../src/eth/ethGetTransactionByBlockHashAndIndexProcedure.js","../src/eth/ethGetTransactionByBlockNumberAndIndexProcedure.js","../src/eth/ethGetTransactionByHashProcedure.js","../src/eth/ethGetTransactionCountProcedure.js","../src/eth/ethGetTransactionReceiptProcedure.js","../src/utils/generateRandomId.js","../src/eth/ethNewBlockFilterProcedure.js","../src/eth/ethNewFilterProcedure.js","../src/eth/ethNewPendingTransactionFilterProcedure.js","../package.json","../src/eth/ethProtocolVersionProcedure.js","../src/eth/ethSendRawTransactionProcedure.js","../src/eth/ethSendTransactionProcedure.js","../src/eth/ethUninstallFilterProcedure.js","../src/eth/gasPriceProcedure.js","../src/eth/getBalanceProcedure.js","../src/eth/getCodeProcedure.js","../src/eth/getStorageAtProcedure.js","../src/getaccount/getAccountProcedure.js","../src/loadstate/loadStateProcedure.js","../src/mine/mineProcedure.js","../src/script/scriptProcedure.js","../src/createHandlers.js","../src/requestProcedure.js","../src/requestBulkProcedure.js","../src/anvil/anvilSetChainIdProcedure.js","../src/eth/ethAccountsProcedure.js","../src/eth/ethSignProcedure.js","../src/eth/ethSignTransactionProcedure.js"],"names":["hexToBytes","dumpStateHandler","numberToHex","getAddress","address","createAddress","EthjsAccount","setAccountHandler","hexToBigInt","BlockHeader","Block","callHandler","traceCallHandler","vm","hexToNumber","forkAndCacheBlock","tx","runTx","TransactionFactory","blockNumberHandler","chainIdHandler","bytesToHex","toBytes","createJsonRpcFetcher","ethGetLogsHandler","ForkError","InternalEvmError","out","ethGetTransactionReceiptHandler","ethNewFilterHandler","stringToHex","BlobEIP4844Transaction","InvalidParamsError","ethSendTransactionHandler","gasPriceHandler","getBalanceHandler","getCodeHandler","getStorageAtHandler","getAccountHandler","loadStateHandler","errors","mineHandler","InternalError","scriptHandler","MethodNotSupportedError","MethodNotFoundError","ethAccountsHandler","ethSignHandler","ethSignTransactionHandler"],"mappings":"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","file":"index.cjs","sourcesContent":["import { hexToBytes } from '@tevm/utils'\n\n/**\n * Request handler for anvil_dropTransaction JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilDropTransactionProcedure}\n */\nexport const anvilDropTransactionJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst anvilDropTransactionRequest =\n\t\t\t/** @type {import('./AnvilJsonRpcRequest.js').AnvilDropTransactionJsonRpcRequest}*/\n\t\t\t(request)\n\t\tconst txHash = anvilDropTransactionRequest.params[0].transactionHash\n\t\tconst txPool = await client.getTxPool()\n\t\tif (txPool.getByHash([hexToBytes(txHash)]).length > 0) {\n\t\t\ttxPool.removeByHash(txHash)\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t'Only tx in the txpool are allowed to be dropped. Dropping transactions that have already been mined is not yet supported',\n\t\t\t)\n\t\t}\n\t\treturn {\n\t\t\tmethod: anvilDropTransactionRequest.method,\n\t\t\tjsonrpc: '2.0',\n\t\t\tresult: null,\n\t\t\t...(anvilDropTransactionRequest.id ? { id: anvilDropTransactionRequest.id } : {}),\n\t\t}\n\t}\n}\n","import { dumpStateHandler } from '@tevm/actions'\nimport { numberToHex } from '@tevm/utils'\n\n/**\n * Creates a DumpState JSON-RPC Procedure for handling dumpState requests with Ethereumjs EVM\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./DumpStateJsonRpcProcedure.js').DumpStateJsonRpcProcedure}\n */\nexport const dumpStateProcedure = (client) => async (request) => {\n\tconst { errors = [], ...result } = await dumpStateHandler(client)({\n\t\tthrowOnFail: false,\n\t})\n\n\t/**\n\t * @type {import('@tevm/state').ParameterizedTevmState}\n\t */\n\tconst parsedState = {}\n\n\tfor (const [k, v] of Object.entries(result.state)) {\n\t\tconst { nonce, balance, storageRoot, codeHash } = v\n\t\tparsedState[k] = {\n\t\t\t...v,\n\t\t\tnonce: numberToHex(nonce),\n\t\t\tbalance: numberToHex(balance),\n\t\t\tstorageRoot: storageRoot,\n\t\t\tcodeHash: codeHash,\n\t\t}\n\t}\n\n\tif (errors.length > 0) {\n\t\tconst error = /** @type {import('@tevm/actions').TevmDumpStateError}*/ (errors[0])\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\terror: {\n\t\t\t\tcode: error.code,\n\t\t\t\tmessage: error.message,\n\t\t\t\tdata: {\n\t\t\t\t\terrors: errors.map(({ message }) => message),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmethod: 'tevm_dumpState',\n\t\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t\t}\n\t}\n\treturn {\n\t\tjsonrpc: '2.0',\n\t\tresult: {\n\t\t\tstate: parsedState,\n\t\t},\n\t\tmethod: 'tevm_dumpState',\n\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t}\n}\n","import { dumpStateProcedure } from '../dumpstate/dumpStateProcedure.js'\n\n// TODO this procedure is implemented completely wrong. Anvil encodes the state into a single hex string? Or maybe the type is wrong?\n/**\n * @experimental\n * Request handler for anvil_dumpState JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilDumpStateProcedure}\n */\nexport const anvilDumpStateJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\treturn /** @type any*/ ({\n\t\t\t...(await dumpStateProcedure(client)({\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: 'tevm_dumpState',\n\t\t\t})),\n\t\t\tmethod: request.method,\n\t\t})\n\t}\n}\n","/**\n * Request handler for anvil_getAutomine JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilGetAutomineProcedure}\n */\nexport const anvilGetAutomineJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\tmethod: request.method,\n\t\t\tresult: client.miningConfig.type === 'auto',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { getAddress } from '@tevm/utils'\n\n/**\n * Request handler for anvil_impersonateAccount JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilImpersonateAccountProcedure}\n */\nexport const anvilImpersonateAccountJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\ttry {\n\t\t\tclient.setImpersonatedAccount(getAddress(request.params[0]))\n\t\t\treturn {\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: request.method,\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tresult: null,\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn {\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: request.method,\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\t// TODO use @tevm/errors\n\t\t\t\terror: {\n\t\t\t\t\tcode: /** @type any*/ (-32602),\n\t\t\t\t\tmessage: /** @type {Error}*/ (e).message,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n}\n","import { createAddress } from '@tevm/address'\nimport { EthjsAccount, hexToBytes } from '@tevm/utils'\n\n/**\n * Request handler for anvil_loadState JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilLoadStateProcedure}\n */\nexport const anvilLoadStateJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst loadStateRequest = /** @type {import('./AnvilJsonRpcRequest.js').AnvilLoadStateJsonRpcRequest}*/ (request)\n\n\t\tconst vm = await client.getVm()\n\n\t\treturn Promise.all(\n\t\t\tObject.entries(loadStateRequest.params[0].state).map(([address, rlpEncodedAccount]) => {\n\t\t\t\treturn vm.stateManager.putAccount(\n\t\t\t\t\tcreateAddress(address),\n\t\t\t\t\tEthjsAccount.fromRlpSerializedAccount(hexToBytes(rlpEncodedAccount)),\n\t\t\t\t)\n\t\t\t}),\n\t\t)\n\t\t\t.then(() => {\n\t\t\t\t/**\n\t\t\t\t * @type {import('./AnvilJsonRpcResponse.js').AnvilLoadStateJsonRpcResponse}\n\t\t\t\t */\n\t\t\t\tconst response = {\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tmethod: loadStateRequest.method,\n\t\t\t\t\tresult: null,\n\t\t\t\t\t...(loadStateRequest.id ? { id: loadStateRequest.id } : {}),\n\t\t\t\t}\n\t\t\t\treturn response\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\t/**\n\t\t\t\t * @type {import('./AnvilJsonRpcResponse.js').AnvilLoadStateJsonRpcResponse}\n\t\t\t\t */\n\t\t\t\tconst response = {\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\tmethod: loadStateRequest.method,\n\t\t\t\t\t...(loadStateRequest.id ? { id: loadStateRequest.id } : {}),\n\t\t\t\t\terror: {\n\t\t\t\t\t\t// TODO use @tevm/errors\n\t\t\t\t\t\tcode: /** @type any*/ (-32602),\n\t\t\t\t\t\tmessage: e.message,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\treturn response\n\t\t\t})\n\t}\n}\n","/**\n * Request handler for anvil_reset JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilResetProcedure}\n */\nexport const anvilResetJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst vm = await client.getVm()\n\t\tvm.blockchain.blocksByTag.set(\n\t\t\t'latest',\n\t\t\tvm.blockchain.blocksByTag.get('forked') ?? vm.blockchain.blocksByTag.get('latest'),\n\t\t)\n\t\tArray.from(vm.blockchain.blocks.values()).forEach((block) => {\n\t\t\tif (!block) return\n\t\t\tvm.blockchain.delBlock(block.hash())\n\t\t})\n\t\tconst stateManager = vm.stateManager.shallowCopy()\n\t\tvm.stateManager = /** @type any*/ (stateManager)\n\t\tvm.evm.stateManager = /** @type any*/ (stateManager)\n\t\treturn {\n\t\t\tresult: null,\n\t\t\tmethod: request.method,\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { setAccountHandler } from '@tevm/actions'\nimport { hexToBigInt } from '@tevm/utils'\n\n/**\n * Creates an SetAccount JSON-RPC Procedure for handling tevm_setAccount requests with Ethereumjs VM\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./SetAccountJsonRpcProcedure.js').SetAccountJsonRpcProcedure}\n */\nexport const setAccountProcedure = (client) => async (request) => {\n\tconst { errors = [], ...result } = await setAccountHandler(client)({\n\t\tthrowOnFail: false,\n\t\taddress: request.params[0].address,\n\t\t...(request.params[0].nonce ? { nonce: hexToBigInt(request.params[0].nonce) } : {}),\n\t\t...(request.params[0].balance ? { balance: hexToBigInt(request.params[0].balance) } : {}),\n\t\t...(request.params[0].deployedBytecode ? { deployedBytecode: request.params[0].deployedBytecode } : {}),\n\t\t...(request.params[0].storageRoot ? { storageRoot: request.params[0].storageRoot } : {}),\n\t\t...(request.params[0].state ? { state: request.params[0].state } : {}),\n\t\t...(request.params[0].stateDiff ? { stateDiff: request.params[0].stateDiff } : {}),\n\t})\n\tif (errors.length > 0) {\n\t\tconst error = /** @type {import('@tevm/actions').TevmSetAccountError}*/ (errors[0])\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\terror: {\n\t\t\t\tcode: error.code,\n\t\t\t\tmessage: error.message,\n\t\t\t\tdata: {\n\t\t\t\t\terrors: errors.map(({ message }) => message),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmethod: 'tevm_setAccount',\n\t\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t\t}\n\t}\n\treturn {\n\t\tjsonrpc: '2.0',\n\t\tresult,\n\t\tmethod: 'tevm_setAccount',\n\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t}\n}\n","import { setAccountProcedure } from '../setaccount/setAccountProcedure.js'\n\n/**\n * Request handler for anvil_setBalance JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilSetBalanceProcedure}\n */\nexport const anvilSetBalanceJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst balanceResult = await setAccountProcedure(client)({\n\t\t\tjsonrpc: request.jsonrpc,\n\t\t\tmethod: 'tevm_setAccount',\n\t\t\tparams: [\n\t\t\t\t{\n\t\t\t\t\taddress: request.params[0],\n\t\t\t\t\tbalance: request.params[1],\n\t\t\t\t},\n\t\t\t],\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t})\n\t\tif (balanceResult.error) {\n\t\t\treturn {\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: request.method,\n\t\t\t\terror: /** @type {any}*/ (balanceResult.error),\n\t\t\t\t...(request.id !== undefined ? { id: request.id } : {}),\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\tmethod: request.method,\n\t\t\tresult: null,\n\t\t\t...(request.id !== undefined ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { setAccountProcedure } from '../setaccount/setAccountProcedure.js'\n\n/**\n * Request handler for anvil_setCode JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilSetCodeProcedure}\n */\nexport const anvilSetCodeJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst result = await setAccountProcedure(client)({\n\t\t\tjsonrpc: request.jsonrpc,\n\t\t\tmethod: 'tevm_setAccount',\n\t\t\tparams: [{ address: request.params[0], deployedBytecode: request.params[1] }],\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t})\n\t\tif (result.error) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: /** @type any*/ (-32602),\n\t\t\t\t\tmessage: result.error.message,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\tmethod: request.method,\n\t\t\tjsonrpc: request.jsonrpc,\n\t\t\tresult: null,\n\t\t}\n\t}\n}\n","import { Block, BlockHeader } from '@tevm/block'\nimport { getAddress } from '@tevm/utils'\n\n/**\n * Request handler for anvil_SetCoinbase JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilSetCoinbaseProcedure}\n */\nexport const anvilSetCoinbaseJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst vm = await client.getVm()\n\t\tconst currentBlock = await vm.blockchain.getCanonicalHeadBlock()\n\t\tconst coinbase = getAddress(request.params[0])\n\t\tconst newHeader = BlockHeader.fromHeaderData(\n\t\t\t{\n\t\t\t\t...currentBlock.header.raw(),\n\t\t\t\tcoinbase,\n\t\t\t},\n\t\t\t{\n\t\t\t\tcommon: vm.common,\n\t\t\t\tfreeze: false,\n\t\t\t\tsetHardfork: false,\n\t\t\t},\n\t\t)\n\t\t// TODO this as any is not necessary we shouldn't be doing this instead fix types please\n\t\tconst newBlock = Block.fromBlockData(\n\t\t\t/** @type {any}*/ ({\n\t\t\t\t...currentBlock,\n\t\t\t\twithdrawals: currentBlock.withdrawals,\n\t\t\t\theader: newHeader,\n\t\t\t}),\n\t\t\t{\n\t\t\t\tcommon: vm.common,\n\t\t\t\tfreeze: false,\n\t\t\t\tsetHardfork: false,\n\t\t\t},\n\t\t)\n\t\tawait vm.blockchain.putBlock(newBlock)\n\t\treturn {\n\t\t\tmethod: request.method,\n\t\t\tresult: coinbase,\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { setAccountProcedure } from '../setaccount/setAccountProcedure.js'\n\n/**\n * Request handler for anvil_setNonce JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilSetNonceProcedure}\n */\nexport const anvilSetNonceJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst balanceResult = await setAccountProcedure(client)({\n\t\t\tjsonrpc: request.jsonrpc,\n\t\t\tmethod: 'tevm_setAccount',\n\t\t\tparams: [\n\t\t\t\t{\n\t\t\t\t\taddress: request.params[0],\n\t\t\t\t\tnonce: request.params[1],\n\t\t\t\t},\n\t\t\t],\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t})\n\t\tif (balanceResult.error) {\n\t\t\treturn {\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: request.method,\n\t\t\t\terror: /** @type {any}*/ (balanceResult.error),\n\t\t\t\t...(request.id !== undefined ? { id: request.id } : {}),\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\tmethod: request.method,\n\t\t\tresult: null,\n\t\t\t...(request.id !== undefined ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { setAccountProcedure } from '../setaccount/setAccountProcedure.js'\n\n/**\n * Request handler for anvil_setStorageAt JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilSetStorageAtProcedure}\n */\nexport const anvilSetStorageAtJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\trequest\n\t\tconst result = await setAccountProcedure(client)({\n\t\t\tmethod: 'tevm_setAccount',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\tjsonrpc: '2.0',\n\t\t\tparams: [\n\t\t\t\t{\n\t\t\t\t\taddress: request.params[0],\n\t\t\t\t\tstateDiff: {\n\t\t\t\t\t\t[request.params[1]]: request.params[2],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t})\n\t\tif (result.error) {\n\t\t\treturn {\n\t\t\t\terror: /** @type {any}*/ (result.error),\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: request.method,\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\tmethod: request.method,\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\tresult: null,\n\t\t}\n\t}\n}\n","/**\n * Request handler for anvil_stopImpersonatingAccount JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilStopImpersonatingAccountProcedure}\n */\nexport const anvilStopImpersonatingAccountJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tclient.setImpersonatedAccount(undefined)\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\tmethod: request.method,\n\t\t\tresult: null,\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { hexToBigInt } from '@tevm/utils'\n\n/**\n * @param {import('@tevm/utils').Hex | import('@tevm/utils').BlockTag} blockTag\n * @returns {bigint | import('@tevm/utils').Hex | import('@tevm/utils').BlockTag}\n */\nexport const parseBlockTag = (blockTag) => {\n\tconst blockHashLength = 64 + '0x'.length\n\tconst isBlockNumber = typeof blockTag === 'string' && blockTag.startsWith('0x') && blockTag.length !== blockHashLength\n\tif (isBlockNumber) {\n\t\treturn hexToBigInt(/** @type {import('@tevm/utils').Hex}*/ (blockTag))\n\t}\n\treturn blockTag\n}\n","import { callHandler } from '@tevm/actions'\nimport { hexToBigInt, numberToHex } from '@tevm/utils'\nimport { parseBlockTag } from '../utils/parseBlockTag.js'\n\n/**\n * Creates a Call JSON-RPC Procedure for handling call requests with Ethereumjs EVM\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./CallJsonRpcProcedure.js').CallJsonRpcProcedure}\n */\nexport const callProcedure = (client) => async (request) => {\n\tconst { errors = [], ...result } = await callHandler(client)({\n\t\tthrowOnFail: false,\n\t\t...(request.params[1]\n\t\t\t? {\n\t\t\t\t\tstateOverrideSet: Object.fromEntries(\n\t\t\t\t\t\tObject.entries(request.params[1]).map(([address, state]) => [\n\t\t\t\t\t\t\taddress,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...(state.code ? { code: state.code } : {}),\n\t\t\t\t\t\t\t\t...(state.balance ? { balance: hexToBigInt(state.balance) } : {}),\n\t\t\t\t\t\t\t\t...(state.nonce ? { nonce: hexToBigInt(state.nonce) } : {}),\n\t\t\t\t\t\t\t\t...(state.state ? { state: state.state } : {}),\n\t\t\t\t\t\t\t\t...(state.stateDiff ? { stateDiff: state.stateDiff } : {}),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t]),\n\t\t\t\t\t),\n\t\t\t\t}\n\t\t\t: {}),\n\t\t...(request.params[2]\n\t\t\t? {\n\t\t\t\t\tblockOverrideSet: {\n\t\t\t\t\t\t...(request.params[2].blobBaseFee ? { blobBaseFee: hexToBigInt(request.params[2].blobBaseFee) } : {}),\n\t\t\t\t\t\t...(request.params[2].baseFee ? { baseFee: hexToBigInt(request.params[2].baseFee) } : {}),\n\t\t\t\t\t\t...(request.params[2].gasLimit ? { gasLimit: hexToBigInt(request.params[2].gasLimit) } : {}),\n\t\t\t\t\t\t...(request.params[2].coinbase ? { coinbase: request.params[2].coinbase } : {}),\n\t\t\t\t\t\t...(request.params[2].time ? { time: hexToBigInt(request.params[2].time) } : {}),\n\t\t\t\t\t\t...(request.params[2].number ? { number: hexToBigInt(request.params[2].number) } : {}),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t: {}),\n\t\t...(request.params[0].code ? { code: request.params[0].code } : {}),\n\t\t...(request.params[0].blobVersionedHashes ? { blobVersionedHashes: request.params[0].blobVersionedHashes } : {}),\n\t\t...(request.params[0].caller ? { caller: request.params[0].caller } : {}),\n\t\t...(request.params[0].data ? { data: request.params[0].data } : {}),\n\t\t...(request.params[0].depth ? { depth: request.params[0].depth } : {}),\n\t\t...(request.params[0].gasPrice ? { gasPrice: hexToBigInt(request.params[0].gasPrice) } : {}),\n\t\t...(request.params[0].gas ? { gas: hexToBigInt(request.params[0].gas) } : {}),\n\t\t...(request.params[0].gasRefund ? { gasRefund: hexToBigInt(request.params[0].gasRefund) } : {}),\n\t\t...(request.params[0].origin ? { origin: request.params[0].origin } : {}),\n\t\t...(request.params[0].salt ? { salt: request.params[0].salt } : {}),\n\t\t...(request.params[0].selfdestruct ? { selfdestruct: new Set(request.params[0].selfdestruct) } : {}),\n\t\t...(request.params[0].skipBalance ? { skipBalance: request.params[0].skipBalance } : {}),\n\t\t...(request.params[0].to ? { to: request.params[0].to } : {}),\n\t\t...(request.params[0].value ? { value: hexToBigInt(request.params[0].value) } : {}),\n\t\t...(request.params[0].blockTag ? { blockTag: parseBlockTag(request.params[0].blockTag) } : {}),\n\t\t...(request.params[0].createTransaction ? { createTransaction: request.params[0].createTransaction } : {}),\n\t\t...(request.params[0].from ? { from: request.params[0].from } : {}),\n\t\t...(request.params[0].maxFeePerGas ? { maxFeePerGas: hexToBigInt(request.params[0].maxFeePerGas) } : {}),\n\t\t...(request.params[0].maxPriorityFeePerGas\n\t\t\t? { maxPriorityFeePerGas: hexToBigInt(request.params[0].maxPriorityFeePerGas) }\n\t\t\t: {}),\n\t\t// TODO add support for manually setting nonce\n\t\t// ...(request.params[0].nonce ? { nonce: hexToBigInt(request.params[0].nonce) } : {}),\n\t})\n\tif (errors.length > 0) {\n\t\tconst error = /** @type {import('@tevm/actions').TevmCallError}*/ (errors[0])\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\terror: {\n\t\t\t\tcode: error.code,\n\t\t\t\tmessage: error.message,\n\t\t\t\tdata: {\n\t\t\t\t\terrors: errors.map(({ message }) => message),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmethod: 'tevm_call',\n\t\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t\t}\n\t}\n\n\t/**\n\t * @type {Record<`0x${string}`, Array<import('@tevm/utils').Hex>> | undefined}\n\t */\n\tconst accessList =\n\t\tresult.accessList !== undefined\n\t\t\t? Object.fromEntries(Object.entries(result.accessList).map(([key, value]) => [key, [...value]]))\n\t\t\t: undefined\n\n\t/**\n\t * @param {bigint} value\n\t * @returns {import('@tevm/utils').Hex}\n\t */\n\tconst toHex = (value) => /**@type {import('@tevm/utils').Hex}*/ (numberToHex(value))\n\t/**\n\t * @type {import('./CallJsonRpcResponse.js').CallJsonRpcResponse}\n\t */\n\tconst out = {\n\t\tjsonrpc: '2.0',\n\t\tresult: {\n\t\t\texecutionGasUsed: toHex(result.executionGasUsed),\n\t\t\trawData: result.rawData,\n\t\t\t...(result.selfdestruct ? { selfdestruct: [...result.selfdestruct] } : {}),\n\t\t\t...(result.gasRefund ? { gasRefund: toHex(result.gasRefund) } : {}),\n\t\t\t...(result.gas ? { gas: toHex(result.gas) } : {}),\n\t\t\t...(result.logs ? { logs: result.logs } : {}),\n\t\t\t...(result.txHash ? { txHash: result.txHash } : {}),\n\t\t\t...(result.blobGasUsed ? { blobGasUsed: toHex(result.blobGasUsed) } : {}),\n\t\t\t...(accessList !== undefined ? { accessList } : {}),\n\t\t\t...(result.preimages ? { preimages: result.preimages } : {}),\n\t\t\t...(result.l1Fee ? { l1Fee: numberToHex(result.l1Fee) } : {}),\n\t\t\t...(result.l1BaseFee ? { l1BaseFee: numberToHex(result.l1BaseFee) } : {}),\n\t\t\t...(result.l1BlobFee ? { l1BlobFee: numberToHex(result.l1BlobFee) } : {}),\n\t\t\t...(result.l1GasUsed ? { l1GasUsed: numberToHex(result.l1GasUsed) } : {}),\n\t\t\t...(result.amountSpent ? { amountSpent: numberToHex(result.amountSpent) } : {}),\n\t\t\t...(result.baseFee ? { baseFee: numberToHex(result.baseFee) } : {}),\n\t\t\t...(result.totalGasSpent ? { totalGasSpent: numberToHex(result.totalGasSpent) } : {}),\n\t\t\t...(result.trace\n\t\t\t\t? {\n\t\t\t\t\t\ttrace: {\n\t\t\t\t\t\t\t...result.trace,\n\t\t\t\t\t\t\tgas: toHex(result.trace.gas),\n\t\t\t\t\t\t\tstructLogs: result.trace.structLogs.map((log) => ({\n\t\t\t\t\t\t\t\t...log,\n\t\t\t\t\t\t\t\tgas: toHex(log.gas),\n\t\t\t\t\t\t\t\tgasCost: toHex(log.gasCost),\n\t\t\t\t\t\t\t\tstack: [...log.stack],\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {}),\n\t\t\t...(result.createdAddress ? { createdAddress: result.createdAddress } : {}),\n\t\t\t...(result.createdAddresses ? { createdAddresses: [...result.createdAddresses] } : {}),\n\t\t},\n\t\tmethod: 'tevm_call',\n\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t}\n\n\treturn out\n}\n","import { traceCallHandler } from '@tevm/actions'\nimport { hexToBigInt, numberToHex } from '@tevm/utils'\n\n/**\n * Request handler for debug_traceCall JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./DebugProcedure.js').DebugTraceCallProcedure}\n */\nexport const debugTraceCallJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst debugTraceCallRequest =\n\t\t\t/** @type {import('./index.js').DebugTraceCallJsonRpcRequest}*/\n\t\t\t(request)\n\t\tconst { blockTag, tracer, to, gas, data, from, value, timeout, gasPrice, tracerConfig } =\n\t\t\tdebugTraceCallRequest.params[0]\n\t\tconst traceResult = await traceCallHandler(client)({\n\t\t\ttracer,\n\t\t\t...(to !== undefined ? { to } : {}),\n\t\t\t...(from !== undefined ? { from } : {}),\n\t\t\t...(gas !== undefined ? { gas: hexToBigInt(gas) } : {}),\n\t\t\t...(gasPrice !== undefined ? { gasPrice: hexToBigInt(gasPrice) } : {}),\n\t\t\t...(value !== undefined ? { value: hexToBigInt(value) } : {}),\n\t\t\t...(data !== undefined ? { data } : {}),\n\t\t\t...(blockTag !== undefined ? { blockTag } : {}),\n\t\t\t...(timeout !== undefined ? { timeout } : {}),\n\t\t\t...(tracerConfig !== undefined ? { tracerConfig } : {}),\n\t\t})\n\t\treturn {\n\t\t\tmethod: debugTraceCallRequest.method,\n\t\t\tresult: {\n\t\t\t\tgas: numberToHex(traceResult.gas),\n\t\t\t\tfailed: traceResult.failed,\n\t\t\t\treturnValue: traceResult.returnValue,\n\t\t\t\tstructLogs: traceResult.structLogs.map((log) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgas: numberToHex(log.gas),\n\t\t\t\t\t\tgasCost: numberToHex(log.gasCost),\n\t\t\t\t\t\top: log.op,\n\t\t\t\t\t\tpc: log.pc,\n\t\t\t\t\t\tstack: log.stack,\n\t\t\t\t\t\tdepth: log.depth,\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t},\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(debugTraceCallRequest.id ? { id: debugTraceCallRequest.id } : {}),\n\t\t}\n\t}\n}\n","import { forkAndCacheBlock, traceCallHandler } from '@tevm/actions'\nimport { TransactionFactory } from '@tevm/tx'\nimport { hexToBigInt, hexToBytes, hexToNumber, numberToHex } from '@tevm/utils'\nimport { runTx } from '@tevm/vm'\nimport { requestProcedure } from '../requestProcedure.js'\n\n/**\n * Request handler for debug_traceTransaction JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./DebugProcedure.js').DebugTraceTransactionProcedure}\n */\nexport const debugTraceTransactionJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst { tracer, timeout, tracerConfig, transactionHash } = request.params[0]\n\t\tif (timeout !== undefined) {\n\t\t\tclient.logger.warn('Warning: timeout is currently respected param of debug_traceTransaction')\n\t\t}\n\t\tconst transactionByHashResponse = await requestProcedure(client)({\n\t\t\tmethod: 'eth_getTransactionByHash',\n\t\t\tparams: [transactionHash],\n\t\t\tjsonrpc: '2.0',\n\t\t\tid: 1,\n\t\t})\n\t\tif ('error' in transactionByHashResponse) {\n\t\t\treturn {\n\t\t\t\terror: /** @type {any}*/ (transactionByHashResponse.error),\n\t\t\t\t...(request.id !== undefined ? { id: request.id } : {}),\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: request.method,\n\t\t\t}\n\t\t}\n\t\tconst vm = await client.getVm()\n\t\tconst block = await vm.blockchain.getBlock(hexToBytes(transactionByHashResponse.result.blockHash))\n\t\tconst parentBlock = await vm.blockchain.getBlock(block.header.parentHash)\n\t\ttransactionByHashResponse.result.transactionIndex\n\t\tconst previousTx = block.transactions.filter(\n\t\t\t(_, i) => i < hexToNumber(transactionByHashResponse.result.transactionIndex),\n\t\t)\n\t\tconst hasStateRoot = vm.stateManager.hasStateRoot(parentBlock.header.stateRoot)\n\t\tif (!hasStateRoot && client.forkTransport) {\n\t\t\tawait forkAndCacheBlock(client, parentBlock)\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: request.method,\n\t\t\t\t...(request.id !== undefined ? { id: request.id } : {}),\n\t\t\t\terror: {\n\t\t\t\t\t// TODO use a @tevm/errors\n\t\t\t\t\tcode: /** @type any*/ (-32602),\n\t\t\t\t\tmessage: 'Parent block not found',\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\tconst vmClone = await vm.deepCopy()\n\n\t\t// execute all transactions before the current one committing to the state\n\t\tfor (const tx of previousTx) {\n\t\t\trunTx(vmClone)({\n\t\t\t\tblock: parentBlock,\n\t\t\t\tskipNonce: true,\n\t\t\t\tskipBalance: true,\n\t\t\t\tskipHardForkValidation: true,\n\t\t\t\tskipBlockGasLimitValidation: true,\n\t\t\t\ttx: await TransactionFactory.fromRPC(tx, {\n\t\t\t\t\tfreeze: false,\n\t\t\t\t\tcommon: vmClone.common.ethjsCommon,\n\t\t\t\t\tallowUnlimitedInitCodeSize: true,\n\t\t\t\t}),\n\t\t\t})\n\t\t}\n\n\t\t// now execute an debug_traceCall\n\t\tconst traceResult = await traceCallHandler(client)({\n\t\t\ttracer,\n\t\t\t...(transactionByHashResponse.result.to !== undefined ? { to: transactionByHashResponse.result.to } : {}),\n\t\t\t...(transactionByHashResponse.result.from !== undefined ? { from: transactionByHashResponse.result.from } : {}),\n\t\t\t...(transactionByHashResponse.result.gas !== undefined\n\t\t\t\t? { gas: hexToBigInt(transactionByHashResponse.result.gas) }\n\t\t\t\t: {}),\n\t\t\t...(transactionByHashResponse.result.gasPrice !== undefined\n\t\t\t\t? { gasPrice: hexToBigInt(transactionByHashResponse.result.gasPrice) }\n\t\t\t\t: {}),\n\t\t\t...(transactionByHashResponse.result.value !== undefined\n\t\t\t\t? { value: hexToBigInt(transactionByHashResponse.result.value) }\n\t\t\t\t: {}),\n\t\t\t...(transactionByHashResponse.result.data !== undefined ? { data: transactionByHashResponse.result.data } : {}),\n\t\t\t...(transactionByHashResponse.result.blockHash !== undefined\n\t\t\t\t? { blockTag: transactionByHashResponse.result.blockHash }\n\t\t\t\t: {}),\n\t\t\t...(timeout !== undefined ? { timeout } : {}),\n\t\t\t...(tracerConfig !== undefined ? { tracerConfig } : {}),\n\t\t})\n\t\treturn {\n\t\t\tmethod: request.method,\n\t\t\t// TODO the typescript type for this return type is completely wrong because of copy pasta\n\t\t\t// This return value is correct shape\n\t\t\tresult: /** @type any*/ ({\n\t\t\t\tgas: numberToHex(traceResult.gas),\n\t\t\t\tfailed: traceResult.failed,\n\t\t\t\treturnValue: traceResult.returnValue,\n\t\t\t\tstructLogs: traceResult.structLogs.map((log) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tgas: numberToHex(log.gas),\n\t\t\t\t\t\tgasCost: numberToHex(log.gasCost),\n\t\t\t\t\t\top: log.op,\n\t\t\t\t\t\tpc: log.pc,\n\t\t\t\t\t\tstack: log.stack,\n\t\t\t\t\t\tdepth: log.depth,\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t}),\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { blockNumberHandler } from '@tevm/actions'\nimport { numberToHex } from '@tevm/utils'\n\n/**\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthBlockNumberJsonRpcProcedure}\n */\nexport const blockNumberProcedure = (client) => async (req) => ({\n\t...(req.id ? { id: req.id } : {}),\n\tjsonrpc: '2.0',\n\tmethod: req.method,\n\tresult: await blockNumberHandler(client)({}).then(numberToHex),\n})\n","import { chainIdHandler } from '@tevm/actions'\nimport { numberToHex } from '@tevm/utils'\n\n/**\n * @param {import('@tevm/node').TevmNode} baseClient\n * @returns {import('./EthProcedure.js').EthChainIdJsonRpcProcedure}\n */\nexport const chainIdProcedure = (baseClient) => async (req) => ({\n\t...(req.id ? { id: req.id } : {}),\n\tjsonrpc: '2.0',\n\tmethod: req.method,\n\t// TODO pass in a client instead\n\tresult: await chainIdHandler(baseClient)({}).then(numberToHex),\n})\n","// TODO add a  @returns {import('./EthProcedure.js').EthBlobBaseFeeJsonRpcProcedure}\n\nimport { numberToHex } from '@tevm/utils'\n\n/**\n * Request handler for eth_coinbase JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGasPriceJsonRpcProcedure}\n */\nexport const ethBlobBaseFeeJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst vm = await client.getVm()\n\t\tconst headBlock = await vm.blockchain.getCanonicalHeadBlock()\n\t\treturn {\n\t\t\tresult: numberToHex(headBlock.header.calcNextBlobGasPrice()),\n\t\t\tjsonrpc: '2.0',\n\t\t\tmethod: request.method,\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { callProcedure } from '../call/callProcedure.js'\n\n/**\n * Executes a message call without creating a transaction on the block chain.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthCallJsonRpcProcedure}\n */\nexport const ethCallProcedure = (client) => async (req) => {\n\tconst [tx, blockTag, stateOverrideSet, blockOverrideSet] = req.params\n\tconst { data, from, to, gas, gasPrice, value } = tx\n\tconst response = await callProcedure(client)({\n\t\t...(req.id !== undefined ? { id: req.id } : {}),\n\t\tjsonrpc: req.jsonrpc,\n\t\tmethod: 'tevm_call',\n\t\tparams: [\n\t\t\t{\n\t\t\t\t...(gasPrice !== undefined ? { gasPrice } : {}),\n\t\t\t\t...(data !== undefined ? { data } : {}),\n\t\t\t\t...(gas !== undefined ? { gas } : {}),\n\t\t\t\t...(value !== undefined ? { value } : {}),\n\t\t\t\t...(to !== undefined ? { to } : {}),\n\t\t\t\t...(from !== undefined ? { from } : {}),\n\t\t\t\t...(blockTag !== undefined ? { blockTag } : {}),\n\t\t\t},\n\t\t\tstateOverrideSet,\n\t\t\tblockOverrideSet,\n\t\t],\n\t})\n\tif (!response.result) {\n\t\treturn {\n\t\t\tjsonrpc: req.jsonrpc,\n\t\t\tmethod: 'eth_call',\n\t\t\terror: response.error,\n\t\t\t...(req.id !== undefined ? { id: req.id } : {}),\n\t\t}\n\t}\n\treturn {\n\t\tjsonrpc: req.jsonrpc,\n\t\tmethod: 'eth_call',\n\t\tresult: response.result.rawData,\n\t\t...(req.id !== undefined ? { id: req.id } : {}),\n\t}\n}\n","/**\n * Request handler for eth_coinbase JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthCoinbaseJsonRpcProcedure}\n */\nexport const ethCoinbaseJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\treturn {\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\tmethod: request.method,\n\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t// same default as hardhat\n\t\t\tresult: await client\n\t\t\t\t.getVm()\n\t\t\t\t.then((vm) => vm.blockchain.getCanonicalHeadBlock())\n\t\t\t\t.then((block) => /** @type {import('@tevm/utils').Address}*/ (block.header.coinbase.toString())),\n\t\t}\n\t}\n}\n","import { callProcedure } from '../call/callProcedure.js'\n\n/**\n * Request handler for eth_estimateGas JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthEstimateGasJsonRpcProcedure}\n */\nexport const ethEstimateGasJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst estimateGasRequest = /** @type {import('./EthJsonRpcRequest.js').EthEstimateGasJsonRpcRequest}*/ (request)\n\t\tconst [_params, blockTag, stateOverrides, blockOverrides] = estimateGasRequest.params\n\n\t\tconst getParams = () => {\n\t\t\t/**\n\t\t\t * @type {import('../call/CallJsonRpcRequest.js').CallJsonRpcRequest['params']}\n\t\t\t */\n\t\t\tconst params = [\n\t\t\t\t{\n\t\t\t\t\t..._params,\n\t\t\t\t\t...(blockTag !== undefined ? { blockTag } : {}),\n\t\t\t\t},\n\t\t\t]\n\t\t\tif (blockOverrides !== undefined) {\n\t\t\t\tparams.push(stateOverrides ?? {}, blockOverrides)\n\t\t\t}\n\t\t\tif (stateOverrides !== undefined) {\n\t\t\t\tparams.push(...params, stateOverrides)\n\t\t\t}\n\t\t\treturn params\n\t\t}\n\n\t\tconst callResult = await callProcedure(client)({\n\t\t\t...estimateGasRequest,\n\t\t\tparams: getParams(),\n\t\t\tmethod: 'tevm_call',\n\t\t})\n\t\tif (callResult.error || !callResult.result) {\n\t\t\treturn {\n\t\t\t\t...callResult,\n\t\t\t\tmethod: estimateGasRequest.method,\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tmethod: estimateGasRequest.method,\n\t\t\tresult: callResult.result.totalGasSpent ?? callResult.result.executionGasUsed,\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(estimateGasRequest.id ? { id: estimateGasRequest.id } : {}),\n\t\t}\n\t}\n}\n","import { bytesToHex, numberToHex } from '@tevm/utils'\n\n/**\n * @param {import('@tevm/tx').TypedTransaction | import('@tevm/tx').ImpersonatedTx} tx\n * @param {import('@tevm/block').Block} block\n * @param {number} [txIndex]\n * @returns {import('@tevm/actions').TransactionResult}\n */\nexport const txToJsonRpcTx = (tx, block, txIndex) => {\n\tconst txJSON = tx.toJSON()\n\t// TODO make this typing less janky\n\treturn /** @type any*/ ({\n\t\tblockHash: bytesToHex(block.hash()),\n\t\tblockNumber: numberToHex(block.header.number),\n\t\tfrom: /** @type {import('@tevm/utils').Address}*/ (tx.getSenderAddress().toString()),\n\t\tgas: /** @type {import('@tevm/utils').Hex} **/ (txJSON.gasLimit),\n\t\tgasPrice: /** @type {import('@tevm/utils').Hex}*/ (txJSON.gasPrice ?? txJSON.maxFeePerGas),\n\t\t// TODO add this to the type\n\t\t...{ maxFeePerGas: txJSON.maxFeePerGas },\n\t\t// TODO add this to the type\n\t\t...{ maxPriorityFeePerGas: txJSON.maxPriorityFeePerGas },\n\t\t// TODO add this to the type\n\t\t...{ type: numberToHex(tx.type) },\n\t\t...(txJSON.accessList !== undefined ? { accessList: txJSON.accessList } : {}),\n\t\thash: bytesToHex(tx.hash()),\n\t\tdata: /** @type {import('@tevm/utils').Hex} */ (txJSON.data),\n\t\tnonce: /** @type {import('@tevm/utils').Hex}*/ (txJSON.nonce),\n\t\t// these toString existed in ethereumjs but I don't think are necessary\n\t\t...(txJSON.to !== undefined ? { to: /** @type {import('@tevm/utils').Address} */ (txJSON.to.toString()) } : {}),\n\t\t...(txIndex !== undefined ? { transactionIndex: numberToHex(txIndex) } : {}),\n\t\t...(txJSON.value !== undefined ? { value: txJSON.value } : {}),\n\t\t...('isImpersonated' in tx ? { isImpersonated: tx.isImpersonated } : {}),\n\t\t...(txJSON.v !== undefined ? { v: txJSON.v } : {}),\n\t\t...(txJSON.r !== undefined ? { r: txJSON.r } : {}),\n\t\t...(txJSON.s !== undefined ? { s: txJSON.s } : {}),\n\t\t// TODO add this to the type\n\t\t...{ maxFeePerBlobGas: txJSON.maxFeePerBlobGas },\n\t\t// TODO add this to the type\n\t\t...{ blobVersionedHashes: txJSON.blobVersionedHashes },\n\t})\n}\n","import { bytesToHex, numberToHex, toBytes } from '@tevm/utils'\nimport { txToJsonRpcTx } from './txToJsonRpcTx.js'\n\n/**\n * @param {import('@tevm/block').Block} block\n * @param {boolean} includeTransactions\n * @returns {Promise<Required<import('../eth/index.js').EthGetBlockByHashJsonRpcResponse>['result']>}\n */\nexport const blockToJsonRpcBlock = async (block, includeTransactions) => {\n\tconst json = block.toJSON()\n\tconst header = /** @type {import('@tevm/block').JsonHeader}*/ (json.header)\n\tconst transactions = block.transactions.map((tx, txIndex) =>\n\t\tincludeTransactions ? txToJsonRpcTx(tx, block, txIndex) : bytesToHex(tx.hash()),\n\t)\n\n\t/**\n\t * @type {import('../eth/index.js').EthGetBlockByHashJsonRpcResponse['result']}\n\t */\n\tconst out = {\n\t\tnumber: /** @type {import('@tevm/utils').Hex}*/ (header.number),\n\t\thash: bytesToHex(block.hash()),\n\t\tparentHash: /** @type {import('@tevm/utils').Hex}*/ (header.parentHash),\n\t\t// TODO add this to the type\n\t\t...{ mixHash: header.mixHash },\n\t\tnonce: /** @type {import('@tevm/utils').Hex}*/ (header.nonce),\n\t\tsha3Uncles: /** @type {import('@tevm/utils').Hex}*/ (header.uncleHash),\n\t\tlogsBloom: /** @type {import('@tevm/utils').Hex}*/ (header.logsBloom),\n\t\ttransactionsRoot: /** @type {import('@tevm/utils').Hex}*/ (header.transactionsTrie),\n\t\tstateRoot: /** @type {import('@tevm/utils').Hex}*/ (header.stateRoot),\n\t\tminer: /** @type {import('@tevm/utils').Address}*/ (header.coinbase),\n\t\tdifficulty: /** @type {import('@tevm/utils').Hex}*/ (header.difficulty),\n\t\t// TODO we need to actually add this\n\t\ttotalDifficulty: /** @type {import('@tevm/utils').Hex}*/ ('0x0'),\n\t\textraData: /** @type {import('@tevm/utils').Hex}*/ (header.extraData),\n\t\tsize: numberToHex(toBytes(JSON.stringify(json)).byteLength),\n\t\tgasLimit: /** @type {import('@tevm/utils').Hex}*/ (header.gasLimit),\n\t\tgasUsed: /** @type {import('@tevm/utils').Hex}*/ (header.gasUsed),\n\t\ttimestamp: /** @type {import('@tevm/utils').Hex}*/ (header.timestamp),\n\t\tuncles: block.uncleHeaders.map((uh) => bytesToHex(uh.hash())),\n\t\t// TODO fix this type\n\t\ttransactions: /** @type any*/ (transactions),\n\t\t// TODO add this to the type\n\t\t...{ baseFeePerGas: header.baseFeePerGas },\n\t\t...{ receiptsRoot: header.receiptTrie },\n\t\t...(header.withdrawalsRoot !== undefined\n\t\t\t? {\n\t\t\t\t\twithdrawalsRoot: header.withdrawalsRoot,\n\t\t\t\t\twithdrawals: json.withdrawals,\n\t\t\t\t}\n\t\t\t: {}),\n\t\t...(header.blobGasUsed !== undefined ? { blobGasUsed: header.blobGasUsed } : {}),\n\t\t// TODO add this to the type\n\t\t...{ requestsRoot: header.requestsRoot },\n\t\t// TODO add this to the type\n\t\t...{ requests: block.requests?.map((req) => bytesToHex(req.serialize())) },\n\t\t// TODO add this to the type\n\t\t...{ excessBlobGas: header.excessBlobGas },\n\t\t// TODO add this to the type\n\t\t...{ parentBeaconBlockRoot: header.parentBeaconBlockRoot },\n\t}\n\n\treturn out\n}\n","import { hexToBytes } from '@tevm/utils'\nimport { blockToJsonRpcBlock } from '../utils/blockToJsonRpcBlock.js'\n\n/**\n * Request handler for eth_getBlockByHash JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGetBlockByHashJsonRpcProcedure}\n */\nexport const ethGetBlockByHashJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst vm = await client.getVm()\n\t\tconst block = await vm.blockchain.getBlock(hexToBytes(request.params[0]))\n\t\tconst includeTransactions = request.params[1] ?? false\n\t\tconst result = await blockToJsonRpcBlock(block, includeTransactions)\n\t\treturn {\n\t\t\tmethod: request.method,\n\t\t\tresult,\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { createJsonRpcFetcher } from '@tevm/jsonrpc'\nimport { hexToBigInt } from '@tevm/utils'\nimport { blockToJsonRpcBlock } from '../utils/blockToJsonRpcBlock.js'\n\n/**\n * Request handler for eth_getBlockByNumber JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGetBlockByNumberJsonRpcProcedure}\n */\nexport const ethGetBlockByNumberJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst vm = await client.getVm()\n\t\tconst blockTagOrNumber = request.params[0]\n\t\tconst block = await (() => {\n\t\t\tif (blockTagOrNumber.startsWith('0x')) {\n\t\t\t\treturn vm.blockchain.getBlock(hexToBigInt(/** @type {import('@tevm/utils').Hex}*/ (blockTagOrNumber)))\n\t\t\t}\n\t\t\treturn vm.blockchain.blocksByTag.get(/** @type {import('@tevm/utils').BlockTag}*/ (blockTagOrNumber))\n\t\t})()\n\n\t\tif (!block && client.forkTransport) {\n\t\t\tconst fetcher = createJsonRpcFetcher(client.forkTransport)\n\t\t\tconst res = await fetcher.request({\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tid: request.id ?? 1,\n\t\t\t\tmethod: request.method,\n\t\t\t\tparams: [blockTagOrNumber, request.params[1] ?? false],\n\t\t\t})\n\t\t\tif (res.error) {\n\t\t\t\treturn {\n\t\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\t\terror: res.error,\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\tresult: /** @type {any}*/ (res.result),\n\t\t\t}\n\t\t}\n\t\tif (!block) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: -32602,\n\t\t\t\t\tmessage: `Invalid block tag ${blockTagOrNumber}`,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\tconst includeTransactions = request.params[1] ?? false\n\t\tconst result = blockToJsonRpcBlock(block, includeTransactions)\n\t\treturn {\n\t\t\tmethod: request.method,\n\t\t\tresult,\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { hexToBytes, numberToHex } from '@tevm/utils'\n\n/**\n * Request handler for eth_getBlockTransactionCountByHash JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGetBlockTransactionCountByHashJsonRpcProcedure}\n */\nexport const ethGetBlockTransactionCountByHashJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst vm = await client.getVm()\n\t\tconst block = await vm.blockchain.getBlock(hexToBytes(request.params[0]))\n\t\tconst result = block.transactions.length\n\t\treturn {\n\t\t\tmethod: request.method,\n\t\t\tresult: numberToHex(result),\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { hexToBigInt, numberToHex } from '@tevm/utils'\n\n/**\n * Request handler for eth_getBlockTransactionCountByNumber JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGetBlockTransactionCountByNumberJsonRpcProcedure}\n */\nexport const ethGetBlockTransactionCountByNumberJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst vm = await client.getVm()\n\t\tconst blockTagOrNumber = request.params[0]\n\t\tconst block = await (() => {\n\t\t\tif (blockTagOrNumber.startsWith('0x')) {\n\t\t\t\treturn vm.blockchain.getBlock(hexToBigInt(/** @type {import('@tevm/utils').Hex}*/ (blockTagOrNumber)))\n\t\t\t}\n\t\t\treturn vm.blockchain.blocksByTag.get(/** @type {import('@tevm/utils').BlockTag}*/ (blockTagOrNumber))\n\t\t})()\n\t\tif (!block) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: -32602,\n\t\t\t\t\tmessage: `Invalid block tag ${blockTagOrNumber}`,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\tconst result = block.transactions.length\n\t\treturn {\n\t\t\tmethod: request.method,\n\t\t\tresult: numberToHex(result),\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { bytesToHex, numberToHex } from '@tevm/utils'\n\n/**\n * Request handler for eth_getFilterChanges JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGetFilterChangesJsonRpcProcedure}\n */\nexport const ethGetFilterChangesProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst getFilterChangesRequest =\n\t\t\t/** @type {import('./EthJsonRpcRequest.js').EthGetFilterChangesJsonRpcRequest}*/\n\t\t\t(request)\n\t\tconst [id] = getFilterChangesRequest.params\n\t\tconst filter = client.getFilters().get(id)\n\t\tif (!filter) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: -32601,\n\t\t\t\t\tmessage: 'Method not implemented yet',\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\tswitch (filter.type) {\n\t\t\tcase 'Log': {\n\t\t\t\tconst { logs } = filter\n\t\t\t\t/**\n\t\t\t\t * @type {import('./EthJsonRpcResponse.js').EthGetFilterChangesJsonRpcResponse}\n\t\t\t\t */\n\t\t\t\tconst response = {\n\t\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\t\tresult: logs.map((log) => ({\n\t\t\t\t\t\taddress: log.address,\n\t\t\t\t\t\ttopics: log.topics,\n\t\t\t\t\t\tdata: log.data,\n\t\t\t\t\t\tblockNumber: numberToHex(log.blockNumber),\n\t\t\t\t\t\ttransactionHash: log.transactionHash,\n\t\t\t\t\t\ttransactionIndex: numberToHex(log.transactionIndex),\n\t\t\t\t\t\tblockHash: log.blockHash,\n\t\t\t\t\t\tlogIndex: numberToHex(log.logIndex),\n\t\t\t\t\t\tremoved: log.removed,\n\t\t\t\t\t})),\n\t\t\t\t}\n\t\t\t\tfilter.logs = []\n\t\t\t\treturn response\n\t\t\t}\n\t\t\tcase 'Block': {\n\t\t\t\tconst { blocks } = filter\n\t\t\t\t/**\n\t\t\t\t * @type {import('./EthJsonRpcResponse.js').EthGetFilterChangesJsonRpcResponse}\n\t\t\t\t */\n\t\t\t\tconst response = {\n\t\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\t\t// TODO fix this type\n\t\t\t\t\tresult: /** @type {any} */ (blocks.map((block) => numberToHex(block.header.number))),\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\t}\n\t\t\t\tfilter.blocks = []\n\t\t\t\treturn response\n\t\t\t}\n\t\t\tcase 'PendingTransaction': {\n\t\t\t\tconst { tx } = filter\n\t\t\t\t/**\n\t\t\t\t * @type {import('./EthJsonRpcResponse.js').EthGetFilterChangesJsonRpcResponse}\n\t\t\t\t */\n\t\t\t\tconst response = {\n\t\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\t\t// TODO fix this type\n\t\t\t\t\tresult: /** @type {any} */ (tx.map((tx) => bytesToHex(tx.hash()))),\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\t}\n\t\t\t\tfilter.tx = []\n\t\t\t\treturn response\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'InternalError: Unknown filter type. This indicates a bug in tevm or potentially a typo in filter type if manually added',\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n}\n","import { ethGetLogsHandler } from '@tevm/actions'\nimport { numberToHex } from '@tevm/utils'\n\n/**\n * Request handler for eth_getFilterLogs JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGetFilterLogsJsonRpcProcedure}\n */\nexport const ethGetFilterLogsProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst filter = client.getFilters().get(request.params[0])\n\t\tif (!filter) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: -32602,\n\t\t\t\t\tmessage: 'Filter not found',\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\tconst ethGetLogsResult = await ethGetLogsHandler(client)({\n\t\t\t\tfilterParams: {\n\t\t\t\t\tfromBlock: filter.logsCriteria.fromBlock?.header?.number ?? 0n,\n\t\t\t\t\ttoBlock: filter.logsCriteria.toBlock?.header?.number ?? 'latest',\n\t\t\t\t\taddress: filter.logsCriteria.address,\n\t\t\t\t\ttopics: filter.logsCriteria.topics,\n\t\t\t\t},\n\t\t\t})\n\t\t\t/**\n\t\t\t * @type {Required<import('./EthJsonRpcResponse.js').EthGetFilterLogsJsonRpcResponse>['result']}\n\t\t\t */\n\t\t\tconst jsonRpcResult = ethGetLogsResult.map((log) => ({\n\t\t\t\taddress: log.address,\n\t\t\t\ttopics: [...log.topics],\n\t\t\t\tdata: log.data,\n\t\t\t\tblockNumber: numberToHex(log.blockNumber),\n\t\t\t\ttransactionHash: log.transactionHash,\n\t\t\t\ttransactionIndex: numberToHex(log.transactionIndex),\n\t\t\t\tblockHash: log.blockHash,\n\t\t\t\tlogIndex: numberToHex(log.logIndex),\n\t\t\t\tremoved: log.removed,\n\t\t\t}))\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\tresult: jsonRpcResult,\n\t\t\t}\n\t\t} catch (e) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: -32601,\n\t\t\t\t\tmessage: /** @type {Error}*/ (e).message,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t}\n}\n","import { ethGetLogsHandler } from '@tevm/actions'\nimport { numberToHex } from '@tevm/utils'\n\n/**\n * Executes a message call without creating a transaction on the block chain.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGetLogsJsonRpcProcedure}\n */\nexport const ethGetLogsProcedure = (client) => async (req) => {\n\tconst result = await ethGetLogsHandler(client)({\n\t\tfilterParams: req.params[0],\n\t})\n\ttry {\n\t\tconst jsonRpcResult = result.map((log) => ({\n\t\t\taddress: log.address,\n\t\t\ttopics: log.topics,\n\t\t\tdata: log.data,\n\t\t\tblockNumber: numberToHex(log.blockNumber),\n\t\t\ttransactionHash: log.transactionHash,\n\t\t\ttransactionIndex: numberToHex(log.transactionIndex),\n\t\t\tblockHash: log.blockHash,\n\t\t\tlogIndex: numberToHex(log.logIndex),\n\t\t\tremoved: log.removed,\n\t\t}))\n\t\treturn {\n\t\t\tjsonrpc: req.jsonrpc,\n\t\t\t...(req.id !== undefined ? { id: req.id } : {}),\n\t\t\tmethod: req.method,\n\t\t\tresult: jsonRpcResult,\n\t\t}\n\t} catch (e) {\n\t\treturn /** @type {any}*/ ({\n\t\t\tjsonrpc: req.jsonrpc,\n\t\t\t...(req.id !== undefined ? { id: req.id } : {}),\n\t\t\tmethod: req.method,\n\t\t\terror: {\n\t\t\t\tcode: -32000,\n\t\t\t\tmessage: /** @type {Error}*/ (e).message,\n\t\t\t},\n\t\t})\n\t}\n}\n","import { hexToBytes, hexToNumber } from '@tevm/utils'\nimport { txToJsonRpcTx } from '../utils/txToJsonRpcTx.js'\n\n/**\n * Request handler for eth_getTransactionByBlockHashAndIndex JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGetTransactionByBlockHashAndIndexJsonRpcProcedure}\n */\nexport const ethGetTransactionByBlockHashAndIndexJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst vm = await client.getVm()\n\t\tconst block = await vm.blockchain.getBlock(hexToBytes(request.params[0]))\n\t\tconst txIndex = hexToNumber(request.params[1])\n\t\tconst tx = block.transactions[txIndex]\n\t\tif (!tx) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: -32602,\n\t\t\t\t\tmessage: 'Transaction not found',\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tmethod: request.method,\n\t\t\tresult: txToJsonRpcTx(tx, block, txIndex),\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { hexToBigInt, hexToNumber } from '@tevm/utils'\nimport { txToJsonRpcTx } from '../utils/txToJsonRpcTx.js'\n\n/**\n * Request handler for eth_getTransactionByBlockNumberAndIndex JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGetTransactionByBlockNumberAndIndexJsonRpcProcedure}\n */\nexport const ethGetTransactionByBlockNumberAndIndexJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst vm = await client.getVm()\n\t\tconst blockTagOrNumber = request.params[0]\n\t\tconst block = await (() => {\n\t\t\tif (blockTagOrNumber.startsWith('0x')) {\n\t\t\t\treturn vm.blockchain.getBlock(hexToBigInt(/** @type {import('@tevm/utils').Hex}*/ (blockTagOrNumber)))\n\t\t\t}\n\t\t\treturn vm.blockchain.blocksByTag.get(/** @type {import('@tevm/utils').BlockTag}*/ (blockTagOrNumber))\n\t\t})()\n\t\tif (!block) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: -32602,\n\t\t\t\t\tmessage: `Invalid block tag ${blockTagOrNumber}`,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\tconst txIndex = hexToNumber(request.params[1])\n\t\tconst tx = block.transactions[txIndex]\n\t\tif (!tx) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: -32602,\n\t\t\t\t\tmessage: 'Transaction not found',\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tmethod: request.method,\n\t\t\tresult: txToJsonRpcTx(tx, block, txIndex),\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { createJsonRpcFetcher } from '@tevm/jsonrpc'\nimport { hexToBytes } from '@tevm/utils'\nimport { txToJsonRpcTx } from '../utils/txToJsonRpcTx.js'\n\n/**\n * Request handler for eth_getTransactionByHash JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGetTransactionByHashJsonRpcProcedure}\n */\nexport const ethGetTransactionByHashJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst vm = await client.getVm()\n\t\tconst receiptsManager = await client.getReceiptsManager()\n\t\tconst receipt = await receiptsManager.getReceiptByTxHash(hexToBytes(request.params[0]))\n\t\tif (!receipt && client.forkTransport) {\n\t\t\tconst fetcher = createJsonRpcFetcher(client.forkTransport)\n\t\t\tconst res = await fetcher.request({\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tid: request.id ?? 1,\n\t\t\t\tmethod: request.method,\n\t\t\t\tparams: [request.params[0]],\n\t\t\t})\n\t\t\tif (res.error) {\n\t\t\t\treturn {\n\t\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\t\terror: res.error,\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tresult: /** @type any*/ (res.result),\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t}\n\t\t}\n\t\tif (!receipt) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: -32602,\n\t\t\t\t\tmessage: 'Transaction not found',\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\tconst [_receipt, blockHash, txIndex] = receipt\n\t\tconst block = await vm.blockchain.getBlock(blockHash)\n\t\tconst tx = block.transactions[txIndex]\n\t\tif (!tx) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: -32602,\n\t\t\t\t\tmessage: 'Transaction not found',\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tmethod: request.method,\n\t\t\tresult: txToJsonRpcTx(tx, block, txIndex),\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { createAddress } from '@tevm/address'\nimport { ForkError, InternalEvmError } from '@tevm/errors'\nimport { hexToBigInt, hexToBytes, numberToHex } from '@tevm/utils'\n\n/**\n * Request handler for eth_getFilterLogs JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} node\n * @returns {import('./EthProcedure.js').EthGetTransactionCountJsonRpcProcedure}\n */\nexport const ethGetTransactionCountProcedure = (node) => {\n\treturn async (request) => {\n\t\tconst [address, tag] = request.params\n\n\t\tconst block = await (async () => {\n\t\t\tconst vm = await node.getVm()\n\t\t\tif (tag.startsWith('0x') && tag.length === 66) {\n\t\t\t\treturn vm.blockchain.getBlock(hexToBytes(/** @type {import('@tevm/utils').Hex}*/ (tag)))\n\t\t\t}\n\t\t\tif (tag.startsWith('0x')) {\n\t\t\t\treturn vm.blockchain.getBlock(hexToBigInt(/** @type {import('@tevm/utils').Hex}*/ (tag)))\n\t\t\t}\n\t\t\tif (tag === 'pending') {\n\t\t\t\t// if pending just get latest we will get pending seperately\n\t\t\t\treturn vm.blockchain.blocksByTag.get('latest')\n\t\t\t}\n\t\t\tif (tag === 'latest' || tag === 'safe' || tag === 'earliest' || tag === 'finalized') {\n\t\t\t\treturn vm.blockchain.blocksByTag.get(tag)\n\t\t\t}\n\t\t\treturn undefined\n\t\t})()\n\t\tif (!block) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: -32602,\n\t\t\t\t\tmessage: `Invalid block tag ${tag}`,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\n\t\tconst pendingCount =\n\t\t\ttag === 'pending'\n\t\t\t\t? await (async () => {\n\t\t\t\t\t\tconst txPool = await node.getTxPool()\n\t\t\t\t\t\tconst pendingTx = await txPool.getBySenderAddress(createAddress(address))\n\t\t\t\t\t\treturn BigInt(pendingTx.length)\n\t\t\t\t\t})()\n\t\t\t\t: 0n\n\n\t\tconst includedCount = await (async () => {\n\t\t\tconst vm = await node.getVm()\n\t\t\tif (!(await vm.stateManager.hasStateRoot(block.header.stateRoot))) {\n\t\t\t\treturn undefined\n\t\t\t}\n\t\t\tconst stateCopy = await vm.stateManager.deepCopy()\n\t\t\tawait stateCopy.setStateRoot(block.header.stateRoot)\n\t\t\tconst account = await stateCopy.getAccount(createAddress(address))\n\t\t\treturn account?.nonce ?? 0n\n\t\t})()\n\n\t\tif (includedCount === undefined && node.forkTransport) {\n\t\t\ttry {\n\t\t\t\t/**\n\t\t\t\t * @type {import('@tevm/utils').Hex}\n\t\t\t\t */\n\t\t\t\tconst result = await node.forkTransport.request(request)\n\t\t\t\treturn {\n\t\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\t\tresult: numberToHex(hexToBigInt(result) + pendingCount),\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconst err = new ForkError('Unable to resolve eth_getTransactionCount with fork', {\n\t\t\t\t\tcause: /** @type {any}*/ (e),\n\t\t\t\t})\n\t\t\t\treturn {\n\t\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: err.code,\n\t\t\t\t\t\tmessage: err.message,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (includedCount === undefined) {\n\t\t\tconst err = new InternalEvmError(`No state root found for block tag ${tag} in eth_getTransactionCountProcedure`)\n\t\t\tnode.logger.error(err)\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: err.code,\n\t\t\t\t\tmessage: err.message,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\tmethod: request.method,\n\t\t\tjsonrpc: request.jsonrpc,\n\t\t\tresult: numberToHex(pendingCount + includedCount),\n\t\t}\n\t}\n}\n","import { ethGetTransactionReceiptHandler } from '@tevm/actions'\nimport { numberToHex } from '@tevm/utils'\n\n/**\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGetTransactionReceiptJsonRpcProcedure}\n */\nexport const ethGetTransactionReceiptJsonRpcProcedure = (client) => async (req) => {\n\tconst [txHash] = req.params\n\n\tif (!txHash) {\n\t\t/**\n\t\t * @type {import('./EthJsonRpcResponse.js').EthGetTransactionReceiptJsonRpcResponse}\n\t\t */\n\t\tconst out = {\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(req.id ? { id: req.id } : {}),\n\t\t\tmethod: req.method,\n\t\t\terror: {\n\t\t\t\tcode: -32602,\n\t\t\t\tmessage: 'Invalid params',\n\t\t\t},\n\t\t}\n\t\treturn out\n\t}\n\n\tconst res = await ethGetTransactionReceiptHandler(client)({ hash: txHash })\n\t/**\n\t * @type {import('./EthJsonRpcResponse.js').EthGetTransactionReceiptJsonRpcResponse}\n\t */\n\tconst out = {\n\t\tjsonrpc: '2.0',\n\t\t...(req.id ? { id: req.id } : {}),\n\t\tmethod: req.method,\n\t\tresult: res && {\n\t\t\tblockHash: res.blockHash,\n\t\t\tblockNumber: numberToHex(res.blockNumber),\n\t\t\tcumulativeGasUsed: numberToHex(res.cumulativeGasUsed),\n\t\t\tfrom: res.from,\n\t\t\tto: res.to,\n\t\t\tgasUsed: numberToHex(res.gasUsed),\n\t\t\ttransactionHash: res.transactionHash,\n\t\t\ttransactionIndex: numberToHex(res.transactionIndex),\n\t\t\tcontractAddress: res.contractAddress,\n\t\t\tlogs: await Promise.all(\n\t\t\t\tres.logs.map((log) => ({\n\t\t\t\t\taddress: log.address,\n\t\t\t\t\tblockHash: log.blockHash,\n\t\t\t\t\tblockNumber: numberToHex(log.blockNumber),\n\t\t\t\t\tdata: log.data,\n\t\t\t\t\tlogIndex: numberToHex(log.logIndex),\n\t\t\t\t\tremoved: false,\n\t\t\t\t\ttopics: [...log.topics],\n\t\t\t\t\ttransactionIndex: numberToHex(log.transactionIndex),\n\t\t\t\t\ttransactionHash: log.transactionHash,\n\t\t\t\t})),\n\t\t\t),\n\t\t\tlogsBloom: res.logsBloom,\n\t\t\tstatus: res.status,\n\t\t\t...(res.blobGasUsed !== undefined ? { blobGasUsed: numberToHex(res.blobGasUsed) } : {}),\n\t\t\t...(res.blobGasPrice !== undefined ? { blobGasPrice: numberToHex(res.blobGasPrice) } : {}),\n\t\t},\n\t}\n\treturn out\n}\n","/**\n * @returns {import(\"@tevm/utils\").Hex}\n */\nexport const generateRandomId = () => {\n\treturn `0x${Array.from(crypto.getRandomValues(new Uint8Array(16)))\n\t\t.map((b) => b.toString(16).padStart(2, '0'))\n\t\t.join('')}`\n}\n","import { generateRandomId } from '../utils/generateRandomId.js'\n\n/**\n * Request handler for eth_newBlock JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthNewBlockFilterJsonRpcProcedure}\n */\nexport const ethNewBlockFilterProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst newBlockFilterRequest =\n\t\t\t/** @type {import('./EthJsonRpcRequest.js').EthNewBlockFilterJsonRpcRequest}*/\n\t\t\t(request)\n\t\tconst id = generateRandomId()\n\t\t/**\n\t\t * @param {import('@tevm/block').Block} block\n\t\t */\n\t\tconst listener = (block) => {\n\t\t\tconst filter = client.getFilters().get(id)\n\t\t\tif (!filter) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfilter.blocks.push(block)\n\t\t}\n\t\tclient.setFilter({\n\t\t\tid,\n\t\t\ttype: 'Block',\n\t\t\tcreated: Date.now(),\n\t\t\tlogs: [],\n\t\t\ttx: [],\n\t\t\tblocks: [],\n\t\t\tinstalled: {},\n\t\t\terr: undefined,\n\t\t\tregisteredListeners: [listener],\n\t\t})\n\t\treturn {\n\t\t\t...(newBlockFilterRequest.id ? { id: newBlockFilterRequest.id } : {}),\n\t\t\tmethod: newBlockFilterRequest.method,\n\t\t\tjsonrpc: newBlockFilterRequest.jsonrpc,\n\t\t\tresult: id,\n\t\t}\n\t}\n}\n","import { ethNewFilterHandler } from '@tevm/actions'\n\n/**\n * Request handler for eth_newFilter JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} tevmNode\n * @returns {import('./EthProcedure.js').EthNewFilterJsonRpcProcedure}\n */\nexport const ethNewFilterJsonRpcProcedure = (tevmNode) => {\n\treturn async (request) => {\n\t\tconst newFilterRequest = /** @type {import('./EthJsonRpcRequest.js').EthNewFilterJsonRpcRequest}*/ (request)\n\t\ttry {\n\t\t\treturn {\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\tmethod: request.method,\n\t\t\t\tresult: await ethNewFilterHandler(tevmNode)(newFilterRequest.params[0]),\n\t\t\t\t...(request.id !== undefined ? { id: request.id } : {}),\n\t\t\t}\n\t\t} catch (e) {\n\t\t\ttevmNode.logger.error(e)\n\t\t\tconst { code, message } = /** @type {import('@tevm/actions').EthNewFilterError}*/ (e)\n\t\t\treturn {\n\t\t\t\terror: {\n\t\t\t\t\tcode,\n\t\t\t\t\tmessage,\n\t\t\t\t},\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\t...(request.id !== undefined ? { id: request.id } : {}),\n\t\t\t}\n\t\t}\n\t}\n}\n","import { generateRandomId } from '../utils/generateRandomId.js'\n\n/**\n * Request handler for eth_newPendingTransactionFilter JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthNewPendingTransactionFilterJsonRpcProcedure}\n */\nexport const ethNewPendingTransactionFilterProcedure = (client) => {\n\treturn async (request) => {\n\t\tawait client.ready()\n\t\tconst id = generateRandomId()\n\t\t/**\n\t\t * @param {import('@tevm/tx').TypedTransaction} tx\n\t\t */\n\t\tconst listener = (tx) => {\n\t\t\tconst filter = client.getFilters().get(id)\n\t\t\tif (!filter) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfilter.tx.push(tx)\n\t\t}\n\t\tclient.on('newPendingTransaction', listener)\n\t\tclient.setFilter({\n\t\t\tid,\n\t\t\ttype: 'PendingTransaction',\n\t\t\tcreated: Date.now(),\n\t\t\tlogs: [],\n\t\t\ttx: [],\n\t\t\tblocks: [],\n\t\t\tinstalled: {},\n\t\t\terr: undefined,\n\t\t\tregisteredListeners: [listener],\n\t\t})\n\t\treturn {\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\tmethod: request.method,\n\t\t\tjsonrpc: request.jsonrpc,\n\t\t\tresult: id,\n\t\t}\n\t}\n}\n","{\n  \"name\": \"@tevm/procedures\",\n  \"version\": \"1.0.0-next.117\",\n  \"private\": false,\n  \"description\": \"A typesafe library for writing forge scripts in typescript\",\n  \"keywords\": [\n    \"solidity\",\n    \"forge\",\n    \"foundry\",\n    \"sol\",\n    \"typescript\",\n    \"web3\",\n    \"blockchain\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/evmts/tevm-monorepo.git\",\n    \"directory\": \"procedures\"\n  },\n  \"license\": \"MIT\",\n  \"contributors\": [\n    \"Will Cory <willcory10@gmail.com>\"\n  ],\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"import\": {\n        \"types\": \"./dist/index.d.ts\",\n        \"default\": \"./dist/index.js\"\n      },\n      \"require\": {\n        \"types\": \"./dist/index.d.cts\",\n        \"default\": \"./dist/index.cjs\"\n      }\n    }\n  },\n  \"main\": \"dist/index.cjs\",\n  \"module\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"files\": [\n    \"dist\",\n    \"src\",\n    \"!src/**/*.spec.ts\",\n    \"types\"\n  ],\n  \"scripts\": {\n    \"all\": \"pnpm i  && bun run build && bun lint && bun format && bun test:run && bun generate:docs && bun lint:package && bun lint:deps\",\n    \"build\": \"nx run-many --targets=build:dist,build:types --projects=@tevm/procedures\",\n    \"build:dist\": \"tsup\",\n    \"build:types\": \"tsup --dts-only\",\n    \"clean\": \"rm -rf node_modules && rm -rf artifacts && rm -rf dist && rm -rf cache\",\n    \"format\": \"biome format . --write\",\n    \"format:check\": \"biome format .\",\n    \"generate:docs\": \"bun run typedoc\",\n    \"lint\": \"biome check . --write --unsafe\",\n    \"lint:check\": \"biome check . --verbose\",\n    \"lint:deps\": \"bunx depcheck\",\n    \"lint:package\": \"bunx publint --strict && attw --pack\",\n    \"package:up\": \"pnpm up --latest\",\n    \"test\": \"vitest --watch\",\n    \"test:coverage\": \"vitest --coverage\",\n    \"test:run\": \"vitest\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@tevm/actions\": \"workspace:^\",\n    \"@tevm/address\": \"workspace:^\",\n    \"@tevm/block\": \"workspace:^\",\n    \"@tevm/blockchain\": \"workspace:^\",\n    \"@tevm/common\": \"workspace:^\",\n    \"@tevm/contract\": \"workspace:^\",\n    \"@tevm/errors\": \"workspace:^\",\n    \"@tevm/evm\": \"workspace:^\",\n    \"@tevm/jsonrpc\": \"workspace:^\",\n    \"@tevm/node\": \"workspace:^\",\n    \"@tevm/state\": \"workspace:^\",\n    \"@tevm/test-utils\": \"workspace:^\",\n    \"@tevm/tx\": \"workspace:^\",\n    \"@tevm/utils\": \"workspace:^\",\n    \"@tevm/vm\": \"workspace:^\"\n  },\n  \"devDependencies\": {\n    \"@tevm/actions\": \"workspace:^\",\n    \"@tevm/tsconfig\": \"workspace:^\",\n    \"@tevm/tsupconfig\": \"workspace:^\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}","import { stringToHex } from '@tevm/utils'\nimport { version as packageJsonVersion } from '../../package.json'\n\n/**\n * Request handler for eth_protocolVersion JSON-RPC requests.\n * @returns {import('./EthProcedure.js').EthProtocolVersionJsonRpcProcedure}\n */\nexport const ethProtocolVersionJsonRpcProcedure = () => {\n\treturn async (request) => {\n\t\treturn {\n\t\t\tresult: stringToHex(packageJsonVersion),\n\t\t\tjsonrpc: '2.0',\n\t\t\tmethod: 'eth_protocolVersion',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { InvalidParamsError } from '@tevm/errors'\nimport { BlobEIP4844Transaction, TransactionFactory } from '@tevm/tx'\nimport { bytesToHex, hexToBytes } from '@tevm/utils'\n\n/**\n * Request handler for eth_sendRawTransaction JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthSendRawTransactionJsonRpcProcedure}\n */\nexport const ethSendRawTransactionJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst vm = await client.getVm()\n\t\tconst [serializedTx] = request.params\n\t\tconst txBuf = hexToBytes(serializedTx)\n\t\t// Blob Transactions sent over RPC are expected to be in Network Wrapper format\n\t\tconst tx =\n\t\t\ttxBuf[0] === 0x03\n\t\t\t\t? BlobEIP4844Transaction.fromSerializedBlobTxNetworkWrapper(txBuf, { common: vm.common.ethjsCommon })\n\t\t\t\t: TransactionFactory.fromSerializedData(txBuf, { common: vm.common.ethjsCommon })\n\t\tif (!tx.isSigned()) {\n\t\t\tconst err = new InvalidParamsError('Transaction must be signed!')\n\t\t\treturn {\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\terror: {\n\t\t\t\t\tcode: err._tag,\n\t\t\t\t\tmessage: err.message,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\tconst txPool = await client.getTxPool()\n\t\tawait txPool.add(tx, true)\n\t\treturn {\n\t\t\tmethod: request.method,\n\t\t\tresult: bytesToHex(tx.hash()),\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t}\n\t}\n}\n","import { ethSendTransactionHandler } from '@tevm/actions'\nimport { hexToBigInt } from '@tevm/utils'\n\n/**\n * Request handler for eth_sendTransaction JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthSendTransactionJsonRpcProcedure}\n */\nexport const ethSendTransactionJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst sendTransactionRequest = /** @type {import('./index.js').EthSendTransactionJsonRpcRequest}*/ (request)\n\t\tconst txHash = await ethSendTransactionHandler(client)({\n\t\t\tfrom: request.params[0].from,\n\t\t\t...(request.params[0].data ? { data: request.params[0].data } : {}),\n\t\t\t...(request.params[0].to ? { to: request.params[0].to } : {}),\n\t\t\t...(request.params[0].gas ? { gas: hexToBigInt(request.params[0].gas) } : {}),\n\t\t\t...(request.params[0].gasPrice ? { gasPrice: hexToBigInt(request.params[0].gasPrice) } : {}),\n\t\t\t...(request.params[0].value ? { value: hexToBigInt(request.params[0].value) } : {}),\n\t\t})\n\t\treturn {\n\t\t\tmethod: sendTransactionRequest.method,\n\t\t\tresult: txHash,\n\t\t\tjsonrpc: '2.0',\n\t\t\t...(sendTransactionRequest.id ? { id: sendTransactionRequest.id } : {}),\n\t\t}\n\t}\n}\n","/**\n * Request handler for eth_uninstallFilter JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthUninstallFilterJsonRpcProcedure}\n */\nexport const ethUninstallFilterJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst uninstallFilterRequest =\n\t\t\t/** @type {import('./EthJsonRpcRequest.js').EthUninstallFilterJsonRpcRequest}*/\n\t\t\t(request)\n\t\tconst [filterId] = uninstallFilterRequest.params\n\t\tconst filter = client.getFilters().get(filterId)\n\t\tif (!filter) {\n\t\t\treturn {\n\t\t\t\t...(uninstallFilterRequest.id ? { id: uninstallFilterRequest.id } : {}),\n\t\t\t\tmethod: uninstallFilterRequest.method,\n\t\t\t\tjsonrpc: uninstallFilterRequest.jsonrpc,\n\t\t\t\tresult: false,\n\t\t\t}\n\t\t}\n\n\t\tconst [listener] = filter.registeredListeners\n\t\tif (filter.type === 'Log' && listener) {\n\t\t\tclient.removeListener('newLog', listener)\n\t\t} else if (filter.type === 'Block' && listener) {\n\t\t\tclient.removeListener('newBlock', listener)\n\t\t} else if (filter.type === 'PendingTransaction' && listener) {\n\t\t\tclient.removeListener('newPendingTransaction', listener)\n\t\t}\n\t\tclient.removeFilter(filterId)\n\t\treturn {\n\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\tmethod: request.method,\n\t\t\tjsonrpc: request.jsonrpc,\n\t\t\tresult: true,\n\t\t}\n\t}\n}\n","import { gasPriceHandler } from '@tevm/actions'\nimport { numberToHex } from '@tevm/utils'\n\n/**\n * @param {Parameters<typeof gasPriceHandler>[0]} options\n * @returns {import('./EthProcedure.js').EthGasPriceJsonRpcProcedure}\n */\nexport const gasPriceProcedure =\n\t({ getVm, forkTransport }) =>\n\tasync (req) => ({\n\t\t...(req.id ? { id: req.id } : {}),\n\t\tjsonrpc: '2.0',\n\t\tmethod: req.method,\n\t\t// TODO pass in a client instead\n\t\tresult: await gasPriceHandler(/** @type any*/ ({ getVm, forkTransport }))({}).then(numberToHex),\n\t})\n","import { getBalanceHandler } from '@tevm/actions'\nimport { numberToHex } from '@tevm/utils'\n\n/**\n * @param {Parameters<typeof getBalanceHandler>[0]} baseClient\n * @returns {import('./EthProcedure.js').EthGetBalanceJsonRpcProcedure}\n */\nexport const getBalanceProcedure = (baseClient) => async (req) => {\n\tif (!req.params[1]) {\n\t\tthrow new Error(\n\t\t\t'getBalanceProcedure received invalid parameters: Block parameter (req.params[1]) is missing or invalid. Expected a hex string or block tag (e.g., \"latest\", \"earliest\").',\n\t\t)\n\t}\n\treturn {\n\t\t...(req.id ? { id: req.id } : {}),\n\t\tjsonrpc: '2.0',\n\t\tmethod: req.method,\n\t\tresult: numberToHex(\n\t\t\tawait getBalanceHandler(baseClient)({\n\t\t\t\taddress: req.params[0],\n\t\t\t\t...(req.params[1].startsWith('0x')\n\t\t\t\t\t? { blockNumber: BigInt(req.params[1]) }\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tblockTag: /** @type {import('@tevm/utils').BlockTag}*/ (req.params[1]),\n\t\t\t\t\t\t}),\n\t\t\t}),\n\t\t),\n\t}\n}\n","import { getCodeHandler } from '@tevm/actions'\n\n/**\n * @param {Parameters<typeof getCodeHandler>[0]} baseClient\n * @returns {import('./EthProcedure.js').EthGetCodeJsonRpcProcedure}\n */\nexport const getCodeProcedure = (baseClient) => async (req) => ({\n\t...(req.id ? { id: req.id } : {}),\n\tjsonrpc: '2.0',\n\tmethod: req.method,\n\tresult: await getCodeHandler(baseClient)({\n\t\taddress: req.params[0],\n\t\tblockTag: req.params[1],\n\t}),\n})\n","import { getStorageAtHandler } from '@tevm/actions'\n\n/**\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./EthProcedure.js').EthGetStorageAtJsonRpcProcedure}\n */\nexport const getStorageAtProcedure = (client) => async (req) => ({\n\t...(req.id ? { id: req.id } : {}),\n\tjsonrpc: '2.0',\n\tmethod: req.method,\n\tresult: await getStorageAtHandler(client)({\n\t\taddress: req.params[0],\n\t\tposition: req.params[1],\n\t\tblockTag: req.params[2],\n\t}),\n})\n","import { getAccountHandler } from '@tevm/actions'\nimport { numberToHex } from '@tevm/utils'\n\n/**\n * Creates an GetAccount JSON-RPC Procedure for handling account requests with Ethereumjs VM\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./GetAccountJsonRpcProcedure.js').GetAccountJsonRpcProcedure}\n */\nexport const getAccountProcedure = (client) => async (request) => {\n\trequest.params\n\tconst { errors = [], ...result } = await getAccountHandler(client)({\n\t\taddress: request.params[0].address,\n\t\tthrowOnFail: false,\n\t\treturnStorage: request.params[0].returnStorage ?? false,\n\t})\n\tif (errors.length > 0) {\n\t\tconst error = /** @type {import('@tevm/actions').TevmGetAccountError}*/ (errors[0])\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\terror: {\n\t\t\t\tcode: error.code,\n\t\t\t\tmessage: error.message,\n\t\t\t\tdata: {\n\t\t\t\t\terrors: errors.map(({ message }) => message),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmethod: 'tevm_getAccount',\n\t\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t\t}\n\t}\n\treturn {\n\t\tjsonrpc: '2.0',\n\t\tresult: /** @type any*/ ({\n\t\t\taddress: result.address,\n\t\t\tbalance: numberToHex(result.balance ?? 0n),\n\t\t\tdeployedBytecode: result.deployedBytecode ?? '0x0',\n\t\t\tnonce: numberToHex(result.nonce ?? 0n),\n\t\t\tstorageRoot: result.storageRoot,\n\t\t\tisContract: result.isContract,\n\t\t\tisEmpty: result.isEmpty,\n\t\t\tcodeHash: result.codeHash,\n\t\t\tstorage: result.storage,\n\t\t}),\n\t\tmethod: 'tevm_getAccount',\n\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t}\n}\n","import { loadStateHandler } from '@tevm/actions'\nimport { hexToBigInt } from '@tevm/utils'\n\n/**\n * Creates a LoadState JSON-RPC Procedure for handling LoadState requests with Ethereumjs EVM\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./LoadStateJsonRpcProcedure.js').LoadStateJsonRpcProcedure}\n */\nexport const loadStateProcedure = (client) => async (request) => {\n\tconst {\n\t\tparams: [{ state }],\n\t} = request\n\n\t/**\n\t * @type {import('@tevm/state').TevmState}\n\t */\n\tconst parsedState = {}\n\n\tfor (const [k, v] of Object.entries(state)) {\n\t\tconst { nonce, balance, storageRoot, codeHash } = v\n\t\tparsedState[/** @type {import('@tevm/utils').Address}*/ (k)] = {\n\t\t\t...v,\n\t\t\tnonce: hexToBigInt(nonce),\n\t\t\tbalance: hexToBigInt(balance),\n\t\t\tstorageRoot: storageRoot,\n\t\t\tcodeHash: codeHash,\n\t\t}\n\t}\n\tconst { errors = [] } = await loadStateHandler(client)({\n\t\tstate: parsedState,\n\t\tthrowOnFail: false,\n\t})\n\n\tif (errors.length > 0) {\n\t\tconst error = /** @type {import('@tevm/actions').TevmLoadStateError}*/ (errors[0])\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\terror: {\n\t\t\t\tcode: error.code,\n\t\t\t\tmessage: error.message,\n\t\t\t\tdata: {\n\t\t\t\t\terrors: errors.map(({ message }) => message),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmethod: 'tevm_loadState',\n\t\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t\t}\n\t}\n\treturn {\n\t\tjsonrpc: '2.0',\n\t\tresult: {},\n\t\tmethod: 'tevm_loadState',\n\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t}\n}\n","import { mineHandler } from '@tevm/actions'\nimport { InternalError } from '@tevm/errors'\nimport { hexToNumber } from '@tevm/utils'\n\n/**\n * Creates an Mine JSON-RPC Procedure for handling tevm_mine requests with Ethereumjs VM\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./MineJsonRpcProcedure.js').MineJsonRpcProcedure}\n */\nexport const mineProcedure = (client) => async (request) => {\n\tconst { errors = [], ...result } = await mineHandler(client)({\n\t\tthrowOnFail: false,\n\t\tinterval: hexToNumber(request.params[1] ?? '0x0'),\n\t\tblockCount: hexToNumber(request.params[0] ?? '0x1'),\n\t})\n\tif (errors.length > 0) {\n\t\tconst error = /** @type {import('@tevm/actions').TevmMineError}*/ (errors[0])\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\terror: {\n\t\t\t\tcode: error.code,\n\t\t\t\tmessage: error.message,\n\t\t\t\tdata: {\n\t\t\t\t\terrors: errors.map(({ message }) => message),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmethod: 'tevm_mine',\n\t\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t\t}\n\t}\n\tif (!result.blockHashes?.length) {\n\t\tconst error = new InternalError('No blocks were mined')\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\terror: {\n\t\t\t\tcode: error.code,\n\t\t\t\tmessage: error.message,\n\t\t\t},\n\t\t\tmethod: 'tevm_mine',\n\t\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t\t}\n\t}\n\treturn {\n\t\tjsonrpc: '2.0',\n\t\tresult: {\n\t\t\tblockHashes: result.blockHashes ?? [],\n\t\t},\n\t\tmethod: 'tevm_mine',\n\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t}\n}\n","import { scriptHandler } from '@tevm/actions'\nimport { hexToBigInt, numberToHex } from '@tevm/utils'\nimport { parseBlockTag } from '../utils/parseBlockTag.js'\n\n/**\n * @deprecated Use CallJsonRpcProcedure instead\n * Creates a Script JSON-RPC Procedure for handling script requests with Ethereumjs VM\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./ScriptJsonRpcProcedure.js').ScriptJsonRpcProcedure}\n */\nexport const scriptProcedure = (client) => async (request) => {\n\t/**\n\t * @type {import('@tevm/actions').ScriptResult}\n\t */\n\tlet res\n\ttry {\n\t\tres = await scriptHandler(client)({\n\t\t\tthrowOnFail: false,\n\t\t\tdeployedBytecode: request.params[0].deployedBytecode,\n\t\t\t// internally we pass data directly in which works but typescript interface doesn't support publically\n\t\t\tabi: /** @type any*/ (undefined),\n\t\t\tfunctionName: /** @type any*/ (undefined),\n\t\t\targs: /** @type any*/ (undefined),\n\t\t\t...{ data: request.params[0].data },\n\t\t\t...(request.params[0].deployedBytecode ? { deployedBytecode: request.params[0].deployedBytecode } : {}),\n\t\t\t...(request.params[0].blobVersionedHashes ? { blobVersionedHashes: request.params[0].blobVersionedHashes } : {}),\n\t\t\t...(request.params[0].caller ? { caller: request.params[0].caller } : {}),\n\t\t\t...(request.params[0].data ? { data: request.params[0].data } : {}),\n\t\t\t...(request.params[0].depth ? { depth: request.params[0].depth } : {}),\n\t\t\t...(request.params[0].gasPrice ? { gasPrice: hexToBigInt(request.params[0].gasPrice) } : {}),\n\t\t\t...(request.params[0].gasPrice ? { gasPrice: hexToBigInt(request.params[0].gasPrice) } : {}),\n\t\t\t...(request.params[0].gas ? { gas: hexToBigInt(request.params[0].gas) } : {}),\n\t\t\t...(request.params[0].gas ? { gas: hexToBigInt(request.params[0].gas) } : {}),\n\t\t\t...(request.params[0].gasRefund ? { gasRefund: hexToBigInt(request.params[0].gasRefund) } : {}),\n\t\t\t...(request.params[0].origin ? { origin: request.params[0].origin } : {}),\n\t\t\t...(request.params[0].selfdestruct ? { selfdestruct: new Set(request.params[0].selfdestruct) } : {}),\n\t\t\t...(request.params[0].skipBalance ? { skipBalance: request.params[0].skipBalance } : {}),\n\t\t\t...(request.params[0].to ? { to: request.params[0].to } : {}),\n\t\t\t...(request.params[0].value ? { value: hexToBigInt(request.params[0].value) } : {}),\n\t\t\t...(request.params[0].blockTag ? { blockTag: parseBlockTag(request.params[0].blockTag) } : {}),\n\t\t\t...(request.params[0].createTransaction !== undefined\n\t\t\t\t? { createTransaction: request.params[0].createTransaction }\n\t\t\t\t: {}),\n\t\t})\n\t} catch (e) {\n\t\tconst tevmError = /** @type {import('@tevm/actions').TevmScriptError} */ (e)\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\tmethod: 'tevm_script',\n\t\t\terror: {\n\t\t\t\tcode: tevmError.code ?? -32000,\n\t\t\t\tmessage: tevmError._tag ?? 'An unexpected unhandled error occurred',\n\t\t\t},\n\t\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t\t}\n\t}\n\t// We only return the raw data\n\tconst { errors = [], ...result } = res\n\tif (errors.length > 0) {\n\t\tconst error = /** @type {import('@tevm/actions').TevmScriptError}*/ (errors[0])\n\t\treturn {\n\t\t\tjsonrpc: '2.0',\n\t\t\terror: {\n\t\t\t\tcode: error.code ?? -32000,\n\t\t\t\tmessage: error.message ?? 'An unexpected unhandled error occurred',\n\t\t\t\tdata: {\n\t\t\t\t\terrors: errors.map(({ message }) => message),\n\t\t\t\t},\n\t\t\t},\n\t\t\tmethod: 'tevm_script',\n\t\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t\t}\n\t}\n\n\t/**\n\t * @type {Record<`0x${string}`, Array<import('@tevm/utils').Hex>> | undefined}\n\t */\n\tconst accessList =\n\t\tresult.accessList !== undefined\n\t\t\t? Object.fromEntries(Object.entries(result.accessList).map(([key, value]) => [key, [...value]]))\n\t\t\t: undefined\n\t/**\n\t * @param {bigint} value\n\t */\n\tconst toHex = (value) => /**@type {import('@tevm/utils').Hex}*/ (numberToHex(value))\n\treturn {\n\t\tjsonrpc: '2.0',\n\t\tresult: {\n\t\t\texecutionGasUsed: toHex(result.executionGasUsed),\n\t\t\trawData: result.rawData,\n\t\t\t...(result.selfdestruct ? { selfdestruct: [...result.selfdestruct] } : {}),\n\t\t\t...(result.gasRefund ? { gasRefund: toHex(result.gasRefund) } : {}),\n\t\t\t...(result.gas ? { gas: toHex(result.gas) } : {}),\n\t\t\t...(result.logs ? { logs: result.logs } : {}),\n\t\t\t...(result.blobGasUsed ? { blobGasUsed: toHex(result.blobGasUsed) } : {}),\n\t\t\t...(result.txHash ? { txHash: result.txHash } : {}),\n\t\t\t...(result.blobGasUsed ? { blobGasUsed: toHex(result.blobGasUsed) } : {}),\n\t\t\t...(accessList !== undefined ? { accessList } : {}),\n\t\t\t...(result.preimages ? { preimages: result.preimages } : {}),\n\t\t\t...(result.l1Fee ? { l1DataFee: numberToHex(result.l1Fee) } : {}),\n\t\t\t...(result.l1BaseFee ? { l1BaseFee: numberToHex(result.l1BaseFee) } : {}),\n\t\t\t...(result.l1BlobFee ? { l1BlobFee: numberToHex(result.l1BlobFee) } : {}),\n\t\t\t...(result.l1GasUsed ? { l1GasUsed: numberToHex(result.l1GasUsed) } : {}),\n\t\t\t...(result.amountSpent ? { amountSpent: numberToHex(result.amountSpent) } : {}),\n\t\t\t...(result.baseFee ? { baseFee: numberToHex(result.baseFee) } : {}),\n\t\t\t...(result.totalGasSpent ? { totalGasSpent: numberToHex(result.totalGasSpent) } : {}),\n\t\t\t...(result.trace\n\t\t\t\t? {\n\t\t\t\t\t\ttrace: {\n\t\t\t\t\t\t\t...result.trace,\n\t\t\t\t\t\t\tgas: toHex(result.trace.gas),\n\t\t\t\t\t\t\tstructLogs: result.trace.structLogs.map((log) => ({\n\t\t\t\t\t\t\t\t...log,\n\t\t\t\t\t\t\t\tgas: toHex(log.gas),\n\t\t\t\t\t\t\t\tgasCost: toHex(log.gasCost),\n\t\t\t\t\t\t\t\tstack: [...log.stack],\n\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: {}),\n\t\t\t...(result.createdAddress ? { createdAddress: result.createdAddress } : {}),\n\t\t\t...(result.createdAddresses ? { createdAddresses: [...result.createdAddresses] } : {}),\n\t\t},\n\t\tmethod: 'tevm_script',\n\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t}\n}\n","import { chainIdHandler } from '@tevm/actions'\nimport { MethodNotSupportedError } from '@tevm/errors'\nimport { anvilDropTransactionJsonRpcProcedure } from './anvil/anvilDropTransactionProcedure.js'\nimport { anvilDumpStateJsonRpcProcedure } from './anvil/anvilDumpStateProcedure.js'\nimport { anvilGetAutomineJsonRpcProcedure } from './anvil/anvilGetAutomineProcedure.js'\nimport { anvilImpersonateAccountJsonRpcProcedure } from './anvil/anvilImpersonateAccountProcedure.js'\nimport { anvilLoadStateJsonRpcProcedure } from './anvil/anvilLoadStateProcedure.js'\nimport { anvilResetJsonRpcProcedure } from './anvil/anvilResetProcedure.js'\nimport { anvilSetBalanceJsonRpcProcedure } from './anvil/anvilSetBalanceProcedure.js'\nimport { anvilSetCodeJsonRpcProcedure } from './anvil/anvilSetCodeProcedure.js'\nimport { anvilSetCoinbaseJsonRpcProcedure } from './anvil/anvilSetCoinbaseProcedure.js'\nimport { anvilSetNonceJsonRpcProcedure } from './anvil/anvilSetNonceProcedure.js'\nimport { anvilSetStorageAtJsonRpcProcedure } from './anvil/anvilSetStorageAtProcedure.js'\nimport { anvilStopImpersonatingAccountJsonRpcProcedure } from './anvil/anvilStopImpersonatingAccountProcedure.js'\nimport { callProcedure } from './call/callProcedure.js'\nimport { debugTraceCallJsonRpcProcedure } from './debug/debugTraceCallProcedure.js'\nimport { debugTraceTransactionJsonRpcProcedure } from './debug/debugTraceTransactionProcedure.js'\nimport { dumpStateProcedure } from './dumpstate/dumpStateProcedure.js'\nimport { blockNumberProcedure } from './eth/blockNumberProcedure.js'\nimport { chainIdProcedure } from './eth/chainIdProcedure.js'\nimport { ethBlobBaseFeeJsonRpcProcedure } from './eth/ethBlobBaseFeeProcedure.js'\nimport { ethCallProcedure } from './eth/ethCallProcedure.js'\nimport { ethCoinbaseJsonRpcProcedure } from './eth/ethCoinbaseProcedure.js'\nimport { ethEstimateGasJsonRpcProcedure } from './eth/ethEstimateGasProcedure.js'\nimport { ethGetBlockByHashJsonRpcProcedure } from './eth/ethGetBlockByHashProcedure.js'\nimport { ethGetBlockByNumberJsonRpcProcedure } from './eth/ethGetBlockByNumberProcedure.js'\nimport { ethGetBlockTransactionCountByHashJsonRpcProcedure } from './eth/ethGetBlockTransactionCountByHashProcedure.js'\nimport { ethGetBlockTransactionCountByNumberJsonRpcProcedure } from './eth/ethGetBlockTransactionCountByNumberProcedure.js'\nimport { ethGetFilterChangesProcedure } from './eth/ethGetFilterChangesProcedure.js'\nimport { ethGetFilterLogsProcedure } from './eth/ethGetFilterLogsProcedure.js'\nimport { ethGetLogsProcedure } from './eth/ethGetLogsProcedure.js'\nimport { ethGetTransactionByBlockHashAndIndexJsonRpcProcedure } from './eth/ethGetTransactionByBlockHashAndIndexProcedure.js'\nimport { ethGetTransactionByBlockNumberAndIndexJsonRpcProcedure } from './eth/ethGetTransactionByBlockNumberAndIndexProcedure.js'\nimport { ethGetTransactionByHashJsonRpcProcedure } from './eth/ethGetTransactionByHashProcedure.js'\nimport { ethGetTransactionCountProcedure } from './eth/ethGetTransactionCountProcedure.js'\nimport { ethGetTransactionReceiptJsonRpcProcedure } from './eth/ethGetTransactionReceiptProcedure.js'\nimport { ethNewBlockFilterProcedure } from './eth/ethNewBlockFilterProcedure.js'\nimport { ethNewFilterJsonRpcProcedure } from './eth/ethNewFilterProcedure.js'\nimport { ethNewPendingTransactionFilterProcedure } from './eth/ethNewPendingTransactionFilterProcedure.js'\nimport { ethProtocolVersionJsonRpcProcedure } from './eth/ethProtocolVersionProcedure.js'\nimport { ethSendRawTransactionJsonRpcProcedure } from './eth/ethSendRawTransactionProcedure.js'\nimport { ethSendTransactionJsonRpcProcedure } from './eth/ethSendTransactionProcedure.js'\nimport { ethUninstallFilterJsonRpcProcedure } from './eth/ethUninstallFilterProcedure.js'\nimport { gasPriceProcedure } from './eth/gasPriceProcedure.js'\nimport { getBalanceProcedure } from './eth/getBalanceProcedure.js'\nimport { getCodeProcedure } from './eth/getCodeProcedure.js'\nimport { getStorageAtProcedure } from './eth/getStorageAtProcedure.js'\nimport { getAccountProcedure } from './getaccount/getAccountProcedure.js'\nimport { loadStateProcedure } from './loadstate/loadStateProcedure.js'\nimport { mineProcedure } from './mine/mineProcedure.js'\nimport { scriptProcedure } from './script/scriptProcedure.js'\nimport { setAccountProcedure } from './setaccount/setAccountProcedure.js'\n\n/**\n * @typedef {ReturnType<typeof createHandlers>} RequestHandlers\n */\n\n/**\n * @internal\n * Creates a mapping of methods to jsonrpc request handlers\n * @param {import('@tevm/node').TevmNode} client\n * @returns Request handlers\n * @example\n */\nexport const createHandlers = (client) => {\n\tconst tevmHandlers = {\n\t\ttevm_call: callProcedure(client),\n\t\t/**\n\t\t * @param {any} request\n\t\t */\n\t\ttevm_contract: (request) => {\n\t\t\tconst err = new MethodNotSupportedError(\n\t\t\t\t'UnsupportedMethodError: tevm_contract is not supported. Encode the contract arguments and use tevm_call instead.',\n\t\t\t)\n\t\t\treturn /**@type any*/ ({\n\t\t\t\tid: /** @type any*/ (request).id,\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\terror: {\n\t\t\t\t\tcode: err._tag,\n\t\t\t\t\tmessage: err.message,\n\t\t\t\t},\n\t\t\t})\n\t\t},\n\t\ttevm_getAccount: getAccountProcedure(client),\n\t\ttevm_setAccount: setAccountProcedure(client),\n\t\ttevm_script: scriptProcedure(client),\n\t\ttevm_dumpState: dumpStateProcedure(client),\n\t\ttevm_loadState: loadStateProcedure(client),\n\t\ttevm_miner: mineProcedure(client),\n\t}\n\n\tconst ethHandlers = {\n\t\teth_blockNumber: blockNumberProcedure(client),\n\t\teth_chainId: chainIdProcedure(client),\n\t\teth_call: ethCallProcedure(client),\n\t\teth_getCode: getCodeProcedure(client),\n\t\teth_getStorageAt: getStorageAtProcedure(client),\n\t\teth_gasPrice: gasPriceProcedure(client),\n\t\teth_getBalance: getBalanceProcedure(client),\n\t\teth_coinbase: ethCoinbaseJsonRpcProcedure(client),\n\t\teth_mining:\n\t\t\t/**\n\t\t\t * @param {any} request}\n\t\t\t */\n\t\t\t(request) => {\n\t\t\t\treturn {\n\t\t\t\t\tresult: client.status === 'MINING',\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\t}\n\t\t\t},\n\t\teth_syncing:\n\t\t\t/**\n\t\t\t * @param {any} request}\n\t\t\t */\n\t\t\t(request) => {\n\t\t\t\treturn {\n\t\t\t\t\tresult: client.status === 'SYNCING',\n\t\t\t\t\tmethod: request.method,\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\t}\n\t\t\t},\n\t\teth_sendTransaction: ethSendTransactionJsonRpcProcedure(client),\n\t\teth_sendRawTransaction: ethSendRawTransactionJsonRpcProcedure(client),\n\t\teth_estimateGas: ethEstimateGasJsonRpcProcedure(client),\n\t\teth_getTransactionReceipt: ethGetTransactionReceiptJsonRpcProcedure(client),\n\t\teth_getLogs: ethGetLogsProcedure(client),\n\t\teth_getBlockByHash: ethGetBlockByHashJsonRpcProcedure(client),\n\t\teth_getBlockByNumber: ethGetBlockByNumberJsonRpcProcedure(client),\n\t\teth_getBlockTransactionCountByHash: ethGetBlockTransactionCountByHashJsonRpcProcedure(client),\n\t\teth_getBlockTransactionCountByNumber: ethGetBlockTransactionCountByNumberJsonRpcProcedure(client),\n\t\teth_getTransactionByHash: ethGetTransactionByHashJsonRpcProcedure(client),\n\t\teth_getTransactionByBlockHashAndIndex: ethGetTransactionByBlockHashAndIndexJsonRpcProcedure(client),\n\t\teth_getTransactionByBlockNumberAndIndex: ethGetTransactionByBlockNumberAndIndexJsonRpcProcedure(client),\n\t\teth_protocolVersion: ethProtocolVersionJsonRpcProcedure(),\n\t\teth_getTransactionCount: ethGetTransactionCountProcedure(client),\n\t\teth_newFilter: ethNewFilterJsonRpcProcedure(client),\n\t\teth_getFilterLogs: ethGetFilterLogsProcedure(client),\n\t\teth_newBlockFilter: ethNewBlockFilterProcedure(client),\n\t\teth_uninstallFilter: ethUninstallFilterJsonRpcProcedure(client),\n\t\teth_getFilterChanges: ethGetFilterChangesProcedure(client),\n\t\teth_newPendingTransactionFilter: ethNewPendingTransactionFilterProcedure(client),\n\t\teth_blobBaseFee: ethBlobBaseFeeJsonRpcProcedure(client),\n\t}\n\n\tconst anvilHandlers = {\n\t\tanvil_setCode: anvilSetCodeJsonRpcProcedure(client),\n\t\tanvil_setBalance: anvilSetBalanceJsonRpcProcedure(client),\n\t\tanvil_setNonce: anvilSetNonceJsonRpcProcedure(client),\n\t\tanvil_setChainId: chainIdHandler(client),\n\t\tanvil_getAutomine: anvilGetAutomineJsonRpcProcedure(client),\n\t\tanvil_setCoinbase: anvilSetCoinbaseJsonRpcProcedure(client),\n\t\tanvil_mine: mineProcedure(client),\n\t\tanvil_reset: anvilResetJsonRpcProcedure(client),\n\t\tanvil_dropTransaction: anvilDropTransactionJsonRpcProcedure(client),\n\t\tanvil_dumpState: anvilDumpStateJsonRpcProcedure(client),\n\t\tanvil_loadState: anvilLoadStateJsonRpcProcedure(client),\n\t\tanvil_setStorageAt: anvilSetStorageAtJsonRpcProcedure(client),\n\t\tanvil_impersonateAccount: anvilImpersonateAccountJsonRpcProcedure(client),\n\t\tanvil_stopImpersonatingAccount: anvilStopImpersonatingAccountJsonRpcProcedure(client),\n\t}\n\tconst tevmAnvilHandlers = Object.fromEntries(\n\t\tObject.entries(anvilHandlers).map(([key, value]) => {\n\t\t\treturn [key.replace('anvil', 'tevm'), value]\n\t\t}),\n\t)\n\tconst ganacheHandlers = Object.fromEntries(\n\t\tObject.entries(anvilHandlers).map(([key, value]) => {\n\t\t\treturn [key.replace('anvil', 'ganache'), value]\n\t\t}),\n\t)\n\tconst hardhatHandlers = Object.fromEntries(\n\t\tObject.entries(anvilHandlers).map(([key, value]) => {\n\t\t\treturn [key.replace('anvil', 'hardhat'), value]\n\t\t}),\n\t)\n\n\tconst debugHandlers = {\n\t\tdebug_traceTransaction: debugTraceTransactionJsonRpcProcedure(client),\n\t\tdebug_traceCall: debugTraceCallJsonRpcProcedure(client),\n\t}\n\n\tconst allHandlers = {\n\t\t...tevmHandlers,\n\t\t...ethHandlers,\n\t\t...anvilHandlers,\n\t\t...tevmAnvilHandlers,\n\t\t...ganacheHandlers,\n\t\t...hardhatHandlers,\n\t\t...debugHandlers,\n\t}\n\n\treturn allHandlers\n}\n","import { MethodNotFoundError } from '@tevm/errors'\nimport { createHandlers } from './createHandlers.js'\n\n/**\n * Request handler for JSON-RPC requests.\n *\n * This implementation of the Tevm requestProcedure spec\n * implements it via the ethereumjs VM.\n *\n * Most users will want to use `Tevm.request` instead of\n * this method but this method may be desired if hyper optimizing\n * bundle size.\n *\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./tevm-request-handler/TevmJsonRpcRequestHandler.js').TevmJsonRpcRequestHandler}\n * @example\n * ```typescript\n * const blockNumberResponse = await tevm.request({\n *  method: 'eth_blockNumber',\n *  params: []\n *  id: 1\n *  jsonrpc: '2.0'\n * })\n * const accountResponse = await tevm.request({\n *  method: 'tevm_getAccount',\n *  params: [{address: '0x123...'}]\n *  id: 1\n *  jsonrpc: '2.0'\n * })\n * ```\n */\nexport const requestProcedure = (client) => {\n\tconst allHandlers = createHandlers(client)\n\treturn async (request) => {\n\t\tawait client.ready()\n\t\tclient.logger.debug(request, 'JSON-RPC request received')\n\t\tif (!(request.method in allHandlers)) {\n\t\t\tconst err = new MethodNotFoundError(`UnsupportedMethodError: Unknown method ${/**@type any*/ (request).method}`)\n\t\t\treturn /** @type {any}*/ ({\n\t\t\t\tid: /** @type any*/ (request).id ?? null,\n\t\t\t\tmethod: /** @type any*/ (request).method,\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\terror: {\n\t\t\t\t\tcode: err.code,\n\t\t\t\t\tmessage: err.message,\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t\treturn allHandlers[/** @type {keyof typeof allHandlers}*/ (request.method)](request)\n\t}\n}\n","import { requestProcedure } from './requestProcedure.js'\n\n/**\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./tevm-request-handler/TevmJsonRpcBulkRequestHandler.js').TevmJsonRpcBulkRequestHandler}\n */\nexport const requestBulkProcedure = (client) => async (requests) => {\n\tconst handleRequest = requestProcedure(client)\n\tconst responses = await Promise.allSettled(requests.map((request) => handleRequest(/** @type any*/ (request))))\n\treturn responses.map((response, i) => {\n\t\tconst request = /** @type {import(\"@tevm/jsonrpc\").JsonRpcRequest<string, object>} */ (requests[i])\n\t\t// this should never happen\n\t\tif (response.status === 'rejected') {\n\t\t\tclient.logger.error(response.reason)\n\t\t\treturn {\n\t\t\t\tid: request.id,\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\terror: {\n\t\t\t\t\t// TODO This should be added to @tevm/errors package and rexported in tevm\n\t\t\t\t\tcode: 'UnexpectedBulkRequestError',\n\t\t\t\t\tmessage: 'UnexpectedBulkRequestError',\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\treturn response.value\n\t})\n}\n","import { MethodNotSupportedError } from '@tevm/errors'\nimport { hexToNumber } from '@tevm/utils'\n\n/**\n * Request handler for anvil_setChainId JSON-RPC requests.\n * @param {import('@tevm/node').TevmNode} client\n * @returns {import('./AnvilProcedure.js').AnvilSetChainIdProcedure}\n */\nexport const anvilSetChainIdJsonRpcProcedure = (client) => {\n\treturn async (request) => {\n\t\tconst chainId = hexToNumber(request.params[0])\n\t\tif (!Number.isInteger(chainId) || chainId <= 0) {\n\t\t\treturn {\n\t\t\t\t...(request.id ? { id: request.id } : {}),\n\t\t\t\tmethod: request.method,\n\t\t\t\tjsonrpc: request.jsonrpc,\n\t\t\t\terror: {\n\t\t\t\t\tcode: /** @type any*/ (-32602),\n\t\t\t\t\tmessage: `Invalid id ${chainId}. Must be a positive integer.`,\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t\tconst err = new MethodNotSupportedError(\n\t\t\t'UnsupportedMethodError: tevm_contract is not supported. Encode the contract arguments and use tevm_call instead.',\n\t\t)\n\t\tclient.logger.error(err)\n\t\treturn /**@type any*/ ({\n\t\t\tid: /** @type any*/ (request).id,\n\t\t\tjsonrpc: '2.0',\n\t\t\terror: {\n\t\t\t\tcode: err._tag,\n\t\t\t\tmessage: err.message,\n\t\t\t},\n\t\t})\n\t}\n}\n","import { ethAccountsHandler } from '@tevm/actions'\n\n/**\n * @param {ReadonlyArray<import('@tevm/utils').Account>} accounts\n * @returns {import('./EthProcedure.js').EthAccountsJsonRpcProcedure}\n */\nexport const ethAccountsProcedure = (accounts) => async (req) => ({\n\t...(req.id ? { id: req.id } : {}),\n\tjsonrpc: '2.0',\n\tmethod: req.method,\n\tresult: await ethAccountsHandler({ accounts })({}),\n})\n","import { ethSignHandler } from '@tevm/actions'\n\n/**\n * @param {ReadonlyArray<import('@tevm/utils').HDAccount>} accounts\n * @returns {import('./EthProcedure.js').EthSignJsonRpcProcedure}\n */\nexport const ethSignProcedure = (accounts) => async (req) => ({\n\t...(req.id ? { id: req.id } : {}),\n\tjsonrpc: '2.0',\n\tmethod: req.method,\n\tresult: await ethSignHandler({ accounts })({\n\t\taddress: req.params[0],\n\t\tdata: req.params[1],\n\t}),\n})\n","import { ethSignTransactionHandler } from '@tevm/actions'\nimport { hexToBigInt } from '@tevm/utils'\n\n/**\n * @param {Parameters<typeof ethSignTransactionHandler>[0]} options\n * @returns {import('./EthProcedure.js').EthSignTransactionJsonRpcProcedure}\n */\nexport const ethSignTransactionProcedure = (options) => async (req) => ({\n\t...(req.id ? { id: req.id } : {}),\n\tjsonrpc: '2.0',\n\tmethod: req.method,\n\tresult: await ethSignTransactionHandler(options)({\n\t\tfrom: req.params[0].from,\n\t\t...(req.params[0].to ? { to: req.params[0].to } : {}),\n\t\t...(req.params[0].data ? { data: req.params[0].data } : {}),\n\t\t...(req.params[0].value ? { value: hexToBigInt(req.params[0].value) } : {}),\n\t\t...(req.params[0].gas ? { gas: hexToBigInt(req.params[0].gas) } : {}),\n\t\t...(req.params[0].gasPrice ? { gasPrice: hexToBigInt(req.params[0].gasPrice) } : {}),\n\t\t...(req.params[0].nonce ? { nonce: hexToBigInt(req.params[0].nonce) } : {}),\n\t}),\n})\n"]}