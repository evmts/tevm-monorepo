/**
 * @module ethSimulateV1HandlerType
 */

/**
 * @typedef {object} SimulateCallItem
 * @property {`0x${string}`} [from] - The address the transaction is sent from
 * @property {`0x${string}`} [to] - The address the transaction is directed to
 * @property {`0x${string}`} [data] - The call data
 * @property {bigint} [gas] - Gas limit
 * @property {bigint} [gasPrice] - Gas price in wei
 * @property {bigint} [maxFeePerGas] - Maximum fee per gas for EIP-1559 transactions
 * @property {bigint} [maxPriorityFeePerGas] - Maximum priority fee per gas for EIP-1559 transactions
 * @property {bigint} [value] - Value sent in wei
 * @property {number} [nonce] - Transaction nonce
 * @property {import('viem').AccessList} [accessList] - Access list
 */

/**
 * @typedef {object} StateOverride
 * @property {`0x${string}`} address - The address to override
 * @property {bigint} [balance] - The new balance in wei
 * @property {number} [nonce] - The new nonce
 * @property {`0x${string}`} [code] - The new contract code
 * @property {Record<`0x${string}`, `0x${string}`>} [storage] - Storage key-value pairs to override
 */

/**
 * @typedef {object} BlockOverride
 * @property {bigint} [baseFeePerGas] - Base fee per gas
 * @property {bigint} [timestamp] - Block timestamp
 * @property {bigint} [number] - Block number
 * @property {bigint} [difficulty] - Block difficulty
 * @property {bigint} [gasLimit] - Block gas limit
 * @property {`0x${string}`} [coinbase] - Block miner address
 */

/**
 * @typedef {object} SimulateParams
 * @property {`0x${string}` | undefined} [account] - The account to use as the default transaction sender and for asset tracking
 * @property {SimulateCallItem[]} blockStateCalls - Array of call items to execute
 * @property {`0x${string}` | 'earliest' | 'latest' | 'pending' | 'safe' | 'finalized'} [blockNumber='latest'] - Block to execute against
 * @property {StateOverride[]} [stateOverrides=[]] - Array of state overrides to apply
 * @property {BlockOverride} [blockOverrides] - Block parameters to override
 * @property {boolean} [traceAssetChanges=false] - Whether to track changes in asset balances
 */

/**
 * @typedef {object} SimulateCallResult
 * @property {'success' | 'failure'} status - The status of the call
 * @property {`0x${string}`} data - The return data of the call
 * @property {bigint} gasUsed - The amount of gas used
 * @property {Array<import('../common/FilterLog.js').FilterLog>} logs - The logs generated by the call
 * @property {string} [error] - Error message if status is failure
 */

/**
 * @typedef {object} TokenInfo
 * @property {`0x${string}`} address - Token contract address
 * @property {string} [symbol] - Token symbol
 * @property {number} [decimals] - Token decimals
 */

/**
 * @typedef {object} AssetValueChange
 * @property {bigint} diff - The change in value
 * @property {bigint} [start] - The starting value
 * @property {bigint} [end] - The ending value
 */

/**
 * @typedef {object} AssetChange
 * @property {TokenInfo} token - Information about the token
 * @property {AssetValueChange} value - Value change information
 */

/**
 * @typedef {object} SimulateResult
 * @property {SimulateCallResult[]} results - Results of each call
 * @property {AssetChange[]} [assetChanges] - Changes in asset balances
 */

/**
 * Handler for simulating a series of transactions with optional state overrides
 * @callback EthSimulateV1Handler
 * @param {import('@tevm/node').TevmNode} client - Tevm node client
 * @returns {(params: SimulateParams) => Promise<SimulateResult>}
 */

export {}
