export function createEvmError(error: import("@tevm/evm").EvmError): InternalError | StopError | RevertError | OutOfGasError | InvalidOpcodeError | StackOverflowError | StackUnderflowError | InvalidJumpError | OutOfRangeError | InvalidProofError | AuthCallUnsetError | InvalidKzgInputsError | ValueOverflowError | InvalidJumpSubError | CreateCollisionError | InvalidBeginSubError | RefundExhaustedError | InvalidReturnSubError | InvalidCommitmentError | InvalidEofFormatError | StaticStateChangeError | CodeStoreOutOfGasError | InsufficientBalanceError | InvalidInputLengthError | BLS12381InputEmptyError | InitcodeSizeViolationError | InvalidBytecodeResultError | CodeSizeExceedsMaximumError | BLS12381FpNotInFieldError | BLS12381PointNotOnCurveError;
import { InternalError } from '@tevm/errors';
import { StopError } from '@tevm/errors';
import { RevertError } from '@tevm/errors';
import { OutOfGasError } from '@tevm/errors';
import { InvalidOpcodeError } from '@tevm/errors';
import { StackOverflowError } from '@tevm/errors';
import { StackUnderflowError } from '@tevm/errors';
import { InvalidJumpError } from '@tevm/errors';
import { OutOfRangeError } from '@tevm/errors';
import { InvalidProofError } from '@tevm/errors';
import { AuthCallUnsetError } from '@tevm/errors';
import { InvalidKzgInputsError } from '@tevm/errors';
import { ValueOverflowError } from '@tevm/errors';
import { InvalidJumpSubError } from '@tevm/errors';
import { CreateCollisionError } from '@tevm/errors';
import { InvalidBeginSubError } from '@tevm/errors';
import { RefundExhaustedError } from '@tevm/errors';
import { InvalidReturnSubError } from '@tevm/errors';
import { InvalidCommitmentError } from '@tevm/errors';
import { InvalidEofFormatError } from '@tevm/errors';
import { StaticStateChangeError } from '@tevm/errors';
import { CodeStoreOutOfGasError } from '@tevm/errors';
import { InsufficientBalanceError } from '@tevm/errors';
import { InvalidInputLengthError } from '@tevm/errors';
import { BLS12381InputEmptyError } from '@tevm/errors';
import { InitcodeSizeViolationError } from '@tevm/errors';
import { InvalidBytecodeResultError } from '@tevm/errors';
import { CodeSizeExceedsMaximumError } from '@tevm/errors';
import { BLS12381FpNotInFieldError } from '@tevm/errors';
import { BLS12381PointNotOnCurveError } from '@tevm/errors';
//# sourceMappingURL=createEvmError.d.ts.map