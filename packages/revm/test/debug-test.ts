import { createTevmEvm } from './index';

async function main() {
  // Initialize REVM instance
  const wasmEvm = createTevmEvm();
  
  // Fibonacci contract bytecode from the test
  const deployedBytecode = '0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063c10c9da11461003b578063bab2f84d14610059575b600080fd5b61004361004e366004610170565b61006c565b60405190815260200160405180910390f35b6100436100673660046101bd565b6100c7565b6000806000806000806000806000806000600a8c101561008c5750600060e1610125565b60008060019d5b8e1561010e576000888860018f03915060018e03905081890198506000818b0197506000818b0360018f0360018e03908103955080880196508098508597506001870196508095508496505050878a0197506000818b03611001146100ec576100ee565b809b505b600188039a508c8a106100fe57610105565b8b9b505b8a8c1161010c57610105565b505b506000805b8e8e0981106101255787809d509d505b50509c995050505050505050505050565b6000806000806000806000806000806000600a8c101561015057506000610125565b60008060019d5b8e1561010e57600159505050505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561018257600080fd5b813567ffffffffffffffff8082111561019a57600080fd5b818401915084601f8301126101ae57600080fd5b8135818111156101bc57600080fd5b604052508195945050505050565b6000602082840312156101cf57600080fd5b813567ffffffffffffffff8111156101e657600080fd5b8201601f810184136101f757600080fd5b803561020a6102058261022c565b610215565b818152866020838501011115610220576102ce565b816020850160208301376000602085830101528095505050505050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561025557610255610169565b604052919050565b600067ffffffffffffffff80841115610278576102786101be565b601f01601f19168301908081026102ad888354161561029e57604052808301805260008051602061030383398151915295509094509190910190565b905061022c565b808201829004845281611061818301848401875b828110156102ca57505050505050855290910152610215565b505059509192909101925060005b8881106102ec5750505050505093928380015250949350505050565b915081875261030c8184016102058761022c565b8401925050918301915081506102d756fea2646970667358221220b2de918c46a8d3963834358c9320c17e15efb58e94cc66ac97e3e97b9a1f8e9564736f6c634300080a00330000000000000000000000000000000000000000000000000000000000000002';
  
  // Set up account and deploy the contract
  const address = `0x${"21".repeat(20)}`;
  const caller = "0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
  
  console.log('Initializing REVM and setting up account...');
  await wasmEvm.init();
  await wasmEvm.setAccountBalance(caller, "10000000000000000000");
  await wasmEvm.setAccountCode(address, deployedBytecode);
  
  // Call the contract with input for fibonacci(10)
  console.log('Calling contract with fibonacci(10)...');
  // Encode simple method call for fibonacci(10) with proper padding
  const callData = '0xc10c9da1000000000000000000000000000000000000000000000000000000000000000a';
  
  const result = await wasmEvm.call({
    from: caller,
    to: address,
    data: callData,
    gasLimit: "200000",
    value: "0"
  });
  
  console.log('Call result:', result);
}

main().catch(console.error);