// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`getBlock > should fetch and cache the block from rpc if it does not exist 1`] = `
{
  "header": {
    "baseFeePerGas": "0x380f4e6",
    "blobGasUsed": "0x0",
    "coinbase": "0x4200000000000000000000000000000000000011",
    "difficulty": "0x0",
    "excessBlobGas": "0x0",
    "extraData": "0x",
    "gasLimit": "0x1c9c380",
    "gasUsed": "0x364d37",
    "logsBloom": "0x8000008240001080a44028e038001080900806001012040000044c006420228c06491080100202032240101000000802489084408102200050014058006e09402280184420b0018818100a298020060004200800012c2a0040c68144800a5081d20120094302008082201204324208010080100020c000010080013109080800040342040300030002210000100640100004048188e10000020500382400090112044c041020090801120402c00104001210a00310000081080000801489009060049702010020609a083002400011808042280e408011001401c002800074000810604c029020c20000400110000090001004042100c9440020040420052620",
    "mixHash": "0x427ebdb7dd7032926c5361ced614bef6d493204c338fc9b973c540a02c168e8e",
    "nonce": "0x0000000000000000",
    "number": "0x7511d75",
    "parentBeaconBlockRoot": "0x69d0b98fa1d8d0f0bf71169a06348a55cc94b3e60977cf8f36e1df1cf5e03a02",
    "parentHash": "0xf6d5e5a402cc3e04f9ce3ded543f2a389c11b0ab96a893a6b2220967b45c9e54",
    "receiptTrie": "0xe2fdfd2bb204d5f145113f1fab8ac8ae75a2d981a4e2147f6ebe15ec1c39b9fd",
    "stateRoot": "0x6e4a0049d5fa1a7fd187cd6222b5e0e31f984d79a9426b0d1f7b79438c247651",
    "timestamp": "0x669614a3",
    "transactionsTrie": "0x6e50b3326e35257710e793b771b04c9435582d75f99471ed36795e385412167a",
    "uncleHash": "0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",
    "withdrawalsRoot": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
  },
  "requests": undefined,
  "transactions": [
    {
      "data": "0x7c39d1300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000e600000010000000e6000000e6000000e6000000000000000000000010000000d600000000000000000000000019dc38aeae620380430c200a6e990d5af54801174c13bc1f991c2428e3fbebbc4538196e1ddcfd2f4b68323251344bdc3dc32bb30007e06d3f5bf4a8f18467fa2908cce33c935a7e9ee56ac1184afff2df0ac998112f64680192f5fe3625b90d989a25af5c92d4085355dc6fa9e684fb82bf9fb11bfb0d9c1bb341b35b6f55e90a1f99a79d06971cef6cc955d0c53ed8f73cc2bd61c4c3163739f6ce3ec79c0f4a1a386c918a0f60d5a1bcf037406e55ddd707333f68af9f551c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008d030007e06d000021050000000000000000000000000cb0354e9c51960a7875724343dfc37b93d326090000000a000000000000000000000000c110e7faa95680c79937ccaca3d1cab7902be25e000000000000000000000000f597a1395423730356d3725556c94b8e5ea3a1a6000000000000000000000000000000000000000000000000000187fe01e5f00000000000000000000000000000000000000000",
      "gasLimit": "0x5acb8",
      "gasPrice": "0x708082c",
      "nonce": "0x2b6cd",
      "r": "0x9b1266efd47db5d86a5c76ed90bc29c3f7b53bde6d89c85c0ea61f5f157a3f81",
      "s": "0x3b32ac89671da268f090557e403efca7a5901f5f2a5de51ad29aef9f7a813709",
      "to": "0xd4c1905bb1d26bc93dac913e13cacc278cdcc80d",
      "type": "0x0",
      "v": "0x37",
      "value": "0x0",
    },
    {
      "accessList": [],
      "chainId": "0xa",
      "data": "0xc9807539000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000300010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000fe5dccbb60ab39e876b0edf7109291550001f9c20400050608070109040302000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000024231904000000000000000000000000000000000000000000000000000000002423f018000000000000000000000000000000000000000000000000000000002423f7af000000000000000000000000000000000000000000000000000000002423f7af000000000000000000000000000000000000000000000000000000002424078800000000000000000000000000000000000000000000000000000000242432800000000000000000000000000000000000000000000000000000000024243e380000000000000000000000000000000000000000000000000000000024257aa0000000000000000000000000000000000000000000000000000000002425894b0000000000000000000000000000000000000000000000000000000024372cde00000000000000000000000000000000000000000000000000000000000000045ebe7e9660564e9131e4857528b572abe255eb239e26267494e10423bc5d5dd050d6b54f478e58e8a4cda45c6c6db470846c4b6f58930e9abbcc41da1c623b24c073dc8a96700d3d4e3299c830971d45a0721dfe58fca464e7eb8caf8e83debe6c7fec76ca38a0d2ce28b4406edee0abce8553af1ab76ed1e0c4611a2d692b7100000000000000000000000000000000000000000000000000000000000000040d914a0c10435b435c91eb179fb06fdc982e16c4909414997e3cf14812fa363e01236eebd580c7fa791fc767ea94fac3730a0f6d33b2c9381be9aca99b897c243b94c51431dc9decbaafb4147fc5b7f223ab0f5d386a5fb977dc9c70510ae29b4150909adc3c7f28279af61a94fc8e120167c1d43f08938f3670943e9e865307",
      "gasLimit": "0x4c4b40",
      "maxFeePerGas": "0x90b16c3",
      "maxPriorityFeePerGas": "0x37d6cc1",
      "nonce": "0x4c397",
      "r": "0xd59c81e92769dadc3c207629acc5d57be8a8130a6dd1b7e3114828eaef364fc5",
      "s": "0x6610161d5c8b885a5dfa208065c87e726b6f17600667d2bfeeb30e2ed55533d7",
      "to": "0xe1f2671bade2fba894de982880c716592ab99daa",
      "type": "0x2",
      "v": "0x1",
      "value": "0x0",
    },
    {
      "data": "0x7612c9eb00000000000000000000000087a76ce0332f3dc0282f3902f31b7bf9a3e645c00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000cdea13f0669766160000a86a0000000a000100010000000000000000000000000000000000000000000000000000000001436afa0000000000000000000000000000000000000000000000000000000000000e4a000000000000000000000000000000000000000000000000000000000003a9800000000000000000000000004b88f06b6b1b58c675243932d35f674972194fd70000000000000000000000005e54182fa0d40f6954fa8bd9fea0ce639a32024f0000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000a7f5a210c92a82d2a05e0072d8dccd33acd0d09200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000000000280000000000000000000000000c89214b7906d755e4266e83a2f2bb6e2792eef8700000000000000000000000087a76ce0332f3dc0282f3902f31b7bf9a3e645c000000000000000000000000087a76ce0332f3dc0282f3902f31b7bf9a3e645c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000120000000000000000000000000e1bf2150669766160000a86a0000a86a00010001000000000000000000000000effee81364792042b46acd0b19fc6abe235f1f5173b1581f4d66d7ec7714db53dbf0d8d37101b086afa940d2d8b10d4ed78870a30000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000c532500000000000000000000000000000000000000000000000000000000000b7e2400000000000000000000000012f7b909669766160000000a0000a86a00010001000000000000000000000000000000000000000000000000000000000000d5010000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e000000000000000000000000a7f5a210c92a82d2a05e0072d8dccd33acd0d092000000000000000000000000a7f5a210c92a82d2a05e0072d8dccd33acd0d0920000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000413e91a0e0323c8e14e3168af4a0e75281628a3826889341d86a81bdb3f808f3a53d92fb8c63975c5231bb70a8a8832128dd794f873c0ecf3ab65a66b29e3f3a8d1c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001102edd8e903c11dc26beb9396cfd53bebb35449d881efb4fe3a7af6a80c2509c",
      "gasLimit": "0x18ecbf",
      "gasPrice": "0x4211582",
      "nonce": "0x2c3",
      "r": "0x8da3a885f18ffac68dffeafa5b4bb1f9ece8a08c4f63d21a9006ba58d77c22a",
      "s": "0x5e420aa52d7069795a17347202b9ec339cc5e7e6ee8e3586154af8de91de9703",
      "to": "0x4b88f06b6b1b58c675243932d35f674972194fd7",
      "type": "0x0",
      "v": "0x38",
      "value": "0x0",
    },
    {
      "data": "0x6b634a62000000000000000000000000000000000000000000000000000000000000008900000000000000000000000000000000000000000000000000470de4df820000",
      "gasLimit": "0x4f845",
      "gasPrice": "0x3a3dab0",
      "nonce": "0x3f",
      "r": "0x87a0d10e09dd4e7797f5687d805474318ea23a27679a580e1221884a883c9fb2",
      "s": "0x13a2df9790ba20634c99a75450a431dd0d37c4297304d86fb1b214e64ac19ff1",
      "to": "0xc110e7faa95680c79937ccaca3d1cab7902be25e",
      "type": "0x0",
      "v": "0x38",
      "value": "0x47b656f086380e",
    },
    {
      "data": "0x6a627842000000000000000000000000f278ac8e97dd418a3ce13307fa1b44ff87a18f7c",
      "gasLimit": "0x411f0",
      "gasPrice": "0x3a3dab0",
      "nonce": "0x62",
      "r": "0xc81e11077b2dd9c09097dd666b287af15a5390e83ba63a6e338d37de97ea576",
      "s": "0xd86fbf472782f13d6dc06f41bc3fe3a07efa8ec1364b1e657f1991aa1649fa7",
      "to": "0x3ddc189d48a792d2c6262d20aa0f9f78e88a9d47",
      "type": "0x0",
      "v": "0x38",
      "value": "0x0",
    },
    {
      "accessList": [],
      "chainId": "0xa",
      "data": "0x82ad56cb000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000007a00000000000000000000000004efcde7fb24411e837c50b8ea05352502f01f1af0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003046a761202000000000000000000000000b5fbfeba9848664fd1a49dc2a250d9b5d1294f2a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000104414bf389000000000000000000000000dc6ff44d5d932cbd77b52e5612ba0529dc6226f10000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c3160700000000000000000000000000000000000000000000000000000000000027100000000000000000000000004efcde7fb24411e837c50b8ea05352502f01f1af00000000000000000000000000000000000000000000000000000000669622830000000000000000000000000000000000000000000000002991c8caada04000000000000000000000000000000000000000000000000000000000000063291600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000411df3e98a6b3ecdf385fc0bcae47febd690a8436bff797c6b9335fbdcce349d5d309b66abb8c03a40db13167a712ebe536cf23570739404459d231ddd4e7d74421b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067f8da006f394c3824e9bca883f09c6005440a570000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003046a761202000000000000000000000000b5fbfeba9848664fd1a49dc2a250d9b5d1294f2abf389000000000000000000000000dc6ff44d5d932cbd77b52e5612ba0529dc6226f10000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000000000000000000000000000000000000000271000000000000000000000000067f8da006f394c3824e9bca883f09c6005440a57000000000000000000000000000000000000000000000000000000006696228800000000000000000000000000000000000000000000000029a2241af62c0238000000000000000000000000000000000000000000000000000000000063501a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410c54b3cd2b6dc7dbb77ed7de54572a1de334efc065be234a8f08c16ea167bc96215eb44acb65aaee4bd6f5eaf6cb8c46bd404bd69088611f79c18aad0820e9a51b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000787629968d1648dfd0444606b1a84c0eeca7030f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000003046a761202000000000000000000000000b5fbfeba9848664fd1a49dc2a250d9b5d1294f2abf3890000000000000000000000007f5c764cbc14f9669b88837ca1490cca17c31607000000000000000000000000dc6ff44d5d932cbd77b52e5612ba0529dc6226f10000000000000000000000000000000000000000000000000000000000002710000000000000000000000000787629968d1648dfd0444606b1a84c0eeca7030f00000000000000000000000000000000000000000000000000000000669622960000000000000000000000000000000000000000000000000000000000bacd620000000000000000000000000000000000000000000000004b397d7b295980a200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000415849f9748e7bd8263ad202ae024e94fc849f8b9aaadae27f4e7e8f656bb4e06710abc5965153f67982797bdaf26ba334eeb6365a6c7088cab96d5ac6855248821c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": "0x5f827",
      "maxFeePerGas": "0x722d84e",
      "maxPriorityFeePerGas": "0x20ee82",
      "nonce": "0x1a4ac5",
      "r": "0x9b130c1f61670cd6ccd082e9a6dc93c3c5f78a23d4323bd897d72d2adcb9bf00",
      "s": "0x311e81c95533ba8d38c9e47abf77ce887f23d95cc8d0e116ab9dc993307e0235",
      "to": "0x087000a300de7200382b55d40045000000e5d60e",
      "type": "0x2",
      "v": "0x0",
      "value": "0x0",
    },
    {
      "accessList": [],
      "chainId": "0xa",
      "data": "0x82ad56cb000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000920000000000000000000000000532ab2a2bc7a3746464d60c90a2d26f70727f37d0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002446a761202000000000000000000000000dc6ff44d5d932cbd77b52e5612ba0529dc6226fc00000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000324ca859f997e8612de7c5948215550b098e867b000000000000000000000000000000000000000000000000299d3a462e729000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041f6b9727178f530bfbe564ba461ac20770ba83d8bf7b22d1a16c4e60a07f30b1443fb9c845d9c6b40940e3f8f6c14adb28863b633f8d6cd027cad196f2146e1561b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000809b8e0f1f1876b6e6da10dc4ea82e9dd7c21380000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002446a761202000000000000000000000000dc6ff44d5d932cbd77b52e5612ba0529dc6226fc00000000000000000000000000000000000000000000000000000000000000044a9059cbb00000000000000000000000011f8e194ee1b8a6ba79a3b77ba4f31295746c5f800000000000000000000000000000000000000000000000029a2241af62c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412617a79bcb4fc75ce33df6563b0f3f5f116b1064da7a2a7d7b511536d1700e971829797a1a4750947f20b228beacf19fae1531b483d67d768d53eb648dd53a901c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a1e01bd200d00025e9fcb23b2d9ae784f02add750000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002446a761202000000000000000000000000dc6ff44d5d932cbd77b52e5612ba0529dc6226fc00000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000009a308246587cdaafda5d970124886bf21c08710100000000000000000000000000000000000000000000000029a2241af62c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041e6e02f18eb96738607fd50058b385fda31106cee07167227c78f5b6839350b105e3d413e199ee5ef3cfe48a2fed4b7b8a62f2d74bac98c2144ac6eb82a21a4e61b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c63d60a3d3390ba76e9a6cc7e2708dc7ce7d848e0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002446a761202000000000000000000000000dc6ff44d5d932cbd77b52e5612ba0529dc6226f10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000390702ccdcd40854066ccb811b3d6836f8f135d6000000000000000000000000000000000000000000000000298eb09f3006d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004192644ddc82d9fb8791a6a4e90e213e6279caf285b7acfef850dcc55da2e8171d603571f58c9a07eb7a588b8bd53e26354cc9d380ebcbb0f91c63e9323e1da97d1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": "0x4e200",
      "maxFeePerGas": "0x722d84e",
      "maxPriorityFeePerGas": "0x20ee82",
      "nonce": "0x186534",
      "r": "0xa4767e856ff16aa5f0d3b17e33501d90ecc6aa77ea1ef9f3ace43b9485c150d9",
      "s": "0x25a3efef9aea2128660733fb09cfa2be59b1a52b342d872dc5b86778a28dfa65",
      "to": "0x087000a300de7200382b55d40045000000e5d60e",
      "type": "0x2",
      "v": "0x1",
      "value": "0x0",
    },
    {
      "accessList": [],
      "chainId": "0xa",
      "data": "0x",
      "gasLimit": "0x5208",
      "maxFeePerGas": "0x4469cc4",
      "maxPriorityFeePerGas": "0xf4240",
      "nonce": "0x1",
      "r": "0x5710214aa3bd247d9c724fd8d67cbfa57914bd870b9bda639636437e5013235e",
      "s": "0x6fab2f119adf18d8566e6236694a59f6487275a35a9f06a79eb16bf7ae06894d",
      "to": "0x41e1f6ce700c928462bb9ef77922ac5538e674d2",
      "type": "0x2",
      "v": "0x0",
      "value": "0x1e5a100d17ae7",
    },
    {
      "accessList": [],
      "chainId": "0xa",
      "data": "0xd985f1e8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000aa000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c69df6aa1dac02783f02b3b791301e3d020687900000000000000000000000024145e6e3d6fc80fad063d49609f27ccd1079fbf0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000006a000000000000000000000000000000000000000000000000000000000000006247189fd3fe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000005bd504e415501000000047e010000000410002e8a77a92a8d4759f21d0ce522c1befea655e7f30470cba321730dc08b9de0cf1a6f5068d0585cce5bb445bfbcf8fae0c5d7779624088c7715c27c2ab598ef6900014516bd0494243499ae14ffec424d5f1bea60d39350d66e5ec56037e67b78b9b5371d848903bf50a1475e15a564b188494e21f3e0c6cabb4aee5454a14c95feb60102c8aa6116cc14b26dfb2e8dbb59c0123e98265b967f65ded4768a383c0debbe6f1b51611d16eb9dcae1033cc689c3595e1047387c651f8f8a53052d3a02a7f8e90103664874c969e5b47239e51a8e4c5823b52e06d496e0bc65c80f5b3752e1e5b5193ffeac7ed41d9a541ee92e6515ec397293bf026eb5036f18a03d2a989143d851010417c18c700badb4417ad563369fe778b55049e1b9e3f4574d5cee2c11407263890a02a6df00bf0bfeecb3e1ea5561c02fbbe2bf3d343c99876d3e7041a1cdb16f000625e84116ab38d4314fc6b84619b0d79654c81bd03013121706672e0910c1766b0e9e3533661c93b2219ddf2ce211844d61218c829f0a4a2920b878673053010b0008f14f5f7aed639900b3feecc04173e67876dcf8f81101fd31cc10c43c45e9a145274e748b99554e6e3fcb178740b58b92425dcc4def5cc924ad54864750b9082e0109397bcb9bb168f735becce96a559ef1ae2c892dfa91a1fb9add124f8c8db74142578138c911dcb35cd6b2df2d4765befcfd415c5080e9e0d93cc18187904ba31c010adbf91297e042311d26812124ca1414c99f537f287471f59ee902afb95d925a8c4fcb2c9daedf4ecc752fe9210934d9c80e379daf8147f2d7516a14ecb14abf33010be618f0c8b56e9dee43c3b359349c24137db69892304da112e8f4c9eedafd8360720a317d9533b53e37a00175faa55600db2c048e86d70281f851d6bf91326d9b010c117067815eae451faedd647d6484eb9691e76e12e981d32c09f6c4ba5c960e9f577d32b2eaa275c53e179625fb6e5ded5af57e47e4fe34469231165f812a67c9010d3ed638a56e2d4419fec02a7e19afb4d0d64024aafc7417eb3bc031d9a6a6945b2d2fd99506df5d609f11289e19e6dbe86eb3ca695fe38626a54f666e811308d4010e23850faf7a2c7cd003693d7c18374566515fbeb55d039b1b07aadc8c6fe8947639e0e1978196517194c1ed757764610961fb2611a303ed7c51131d88f324fd5b000f379d4689432fd80963bc3e2cbdecac532ac15bce44e606927d57fff86814a8977f86131da32090f703662c33bb2d42d626ba00db2a8c66d0f3955ba3764f833800106c833385e415ee9b4743e8d07423f436b1e98e0402a68e8713c07ecd46a001080b754e7cb01b72fa3f092acc770b3a96b3dbda80f006c9a6d07e0058a9a7bb230012554d5818433584420d8d72a9b484d0e6af8a1829f63f4f51b4ed615ffd8ab0af684846e0b3dec7ac9eee30ec43b1eddcbabc3ff221b9beb179556a45054d63ad006696149f00000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa7100000000041d83440141555756000000000009280b3c00002710094b15b8d480b6f38ab61dbd493999935147fecc01005500e62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43000005cdda9c49f700000000e8b0f137fffffff8000000006696149f000000006696149e000005d463aa22a00000000112677e340be5d022dd6391d7bd1542783198c78bd7815a26bcc7edec95472d3795bd7521ecb750ab7f6e67053d2caeae9e249846dc27ebd0c7f6d50d90e496567d5a46c231e9b6c44c5cb1f79775f5fde06b4caba0583d845367dbda4942b424c6c15c8694327ec9475304b54edb8429b18d5d44785d6eebdc83b536138b3a0a54eff892491883ce411c1a661dab60a2def950dcae422eb12c3ece9220e9b856976c9c10f7372c98005145ed7b004430e8a19f827336e5246ef34293b964e60258d668272ad3e44914b9da8a26926af424e63cebe4ff1abb26d548e785a37419040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e4e1e4e98d00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000002a7f717d72a3cc890000000000000000000000001589d139e1d8578a770aa12122f50056656fa5d90000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a7f717d72a3cc89000000000000000000000000000000000000000000000da9f97e1de4e9f4e4eb00000000000000000000000000000000000000000000000000000000669614f600000000000000000000000000000000000000000000000000000000000000010000000000000000000000005f052208079bf1e80db777fcd7468e0263d22733000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030bd8eee386242db9786e9a51b9fcc8b00000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000047029bcbe869ff3e69f6bb080fa553c40b406d630ea82aa41431a95d33e5a582f9822d4433fbd271957a6f6182c9a8057a581db4583247b4dfa77d355e2043ec71fd4a49725b671c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": "0x989680",
      "maxFeePerGas": "0x12a05f200",
      "maxPriorityFeePerGas": "0xf4240",
      "nonce": "0x4bc8",
      "r": "0xb5c9fc59bf8236c4ba8e800479273b9933308420984f54bc5e2d0e4089b6b15",
      "s": "0x59b2266feedd8830d13df1c6e6bab5492b1f49f4e3611b814fafb807b7f5cdec",
      "to": "0x00000000002fd5aeb385d324b580fca7c83823a0",
      "type": "0x2",
      "v": "0x0",
      "value": "0x0",
    },
    {
      "accessList": [],
      "chainId": "0xa",
      "data": "0x",
      "gasLimit": "0x5208",
      "maxFeePerGas": "0x4ebe9b3",
      "maxPriorityFeePerGas": "0xf1da2",
      "nonce": "0x8",
      "r": "0x6935aa9caba5aa247eccf38f3a986e283d1b9c4e193833c562ed076dcee24bcd",
      "s": "0x15aa87e52abe3fb6006d496d4290f54df0219f01470392bba766f08debe3f484",
      "to": "0xdd414ea28a671adc639edf7a9e94acd5e0ee7917",
      "type": "0x2",
      "v": "0x0",
      "value": "0x5610ef320e1527",
    },
    {
      "accessList": [],
      "chainId": "0xa",
      "data": "0x9560c2793078394445362d3132443346302d31373231313131363639393731000000000000000000000000000000000045dd5ec28dbf5296dffae428d7f484ab02ee7bad00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000180000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044364c5bb000000000000000000000000000000000000000000000000000000000000000000c4000000000000000000000000000000000000000000000000000000000000000779627269646765000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000149de651c3918c148ec1e0a4302bb94229c512d3f00000000000000000000000000000000000000000000000007a6e01880693093abaccf442fcbed9e0435f10300000000000000000000000007a6e01880693093abaccf442fcbed9e0435f1030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006642aac3cac000000000000000000000000f2ad856070b035a99e0f801bd4a68b22afb7dc48000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000009de651c3918c148ec1e0a4302bb94229c512d3f000000000000000000000000000000000000000000000000000044364c5bb000000000000000000000000000000000000000000000000000000000000003e2d46000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000c4000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000014aaf7d333f09ff0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000b7cdc127881e88e4c47d5bdc63fd22a21fbff85f00000000000000000000000000000000000000000000000000000000000004a403b87e5f00000000000000000000000000000000000000000000000000000000000187950000000000000000000000007a6e01880693093abaccf442fcbed9e0435f1030000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e5800000000000000000000000000000000000000000000000000044364c5bb000000000000000000000000000000000000000000000000000000000000003e2d460000000000000000000000000000000000000000000000000000000066962282000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000480000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000044364c5bb0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000042000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001000000000000000000000000443ef018e182d409bcf7f794d409bcea4c73c2c70000000000000000000000000000000000000000000000000000000000000001000000000000000000000000443ef018e182d409bcf7f794d409bcea4c73c2c70000000000000000000000000000000000000000000000000000000000000001000000000000000000002710c858a329bf053be78d6239c4a4343b8fbd21472b0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000420000000000000000000000000000000000000600000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e5800000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": "0x56ee4",
      "maxFeePerGas": "0xac79748",
      "maxPriorityFeePerGas": "0x9cf8d",
      "nonce": "0x16f",
      "r": "0x293b648a28e9075f76d9eb97656003261641f49c11a3691e9b4eb2314713d548",
      "s": "0x69e4cac19c6f7fb3fb89d3090fbf3abb25c5947ae2eb660b1947f97b14d5353b",
      "to": "0xf708e11a7c94abde8f6217b13e6fe39c8b9cc0a6",
      "type": "0x2",
      "v": "0x1",
      "value": "0x44364c5bb0000",
    },
    {
      "accessList": [],
      "chainId": "0xa",
      "data": "0xa005d3d20000000000000000000000009d380f3e9ef0868e3ecc6fcd99e0cb32938dd302000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000669f4f1c00000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000020ebcd66ab65c3b38e9df6620a1c460269427b0d9466fa691555d270b0dade69ee000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004874000000000000000000000000e68ca824c376ea70c439fd7f3c978772903e7f9d000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000669f4f1c00000000000000000000000000000000000000000000000000000000000000415400a1506e19ac5f3d259ff0686f2ce4679c9eea518e21db9f1c549658a88a0b45791924e985abf693ff3ba94c4c083242710e51c01c8eb83023306782e275b81b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000415987c7d7234e39793b255fa7daa2359112581db936134e9b5a00c69f1f501da97277d4ae255f88f6a48809e1b1c3541d3709eb21dd4011ce278dfb1a64136da51b00000000000000000000000000000000000000000000000000000000000000",
      "gasLimit": "0x3d090",
      "maxFeePerGas": "0x386cbf4",
      "maxPriorityFeePerGas": "0x386cbf4",
      "nonce": "0xbf6",
      "r": "0xb11a3100bdc349c9da0971301602c311308628a6094c6ad78edc96e0f854d583",
      "s": "0x47ee3133e6ee4577a3c81ba145920f669819a10b8aa4a92af1a53955805474b6",
      "to": "0x00000000fc56947c7e7183f8ca4b62398caadf0b",
      "type": "0x2",
      "v": "0x1",
      "value": "0x0",
    },
  ],
  "uncleHeaders": [],
  "withdrawals": [],
}
`;

exports[`getBlock > should throw an error if attempting to fetch a block newer than the forked block 1`] = `
[InvalidBlockError: The fetched block 122750001 has a higher block height than the forked block 122750000 but less than the latest block 122750000
This could indicate a bug in tevm as it implies a block is missing if the internal chain tried fetching it from rpc
Did you manually delete the block? If not consider opening an issue

Docs: https://tevm.sh/reference/tevm/errors/classes/invalidblockerror/
Version: 1.1.0.next-73]
`;

exports[`getBlock > should throw an error if the block does not exist 1`] = `
[UnknownBlock: Block number 69 does not exist

Docs: https://tevm.sh/reference/tevm/errors/classes/unknownblockerror/
Version: 1.1.0.next-73]
`;

exports[`getBlock > should throw an error if the block does not exist 2`] = `
[UnknownBlock: Block with hash 0x6e2b61c3625a559681df81f5d1140d26d4883537aa500a0e4cdad312032cc2e1 does not exist

Docs: https://tevm.sh/reference/tevm/errors/classes/unknownblockerror/
Version: 1.1.0.next-73]
`;

exports[`getBlock > should throw in a completely invalid blockTag format is passed 1`] = `
[InvalidBlockError: Unknown blockid wtf

Docs: https://tevm.sh/reference/tevm/errors/classes/invalidblockerror/
Version: 1.1.0.next-73]
`;

exports[`getBlock should fetch and cache the block from rpc if it does not exist 1`] = `
_Block {
  "cache": {},
  "common": {
    "blockExplorers": {
      "default": {
        "apiUrl": "https://api-optimistic.etherscan.io/api",
        "name": "Optimism Explorer",
        "url": "https://optimistic.etherscan.io",
      },
    },
    "contracts": {
      "disputeGameFactory": {
        "1": {
          "address": "0xe5965Ab5962eDc7477C8520243A95517CD252fA9",
        },
      },
      "gasPriceOracle": {
        "address": "0x420000000000000000000000000000000000000F",
      },
      "l1Block": {
        "address": "0x4200000000000000000000000000000000000015",
      },
      "l1StandardBridge": {
        "1": {
          "address": "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",
        },
      },
      "l2CrossDomainMessenger": {
        "address": "0x4200000000000000000000000000000000000007",
      },
      "l2Erc721Bridge": {
        "address": "0x4200000000000000000000000000000000000014",
      },
      "l2OutputOracle": {
        "1": {
          "address": "0xdfe97868233d1aa22e815a266982f2cf17685a27",
        },
      },
      "l2StandardBridge": {
        "address": "0x4200000000000000000000000000000000000010",
      },
      "l2ToL1MessagePasser": {
        "address": "0x4200000000000000000000000000000000000016",
      },
      "multicall3": {
        "address": "0xca11bde05977b3631167028862be2a173976ca11",
        "blockCreated": 4286263,
      },
      "portal": {
        "1": {
          "address": "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
        },
      },
    },
    "copy": [Function],
    "ethjsCommon": Common {
      "DEFAULT_HARDFORK": "shanghai",
      "HARDFORK_CHANGES": [
        [
          "chainstart",
          {
            "comment": "Start of the Ethereum main chain",
            "gasConfig": {
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 2,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
            },
            "gasPrices": {
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 20,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 40,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 40,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 10,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 20,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 20,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 0,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 24000,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 50,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 68,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "name": "chainstart",
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 0,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "the amount a miner get rewarded for mining a block",
                "v": 5000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "status": "final",
            "url": "",
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
        ],
        [
          "homestead",
          {
            "comment": "Homestead hardfork with protocol and network changes",
            "gasPrices": {
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 40,
              },
            },
            "name": "homestead",
            "status": "final",
            "url": "https://eips.ethereum.org/EIPS/eip-606",
          },
        ],
        [
          "dao",
          {
            "comment": "DAO rescue hardfork",
            "name": "dao",
            "status": "final",
            "url": "https://eips.ethereum.org/EIPS/eip-779",
          },
        ],
        [
          "tangerineWhistle",
          {
            "comment": "Hardfork with gas cost changes for IO-heavy operations",
            "gasPrices": {
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 400,
              },
              "call": {
                "d": "Once per CALL operation & message call transaction",
                "v": 700,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 700,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 700,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 700,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 700,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "sload": {
                "d": "Once per SLOAD operation",
                "v": 200,
              },
            },
            "name": "tangerineWhistle",
            "status": "final",
            "url": "https://eips.ethereum.org/EIPS/eip-608",
          },
        ],
        [
          "spuriousDragon",
          {
            "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
            "gasPrices": {
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
            },
            "name": "spuriousDragon",
            "status": "final",
            "url": "https://eips.ethereum.org/EIPS/eip-607",
            "vm": {
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
            },
          },
        ],
        [
          "byzantium",
          {
            "comment": "Hardfork with new precompiles, instructions and other protocol changes",
            "gasPrices": {
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 500,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 40000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 100000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 80000,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 20,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 700,
              },
            },
            "name": "byzantium",
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 3000000,
              },
              "minerReward": {
                "d": "the amount a miner get rewarded for mining a block",
                "v": 3000000000000000000n,
              },
            },
            "status": "final",
            "url": "https://eips.ethereum.org/EIPS/eip-609",
          },
        ],
        [
          "constantinople",
          {
            "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
            "gasPrices": {
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 400,
              },
              "netSstoreCleanGas": {
                "d": "Once per SSTORE operation from clean non-zero",
                "v": 5000,
              },
              "netSstoreClearRefund": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 15000,
              },
              "netSstoreDirtyGas": {
                "d": "Once per SSTORE operation from dirty",
                "v": 200,
              },
              "netSstoreInitGas": {
                "d": "Once per SSTORE operation from clean zero",
                "v": 20000,
              },
              "netSstoreNoopGas": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 200,
              },
              "netSstoreResetClearRefund": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19800,
              },
              "netSstoreResetRefund": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4800,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
            },
            "name": "constantinople",
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 5000000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
            },
            "status": "final",
            "url": "https://eips.ethereum.org/EIPS/eip-1013",
          },
        ],
        [
          "petersburg",
          {
            "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
            "gasPrices": {
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
            },
            "name": "petersburg",
            "status": "final",
            "url": "https://eips.ethereum.org/EIPS/eip-1716",
          },
        ],
        [
          "istanbul",
          {
            "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
            "gasConfig": {},
            "gasPrices": {
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 700,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 700,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 800,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 5000,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4200,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 15000,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 800,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19200,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 800,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
            },
            "name": "istanbul",
            "status": "final",
            "url": "https://eips.ethereum.org/EIPS/eip-1679",
          },
        ],
        [
          "muirGlacier",
          {
            "comment": "HF to delay the difficulty bomb",
            "name": "muirGlacier",
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 9000000,
              },
            },
            "status": "final",
            "url": "https://eips.ethereum.org/EIPS/eip-2384",
          },
        ],
        [
          "berlin",
          {
            "comment": "HF targeted for July 2020 following the Muir Glacier HF",
            "eips": [
              2565,
              2929,
              2718,
              2930,
            ],
            "name": "berlin",
            "status": "final",
            "url": "https://eips.ethereum.org/EIPS/eip-2070",
          },
        ],
        [
          "london",
          {
            "comment": "HF targeted for July 2021 following the Berlin fork",
            "eips": [
              1559,
              3198,
              3529,
              3541,
            ],
            "name": "london",
            "status": "final",
            "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
          },
        ],
        [
          "arrowGlacier",
          {
            "comment": "HF to delay the difficulty bomb",
            "eips": [
              4345,
            ],
            "name": "arrowGlacier",
            "status": "final",
            "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
          },
        ],
        [
          "grayGlacier",
          {
            "comment": "Delaying the difficulty bomb to Mid September 2022",
            "eips": [
              5133,
            ],
            "name": "grayGlacier",
            "status": "final",
            "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
          },
        ],
        [
          "paris",
          {
            "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
            "consensus": {
              "algorithm": "casper",
              "casper": {},
              "type": "pos",
            },
            "eips": [
              3675,
              4399,
            ],
            "name": "paris",
            "status": "final",
            "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
          },
        ],
        [
          "mergeForkIdTransition",
          {
            "comment": "Pre-merge hardfork to fork off non-upgraded clients",
            "eips": [],
            "name": "mergeForkIdTransition",
            "status": "final",
            "url": "https://eips.ethereum.org/EIPS/eip-3675",
          },
        ],
        [
          "shanghai",
          {
            "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
            "eips": [
              3651,
              3855,
              3860,
              4895,
            ],
            "name": "shanghai",
            "status": "final",
            "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
          },
        ],
        [
          "cancun",
          {
            "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
            "eips": [
              1153,
              4844,
              4788,
              5656,
              6780,
              7516,
            ],
            "name": "cancun",
            "status": "final",
            "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
          },
        ],
      ],
      "_activatedEIPsCache": [
        2565,
        2929,
        2718,
        2930,
        1559,
        3198,
        3529,
        3541,
        4345,
        5133,
        3675,
        4399,
        3651,
        3855,
        3860,
        4895,
        1153,
        4844,
        4788,
        5656,
        6780,
        7516,
        1559,
        4895,
        4844,
        4788,
      ],
      "_chainParams": {
        "bootstrapNodes": [
          {
            "comment": "bootnode-aws-ap-southeast-1-001",
            "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
            "ip": "18.138.108.67",
            "location": "ap-southeast-1-001",
            "port": 30303,
          },
          {
            "comment": "bootnode-aws-us-east-1-001",
            "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
            "ip": "3.209.45.79",
            "location": "us-east-1-001",
            "port": 30303,
          },
          {
            "comment": "bootnode-hetzner-hel",
            "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
            "ip": "65.108.70.101",
            "location": "eu-west-1-001",
            "port": 30303,
          },
          {
            "comment": "bootnode-hetzner-fsn",
            "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
            "ip": "157.90.35.166",
            "location": "eu-central-1-001",
            "port": 30303,
          },
        ],
        "chainId": 10,
        "comment": "The Ethereum main chain",
        "consensus": {
          "algorithm": "ethash",
          "ethash": {},
          "type": "pow",
        },
        "defaultHardfork": "shanghai",
        "dnsNetworks": [
          "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
        ],
        "genesis": {
          "difficulty": 17179869184,
          "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
          "gasLimit": 5000,
          "nonce": "0x0000000000000042",
        },
        "hardforks": [
          {
            "block": 0,
            "forkHash": "0xfc64ec04",
            "name": "chainstart",
          },
          {
            "block": 1150000,
            "forkHash": "0x97c2c34c",
            "name": "homestead",
          },
          {
            "block": 1920000,
            "forkHash": "0x91d1f948",
            "name": "dao",
          },
          {
            "block": 2463000,
            "forkHash": "0x7a64da13",
            "name": "tangerineWhistle",
          },
          {
            "block": 2675000,
            "forkHash": "0x3edd5b10",
            "name": "spuriousDragon",
          },
          {
            "block": 4370000,
            "forkHash": "0xa00bc324",
            "name": "byzantium",
          },
          {
            "block": 7280000,
            "forkHash": "0x668db0af",
            "name": "constantinople",
          },
          {
            "block": 7280000,
            "forkHash": "0x668db0af",
            "name": "petersburg",
          },
          {
            "block": 9069000,
            "forkHash": "0x879d6e30",
            "name": "istanbul",
          },
          {
            "block": 9200000,
            "forkHash": "0xe029e991",
            "name": "muirGlacier",
          },
          {
            "block": 12244000,
            "forkHash": "0x0eb440f6",
            "name": "berlin",
          },
          {
            "block": 12965000,
            "forkHash": "0xb715077d",
            "name": "london",
          },
          {
            "block": 13773000,
            "forkHash": "0x20c327fc",
            "name": "arrowGlacier",
          },
          {
            "block": 15050000,
            "forkHash": "0xf0afd0e3",
            "name": "grayGlacier",
          },
          {
            "block": 15537394,
            "forkHash": "0xf0afd0e3",
            "name": "paris",
            "ttd": "58750000000000000000000",
          },
          {
            "block": null,
            "forkHash": null,
            "name": "mergeForkIdTransition",
          },
          {
            "block": null,
            "forkHash": "0xdce96c2d",
            "name": "shanghai",
            "timestamp": "1681338455",
          },
          {
            "block": null,
            "forkHash": "0x9f3d2254",
            "name": "cancun",
            "timestamp": "1710338135",
          },
        ],
        "name": "TevmCustom",
        "networkId": 10,
        "url": "https://ethstats.net/",
      },
      "_customChains": [],
      "_eips": [
        1559,
        4895,
        4844,
        4788,
      ],
      "_hardfork": "cancun",
      "_paramsCache": {
        "gasConfig": {
          "baseFeeMaxChangeDenominator": {
            "d": "Maximum base fee change denominator",
            "v": 8,
          },
          "blobGasPerBlob": {
            "d": "The base fee for blob gas per blob",
            "v": 131072,
          },
          "blobGasPriceUpdateFraction": {
            "d": "The denominator used in the exponential when calculating a blob gas price",
            "v": 3338477,
          },
          "elasticityMultiplier": {
            "d": "Maximum block gas target elasticity",
            "v": 2,
          },
          "gasLimitBoundDivisor": {
            "d": "The bound divisor of the gas limit, used in update calculations",
            "v": 1024,
          },
          "initialBaseFee": {
            "d": "Initial base fee on first EIP1559 block",
            "v": 1000000000,
          },
          "maxRefundQuotient": {
            "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
            "v": 5,
          },
          "maxblobGasPerBlock": {
            "d": "The max blob gas allowable per block",
            "v": 786432,
          },
          "minGasLimit": {
            "d": "Minimum the gas limit may ever be",
            "v": 5000,
          },
          "targetBlobGasPerBlock": {
            "d": "The target blob gas consumed per block",
            "v": 393216,
          },
        },
        "gasPrices": {
          "accessListAddressCost": {
            "d": "Gas cost per storage key in an Access List transaction",
            "v": 2400,
          },
          "accessListStorageKeyCost": {
            "d": "Gas cost per storage key in an Access List transaction",
            "v": 1900,
          },
          "add": {
            "d": "Base fee of the ADD opcode",
            "v": 3,
          },
          "addmod": {
            "d": "Base fee of the ADDMOD opcode",
            "v": 8,
          },
          "address": {
            "d": "Base fee of the ADDRESS opcode",
            "v": 2,
          },
          "and": {
            "d": "Base fee of the AND opcode",
            "v": 3,
          },
          "balance": {
            "d": "Base fee of the BALANCE opcode",
            "v": 0,
          },
          "base": {
            "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
            "v": 2,
          },
          "basefee": {
            "d": "Gas cost of the BASEFEE opcode",
            "v": 2,
          },
          "blake2Round": {
            "d": "Gas cost per round for the Blake2 F precompile",
            "v": 1,
          },
          "blobbasefee": {
            "d": "Gas cost of the BLOBBASEFEE opcode",
            "v": 2,
          },
          "blobhash": {
            "d": "Base fee of the BLOBHASH opcode",
            "v": 3,
          },
          "blockhash": {
            "d": "Base fee of the BLOCKHASH opcode",
            "v": 20,
          },
          "byte": {
            "d": "Base fee of the BYTE opcode",
            "v": 3,
          },
          "call": {
            "d": "Base fee of the CALL opcode",
            "v": 0,
          },
          "callNewAccount": {
            "d": "Paid for CALL when the destination address didn't exist prior",
            "v": 25000,
          },
          "callStipend": {
            "d": "Free gas given at beginning of call",
            "v": 2300,
          },
          "callValueTransfer": {
            "d": "Paid for CALL when the value transfor is non-zero",
            "v": 9000,
          },
          "callcode": {
            "d": "Base fee of the CALLCODE opcode",
            "v": 0,
          },
          "calldatacopy": {
            "d": "Base fee of the CALLDATACOPY opcode",
            "v": 3,
          },
          "calldataload": {
            "d": "Base fee of the CALLDATALOAD opcode",
            "v": 3,
          },
          "calldatasize": {
            "d": "Base fee of the CALLDATASIZE opcode",
            "v": 2,
          },
          "caller": {
            "d": "Base fee of the CALLER opcode",
            "v": 2,
          },
          "callvalue": {
            "d": "Base fee of the CALLVALUE opcode",
            "v": 2,
          },
          "chainid": {
            "d": "Base fee of the CHAINID opcode",
            "v": 2,
          },
          "codecopy": {
            "d": "Base fee of the CODECOPY opcode",
            "v": 3,
          },
          "codesize": {
            "d": "Base fee of the CODESIZE opcode",
            "v": 2,
          },
          "coinbase": {
            "d": "Base fee of the COINBASE opcode",
            "v": 2,
          },
          "coldaccountaccess": {
            "d": "Gas cost of the first read of a given address (per transaction)",
            "v": 2600,
          },
          "coldsload": {
            "d": "Gas cost of the first read of storage from a given location (per transaction)",
            "v": 2100,
          },
          "copy": {
            "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
            "v": 3,
          },
          "create": {
            "d": "Base fee of the CREATE opcode",
            "v": 32000,
          },
          "create2": {
            "d": "Base fee of the CREATE2 opcode",
            "v": 32000,
          },
          "createData": {
            "d": "",
            "v": 200,
          },
          "delegatecall": {
            "d": "Base fee of the DELEGATECALL opcode",
            "v": 0,
          },
          "difficulty": {
            "d": "Base fee of the DIFFICULTY opcode",
            "v": 2,
          },
          "div": {
            "d": "Base fee of the DIV opcode",
            "v": 5,
          },
          "dup": {
            "d": "Base fee of the DUP opcode",
            "v": 3,
          },
          "ecAdd": {
            "d": "Gas costs for curve addition precompile",
            "v": 150,
          },
          "ecMul": {
            "d": "Gas costs for curve multiplication precompile",
            "v": 6000,
          },
          "ecPairing": {
            "d": "Base gas costs for curve pairing precompile",
            "v": 45000,
          },
          "ecPairingWord": {
            "d": "Gas costs regarding curve pairing precompile input length",
            "v": 34000,
          },
          "ecRecover": {
            "d": "",
            "v": 3000,
          },
          "eq": {
            "d": "Base fee of the EQ opcode",
            "v": 3,
          },
          "exp": {
            "d": "Base fee of the EXP opcode",
            "v": 10,
          },
          "expByte": {
            "d": "Times ceil(log256(exponent)) for the EXP instruction",
            "v": 50,
          },
          "extcodecopy": {
            "d": "Base fee of the EXTCODECOPY opcode",
            "v": 0,
          },
          "extcodehash": {
            "d": "Base fee of the EXTCODEHASH opcode",
            "v": 0,
          },
          "extcodesize": {
            "d": "Base fee of the EXTCODESIZE opcode",
            "v": 0,
          },
          "gas": {
            "d": "Base fee of the GAS opcode",
            "v": 2,
          },
          "gaslimit": {
            "d": "Base fee of the GASLIMIT opcode",
            "v": 2,
          },
          "gasprice": {
            "d": "Base fee of the GASPRICE opcode",
            "v": 2,
          },
          "gt": {
            "d": "Base fee of the GT opcode",
            "v": 3,
          },
          "identity": {
            "d": "",
            "v": 15,
          },
          "identityWord": {
            "d": "",
            "v": 3,
          },
          "initCodeWordCost": {
            "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
            "v": 2,
          },
          "invalid": {
            "d": "Base fee of the INVALID opcode",
            "v": 0,
          },
          "iszero": {
            "d": "Base fee of the ISZERO opcode",
            "v": 3,
          },
          "jump": {
            "d": "Base fee of the JUMP opcode",
            "v": 8,
          },
          "jumpdest": {
            "d": "Base fee of the JUMPDEST opcode",
            "v": 1,
          },
          "jumpi": {
            "d": "Base fee of the JUMPI opcode",
            "v": 10,
          },
          "keccak256": {
            "d": "Base fee of the SHA3 opcode",
            "v": 30,
          },
          "keccak256Word": {
            "d": "Once per word of the SHA3 operation's data",
            "v": 6,
          },
          "kzgPointEvaluationGasPrecompilePrice": {
            "d": "The fee associated with the point evaluation precompile",
            "v": 50000,
          },
          "log": {
            "d": "Base fee of the LOG opcode",
            "v": 375,
          },
          "logData": {
            "d": "Per byte in a LOG* operation's data",
            "v": 8,
          },
          "logTopic": {
            "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
            "v": 375,
          },
          "lt": {
            "d": "Base fee of the LT opcode",
            "v": 3,
          },
          "mcopy": {
            "d": "Base fee of the MCOPY opcode",
            "v": 3,
          },
          "memory": {
            "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
            "v": 3,
          },
          "minBlobGasPrice": {
            "d": "The minimum fee per blob gas",
            "v": 1,
          },
          "mload": {
            "d": "Base fee of the MLOAD opcode",
            "v": 3,
          },
          "mod": {
            "d": "Base fee of the MOD opcode",
            "v": 5,
          },
          "modexpGquaddivisor": {
            "d": "Gquaddivisor from modexp precompile for gas calculation",
            "v": 3,
          },
          "msize": {
            "d": "Base fee of the MSIZE opcode",
            "v": 2,
          },
          "mstore": {
            "d": "Base fee of the MSTORE opcode",
            "v": 3,
          },
          "mstore8": {
            "d": "Base fee of the MSTORE8 opcode",
            "v": 3,
          },
          "mul": {
            "d": "Base fee of the MUL opcode",
            "v": 5,
          },
          "mulmod": {
            "d": "Base fee of the MULMOD opcode",
            "v": 8,
          },
          "netSstoreCleanGas": {
            "d": "Removed along EIP-1283",
            "v": null,
          },
          "netSstoreClearRefund": {
            "d": "Removed along EIP-1283",
            "v": null,
          },
          "netSstoreDirtyGas": {
            "d": "Removed along EIP-1283",
            "v": null,
          },
          "netSstoreInitGas": {
            "d": "Removed along EIP-1283",
            "v": null,
          },
          "netSstoreNoopGas": {
            "d": "Removed along EIP-1283",
            "v": null,
          },
          "netSstoreResetClearRefund": {
            "d": "Removed along EIP-1283",
            "v": null,
          },
          "netSstoreResetRefund": {
            "d": "Removed along EIP-1283",
            "v": null,
          },
          "not": {
            "d": "Base fee of the NOT opcode",
            "v": 3,
          },
          "number": {
            "d": "Base fee of the NUMBER opcode",
            "v": 2,
          },
          "or": {
            "d": "Base fee of the OR opcode",
            "v": 3,
          },
          "origin": {
            "d": "Base fee of the ORIGIN opcode",
            "v": 2,
          },
          "pc": {
            "d": "Base fee of the PC opcode",
            "v": 2,
          },
          "pop": {
            "d": "Base fee of the POP opcode",
            "v": 2,
          },
          "prevrandao": {
            "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
            "v": 2,
          },
          "push": {
            "d": "Base fee of the PUSH opcode",
            "v": 3,
          },
          "push0": {
            "d": "Base fee of the PUSH0 opcode",
            "v": 2,
          },
          "quadCoeffDiv": {
            "d": "Divisor for the quadratic particle of the memory cost equation",
            "v": 512,
          },
          "return": {
            "d": "Base fee of the RETURN opcode",
            "v": 0,
          },
          "returndatacopy": {
            "d": "Base fee of the RETURNDATACOPY opcode",
            "v": 3,
          },
          "returndatasize": {
            "d": "Base fee of the RETURNDATASIZE opcode",
            "v": 2,
          },
          "revert": {
            "d": "Base fee of the REVERT opcode",
            "v": 0,
          },
          "ripemd160": {
            "d": "",
            "v": 600,
          },
          "ripemd160Word": {
            "d": "",
            "v": 120,
          },
          "sar": {
            "d": "Base fee of the SAR opcode",
            "v": 3,
          },
          "sdiv": {
            "d": "Base fee of the SDIV opcode",
            "v": 5,
          },
          "selfbalance": {
            "d": "Base fee of the SELFBALANCE opcode",
            "v": 5,
          },
          "selfdestruct": {
            "d": "Base fee of the SELFDESTRUCT opcode",
            "v": 5000,
          },
          "selfdestructRefund": {
            "d": "Refunded following a selfdestruct operation",
            "v": 0,
          },
          "sgt": {
            "d": "Base fee of the SGT opcode",
            "v": 3,
          },
          "sha256": {
            "d": "",
            "v": 60,
          },
          "sha256Word": {
            "d": "",
            "v": 12,
          },
          "shl": {
            "d": "Base fee of the SHL opcode",
            "v": 3,
          },
          "shr": {
            "d": "Base fee of the SHR opcode",
            "v": 3,
          },
          "signextend": {
            "d": "Base fee of the SIGNEXTEND opcode",
            "v": 5,
          },
          "simpleGasPerBlob": {
            "d": "The basic gas fee for each blob",
            "v": 12000,
          },
          "sload": {
            "d": "Base fee of the SLOAD opcode",
            "v": 0,
          },
          "slt": {
            "d": "Base fee of the SLT opcode",
            "v": 3,
          },
          "smod": {
            "d": "Base fee of the SMOD opcode",
            "v": 5,
          },
          "sstore": {
            "d": "Base fee of the SSTORE opcode",
            "v": 0,
          },
          "sstoreCleanGasEIP2200": {
            "d": "Once per SSTORE operation from clean non-zero to something else",
            "v": 2900,
          },
          "sstoreCleanRefundEIP2200": {
            "d": "Once per SSTORE operation for resetting to the original non-zero value",
            "v": 4900,
          },
          "sstoreClearRefundEIP2200": {
            "d": "Once per SSTORE operation for clearing an originally existing storage slot",
            "v": 4800,
          },
          "sstoreDirtyGasEIP2200": {
            "d": "Once per SSTORE operation if a dirty value is changed",
            "v": 100,
          },
          "sstoreInitGasEIP2200": {
            "d": "Once per SSTORE operation from clean zero to non-zero",
            "v": 20000,
          },
          "sstoreInitRefundEIP2200": {
            "d": "Once per SSTORE operation for resetting to the original zero value",
            "v": 19900,
          },
          "sstoreNoopGasEIP2200": {
            "d": "Once per SSTORE operation if the value doesn't change",
            "v": 100,
          },
          "sstoreRefund": {
            "d": "Once per SSTORE operation if the zeroness changes to zero",
            "v": 15000,
          },
          "sstoreReset": {
            "d": "Once per SSTORE operation if the zeroness does not change from zero",
            "v": 5000,
          },
          "sstoreSentryGasEIP2200": {
            "d": "Minimum gas required to be present for an SSTORE call, not consumed",
            "v": 2300,
          },
          "sstoreSet": {
            "d": "Once per SSTORE operation if the zeroness changes from zero",
            "v": 20000,
          },
          "staticcall": {
            "d": "Base fee of the STATICCALL opcode",
            "v": 0,
          },
          "stop": {
            "d": "Base fee of the STOP opcode",
            "v": 0,
          },
          "sub": {
            "d": "Base fee of the SUB opcode",
            "v": 3,
          },
          "swap": {
            "d": "Base fee of the SWAP opcode",
            "v": 3,
          },
          "timestamp": {
            "d": "Base fee of the TIMESTAMP opcode",
            "v": 2,
          },
          "tload": {
            "d": "Base fee of the TLOAD opcode",
            "v": 100,
          },
          "tstore": {
            "d": "Base fee of the TSTORE opcode",
            "v": 100,
          },
          "tx": {
            "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
            "v": 21000,
          },
          "txCreation": {
            "d": "The cost of creating a contract via tx",
            "v": 32000,
          },
          "txDataNonZero": {
            "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
            "v": 16,
          },
          "txDataZero": {
            "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
            "v": 4,
          },
          "warmstorageread": {
            "d": "Gas cost of reading storage locations which have already loaded 'cold'",
            "v": 100,
          },
          "xor": {
            "d": "Base fee of the XOR opcode",
            "v": 3,
          },
        },
        "pow": {
          "difficultyBombDelay": {
            "d": "the amount of blocks to delay the difficulty bomb with",
            "v": 11400000,
          },
          "difficultyBoundDivisor": {
            "d": "The bound divisor of the difficulty, used in the update calculations",
            "v": 2048,
          },
          "durationLimit": {
            "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
            "v": 13,
          },
          "epochDuration": {
            "d": "Duration between proof-of-work epochs",
            "v": 30000,
          },
          "minerReward": {
            "d": "The amount a miner gets rewarded for mining a block",
            "v": 2000000000000000000n,
          },
          "minimumDifficulty": {
            "d": "The minimum that the difficulty may ever be",
            "v": 131072,
          },
          "timebombPeriod": {
            "d": "Exponential difficulty timebomb period",
            "v": 100000,
          },
        },
        "sharding": {
          "blobCommitmentVersionKzg": {
            "d": "The number indicated a versioned hash is a KZG commitment",
            "v": 1,
          },
          "fieldElementsPerBlob": {
            "d": "The number of field elements allowed per blob",
            "v": 4096,
          },
        },
        "vm": {
          "callCreateDepth": {
            "d": "Maximum depth of call/create stack",
            "v": 1024,
          },
          "historicalRootsLength": {
            "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
            "v": 8191,
          },
          "maxCodeSize": {
            "d": "Maximum length of contract code",
            "v": 24576,
          },
          "maxExtraDataSize": {
            "d": "Maximum size extra data may be after Genesis",
            "v": 32,
          },
          "maxInitCodeSize": {
            "d": "Maximum length of initialization code when creating a contract",
            "v": 49152,
          },
          "stackLimit": {
            "d": "Maximum size of VM stack allowed",
            "v": 1024,
          },
        },
      },
      "customCrypto": {
        "kzg": {
          "blobToKzgCommitment": [Function],
          "computeBlobKzgProof": [Function],
          "freeTrustedSetup": [Function],
          "loadTrustedSetup": [Function],
          "verifyBlobKzgProof": [Function],
          "verifyBlobKzgProofBatch": [Function],
          "verifyKzgProof": [Function],
        },
      },
      "events": EventEmitter2 {
        "_events": {},
        "_eventsCount": 0,
        "_maxListeners": undefined,
        [Symbol(kCapture)]: false,
      },
    },
    "fees": undefined,
    "formatters": {
      "block": {
        "exclude": undefined,
        "format": [Function],
        "type": "block",
      },
      "transaction": {
        "exclude": undefined,
        "format": [Function],
        "type": "transaction",
      },
      "transactionReceipt": {
        "exclude": undefined,
        "format": [Function],
        "type": "transactionReceipt",
      },
    },
    "id": 10,
    "name": "OP Mainnet",
    "nativeCurrency": {
      "decimals": 18,
      "name": "Ether",
      "symbol": "ETH",
    },
    "rpcUrls": {
      "default": {
        "http": [
          "https://mainnet.optimism.io",
        ],
      },
    },
    "serializers": {
      "transaction": [Function: serializeTransaction],
    },
    "sourceId": 1,
  },
  "executionWitness": undefined,
  "header": _BlockHeader {
    "baseFeePerGas": 58782950n,
    "blobGasUsed": 0n,
    "cache": {
      "hash": undefined,
    },
    "coinbase": Address {
      "bytes": Uint8Array [
        66,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        17,
      ],
    },
    "common": {
      "blockExplorers": {
        "default": {
          "apiUrl": "https://api-optimistic.etherscan.io/api",
          "name": "Optimism Explorer",
          "url": "https://optimistic.etherscan.io",
        },
      },
      "contracts": {
        "disputeGameFactory": {
          "1": {
            "address": "0xe5965Ab5962eDc7477C8520243A95517CD252fA9",
          },
        },
        "gasPriceOracle": {
          "address": "0x420000000000000000000000000000000000000F",
        },
        "l1Block": {
          "address": "0x4200000000000000000000000000000000000015",
        },
        "l1StandardBridge": {
          "1": {
            "address": "0x99C9fc46f92E8a1c0deC1b1747d010903E884bE1",
          },
        },
        "l2CrossDomainMessenger": {
          "address": "0x4200000000000000000000000000000000000007",
        },
        "l2Erc721Bridge": {
          "address": "0x4200000000000000000000000000000000000014",
        },
        "l2OutputOracle": {
          "1": {
            "address": "0xdfe97868233d1aa22e815a266982f2cf17685a27",
          },
        },
        "l2StandardBridge": {
          "address": "0x4200000000000000000000000000000000000010",
        },
        "l2ToL1MessagePasser": {
          "address": "0x4200000000000000000000000000000000000016",
        },
        "multicall3": {
          "address": "0xca11bde05977b3631167028862be2a173976ca11",
          "blockCreated": 4286263,
        },
        "portal": {
          "1": {
            "address": "0xbEb5Fc579115071764c7423A4f12eDde41f106Ed",
          },
        },
      },
      "copy": [Function],
      "ethjsCommon": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "fees": undefined,
      "formatters": {
        "block": {
          "exclude": undefined,
          "format": [Function],
          "type": "block",
        },
        "transaction": {
          "exclude": undefined,
          "format": [Function],
          "type": "transaction",
        },
        "transactionReceipt": {
          "exclude": undefined,
          "format": [Function],
          "type": "transactionReceipt",
        },
      },
      "id": 10,
      "name": "OP Mainnet",
      "nativeCurrency": {
        "decimals": 18,
        "name": "Ether",
        "symbol": "ETH",
      },
      "rpcUrls": {
        "default": {
          "http": [
            "https://mainnet.optimism.io",
          ],
        },
      },
      "serializers": {
        "transaction": [Function: serializeTransaction],
      },
      "sourceId": 1,
    },
    "difficulty": 0n,
    "excessBlobGas": 0n,
    "extraData": Uint8Array [],
    "gasLimit": 30000000n,
    "gasUsed": 3558711n,
    "keccakFunction": [Function],
    "logsBloom": Uint8Array [
      128,
      0,
      0,
      130,
      64,
      0,
      16,
      128,
      164,
      64,
      40,
      224,
      56,
      0,
      16,
      128,
      144,
      8,
      6,
      0,
      16,
      18,
      4,
      0,
      0,
      4,
      76,
      0,
      100,
      32,
      34,
      140,
      6,
      73,
      16,
      128,
      16,
      2,
      2,
      3,
      34,
      64,
      16,
      16,
      0,
      0,
      8,
      2,
      72,
      144,
      132,
      64,
      129,
      2,
      32,
      0,
      80,
      1,
      64,
      88,
      0,
      110,
      9,
      64,
      34,
      128,
      24,
      68,
      32,
      176,
      1,
      136,
      24,
      16,
      10,
      41,
      128,
      32,
      6,
      0,
      4,
      32,
      8,
      0,
      1,
      44,
      42,
      0,
      64,
      198,
      129,
      68,
      128,
      10,
      80,
      129,
      210,
      1,
      32,
      9,
      67,
      2,
      0,
      128,
      130,
      32,
      18,
      4,
      50,
      66,
      8,
      1,
      0,
      128,
      16,
      0,
      32,
      192,
      0,
      1,
      0,
      128,
      1,
      49,
      9,
      8,
      8,
      0,
      4,
      3,
      66,
      4,
      3,
      0,
      3,
      0,
      2,
      33,
      0,
      0,
      16,
      6,
      64,
      16,
      0,
      4,
      4,
      129,
      136,
      225,
      0,
      0,
      2,
      5,
      0,
      56,
      36,
      0,
      9,
      1,
      18,
      4,
      76,
      4,
      16,
      32,
      9,
      8,
      1,
      18,
      4,
      2,
      192,
      1,
      4,
      0,
      18,
      16,
      160,
      3,
      16,
      0,
      0,
      129,
      8,
      0,
      0,
      128,
      20,
      137,
      0,
      144,
      96,
      4,
      151,
      2,
      1,
      0,
      32,
      96,
      154,
      8,
      48,
      2,
      64,
      0,
      17,
      128,
      128,
      66,
      40,
      14,
      64,
      128,
      17,
      0,
      20,
      1,
      192,
      2,
      128,
      0,
      116,
      0,
      8,
      16,
      96,
      76,
      2,
      144,
      32,
      194,
      0,
      0,
      64,
      1,
      16,
      0,
      0,
      144,
      0,
      16,
      4,
      4,
      33,
      0,
      201,
      68,
      0,
      32,
      4,
      4,
      32,
      5,
      38,
      32,
    ],
    "mixHash": Uint8Array [
      66,
      126,
      189,
      183,
      221,
      112,
      50,
      146,
      108,
      83,
      97,
      206,
      214,
      20,
      190,
      246,
      212,
      147,
      32,
      76,
      51,
      143,
      201,
      185,
      115,
      197,
      64,
      160,
      44,
      22,
      142,
      142,
    ],
    "nonce": Uint8Array [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
    ],
    "number": 122756469n,
    "parentBeaconBlockRoot": Uint8Array [
      105,
      208,
      185,
      143,
      161,
      216,
      208,
      240,
      191,
      113,
      22,
      154,
      6,
      52,
      138,
      85,
      204,
      148,
      179,
      230,
      9,
      119,
      207,
      143,
      54,
      225,
      223,
      28,
      245,
      224,
      58,
      2,
    ],
    "parentHash": Uint8Array [
      246,
      213,
      229,
      164,
      2,
      204,
      62,
      4,
      249,
      206,
      61,
      237,
      84,
      63,
      42,
      56,
      156,
      17,
      176,
      171,
      150,
      168,
      147,
      166,
      178,
      34,
      9,
      103,
      180,
      92,
      158,
      84,
    ],
    "receiptTrie": Uint8Array [
      226,
      253,
      253,
      43,
      178,
      4,
      213,
      241,
      69,
      17,
      63,
      31,
      171,
      138,
      200,
      174,
      117,
      162,
      217,
      129,
      164,
      226,
      20,
      127,
      110,
      190,
      21,
      236,
      28,
      57,
      185,
      253,
    ],
    "requestsRoot": undefined,
    "stateRoot": Uint8Array [
      110,
      74,
      0,
      73,
      213,
      250,
      26,
      127,
      209,
      135,
      205,
      98,
      34,
      181,
      224,
      227,
      31,
      152,
      77,
      121,
      169,
      66,
      107,
      13,
      31,
      123,
      121,
      67,
      140,
      36,
      118,
      81,
    ],
    "timestamp": 1721111715n,
    "transactionsTrie": Uint8Array [
      110,
      80,
      179,
      50,
      110,
      53,
      37,
      119,
      16,
      231,
      147,
      183,
      113,
      176,
      76,
      148,
      53,
      88,
      45,
      117,
      249,
      148,
      113,
      237,
      54,
      121,
      94,
      56,
      84,
      18,
      22,
      122,
    ],
    "uncleHash": Uint8Array [
      29,
      204,
      77,
      232,
      222,
      199,
      93,
      122,
      171,
      133,
      181,
      103,
      182,
      204,
      212,
      26,
      211,
      18,
      69,
      27,
      148,
      138,
      116,
      19,
      240,
      161,
      66,
      253,
      64,
      212,
      147,
      71,
    ],
    "withdrawalsRoot": Uint8Array [
      86,
      232,
      31,
      23,
      27,
      204,
      85,
      166,
      255,
      131,
      69,
      230,
      146,
      192,
      248,
      110,
      91,
      72,
      224,
      27,
      153,
      108,
      173,
      192,
      1,
      98,
      47,
      181,
      227,
      99,
      180,
      33,
    ],
  },
  "keccakFunction": [Function],
  "requests": undefined,
  "transactions": [
    LegacyTransaction {
      "DEFAULT_CHAIN": 1,
      "_type": 0,
      "activeCapabilities": [
        155,
      ],
      "cache": {
        "dataFee": undefined,
        "hash": undefined,
        "senderPubKey": undefined,
      },
      "common": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "data": Uint8Array [
        124,
        57,
        209,
        48,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        230,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        230,
        0,
        0,
        0,
        230,
        0,
        0,
        0,
        230,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        16,
        0,
        0,
        0,
        214,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        25,
        220,
        56,
        174,
        174,
        98,
        3,
        128,
        67,
        12,
        32,
        10,
        110,
        153,
        13,
        90,
        245,
        72,
        1,
        23,
        76,
        19,
        188,
        31,
        153,
        28,
        36,
        40,
        227,
        251,
        235,
        188,
        69,
        56,
        25,
        110,
        29,
        220,
        253,
        47,
        75,
        104,
        50,
        50,
        81,
        52,
        75,
        220,
        61,
        195,
        43,
        179,
        0,
        7,
        224,
        109,
        63,
        91,
        244,
        168,
        241,
        132,
        103,
        250,
        41,
        8,
        204,
        227,
        60,
        147,
        90,
        126,
        158,
        229,
        106,
        193,
        24,
        74,
        255,
        242,
        223,
        10,
        201,
        152,
        17,
        47,
        100,
        104,
        1,
        146,
        245,
        254,
        54,
        37,
        185,
        13,
        152,
        154,
        37,
        175,
        92,
        146,
        212,
        8,
        83,
        85,
        220,
        111,
        169,
        230,
        132,
        251,
        130,
        191,
        159,
        177,
        27,
        251,
        13,
        156,
        27,
        179,
        65,
        179,
        91,
        111,
        85,
        233,
        10,
        31,
        153,
        167,
        157,
        6,
        151,
        28,
        239,
        108,
        201,
        85,
        208,
        197,
        62,
        216,
        247,
        60,
        194,
        189,
        97,
        196,
        195,
        22,
        55,
        57,
        246,
        206,
        62,
        199,
        156,
        15,
        74,
        26,
        56,
        108,
        145,
        138,
        15,
        96,
        213,
        161,
        188,
        240,
        55,
        64,
        110,
        85,
        221,
        215,
        7,
        51,
        63,
        104,
        175,
        159,
        85,
        28,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        141,
        3,
        0,
        7,
        224,
        109,
        0,
        0,
        33,
        5,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        12,
        176,
        53,
        78,
        156,
        81,
        150,
        10,
        120,
        117,
        114,
        67,
        67,
        223,
        195,
        123,
        147,
        211,
        38,
        9,
        0,
        0,
        0,
        10,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        193,
        16,
        231,
        250,
        169,
        86,
        128,
        199,
        153,
        55,
        204,
        172,
        163,
        209,
        202,
        183,
        144,
        43,
        226,
        94,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        245,
        151,
        161,
        57,
        84,
        35,
        115,
        3,
        86,
        211,
        114,
        85,
        86,
        201,
        75,
        142,
        94,
        163,
        161,
        166,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        135,
        254,
        1,
        229,
        240,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
      ],
      "gasLimit": 371896n,
      "gasPrice": 117966892n,
      "keccakFunction": [Function],
      "nonce": 177869n,
      "r": 70141005221504847267705339227457985788604278268740526057643410789555645333377n,
      "s": 26775991224395334439696707707562604278530430621490353234064971345336129894153n,
      "to": Address {
        "bytes": Uint8Array [
          212,
          193,
          144,
          91,
          177,
          210,
          107,
          201,
          61,
          172,
          145,
          62,
          19,
          202,
          204,
          39,
          140,
          220,
          200,
          13,
        ],
      },
      "txOptions": {
        "common": Common {
          "DEFAULT_HARDFORK": "shanghai",
          "HARDFORK_CHANGES": [
            [
              "chainstart",
              {
                "comment": "Start of the Ethereum main chain",
                "gasConfig": {
                  "gasLimitBoundDivisor": {
                    "d": "The bound divisor of the gas limit, used in update calculations",
                    "v": 1024,
                  },
                  "maxRefundQuotient": {
                    "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                    "v": 2,
                  },
                  "minGasLimit": {
                    "d": "Minimum the gas limit may ever be",
                    "v": 5000,
                  },
                },
                "gasPrices": {
                  "add": {
                    "d": "Base fee of the ADD opcode",
                    "v": 3,
                  },
                  "addmod": {
                    "d": "Base fee of the ADDMOD opcode",
                    "v": 8,
                  },
                  "address": {
                    "d": "Base fee of the ADDRESS opcode",
                    "v": 2,
                  },
                  "and": {
                    "d": "Base fee of the AND opcode",
                    "v": 3,
                  },
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 20,
                  },
                  "base": {
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                    "v": 2,
                  },
                  "blockhash": {
                    "d": "Base fee of the BLOCKHASH opcode",
                    "v": 20,
                  },
                  "byte": {
                    "d": "Base fee of the BYTE opcode",
                    "v": 3,
                  },
                  "call": {
                    "d": "Base fee of the CALL opcode",
                    "v": 40,
                  },
                  "callNewAccount": {
                    "d": "Paid for CALL when the destination address didn't exist prior",
                    "v": 25000,
                  },
                  "callStipend": {
                    "d": "Free gas given at beginning of call",
                    "v": 2300,
                  },
                  "callValueTransfer": {
                    "d": "Paid for CALL when the value transfor is non-zero",
                    "v": 9000,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 40,
                  },
                  "calldatacopy": {
                    "d": "Base fee of the CALLDATACOPY opcode",
                    "v": 3,
                  },
                  "calldataload": {
                    "d": "Base fee of the CALLDATALOAD opcode",
                    "v": 3,
                  },
                  "calldatasize": {
                    "d": "Base fee of the CALLDATASIZE opcode",
                    "v": 2,
                  },
                  "caller": {
                    "d": "Base fee of the CALLER opcode",
                    "v": 2,
                  },
                  "callvalue": {
                    "d": "Base fee of the CALLVALUE opcode",
                    "v": 2,
                  },
                  "codecopy": {
                    "d": "Base fee of the CODECOPY opcode",
                    "v": 3,
                  },
                  "codesize": {
                    "d": "Base fee of the CODESIZE opcode",
                    "v": 2,
                  },
                  "coinbase": {
                    "d": "Base fee of the COINBASE opcode",
                    "v": 2,
                  },
                  "copy": {
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                    "v": 3,
                  },
                  "create": {
                    "d": "Base fee of the CREATE opcode",
                    "v": 32000,
                  },
                  "createData": {
                    "d": "",
                    "v": 200,
                  },
                  "difficulty": {
                    "d": "Base fee of the DIFFICULTY opcode",
                    "v": 2,
                  },
                  "div": {
                    "d": "Base fee of the DIV opcode",
                    "v": 5,
                  },
                  "dup": {
                    "d": "Base fee of the DUP opcode",
                    "v": 3,
                  },
                  "ecRecover": {
                    "d": "",
                    "v": 3000,
                  },
                  "eq": {
                    "d": "Base fee of the EQ opcode",
                    "v": 3,
                  },
                  "exp": {
                    "d": "Base fee of the EXP opcode",
                    "v": 10,
                  },
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 10,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 20,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 20,
                  },
                  "gas": {
                    "d": "Base fee of the GAS opcode",
                    "v": 2,
                  },
                  "gaslimit": {
                    "d": "Base fee of the GASLIMIT opcode",
                    "v": 2,
                  },
                  "gasprice": {
                    "d": "Base fee of the GASPRICE opcode",
                    "v": 2,
                  },
                  "gt": {
                    "d": "Base fee of the GT opcode",
                    "v": 3,
                  },
                  "identity": {
                    "d": "",
                    "v": 15,
                  },
                  "identityWord": {
                    "d": "",
                    "v": 3,
                  },
                  "invalid": {
                    "d": "Base fee of the INVALID opcode",
                    "v": 0,
                  },
                  "iszero": {
                    "d": "Base fee of the ISZERO opcode",
                    "v": 3,
                  },
                  "jump": {
                    "d": "Base fee of the JUMP opcode",
                    "v": 8,
                  },
                  "jumpdest": {
                    "d": "Base fee of the JUMPDEST opcode",
                    "v": 1,
                  },
                  "jumpi": {
                    "d": "Base fee of the JUMPI opcode",
                    "v": 10,
                  },
                  "keccak256": {
                    "d": "Base fee of the SHA3 opcode",
                    "v": 30,
                  },
                  "keccak256Word": {
                    "d": "Once per word of the SHA3 operation's data",
                    "v": 6,
                  },
                  "log": {
                    "d": "Base fee of the LOG opcode",
                    "v": 375,
                  },
                  "logData": {
                    "d": "Per byte in a LOG* operation's data",
                    "v": 8,
                  },
                  "logTopic": {
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                    "v": 375,
                  },
                  "lt": {
                    "d": "Base fee of the LT opcode",
                    "v": 3,
                  },
                  "memory": {
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                    "v": 3,
                  },
                  "mload": {
                    "d": "Base fee of the MLOAD opcode",
                    "v": 3,
                  },
                  "mod": {
                    "d": "Base fee of the MOD opcode",
                    "v": 5,
                  },
                  "msize": {
                    "d": "Base fee of the MSIZE opcode",
                    "v": 2,
                  },
                  "mstore": {
                    "d": "Base fee of the MSTORE opcode",
                    "v": 3,
                  },
                  "mstore8": {
                    "d": "Base fee of the MSTORE8 opcode",
                    "v": 3,
                  },
                  "mul": {
                    "d": "Base fee of the MUL opcode",
                    "v": 5,
                  },
                  "mulmod": {
                    "d": "Base fee of the MULMOD opcode",
                    "v": 8,
                  },
                  "not": {
                    "d": "Base fee of the NOT opcode",
                    "v": 3,
                  },
                  "number": {
                    "d": "Base fee of the NUMBER opcode",
                    "v": 2,
                  },
                  "or": {
                    "d": "Base fee of the OR opcode",
                    "v": 3,
                  },
                  "origin": {
                    "d": "Base fee of the ORIGIN opcode",
                    "v": 2,
                  },
                  "pc": {
                    "d": "Base fee of the PC opcode",
                    "v": 2,
                  },
                  "pop": {
                    "d": "Base fee of the POP opcode",
                    "v": 2,
                  },
                  "push": {
                    "d": "Base fee of the PUSH opcode",
                    "v": 3,
                  },
                  "quadCoeffDiv": {
                    "d": "Divisor for the quadratic particle of the memory cost equation",
                    "v": 512,
                  },
                  "return": {
                    "d": "Base fee of the RETURN opcode",
                    "v": 0,
                  },
                  "ripemd160": {
                    "d": "",
                    "v": 600,
                  },
                  "ripemd160Word": {
                    "d": "",
                    "v": 120,
                  },
                  "sdiv": {
                    "d": "Base fee of the SDIV opcode",
                    "v": 5,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 0,
                  },
                  "selfdestructRefund": {
                    "d": "Refunded following a selfdestruct operation",
                    "v": 24000,
                  },
                  "sgt": {
                    "d": "Base fee of the SGT opcode",
                    "v": 3,
                  },
                  "sha256": {
                    "d": "",
                    "v": 60,
                  },
                  "sha256Word": {
                    "d": "",
                    "v": 12,
                  },
                  "signextend": {
                    "d": "Base fee of the SIGNEXTEND opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 50,
                  },
                  "slt": {
                    "d": "Base fee of the SLT opcode",
                    "v": 3,
                  },
                  "smod": {
                    "d": "Base fee of the SMOD opcode",
                    "v": 5,
                  },
                  "sstore": {
                    "d": "Base fee of the SSTORE opcode",
                    "v": 0,
                  },
                  "sstoreRefund": {
                    "d": "Once per SSTORE operation if the zeroness changes to zero",
                    "v": 15000,
                  },
                  "sstoreReset": {
                    "d": "Once per SSTORE operation if the zeroness does not change from zero",
                    "v": 5000,
                  },
                  "sstoreSet": {
                    "d": "Once per SSTORE operation if the zeroness changes from zero",
                    "v": 20000,
                  },
                  "stop": {
                    "d": "Base fee of the STOP opcode",
                    "v": 0,
                  },
                  "sub": {
                    "d": "Base fee of the SUB opcode",
                    "v": 3,
                  },
                  "swap": {
                    "d": "Base fee of the SWAP opcode",
                    "v": 3,
                  },
                  "timestamp": {
                    "d": "Base fee of the TIMESTAMP opcode",
                    "v": 2,
                  },
                  "tx": {
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                    "v": 21000,
                  },
                  "txCreation": {
                    "d": "The cost of creating a contract via tx",
                    "v": 32000,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 68,
                  },
                  "txDataZero": {
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                    "v": 4,
                  },
                  "xor": {
                    "d": "Base fee of the XOR opcode",
                    "v": 3,
                  },
                },
                "name": "chainstart",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 0,
                  },
                  "difficultyBoundDivisor": {
                    "d": "The bound divisor of the difficulty, used in the update calculations",
                    "v": 2048,
                  },
                  "durationLimit": {
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                    "v": 13,
                  },
                  "epochDuration": {
                    "d": "Duration between proof-of-work epochs",
                    "v": 30000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 5000000000000000000n,
                  },
                  "minimumDifficulty": {
                    "d": "The minimum that the difficulty may ever be",
                    "v": 131072,
                  },
                  "timebombPeriod": {
                    "d": "Exponential difficulty timebomb period",
                    "v": 100000,
                  },
                },
                "status": "final",
                "url": "",
                "vm": {
                  "callCreateDepth": {
                    "d": "Maximum depth of call/create stack",
                    "v": 1024,
                  },
                  "maxExtraDataSize": {
                    "d": "Maximum size extra data may be after Genesis",
                    "v": 32,
                  },
                  "stackLimit": {
                    "d": "Maximum size of VM stack allowed",
                    "v": 1024,
                  },
                },
              },
            ],
            [
              "homestead",
              {
                "comment": "Homestead hardfork with protocol and network changes",
                "gasPrices": {
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 40,
                  },
                },
                "name": "homestead",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-606",
              },
            ],
            [
              "dao",
              {
                "comment": "DAO rescue hardfork",
                "name": "dao",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-779",
              },
            ],
            [
              "tangerineWhistle",
              {
                "comment": "Hardfork with gas cost changes for IO-heavy operations",
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 400,
                  },
                  "call": {
                    "d": "Once per CALL operation & message call transaction",
                    "v": 700,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 700,
                  },
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 700,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 700,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 700,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 5000,
                  },
                  "sload": {
                    "d": "Once per SLOAD operation",
                    "v": 200,
                  },
                },
                "name": "tangerineWhistle",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-608",
              },
            ],
            [
              "spuriousDragon",
              {
                "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
                "gasPrices": {
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 50,
                  },
                },
                "name": "spuriousDragon",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "vm": {
                  "maxCodeSize": {
                    "d": "Maximum length of contract code",
                    "v": 24576,
                  },
                },
              },
            ],
            [
              "byzantium",
              {
                "comment": "Hardfork with new precompiles, instructions and other protocol changes",
                "gasPrices": {
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 500,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 40000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 100000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 80000,
                  },
                  "modexpGquaddivisor": {
                    "d": "Gquaddivisor from modexp precompile for gas calculation",
                    "v": 20,
                  },
                  "returndatacopy": {
                    "d": "Base fee of the RETURNDATACOPY opcode",
                    "v": 3,
                  },
                  "returndatasize": {
                    "d": "Base fee of the RETURNDATASIZE opcode",
                    "v": 2,
                  },
                  "revert": {
                    "d": "Base fee of the REVERT opcode",
                    "v": 0,
                  },
                  "staticcall": {
                    "d": "Base fee of the STATICCALL opcode",
                    "v": 700,
                  },
                },
                "name": "byzantium",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 3000000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 3000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-609",
              },
            ],
            [
              "constantinople",
              {
                "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
                "gasPrices": {
                  "create2": {
                    "d": "Base fee of the CREATE2 opcode",
                    "v": 32000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 400,
                  },
                  "netSstoreCleanGas": {
                    "d": "Once per SSTORE operation from clean non-zero",
                    "v": 5000,
                  },
                  "netSstoreClearRefund": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Once per SSTORE operation from dirty",
                    "v": 200,
                  },
                  "netSstoreInitGas": {
                    "d": "Once per SSTORE operation from clean zero",
                    "v": 20000,
                  },
                  "netSstoreNoopGas": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 200,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19800,
                  },
                  "netSstoreResetRefund": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4800,
                  },
                  "sar": {
                    "d": "Base fee of the SAR opcode",
                    "v": 3,
                  },
                  "shl": {
                    "d": "Base fee of the SHL opcode",
                    "v": 3,
                  },
                  "shr": {
                    "d": "Base fee of the SHR opcode",
                    "v": 3,
                  },
                },
                "name": "constantinople",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 5000000,
                  },
                  "minerReward": {
                    "d": "The amount a miner gets rewarded for mining a block",
                    "v": 2000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
              },
            ],
            [
              "petersburg",
              {
                "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
                "gasPrices": {
                  "netSstoreCleanGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreInitGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreNoopGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                },
                "name": "petersburg",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
              },
            ],
            [
              "istanbul",
              {
                "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
                "gasConfig": {},
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 700,
                  },
                  "blake2Round": {
                    "d": "Gas cost per round for the Blake2 F precompile",
                    "v": 1,
                  },
                  "chainid": {
                    "d": "Base fee of the CHAINID opcode",
                    "v": 2,
                  },
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 150,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 6000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 45000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 34000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 700,
                  },
                  "selfbalance": {
                    "d": "Base fee of the SELFBALANCE opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 800,
                  },
                  "sstoreCleanGasEIP2200": {
                    "d": "Once per SSTORE operation from clean non-zero to something else",
                    "v": 5000,
                  },
                  "sstoreCleanRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4200,
                  },
                  "sstoreClearRefundEIP2200": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "sstoreDirtyGasEIP2200": {
                    "d": "Once per SSTORE operation if a dirty value is changed",
                    "v": 800,
                  },
                  "sstoreInitGasEIP2200": {
                    "d": "Once per SSTORE operation from clean zero to non-zero",
                    "v": 20000,
                  },
                  "sstoreInitRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19200,
                  },
                  "sstoreNoopGasEIP2200": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 800,
                  },
                  "sstoreSentryGasEIP2200": {
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                    "v": 2300,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 16,
                  },
                },
                "name": "istanbul",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
              },
            ],
            [
              "muirGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "name": "muirGlacier",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 9000000,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
              },
            ],
            [
              "berlin",
              {
                "comment": "HF targeted for July 2020 following the Muir Glacier HF",
                "eips": [
                  2565,
                  2929,
                  2718,
                  2930,
                ],
                "name": "berlin",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2070",
              },
            ],
            [
              "london",
              {
                "comment": "HF targeted for July 2021 following the Berlin fork",
                "eips": [
                  1559,
                  3198,
                  3529,
                  3541,
                ],
                "name": "london",
                "status": "final",
                "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
              },
            ],
            [
              "arrowGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "eips": [
                  4345,
                ],
                "name": "arrowGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
              },
            ],
            [
              "grayGlacier",
              {
                "comment": "Delaying the difficulty bomb to Mid September 2022",
                "eips": [
                  5133,
                ],
                "name": "grayGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
              },
            ],
            [
              "paris",
              {
                "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
                "consensus": {
                  "algorithm": "casper",
                  "casper": {},
                  "type": "pos",
                },
                "eips": [
                  3675,
                  4399,
                ],
                "name": "paris",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
              },
            ],
            [
              "mergeForkIdTransition",
              {
                "comment": "Pre-merge hardfork to fork off non-upgraded clients",
                "eips": [],
                "name": "mergeForkIdTransition",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-3675",
              },
            ],
            [
              "shanghai",
              {
                "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
                "eips": [
                  3651,
                  3855,
                  3860,
                  4895,
                ],
                "name": "shanghai",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
              },
            ],
            [
              "cancun",
              {
                "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
                "eips": [
                  1153,
                  4844,
                  4788,
                  5656,
                  6780,
                  7516,
                ],
                "name": "cancun",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
              },
            ],
          ],
          "_activatedEIPsCache": [
            2565,
            2929,
            2718,
            2930,
            1559,
            3198,
            3529,
            3541,
            4345,
            5133,
            3675,
            4399,
            3651,
            3855,
            3860,
            4895,
            1153,
            4844,
            4788,
            5656,
            6780,
            7516,
            1559,
            4895,
            4844,
            4788,
          ],
          "_chainParams": {
            "bootstrapNodes": [
              {
                "comment": "bootnode-aws-ap-southeast-1-001",
                "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                "ip": "18.138.108.67",
                "location": "ap-southeast-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-aws-us-east-1-001",
                "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                "ip": "3.209.45.79",
                "location": "us-east-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-hel",
                "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
                "ip": "65.108.70.101",
                "location": "eu-west-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-fsn",
                "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
                "ip": "157.90.35.166",
                "location": "eu-central-1-001",
                "port": 30303,
              },
            ],
            "chainId": 10,
            "comment": "The Ethereum main chain",
            "consensus": {
              "algorithm": "ethash",
              "ethash": {},
              "type": "pow",
            },
            "defaultHardfork": "shanghai",
            "dnsNetworks": [
              "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
            ],
            "genesis": {
              "difficulty": 17179869184,
              "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
              "gasLimit": 5000,
              "nonce": "0x0000000000000042",
            },
            "hardforks": [
              {
                "block": 0,
                "forkHash": "0xfc64ec04",
                "name": "chainstart",
              },
              {
                "block": 1150000,
                "forkHash": "0x97c2c34c",
                "name": "homestead",
              },
              {
                "block": 1920000,
                "forkHash": "0x91d1f948",
                "name": "dao",
              },
              {
                "block": 2463000,
                "forkHash": "0x7a64da13",
                "name": "tangerineWhistle",
              },
              {
                "block": 2675000,
                "forkHash": "0x3edd5b10",
                "name": "spuriousDragon",
              },
              {
                "block": 4370000,
                "forkHash": "0xa00bc324",
                "name": "byzantium",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "constantinople",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "petersburg",
              },
              {
                "block": 9069000,
                "forkHash": "0x879d6e30",
                "name": "istanbul",
              },
              {
                "block": 9200000,
                "forkHash": "0xe029e991",
                "name": "muirGlacier",
              },
              {
                "block": 12244000,
                "forkHash": "0x0eb440f6",
                "name": "berlin",
              },
              {
                "block": 12965000,
                "forkHash": "0xb715077d",
                "name": "london",
              },
              {
                "block": 13773000,
                "forkHash": "0x20c327fc",
                "name": "arrowGlacier",
              },
              {
                "block": 15050000,
                "forkHash": "0xf0afd0e3",
                "name": "grayGlacier",
              },
              {
                "block": 15537394,
                "forkHash": "0xf0afd0e3",
                "name": "paris",
                "ttd": "58750000000000000000000",
              },
              {
                "block": null,
                "forkHash": null,
                "name": "mergeForkIdTransition",
              },
              {
                "block": null,
                "forkHash": "0xdce96c2d",
                "name": "shanghai",
                "timestamp": "1681338455",
              },
              {
                "block": null,
                "forkHash": "0x9f3d2254",
                "name": "cancun",
                "timestamp": "1710338135",
              },
            ],
            "name": "TevmCustom",
            "networkId": 10,
            "url": "https://ethstats.net/",
          },
          "_customChains": [],
          "_eips": [
            1559,
            4895,
            4844,
            4788,
          ],
          "_hardfork": "cancun",
          "_paramsCache": {
            "gasConfig": {
              "baseFeeMaxChangeDenominator": {
                "d": "Maximum base fee change denominator",
                "v": 8,
              },
              "blobGasPerBlob": {
                "d": "The base fee for blob gas per blob",
                "v": 131072,
              },
              "blobGasPriceUpdateFraction": {
                "d": "The denominator used in the exponential when calculating a blob gas price",
                "v": 3338477,
              },
              "elasticityMultiplier": {
                "d": "Maximum block gas target elasticity",
                "v": 2,
              },
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "initialBaseFee": {
                "d": "Initial base fee on first EIP1559 block",
                "v": 1000000000,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 5,
              },
              "maxblobGasPerBlock": {
                "d": "The max blob gas allowable per block",
                "v": 786432,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
              "targetBlobGasPerBlock": {
                "d": "The target blob gas consumed per block",
                "v": 393216,
              },
            },
            "gasPrices": {
              "accessListAddressCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 2400,
              },
              "accessListStorageKeyCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 1900,
              },
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 0,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "basefee": {
                "d": "Gas cost of the BASEFEE opcode",
                "v": 2,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "blobbasefee": {
                "d": "Gas cost of the BLOBBASEFEE opcode",
                "v": 2,
              },
              "blobhash": {
                "d": "Base fee of the BLOBHASH opcode",
                "v": 3,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 0,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 0,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "coldaccountaccess": {
                "d": "Gas cost of the first read of a given address (per transaction)",
                "v": 2600,
              },
              "coldsload": {
                "d": "Gas cost of the first read of storage from a given location (per transaction)",
                "v": 2100,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 0,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 0,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 0,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 0,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "initCodeWordCost": {
                "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
                "v": 2,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "kzgPointEvaluationGasPrecompilePrice": {
                "d": "The fee associated with the point evaluation precompile",
                "v": 50000,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "mcopy": {
                "d": "Base fee of the MCOPY opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "minBlobGasPrice": {
                "d": "The minimum fee per blob gas",
                "v": 1,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 3,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "prevrandao": {
                "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "push0": {
                "d": "Base fee of the PUSH0 opcode",
                "v": 2,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 0,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "simpleGasPerBlob": {
                "d": "The basic gas fee for each blob",
                "v": 12000,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 0,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 2900,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4900,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 4800,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 100,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19900,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 100,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 0,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tload": {
                "d": "Base fee of the TLOAD opcode",
                "v": 100,
              },
              "tstore": {
                "d": "Base fee of the TSTORE opcode",
                "v": 100,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "warmstorageread": {
                "d": "Gas cost of reading storage locations which have already loaded 'cold'",
                "v": 100,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 11400000,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "sharding": {
              "blobCommitmentVersionKzg": {
                "d": "The number indicated a versioned hash is a KZG commitment",
                "v": 1,
              },
              "fieldElementsPerBlob": {
                "d": "The number of field elements allowed per blob",
                "v": 4096,
              },
            },
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "historicalRootsLength": {
                "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
                "v": 8191,
              },
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "maxInitCodeSize": {
                "d": "Maximum length of initialization code when creating a contract",
                "v": 49152,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
          "customCrypto": {
            "kzg": {
              "blobToKzgCommitment": [Function],
              "computeBlobKzgProof": [Function],
              "freeTrustedSetup": [Function],
              "loadTrustedSetup": [Function],
              "verifyBlobKzgProof": [Function],
              "verifyBlobKzgProofBatch": [Function],
              "verifyKzgProof": [Function],
            },
          },
          "events": EventEmitter2 {
            "_events": {},
            "_eventsCount": 0,
            "_maxListeners": undefined,
            [Symbol(kCapture)]: false,
          },
        },
      },
      "v": 55n,
      "value": 0n,
    },
    FeeMarketEIP1559Transaction {
      "AccessListJSON": [],
      "DEFAULT_CHAIN": 1,
      "_type": 2,
      "accessList": [],
      "activeCapabilities": [
        1559,
        2718,
        2930,
      ],
      "cache": {
        "dataFee": undefined,
        "hash": undefined,
        "senderPubKey": undefined,
      },
      "chainId": 10n,
      "common": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "data": Uint8Array [
        201,
        128,
        117,
        57,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        192,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        254,
        93,
        204,
        187,
        96,
        171,
        57,
        232,
        118,
        176,
        237,
        247,
        16,
        146,
        145,
        85,
        0,
        1,
        249,
        194,
        4,
        0,
        5,
        6,
        8,
        7,
        1,
        9,
        4,
        3,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        10,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        36,
        35,
        25,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        36,
        35,
        240,
        24,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        36,
        35,
        247,
        175,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        36,
        35,
        247,
        175,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        36,
        36,
        7,
        136,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        36,
        36,
        50,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        36,
        36,
        62,
        56,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        36,
        37,
        122,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        36,
        37,
        137,
        75,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        36,
        55,
        44,
        222,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        94,
        190,
        126,
        150,
        96,
        86,
        78,
        145,
        49,
        228,
        133,
        117,
        40,
        181,
        114,
        171,
        226,
        85,
        235,
        35,
        158,
        38,
        38,
        116,
        148,
        225,
        4,
        35,
        188,
        93,
        93,
        208,
        80,
        214,
        181,
        79,
        71,
        142,
        88,
        232,
        164,
        205,
        164,
        92,
        108,
        109,
        180,
        112,
        132,
        108,
        75,
        111,
        88,
        147,
        14,
        154,
        187,
        204,
        65,
        218,
        28,
        98,
        59,
        36,
        192,
        115,
        220,
        138,
        150,
        112,
        13,
        61,
        78,
        50,
        153,
        200,
        48,
        151,
        29,
        69,
        160,
        114,
        29,
        254,
        88,
        252,
        164,
        100,
        231,
        235,
        140,
        175,
        142,
        131,
        222,
        190,
        108,
        127,
        236,
        118,
        202,
        56,
        160,
        210,
        206,
        40,
        180,
        64,
        110,
        222,
        224,
        171,
        206,
        133,
        83,
        175,
        26,
        183,
        110,
        209,
        224,
        196,
        97,
        26,
        45,
        105,
        43,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        13,
        145,
        74,
        12,
        16,
        67,
        91,
        67,
        92,
        145,
        235,
        23,
        159,
        176,
        111,
        220,
        152,
        46,
        22,
        196,
        144,
        148,
        20,
        153,
        126,
        60,
        241,
        72,
        18,
        250,
        54,
        62,
        1,
        35,
        110,
        235,
        213,
        128,
        199,
        250,
        121,
        31,
        199,
        103,
        234,
        148,
        250,
        195,
        115,
        10,
        15,
        109,
        51,
        178,
        201,
        56,
        27,
        233,
        172,
        169,
        155,
        137,
        124,
        36,
        59,
        148,
        197,
        20,
        49,
        220,
        157,
        236,
        186,
        175,
        180,
        20,
        127,
        197,
        183,
        242,
        35,
        171,
        15,
        93,
        56,
        106,
        95,
        185,
        119,
        220,
        156,
        112,
        81,
        10,
        226,
        155,
        65,
        80,
        144,
        154,
        220,
        60,
        127,
        40,
        39,
        154,
        246,
        26,
        148,
        252,
        142,
        18,
        1,
        103,
        193,
        212,
        63,
        8,
        147,
        143,
        54,
        112,
        148,
        62,
        158,
        134,
        83,
        7,
      ],
      "gasLimit": 5000000n,
      "maxFeePerGas": 151721667n,
      "maxPriorityFeePerGas": 58551489n,
      "nonce": 312215n,
      "r": 96619161501438203672394438876584083304372325055187512575487186980418734149573n,
      "s": 46164332738533839730815933970944642737464181272945366561705298781063848735703n,
      "to": Address {
        "bytes": Uint8Array [
          225,
          242,
          103,
          27,
          173,
          226,
          251,
          168,
          148,
          222,
          152,
          40,
          128,
          199,
          22,
          89,
          42,
          185,
          157,
          170,
        ],
      },
      "txOptions": {
        "common": Common {
          "DEFAULT_HARDFORK": "shanghai",
          "HARDFORK_CHANGES": [
            [
              "chainstart",
              {
                "comment": "Start of the Ethereum main chain",
                "gasConfig": {
                  "gasLimitBoundDivisor": {
                    "d": "The bound divisor of the gas limit, used in update calculations",
                    "v": 1024,
                  },
                  "maxRefundQuotient": {
                    "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                    "v": 2,
                  },
                  "minGasLimit": {
                    "d": "Minimum the gas limit may ever be",
                    "v": 5000,
                  },
                },
                "gasPrices": {
                  "add": {
                    "d": "Base fee of the ADD opcode",
                    "v": 3,
                  },
                  "addmod": {
                    "d": "Base fee of the ADDMOD opcode",
                    "v": 8,
                  },
                  "address": {
                    "d": "Base fee of the ADDRESS opcode",
                    "v": 2,
                  },
                  "and": {
                    "d": "Base fee of the AND opcode",
                    "v": 3,
                  },
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 20,
                  },
                  "base": {
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                    "v": 2,
                  },
                  "blockhash": {
                    "d": "Base fee of the BLOCKHASH opcode",
                    "v": 20,
                  },
                  "byte": {
                    "d": "Base fee of the BYTE opcode",
                    "v": 3,
                  },
                  "call": {
                    "d": "Base fee of the CALL opcode",
                    "v": 40,
                  },
                  "callNewAccount": {
                    "d": "Paid for CALL when the destination address didn't exist prior",
                    "v": 25000,
                  },
                  "callStipend": {
                    "d": "Free gas given at beginning of call",
                    "v": 2300,
                  },
                  "callValueTransfer": {
                    "d": "Paid for CALL when the value transfor is non-zero",
                    "v": 9000,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 40,
                  },
                  "calldatacopy": {
                    "d": "Base fee of the CALLDATACOPY opcode",
                    "v": 3,
                  },
                  "calldataload": {
                    "d": "Base fee of the CALLDATALOAD opcode",
                    "v": 3,
                  },
                  "calldatasize": {
                    "d": "Base fee of the CALLDATASIZE opcode",
                    "v": 2,
                  },
                  "caller": {
                    "d": "Base fee of the CALLER opcode",
                    "v": 2,
                  },
                  "callvalue": {
                    "d": "Base fee of the CALLVALUE opcode",
                    "v": 2,
                  },
                  "codecopy": {
                    "d": "Base fee of the CODECOPY opcode",
                    "v": 3,
                  },
                  "codesize": {
                    "d": "Base fee of the CODESIZE opcode",
                    "v": 2,
                  },
                  "coinbase": {
                    "d": "Base fee of the COINBASE opcode",
                    "v": 2,
                  },
                  "copy": {
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                    "v": 3,
                  },
                  "create": {
                    "d": "Base fee of the CREATE opcode",
                    "v": 32000,
                  },
                  "createData": {
                    "d": "",
                    "v": 200,
                  },
                  "difficulty": {
                    "d": "Base fee of the DIFFICULTY opcode",
                    "v": 2,
                  },
                  "div": {
                    "d": "Base fee of the DIV opcode",
                    "v": 5,
                  },
                  "dup": {
                    "d": "Base fee of the DUP opcode",
                    "v": 3,
                  },
                  "ecRecover": {
                    "d": "",
                    "v": 3000,
                  },
                  "eq": {
                    "d": "Base fee of the EQ opcode",
                    "v": 3,
                  },
                  "exp": {
                    "d": "Base fee of the EXP opcode",
                    "v": 10,
                  },
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 10,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 20,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 20,
                  },
                  "gas": {
                    "d": "Base fee of the GAS opcode",
                    "v": 2,
                  },
                  "gaslimit": {
                    "d": "Base fee of the GASLIMIT opcode",
                    "v": 2,
                  },
                  "gasprice": {
                    "d": "Base fee of the GASPRICE opcode",
                    "v": 2,
                  },
                  "gt": {
                    "d": "Base fee of the GT opcode",
                    "v": 3,
                  },
                  "identity": {
                    "d": "",
                    "v": 15,
                  },
                  "identityWord": {
                    "d": "",
                    "v": 3,
                  },
                  "invalid": {
                    "d": "Base fee of the INVALID opcode",
                    "v": 0,
                  },
                  "iszero": {
                    "d": "Base fee of the ISZERO opcode",
                    "v": 3,
                  },
                  "jump": {
                    "d": "Base fee of the JUMP opcode",
                    "v": 8,
                  },
                  "jumpdest": {
                    "d": "Base fee of the JUMPDEST opcode",
                    "v": 1,
                  },
                  "jumpi": {
                    "d": "Base fee of the JUMPI opcode",
                    "v": 10,
                  },
                  "keccak256": {
                    "d": "Base fee of the SHA3 opcode",
                    "v": 30,
                  },
                  "keccak256Word": {
                    "d": "Once per word of the SHA3 operation's data",
                    "v": 6,
                  },
                  "log": {
                    "d": "Base fee of the LOG opcode",
                    "v": 375,
                  },
                  "logData": {
                    "d": "Per byte in a LOG* operation's data",
                    "v": 8,
                  },
                  "logTopic": {
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                    "v": 375,
                  },
                  "lt": {
                    "d": "Base fee of the LT opcode",
                    "v": 3,
                  },
                  "memory": {
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                    "v": 3,
                  },
                  "mload": {
                    "d": "Base fee of the MLOAD opcode",
                    "v": 3,
                  },
                  "mod": {
                    "d": "Base fee of the MOD opcode",
                    "v": 5,
                  },
                  "msize": {
                    "d": "Base fee of the MSIZE opcode",
                    "v": 2,
                  },
                  "mstore": {
                    "d": "Base fee of the MSTORE opcode",
                    "v": 3,
                  },
                  "mstore8": {
                    "d": "Base fee of the MSTORE8 opcode",
                    "v": 3,
                  },
                  "mul": {
                    "d": "Base fee of the MUL opcode",
                    "v": 5,
                  },
                  "mulmod": {
                    "d": "Base fee of the MULMOD opcode",
                    "v": 8,
                  },
                  "not": {
                    "d": "Base fee of the NOT opcode",
                    "v": 3,
                  },
                  "number": {
                    "d": "Base fee of the NUMBER opcode",
                    "v": 2,
                  },
                  "or": {
                    "d": "Base fee of the OR opcode",
                    "v": 3,
                  },
                  "origin": {
                    "d": "Base fee of the ORIGIN opcode",
                    "v": 2,
                  },
                  "pc": {
                    "d": "Base fee of the PC opcode",
                    "v": 2,
                  },
                  "pop": {
                    "d": "Base fee of the POP opcode",
                    "v": 2,
                  },
                  "push": {
                    "d": "Base fee of the PUSH opcode",
                    "v": 3,
                  },
                  "quadCoeffDiv": {
                    "d": "Divisor for the quadratic particle of the memory cost equation",
                    "v": 512,
                  },
                  "return": {
                    "d": "Base fee of the RETURN opcode",
                    "v": 0,
                  },
                  "ripemd160": {
                    "d": "",
                    "v": 600,
                  },
                  "ripemd160Word": {
                    "d": "",
                    "v": 120,
                  },
                  "sdiv": {
                    "d": "Base fee of the SDIV opcode",
                    "v": 5,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 0,
                  },
                  "selfdestructRefund": {
                    "d": "Refunded following a selfdestruct operation",
                    "v": 24000,
                  },
                  "sgt": {
                    "d": "Base fee of the SGT opcode",
                    "v": 3,
                  },
                  "sha256": {
                    "d": "",
                    "v": 60,
                  },
                  "sha256Word": {
                    "d": "",
                    "v": 12,
                  },
                  "signextend": {
                    "d": "Base fee of the SIGNEXTEND opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 50,
                  },
                  "slt": {
                    "d": "Base fee of the SLT opcode",
                    "v": 3,
                  },
                  "smod": {
                    "d": "Base fee of the SMOD opcode",
                    "v": 5,
                  },
                  "sstore": {
                    "d": "Base fee of the SSTORE opcode",
                    "v": 0,
                  },
                  "sstoreRefund": {
                    "d": "Once per SSTORE operation if the zeroness changes to zero",
                    "v": 15000,
                  },
                  "sstoreReset": {
                    "d": "Once per SSTORE operation if the zeroness does not change from zero",
                    "v": 5000,
                  },
                  "sstoreSet": {
                    "d": "Once per SSTORE operation if the zeroness changes from zero",
                    "v": 20000,
                  },
                  "stop": {
                    "d": "Base fee of the STOP opcode",
                    "v": 0,
                  },
                  "sub": {
                    "d": "Base fee of the SUB opcode",
                    "v": 3,
                  },
                  "swap": {
                    "d": "Base fee of the SWAP opcode",
                    "v": 3,
                  },
                  "timestamp": {
                    "d": "Base fee of the TIMESTAMP opcode",
                    "v": 2,
                  },
                  "tx": {
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                    "v": 21000,
                  },
                  "txCreation": {
                    "d": "The cost of creating a contract via tx",
                    "v": 32000,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 68,
                  },
                  "txDataZero": {
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                    "v": 4,
                  },
                  "xor": {
                    "d": "Base fee of the XOR opcode",
                    "v": 3,
                  },
                },
                "name": "chainstart",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 0,
                  },
                  "difficultyBoundDivisor": {
                    "d": "The bound divisor of the difficulty, used in the update calculations",
                    "v": 2048,
                  },
                  "durationLimit": {
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                    "v": 13,
                  },
                  "epochDuration": {
                    "d": "Duration between proof-of-work epochs",
                    "v": 30000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 5000000000000000000n,
                  },
                  "minimumDifficulty": {
                    "d": "The minimum that the difficulty may ever be",
                    "v": 131072,
                  },
                  "timebombPeriod": {
                    "d": "Exponential difficulty timebomb period",
                    "v": 100000,
                  },
                },
                "status": "final",
                "url": "",
                "vm": {
                  "callCreateDepth": {
                    "d": "Maximum depth of call/create stack",
                    "v": 1024,
                  },
                  "maxExtraDataSize": {
                    "d": "Maximum size extra data may be after Genesis",
                    "v": 32,
                  },
                  "stackLimit": {
                    "d": "Maximum size of VM stack allowed",
                    "v": 1024,
                  },
                },
              },
            ],
            [
              "homestead",
              {
                "comment": "Homestead hardfork with protocol and network changes",
                "gasPrices": {
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 40,
                  },
                },
                "name": "homestead",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-606",
              },
            ],
            [
              "dao",
              {
                "comment": "DAO rescue hardfork",
                "name": "dao",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-779",
              },
            ],
            [
              "tangerineWhistle",
              {
                "comment": "Hardfork with gas cost changes for IO-heavy operations",
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 400,
                  },
                  "call": {
                    "d": "Once per CALL operation & message call transaction",
                    "v": 700,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 700,
                  },
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 700,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 700,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 700,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 5000,
                  },
                  "sload": {
                    "d": "Once per SLOAD operation",
                    "v": 200,
                  },
                },
                "name": "tangerineWhistle",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-608",
              },
            ],
            [
              "spuriousDragon",
              {
                "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
                "gasPrices": {
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 50,
                  },
                },
                "name": "spuriousDragon",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "vm": {
                  "maxCodeSize": {
                    "d": "Maximum length of contract code",
                    "v": 24576,
                  },
                },
              },
            ],
            [
              "byzantium",
              {
                "comment": "Hardfork with new precompiles, instructions and other protocol changes",
                "gasPrices": {
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 500,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 40000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 100000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 80000,
                  },
                  "modexpGquaddivisor": {
                    "d": "Gquaddivisor from modexp precompile for gas calculation",
                    "v": 20,
                  },
                  "returndatacopy": {
                    "d": "Base fee of the RETURNDATACOPY opcode",
                    "v": 3,
                  },
                  "returndatasize": {
                    "d": "Base fee of the RETURNDATASIZE opcode",
                    "v": 2,
                  },
                  "revert": {
                    "d": "Base fee of the REVERT opcode",
                    "v": 0,
                  },
                  "staticcall": {
                    "d": "Base fee of the STATICCALL opcode",
                    "v": 700,
                  },
                },
                "name": "byzantium",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 3000000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 3000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-609",
              },
            ],
            [
              "constantinople",
              {
                "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
                "gasPrices": {
                  "create2": {
                    "d": "Base fee of the CREATE2 opcode",
                    "v": 32000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 400,
                  },
                  "netSstoreCleanGas": {
                    "d": "Once per SSTORE operation from clean non-zero",
                    "v": 5000,
                  },
                  "netSstoreClearRefund": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Once per SSTORE operation from dirty",
                    "v": 200,
                  },
                  "netSstoreInitGas": {
                    "d": "Once per SSTORE operation from clean zero",
                    "v": 20000,
                  },
                  "netSstoreNoopGas": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 200,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19800,
                  },
                  "netSstoreResetRefund": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4800,
                  },
                  "sar": {
                    "d": "Base fee of the SAR opcode",
                    "v": 3,
                  },
                  "shl": {
                    "d": "Base fee of the SHL opcode",
                    "v": 3,
                  },
                  "shr": {
                    "d": "Base fee of the SHR opcode",
                    "v": 3,
                  },
                },
                "name": "constantinople",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 5000000,
                  },
                  "minerReward": {
                    "d": "The amount a miner gets rewarded for mining a block",
                    "v": 2000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
              },
            ],
            [
              "petersburg",
              {
                "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
                "gasPrices": {
                  "netSstoreCleanGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreInitGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreNoopGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                },
                "name": "petersburg",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
              },
            ],
            [
              "istanbul",
              {
                "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
                "gasConfig": {},
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 700,
                  },
                  "blake2Round": {
                    "d": "Gas cost per round for the Blake2 F precompile",
                    "v": 1,
                  },
                  "chainid": {
                    "d": "Base fee of the CHAINID opcode",
                    "v": 2,
                  },
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 150,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 6000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 45000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 34000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 700,
                  },
                  "selfbalance": {
                    "d": "Base fee of the SELFBALANCE opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 800,
                  },
                  "sstoreCleanGasEIP2200": {
                    "d": "Once per SSTORE operation from clean non-zero to something else",
                    "v": 5000,
                  },
                  "sstoreCleanRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4200,
                  },
                  "sstoreClearRefundEIP2200": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "sstoreDirtyGasEIP2200": {
                    "d": "Once per SSTORE operation if a dirty value is changed",
                    "v": 800,
                  },
                  "sstoreInitGasEIP2200": {
                    "d": "Once per SSTORE operation from clean zero to non-zero",
                    "v": 20000,
                  },
                  "sstoreInitRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19200,
                  },
                  "sstoreNoopGasEIP2200": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 800,
                  },
                  "sstoreSentryGasEIP2200": {
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                    "v": 2300,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 16,
                  },
                },
                "name": "istanbul",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
              },
            ],
            [
              "muirGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "name": "muirGlacier",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 9000000,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
              },
            ],
            [
              "berlin",
              {
                "comment": "HF targeted for July 2020 following the Muir Glacier HF",
                "eips": [
                  2565,
                  2929,
                  2718,
                  2930,
                ],
                "name": "berlin",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2070",
              },
            ],
            [
              "london",
              {
                "comment": "HF targeted for July 2021 following the Berlin fork",
                "eips": [
                  1559,
                  3198,
                  3529,
                  3541,
                ],
                "name": "london",
                "status": "final",
                "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
              },
            ],
            [
              "arrowGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "eips": [
                  4345,
                ],
                "name": "arrowGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
              },
            ],
            [
              "grayGlacier",
              {
                "comment": "Delaying the difficulty bomb to Mid September 2022",
                "eips": [
                  5133,
                ],
                "name": "grayGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
              },
            ],
            [
              "paris",
              {
                "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
                "consensus": {
                  "algorithm": "casper",
                  "casper": {},
                  "type": "pos",
                },
                "eips": [
                  3675,
                  4399,
                ],
                "name": "paris",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
              },
            ],
            [
              "mergeForkIdTransition",
              {
                "comment": "Pre-merge hardfork to fork off non-upgraded clients",
                "eips": [],
                "name": "mergeForkIdTransition",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-3675",
              },
            ],
            [
              "shanghai",
              {
                "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
                "eips": [
                  3651,
                  3855,
                  3860,
                  4895,
                ],
                "name": "shanghai",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
              },
            ],
            [
              "cancun",
              {
                "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
                "eips": [
                  1153,
                  4844,
                  4788,
                  5656,
                  6780,
                  7516,
                ],
                "name": "cancun",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
              },
            ],
          ],
          "_activatedEIPsCache": [
            2565,
            2929,
            2718,
            2930,
            1559,
            3198,
            3529,
            3541,
            4345,
            5133,
            3675,
            4399,
            3651,
            3855,
            3860,
            4895,
            1153,
            4844,
            4788,
            5656,
            6780,
            7516,
            1559,
            4895,
            4844,
            4788,
          ],
          "_chainParams": {
            "bootstrapNodes": [
              {
                "comment": "bootnode-aws-ap-southeast-1-001",
                "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                "ip": "18.138.108.67",
                "location": "ap-southeast-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-aws-us-east-1-001",
                "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                "ip": "3.209.45.79",
                "location": "us-east-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-hel",
                "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
                "ip": "65.108.70.101",
                "location": "eu-west-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-fsn",
                "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
                "ip": "157.90.35.166",
                "location": "eu-central-1-001",
                "port": 30303,
              },
            ],
            "chainId": 10,
            "comment": "The Ethereum main chain",
            "consensus": {
              "algorithm": "ethash",
              "ethash": {},
              "type": "pow",
            },
            "defaultHardfork": "shanghai",
            "dnsNetworks": [
              "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
            ],
            "genesis": {
              "difficulty": 17179869184,
              "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
              "gasLimit": 5000,
              "nonce": "0x0000000000000042",
            },
            "hardforks": [
              {
                "block": 0,
                "forkHash": "0xfc64ec04",
                "name": "chainstart",
              },
              {
                "block": 1150000,
                "forkHash": "0x97c2c34c",
                "name": "homestead",
              },
              {
                "block": 1920000,
                "forkHash": "0x91d1f948",
                "name": "dao",
              },
              {
                "block": 2463000,
                "forkHash": "0x7a64da13",
                "name": "tangerineWhistle",
              },
              {
                "block": 2675000,
                "forkHash": "0x3edd5b10",
                "name": "spuriousDragon",
              },
              {
                "block": 4370000,
                "forkHash": "0xa00bc324",
                "name": "byzantium",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "constantinople",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "petersburg",
              },
              {
                "block": 9069000,
                "forkHash": "0x879d6e30",
                "name": "istanbul",
              },
              {
                "block": 9200000,
                "forkHash": "0xe029e991",
                "name": "muirGlacier",
              },
              {
                "block": 12244000,
                "forkHash": "0x0eb440f6",
                "name": "berlin",
              },
              {
                "block": 12965000,
                "forkHash": "0xb715077d",
                "name": "london",
              },
              {
                "block": 13773000,
                "forkHash": "0x20c327fc",
                "name": "arrowGlacier",
              },
              {
                "block": 15050000,
                "forkHash": "0xf0afd0e3",
                "name": "grayGlacier",
              },
              {
                "block": 15537394,
                "forkHash": "0xf0afd0e3",
                "name": "paris",
                "ttd": "58750000000000000000000",
              },
              {
                "block": null,
                "forkHash": null,
                "name": "mergeForkIdTransition",
              },
              {
                "block": null,
                "forkHash": "0xdce96c2d",
                "name": "shanghai",
                "timestamp": "1681338455",
              },
              {
                "block": null,
                "forkHash": "0x9f3d2254",
                "name": "cancun",
                "timestamp": "1710338135",
              },
            ],
            "name": "TevmCustom",
            "networkId": 10,
            "url": "https://ethstats.net/",
          },
          "_customChains": [],
          "_eips": [
            1559,
            4895,
            4844,
            4788,
          ],
          "_hardfork": "cancun",
          "_paramsCache": {
            "gasConfig": {
              "baseFeeMaxChangeDenominator": {
                "d": "Maximum base fee change denominator",
                "v": 8,
              },
              "blobGasPerBlob": {
                "d": "The base fee for blob gas per blob",
                "v": 131072,
              },
              "blobGasPriceUpdateFraction": {
                "d": "The denominator used in the exponential when calculating a blob gas price",
                "v": 3338477,
              },
              "elasticityMultiplier": {
                "d": "Maximum block gas target elasticity",
                "v": 2,
              },
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "initialBaseFee": {
                "d": "Initial base fee on first EIP1559 block",
                "v": 1000000000,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 5,
              },
              "maxblobGasPerBlock": {
                "d": "The max blob gas allowable per block",
                "v": 786432,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
              "targetBlobGasPerBlock": {
                "d": "The target blob gas consumed per block",
                "v": 393216,
              },
            },
            "gasPrices": {
              "accessListAddressCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 2400,
              },
              "accessListStorageKeyCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 1900,
              },
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 0,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "basefee": {
                "d": "Gas cost of the BASEFEE opcode",
                "v": 2,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "blobbasefee": {
                "d": "Gas cost of the BLOBBASEFEE opcode",
                "v": 2,
              },
              "blobhash": {
                "d": "Base fee of the BLOBHASH opcode",
                "v": 3,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 0,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 0,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "coldaccountaccess": {
                "d": "Gas cost of the first read of a given address (per transaction)",
                "v": 2600,
              },
              "coldsload": {
                "d": "Gas cost of the first read of storage from a given location (per transaction)",
                "v": 2100,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 0,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 0,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 0,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 0,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "initCodeWordCost": {
                "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
                "v": 2,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "kzgPointEvaluationGasPrecompilePrice": {
                "d": "The fee associated with the point evaluation precompile",
                "v": 50000,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "mcopy": {
                "d": "Base fee of the MCOPY opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "minBlobGasPrice": {
                "d": "The minimum fee per blob gas",
                "v": 1,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 3,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "prevrandao": {
                "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "push0": {
                "d": "Base fee of the PUSH0 opcode",
                "v": 2,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 0,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "simpleGasPerBlob": {
                "d": "The basic gas fee for each blob",
                "v": 12000,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 0,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 2900,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4900,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 4800,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 100,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19900,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 100,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 0,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tload": {
                "d": "Base fee of the TLOAD opcode",
                "v": 100,
              },
              "tstore": {
                "d": "Base fee of the TSTORE opcode",
                "v": 100,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "warmstorageread": {
                "d": "Gas cost of reading storage locations which have already loaded 'cold'",
                "v": 100,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 11400000,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "sharding": {
              "blobCommitmentVersionKzg": {
                "d": "The number indicated a versioned hash is a KZG commitment",
                "v": 1,
              },
              "fieldElementsPerBlob": {
                "d": "The number of field elements allowed per blob",
                "v": 4096,
              },
            },
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "historicalRootsLength": {
                "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
                "v": 8191,
              },
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "maxInitCodeSize": {
                "d": "Maximum length of initialization code when creating a contract",
                "v": 49152,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
          "customCrypto": {
            "kzg": {
              "blobToKzgCommitment": [Function],
              "computeBlobKzgProof": [Function],
              "freeTrustedSetup": [Function],
              "loadTrustedSetup": [Function],
              "verifyBlobKzgProof": [Function],
              "verifyBlobKzgProofBatch": [Function],
              "verifyKzgProof": [Function],
            },
          },
          "events": EventEmitter2 {
            "_events": {},
            "_eventsCount": 0,
            "_maxListeners": undefined,
            [Symbol(kCapture)]: false,
          },
        },
      },
      "v": 1n,
      "value": 0n,
    },
    LegacyTransaction {
      "DEFAULT_CHAIN": 1,
      "_type": 0,
      "activeCapabilities": [
        155,
      ],
      "cache": {
        "dataFee": undefined,
        "hash": undefined,
        "senderPubKey": undefined,
      },
      "common": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "data": Uint8Array [
        118,
        18,
        201,
        235,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        135,
        167,
        108,
        224,
        51,
        47,
        61,
        192,
        40,
        47,
        57,
        2,
        243,
        27,
        123,
        249,
        163,
        230,
        69,
        192,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        205,
        234,
        19,
        240,
        102,
        151,
        102,
        22,
        0,
        0,
        168,
        106,
        0,
        0,
        0,
        10,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        67,
        106,
        250,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        14,
        74,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        169,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        75,
        136,
        240,
        107,
        107,
        27,
        88,
        198,
        117,
        36,
        57,
        50,
        211,
        95,
        103,
        73,
        114,
        25,
        79,
        215,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        94,
        84,
        24,
        47,
        160,
        212,
        15,
        105,
        84,
        250,
        139,
        217,
        254,
        160,
        206,
        99,
        154,
        50,
        2,
        79,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        127,
        92,
        118,
        76,
        188,
        20,
        249,
        102,
        155,
        136,
        131,
        124,
        161,
        73,
        12,
        202,
        23,
        195,
        22,
        7,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        167,
        245,
        162,
        16,
        201,
        42,
        130,
        210,
        160,
        94,
        0,
        114,
        216,
        220,
        205,
        51,
        172,
        208,
        208,
        146,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        200,
        146,
        20,
        183,
        144,
        109,
        117,
        94,
        66,
        102,
        232,
        58,
        47,
        43,
        182,
        226,
        121,
        46,
        239,
        135,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        135,
        167,
        108,
        224,
        51,
        47,
        61,
        192,
        40,
        47,
        57,
        2,
        243,
        27,
        123,
        249,
        163,
        230,
        69,
        192,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        135,
        167,
        108,
        224,
        51,
        47,
        61,
        192,
        40,
        47,
        57,
        2,
        243,
        27,
        123,
        249,
        163,
        230,
        69,
        192,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        225,
        191,
        33,
        80,
        102,
        151,
        102,
        22,
        0,
        0,
        168,
        106,
        0,
        0,
        168,
        106,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        239,
        254,
        232,
        19,
        100,
        121,
        32,
        66,
        180,
        106,
        205,
        11,
        25,
        252,
        106,
        190,
        35,
        95,
        31,
        81,
        115,
        177,
        88,
        31,
        77,
        102,
        215,
        236,
        119,
        20,
        219,
        83,
        219,
        240,
        216,
        211,
        113,
        1,
        176,
        134,
        175,
        169,
        64,
        210,
        216,
        177,
        13,
        78,
        215,
        136,
        112,
        163,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        12,
        83,
        37,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        11,
        126,
        36,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        18,
        247,
        185,
        9,
        102,
        151,
        102,
        22,
        0,
        0,
        0,
        10,
        0,
        0,
        168,
        106,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        213,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        127,
        92,
        118,
        76,
        188,
        20,
        249,
        102,
        155,
        136,
        131,
        124,
        161,
        73,
        12,
        202,
        23,
        195,
        22,
        7,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        185,
        126,
        249,
        239,
        135,
        52,
        199,
        25,
        4,
        216,
        0,
        47,
        139,
        107,
        198,
        109,
        217,
        196,
        138,
        110,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        167,
        245,
        162,
        16,
        201,
        42,
        130,
        210,
        160,
        94,
        0,
        114,
        216,
        220,
        205,
        51,
        172,
        208,
        208,
        146,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        167,
        245,
        162,
        16,
        201,
        42,
        130,
        210,
        160,
        94,
        0,
        114,
        216,
        220,
        205,
        51,
        172,
        208,
        208,
        146,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        65,
        62,
        145,
        160,
        224,
        50,
        60,
        142,
        20,
        227,
        22,
        138,
        244,
        160,
        231,
        82,
        129,
        98,
        138,
        56,
        38,
        136,
        147,
        65,
        216,
        106,
        129,
        189,
        179,
        248,
        8,
        243,
        165,
        61,
        146,
        251,
        140,
        99,
        151,
        92,
        82,
        49,
        187,
        112,
        168,
        168,
        131,
        33,
        40,
        221,
        121,
        79,
        135,
        60,
        14,
        207,
        58,
        182,
        90,
        102,
        178,
        158,
        63,
        58,
        141,
        28,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        16,
        46,
        221,
        142,
        144,
        60,
        17,
        220,
        38,
        190,
        185,
        57,
        108,
        253,
        83,
        190,
        187,
        53,
        68,
        157,
        136,
        30,
        251,
        79,
        227,
        167,
        175,
        106,
        128,
        194,
        80,
        156,
      ],
      "gasLimit": 1633471n,
      "gasPrice": 69277058n,
      "keccakFunction": [Function],
      "nonce": 707n,
      "r": 4004079426643631063313606954814937920034460211249149989357361235718911279658n,
      "s": 42634093143742378601261449670220112299875896643210695849278023520659655530243n,
      "to": Address {
        "bytes": Uint8Array [
          75,
          136,
          240,
          107,
          107,
          27,
          88,
          198,
          117,
          36,
          57,
          50,
          211,
          95,
          103,
          73,
          114,
          25,
          79,
          215,
        ],
      },
      "txOptions": {
        "common": Common {
          "DEFAULT_HARDFORK": "shanghai",
          "HARDFORK_CHANGES": [
            [
              "chainstart",
              {
                "comment": "Start of the Ethereum main chain",
                "gasConfig": {
                  "gasLimitBoundDivisor": {
                    "d": "The bound divisor of the gas limit, used in update calculations",
                    "v": 1024,
                  },
                  "maxRefundQuotient": {
                    "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                    "v": 2,
                  },
                  "minGasLimit": {
                    "d": "Minimum the gas limit may ever be",
                    "v": 5000,
                  },
                },
                "gasPrices": {
                  "add": {
                    "d": "Base fee of the ADD opcode",
                    "v": 3,
                  },
                  "addmod": {
                    "d": "Base fee of the ADDMOD opcode",
                    "v": 8,
                  },
                  "address": {
                    "d": "Base fee of the ADDRESS opcode",
                    "v": 2,
                  },
                  "and": {
                    "d": "Base fee of the AND opcode",
                    "v": 3,
                  },
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 20,
                  },
                  "base": {
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                    "v": 2,
                  },
                  "blockhash": {
                    "d": "Base fee of the BLOCKHASH opcode",
                    "v": 20,
                  },
                  "byte": {
                    "d": "Base fee of the BYTE opcode",
                    "v": 3,
                  },
                  "call": {
                    "d": "Base fee of the CALL opcode",
                    "v": 40,
                  },
                  "callNewAccount": {
                    "d": "Paid for CALL when the destination address didn't exist prior",
                    "v": 25000,
                  },
                  "callStipend": {
                    "d": "Free gas given at beginning of call",
                    "v": 2300,
                  },
                  "callValueTransfer": {
                    "d": "Paid for CALL when the value transfor is non-zero",
                    "v": 9000,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 40,
                  },
                  "calldatacopy": {
                    "d": "Base fee of the CALLDATACOPY opcode",
                    "v": 3,
                  },
                  "calldataload": {
                    "d": "Base fee of the CALLDATALOAD opcode",
                    "v": 3,
                  },
                  "calldatasize": {
                    "d": "Base fee of the CALLDATASIZE opcode",
                    "v": 2,
                  },
                  "caller": {
                    "d": "Base fee of the CALLER opcode",
                    "v": 2,
                  },
                  "callvalue": {
                    "d": "Base fee of the CALLVALUE opcode",
                    "v": 2,
                  },
                  "codecopy": {
                    "d": "Base fee of the CODECOPY opcode",
                    "v": 3,
                  },
                  "codesize": {
                    "d": "Base fee of the CODESIZE opcode",
                    "v": 2,
                  },
                  "coinbase": {
                    "d": "Base fee of the COINBASE opcode",
                    "v": 2,
                  },
                  "copy": {
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                    "v": 3,
                  },
                  "create": {
                    "d": "Base fee of the CREATE opcode",
                    "v": 32000,
                  },
                  "createData": {
                    "d": "",
                    "v": 200,
                  },
                  "difficulty": {
                    "d": "Base fee of the DIFFICULTY opcode",
                    "v": 2,
                  },
                  "div": {
                    "d": "Base fee of the DIV opcode",
                    "v": 5,
                  },
                  "dup": {
                    "d": "Base fee of the DUP opcode",
                    "v": 3,
                  },
                  "ecRecover": {
                    "d": "",
                    "v": 3000,
                  },
                  "eq": {
                    "d": "Base fee of the EQ opcode",
                    "v": 3,
                  },
                  "exp": {
                    "d": "Base fee of the EXP opcode",
                    "v": 10,
                  },
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 10,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 20,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 20,
                  },
                  "gas": {
                    "d": "Base fee of the GAS opcode",
                    "v": 2,
                  },
                  "gaslimit": {
                    "d": "Base fee of the GASLIMIT opcode",
                    "v": 2,
                  },
                  "gasprice": {
                    "d": "Base fee of the GASPRICE opcode",
                    "v": 2,
                  },
                  "gt": {
                    "d": "Base fee of the GT opcode",
                    "v": 3,
                  },
                  "identity": {
                    "d": "",
                    "v": 15,
                  },
                  "identityWord": {
                    "d": "",
                    "v": 3,
                  },
                  "invalid": {
                    "d": "Base fee of the INVALID opcode",
                    "v": 0,
                  },
                  "iszero": {
                    "d": "Base fee of the ISZERO opcode",
                    "v": 3,
                  },
                  "jump": {
                    "d": "Base fee of the JUMP opcode",
                    "v": 8,
                  },
                  "jumpdest": {
                    "d": "Base fee of the JUMPDEST opcode",
                    "v": 1,
                  },
                  "jumpi": {
                    "d": "Base fee of the JUMPI opcode",
                    "v": 10,
                  },
                  "keccak256": {
                    "d": "Base fee of the SHA3 opcode",
                    "v": 30,
                  },
                  "keccak256Word": {
                    "d": "Once per word of the SHA3 operation's data",
                    "v": 6,
                  },
                  "log": {
                    "d": "Base fee of the LOG opcode",
                    "v": 375,
                  },
                  "logData": {
                    "d": "Per byte in a LOG* operation's data",
                    "v": 8,
                  },
                  "logTopic": {
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                    "v": 375,
                  },
                  "lt": {
                    "d": "Base fee of the LT opcode",
                    "v": 3,
                  },
                  "memory": {
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                    "v": 3,
                  },
                  "mload": {
                    "d": "Base fee of the MLOAD opcode",
                    "v": 3,
                  },
                  "mod": {
                    "d": "Base fee of the MOD opcode",
                    "v": 5,
                  },
                  "msize": {
                    "d": "Base fee of the MSIZE opcode",
                    "v": 2,
                  },
                  "mstore": {
                    "d": "Base fee of the MSTORE opcode",
                    "v": 3,
                  },
                  "mstore8": {
                    "d": "Base fee of the MSTORE8 opcode",
                    "v": 3,
                  },
                  "mul": {
                    "d": "Base fee of the MUL opcode",
                    "v": 5,
                  },
                  "mulmod": {
                    "d": "Base fee of the MULMOD opcode",
                    "v": 8,
                  },
                  "not": {
                    "d": "Base fee of the NOT opcode",
                    "v": 3,
                  },
                  "number": {
                    "d": "Base fee of the NUMBER opcode",
                    "v": 2,
                  },
                  "or": {
                    "d": "Base fee of the OR opcode",
                    "v": 3,
                  },
                  "origin": {
                    "d": "Base fee of the ORIGIN opcode",
                    "v": 2,
                  },
                  "pc": {
                    "d": "Base fee of the PC opcode",
                    "v": 2,
                  },
                  "pop": {
                    "d": "Base fee of the POP opcode",
                    "v": 2,
                  },
                  "push": {
                    "d": "Base fee of the PUSH opcode",
                    "v": 3,
                  },
                  "quadCoeffDiv": {
                    "d": "Divisor for the quadratic particle of the memory cost equation",
                    "v": 512,
                  },
                  "return": {
                    "d": "Base fee of the RETURN opcode",
                    "v": 0,
                  },
                  "ripemd160": {
                    "d": "",
                    "v": 600,
                  },
                  "ripemd160Word": {
                    "d": "",
                    "v": 120,
                  },
                  "sdiv": {
                    "d": "Base fee of the SDIV opcode",
                    "v": 5,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 0,
                  },
                  "selfdestructRefund": {
                    "d": "Refunded following a selfdestruct operation",
                    "v": 24000,
                  },
                  "sgt": {
                    "d": "Base fee of the SGT opcode",
                    "v": 3,
                  },
                  "sha256": {
                    "d": "",
                    "v": 60,
                  },
                  "sha256Word": {
                    "d": "",
                    "v": 12,
                  },
                  "signextend": {
                    "d": "Base fee of the SIGNEXTEND opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 50,
                  },
                  "slt": {
                    "d": "Base fee of the SLT opcode",
                    "v": 3,
                  },
                  "smod": {
                    "d": "Base fee of the SMOD opcode",
                    "v": 5,
                  },
                  "sstore": {
                    "d": "Base fee of the SSTORE opcode",
                    "v": 0,
                  },
                  "sstoreRefund": {
                    "d": "Once per SSTORE operation if the zeroness changes to zero",
                    "v": 15000,
                  },
                  "sstoreReset": {
                    "d": "Once per SSTORE operation if the zeroness does not change from zero",
                    "v": 5000,
                  },
                  "sstoreSet": {
                    "d": "Once per SSTORE operation if the zeroness changes from zero",
                    "v": 20000,
                  },
                  "stop": {
                    "d": "Base fee of the STOP opcode",
                    "v": 0,
                  },
                  "sub": {
                    "d": "Base fee of the SUB opcode",
                    "v": 3,
                  },
                  "swap": {
                    "d": "Base fee of the SWAP opcode",
                    "v": 3,
                  },
                  "timestamp": {
                    "d": "Base fee of the TIMESTAMP opcode",
                    "v": 2,
                  },
                  "tx": {
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                    "v": 21000,
                  },
                  "txCreation": {
                    "d": "The cost of creating a contract via tx",
                    "v": 32000,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 68,
                  },
                  "txDataZero": {
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                    "v": 4,
                  },
                  "xor": {
                    "d": "Base fee of the XOR opcode",
                    "v": 3,
                  },
                },
                "name": "chainstart",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 0,
                  },
                  "difficultyBoundDivisor": {
                    "d": "The bound divisor of the difficulty, used in the update calculations",
                    "v": 2048,
                  },
                  "durationLimit": {
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                    "v": 13,
                  },
                  "epochDuration": {
                    "d": "Duration between proof-of-work epochs",
                    "v": 30000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 5000000000000000000n,
                  },
                  "minimumDifficulty": {
                    "d": "The minimum that the difficulty may ever be",
                    "v": 131072,
                  },
                  "timebombPeriod": {
                    "d": "Exponential difficulty timebomb period",
                    "v": 100000,
                  },
                },
                "status": "final",
                "url": "",
                "vm": {
                  "callCreateDepth": {
                    "d": "Maximum depth of call/create stack",
                    "v": 1024,
                  },
                  "maxExtraDataSize": {
                    "d": "Maximum size extra data may be after Genesis",
                    "v": 32,
                  },
                  "stackLimit": {
                    "d": "Maximum size of VM stack allowed",
                    "v": 1024,
                  },
                },
              },
            ],
            [
              "homestead",
              {
                "comment": "Homestead hardfork with protocol and network changes",
                "gasPrices": {
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 40,
                  },
                },
                "name": "homestead",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-606",
              },
            ],
            [
              "dao",
              {
                "comment": "DAO rescue hardfork",
                "name": "dao",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-779",
              },
            ],
            [
              "tangerineWhistle",
              {
                "comment": "Hardfork with gas cost changes for IO-heavy operations",
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 400,
                  },
                  "call": {
                    "d": "Once per CALL operation & message call transaction",
                    "v": 700,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 700,
                  },
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 700,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 700,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 700,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 5000,
                  },
                  "sload": {
                    "d": "Once per SLOAD operation",
                    "v": 200,
                  },
                },
                "name": "tangerineWhistle",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-608",
              },
            ],
            [
              "spuriousDragon",
              {
                "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
                "gasPrices": {
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 50,
                  },
                },
                "name": "spuriousDragon",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "vm": {
                  "maxCodeSize": {
                    "d": "Maximum length of contract code",
                    "v": 24576,
                  },
                },
              },
            ],
            [
              "byzantium",
              {
                "comment": "Hardfork with new precompiles, instructions and other protocol changes",
                "gasPrices": {
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 500,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 40000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 100000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 80000,
                  },
                  "modexpGquaddivisor": {
                    "d": "Gquaddivisor from modexp precompile for gas calculation",
                    "v": 20,
                  },
                  "returndatacopy": {
                    "d": "Base fee of the RETURNDATACOPY opcode",
                    "v": 3,
                  },
                  "returndatasize": {
                    "d": "Base fee of the RETURNDATASIZE opcode",
                    "v": 2,
                  },
                  "revert": {
                    "d": "Base fee of the REVERT opcode",
                    "v": 0,
                  },
                  "staticcall": {
                    "d": "Base fee of the STATICCALL opcode",
                    "v": 700,
                  },
                },
                "name": "byzantium",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 3000000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 3000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-609",
              },
            ],
            [
              "constantinople",
              {
                "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
                "gasPrices": {
                  "create2": {
                    "d": "Base fee of the CREATE2 opcode",
                    "v": 32000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 400,
                  },
                  "netSstoreCleanGas": {
                    "d": "Once per SSTORE operation from clean non-zero",
                    "v": 5000,
                  },
                  "netSstoreClearRefund": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Once per SSTORE operation from dirty",
                    "v": 200,
                  },
                  "netSstoreInitGas": {
                    "d": "Once per SSTORE operation from clean zero",
                    "v": 20000,
                  },
                  "netSstoreNoopGas": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 200,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19800,
                  },
                  "netSstoreResetRefund": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4800,
                  },
                  "sar": {
                    "d": "Base fee of the SAR opcode",
                    "v": 3,
                  },
                  "shl": {
                    "d": "Base fee of the SHL opcode",
                    "v": 3,
                  },
                  "shr": {
                    "d": "Base fee of the SHR opcode",
                    "v": 3,
                  },
                },
                "name": "constantinople",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 5000000,
                  },
                  "minerReward": {
                    "d": "The amount a miner gets rewarded for mining a block",
                    "v": 2000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
              },
            ],
            [
              "petersburg",
              {
                "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
                "gasPrices": {
                  "netSstoreCleanGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreInitGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreNoopGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                },
                "name": "petersburg",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
              },
            ],
            [
              "istanbul",
              {
                "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
                "gasConfig": {},
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 700,
                  },
                  "blake2Round": {
                    "d": "Gas cost per round for the Blake2 F precompile",
                    "v": 1,
                  },
                  "chainid": {
                    "d": "Base fee of the CHAINID opcode",
                    "v": 2,
                  },
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 150,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 6000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 45000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 34000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 700,
                  },
                  "selfbalance": {
                    "d": "Base fee of the SELFBALANCE opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 800,
                  },
                  "sstoreCleanGasEIP2200": {
                    "d": "Once per SSTORE operation from clean non-zero to something else",
                    "v": 5000,
                  },
                  "sstoreCleanRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4200,
                  },
                  "sstoreClearRefundEIP2200": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "sstoreDirtyGasEIP2200": {
                    "d": "Once per SSTORE operation if a dirty value is changed",
                    "v": 800,
                  },
                  "sstoreInitGasEIP2200": {
                    "d": "Once per SSTORE operation from clean zero to non-zero",
                    "v": 20000,
                  },
                  "sstoreInitRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19200,
                  },
                  "sstoreNoopGasEIP2200": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 800,
                  },
                  "sstoreSentryGasEIP2200": {
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                    "v": 2300,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 16,
                  },
                },
                "name": "istanbul",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
              },
            ],
            [
              "muirGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "name": "muirGlacier",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 9000000,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
              },
            ],
            [
              "berlin",
              {
                "comment": "HF targeted for July 2020 following the Muir Glacier HF",
                "eips": [
                  2565,
                  2929,
                  2718,
                  2930,
                ],
                "name": "berlin",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2070",
              },
            ],
            [
              "london",
              {
                "comment": "HF targeted for July 2021 following the Berlin fork",
                "eips": [
                  1559,
                  3198,
                  3529,
                  3541,
                ],
                "name": "london",
                "status": "final",
                "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
              },
            ],
            [
              "arrowGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "eips": [
                  4345,
                ],
                "name": "arrowGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
              },
            ],
            [
              "grayGlacier",
              {
                "comment": "Delaying the difficulty bomb to Mid September 2022",
                "eips": [
                  5133,
                ],
                "name": "grayGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
              },
            ],
            [
              "paris",
              {
                "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
                "consensus": {
                  "algorithm": "casper",
                  "casper": {},
                  "type": "pos",
                },
                "eips": [
                  3675,
                  4399,
                ],
                "name": "paris",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
              },
            ],
            [
              "mergeForkIdTransition",
              {
                "comment": "Pre-merge hardfork to fork off non-upgraded clients",
                "eips": [],
                "name": "mergeForkIdTransition",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-3675",
              },
            ],
            [
              "shanghai",
              {
                "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
                "eips": [
                  3651,
                  3855,
                  3860,
                  4895,
                ],
                "name": "shanghai",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
              },
            ],
            [
              "cancun",
              {
                "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
                "eips": [
                  1153,
                  4844,
                  4788,
                  5656,
                  6780,
                  7516,
                ],
                "name": "cancun",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
              },
            ],
          ],
          "_activatedEIPsCache": [
            2565,
            2929,
            2718,
            2930,
            1559,
            3198,
            3529,
            3541,
            4345,
            5133,
            3675,
            4399,
            3651,
            3855,
            3860,
            4895,
            1153,
            4844,
            4788,
            5656,
            6780,
            7516,
            1559,
            4895,
            4844,
            4788,
          ],
          "_chainParams": {
            "bootstrapNodes": [
              {
                "comment": "bootnode-aws-ap-southeast-1-001",
                "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                "ip": "18.138.108.67",
                "location": "ap-southeast-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-aws-us-east-1-001",
                "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                "ip": "3.209.45.79",
                "location": "us-east-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-hel",
                "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
                "ip": "65.108.70.101",
                "location": "eu-west-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-fsn",
                "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
                "ip": "157.90.35.166",
                "location": "eu-central-1-001",
                "port": 30303,
              },
            ],
            "chainId": 10,
            "comment": "The Ethereum main chain",
            "consensus": {
              "algorithm": "ethash",
              "ethash": {},
              "type": "pow",
            },
            "defaultHardfork": "shanghai",
            "dnsNetworks": [
              "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
            ],
            "genesis": {
              "difficulty": 17179869184,
              "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
              "gasLimit": 5000,
              "nonce": "0x0000000000000042",
            },
            "hardforks": [
              {
                "block": 0,
                "forkHash": "0xfc64ec04",
                "name": "chainstart",
              },
              {
                "block": 1150000,
                "forkHash": "0x97c2c34c",
                "name": "homestead",
              },
              {
                "block": 1920000,
                "forkHash": "0x91d1f948",
                "name": "dao",
              },
              {
                "block": 2463000,
                "forkHash": "0x7a64da13",
                "name": "tangerineWhistle",
              },
              {
                "block": 2675000,
                "forkHash": "0x3edd5b10",
                "name": "spuriousDragon",
              },
              {
                "block": 4370000,
                "forkHash": "0xa00bc324",
                "name": "byzantium",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "constantinople",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "petersburg",
              },
              {
                "block": 9069000,
                "forkHash": "0x879d6e30",
                "name": "istanbul",
              },
              {
                "block": 9200000,
                "forkHash": "0xe029e991",
                "name": "muirGlacier",
              },
              {
                "block": 12244000,
                "forkHash": "0x0eb440f6",
                "name": "berlin",
              },
              {
                "block": 12965000,
                "forkHash": "0xb715077d",
                "name": "london",
              },
              {
                "block": 13773000,
                "forkHash": "0x20c327fc",
                "name": "arrowGlacier",
              },
              {
                "block": 15050000,
                "forkHash": "0xf0afd0e3",
                "name": "grayGlacier",
              },
              {
                "block": 15537394,
                "forkHash": "0xf0afd0e3",
                "name": "paris",
                "ttd": "58750000000000000000000",
              },
              {
                "block": null,
                "forkHash": null,
                "name": "mergeForkIdTransition",
              },
              {
                "block": null,
                "forkHash": "0xdce96c2d",
                "name": "shanghai",
                "timestamp": "1681338455",
              },
              {
                "block": null,
                "forkHash": "0x9f3d2254",
                "name": "cancun",
                "timestamp": "1710338135",
              },
            ],
            "name": "TevmCustom",
            "networkId": 10,
            "url": "https://ethstats.net/",
          },
          "_customChains": [],
          "_eips": [
            1559,
            4895,
            4844,
            4788,
          ],
          "_hardfork": "cancun",
          "_paramsCache": {
            "gasConfig": {
              "baseFeeMaxChangeDenominator": {
                "d": "Maximum base fee change denominator",
                "v": 8,
              },
              "blobGasPerBlob": {
                "d": "The base fee for blob gas per blob",
                "v": 131072,
              },
              "blobGasPriceUpdateFraction": {
                "d": "The denominator used in the exponential when calculating a blob gas price",
                "v": 3338477,
              },
              "elasticityMultiplier": {
                "d": "Maximum block gas target elasticity",
                "v": 2,
              },
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "initialBaseFee": {
                "d": "Initial base fee on first EIP1559 block",
                "v": 1000000000,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 5,
              },
              "maxblobGasPerBlock": {
                "d": "The max blob gas allowable per block",
                "v": 786432,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
              "targetBlobGasPerBlock": {
                "d": "The target blob gas consumed per block",
                "v": 393216,
              },
            },
            "gasPrices": {
              "accessListAddressCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 2400,
              },
              "accessListStorageKeyCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 1900,
              },
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 0,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "basefee": {
                "d": "Gas cost of the BASEFEE opcode",
                "v": 2,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "blobbasefee": {
                "d": "Gas cost of the BLOBBASEFEE opcode",
                "v": 2,
              },
              "blobhash": {
                "d": "Base fee of the BLOBHASH opcode",
                "v": 3,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 0,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 0,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "coldaccountaccess": {
                "d": "Gas cost of the first read of a given address (per transaction)",
                "v": 2600,
              },
              "coldsload": {
                "d": "Gas cost of the first read of storage from a given location (per transaction)",
                "v": 2100,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 0,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 0,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 0,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 0,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "initCodeWordCost": {
                "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
                "v": 2,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "kzgPointEvaluationGasPrecompilePrice": {
                "d": "The fee associated with the point evaluation precompile",
                "v": 50000,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "mcopy": {
                "d": "Base fee of the MCOPY opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "minBlobGasPrice": {
                "d": "The minimum fee per blob gas",
                "v": 1,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 3,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "prevrandao": {
                "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "push0": {
                "d": "Base fee of the PUSH0 opcode",
                "v": 2,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 0,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "simpleGasPerBlob": {
                "d": "The basic gas fee for each blob",
                "v": 12000,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 0,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 2900,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4900,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 4800,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 100,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19900,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 100,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 0,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tload": {
                "d": "Base fee of the TLOAD opcode",
                "v": 100,
              },
              "tstore": {
                "d": "Base fee of the TSTORE opcode",
                "v": 100,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "warmstorageread": {
                "d": "Gas cost of reading storage locations which have already loaded 'cold'",
                "v": 100,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 11400000,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "sharding": {
              "blobCommitmentVersionKzg": {
                "d": "The number indicated a versioned hash is a KZG commitment",
                "v": 1,
              },
              "fieldElementsPerBlob": {
                "d": "The number of field elements allowed per blob",
                "v": 4096,
              },
            },
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "historicalRootsLength": {
                "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
                "v": 8191,
              },
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "maxInitCodeSize": {
                "d": "Maximum length of initialization code when creating a contract",
                "v": 49152,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
          "customCrypto": {
            "kzg": {
              "blobToKzgCommitment": [Function],
              "computeBlobKzgProof": [Function],
              "freeTrustedSetup": [Function],
              "loadTrustedSetup": [Function],
              "verifyBlobKzgProof": [Function],
              "verifyBlobKzgProofBatch": [Function],
              "verifyKzgProof": [Function],
            },
          },
          "events": EventEmitter2 {
            "_events": {},
            "_eventsCount": 0,
            "_maxListeners": undefined,
            [Symbol(kCapture)]: false,
          },
        },
      },
      "v": 56n,
      "value": 0n,
    },
    LegacyTransaction {
      "DEFAULT_CHAIN": 1,
      "_type": 0,
      "activeCapabilities": [
        155,
      ],
      "cache": {
        "dataFee": undefined,
        "hash": undefined,
        "senderPubKey": undefined,
      },
      "common": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "data": Uint8Array [
        107,
        99,
        74,
        98,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        137,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        71,
        13,
        228,
        223,
        130,
        0,
        0,
      ],
      "gasLimit": 325701n,
      "gasPrice": 61070000n,
      "keccakFunction": [Function],
      "nonce": 63n,
      "r": 61346372932570087334750204900615813024526366529450911167454478596183485620146n,
      "s": 8881716523204978683473250912088057941286284549698710989556895738422007799793n,
      "to": Address {
        "bytes": Uint8Array [
          193,
          16,
          231,
          250,
          169,
          86,
          128,
          199,
          153,
          55,
          204,
          172,
          163,
          209,
          202,
          183,
          144,
          43,
          226,
          94,
        ],
      },
      "txOptions": {
        "common": Common {
          "DEFAULT_HARDFORK": "shanghai",
          "HARDFORK_CHANGES": [
            [
              "chainstart",
              {
                "comment": "Start of the Ethereum main chain",
                "gasConfig": {
                  "gasLimitBoundDivisor": {
                    "d": "The bound divisor of the gas limit, used in update calculations",
                    "v": 1024,
                  },
                  "maxRefundQuotient": {
                    "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                    "v": 2,
                  },
                  "minGasLimit": {
                    "d": "Minimum the gas limit may ever be",
                    "v": 5000,
                  },
                },
                "gasPrices": {
                  "add": {
                    "d": "Base fee of the ADD opcode",
                    "v": 3,
                  },
                  "addmod": {
                    "d": "Base fee of the ADDMOD opcode",
                    "v": 8,
                  },
                  "address": {
                    "d": "Base fee of the ADDRESS opcode",
                    "v": 2,
                  },
                  "and": {
                    "d": "Base fee of the AND opcode",
                    "v": 3,
                  },
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 20,
                  },
                  "base": {
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                    "v": 2,
                  },
                  "blockhash": {
                    "d": "Base fee of the BLOCKHASH opcode",
                    "v": 20,
                  },
                  "byte": {
                    "d": "Base fee of the BYTE opcode",
                    "v": 3,
                  },
                  "call": {
                    "d": "Base fee of the CALL opcode",
                    "v": 40,
                  },
                  "callNewAccount": {
                    "d": "Paid for CALL when the destination address didn't exist prior",
                    "v": 25000,
                  },
                  "callStipend": {
                    "d": "Free gas given at beginning of call",
                    "v": 2300,
                  },
                  "callValueTransfer": {
                    "d": "Paid for CALL when the value transfor is non-zero",
                    "v": 9000,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 40,
                  },
                  "calldatacopy": {
                    "d": "Base fee of the CALLDATACOPY opcode",
                    "v": 3,
                  },
                  "calldataload": {
                    "d": "Base fee of the CALLDATALOAD opcode",
                    "v": 3,
                  },
                  "calldatasize": {
                    "d": "Base fee of the CALLDATASIZE opcode",
                    "v": 2,
                  },
                  "caller": {
                    "d": "Base fee of the CALLER opcode",
                    "v": 2,
                  },
                  "callvalue": {
                    "d": "Base fee of the CALLVALUE opcode",
                    "v": 2,
                  },
                  "codecopy": {
                    "d": "Base fee of the CODECOPY opcode",
                    "v": 3,
                  },
                  "codesize": {
                    "d": "Base fee of the CODESIZE opcode",
                    "v": 2,
                  },
                  "coinbase": {
                    "d": "Base fee of the COINBASE opcode",
                    "v": 2,
                  },
                  "copy": {
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                    "v": 3,
                  },
                  "create": {
                    "d": "Base fee of the CREATE opcode",
                    "v": 32000,
                  },
                  "createData": {
                    "d": "",
                    "v": 200,
                  },
                  "difficulty": {
                    "d": "Base fee of the DIFFICULTY opcode",
                    "v": 2,
                  },
                  "div": {
                    "d": "Base fee of the DIV opcode",
                    "v": 5,
                  },
                  "dup": {
                    "d": "Base fee of the DUP opcode",
                    "v": 3,
                  },
                  "ecRecover": {
                    "d": "",
                    "v": 3000,
                  },
                  "eq": {
                    "d": "Base fee of the EQ opcode",
                    "v": 3,
                  },
                  "exp": {
                    "d": "Base fee of the EXP opcode",
                    "v": 10,
                  },
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 10,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 20,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 20,
                  },
                  "gas": {
                    "d": "Base fee of the GAS opcode",
                    "v": 2,
                  },
                  "gaslimit": {
                    "d": "Base fee of the GASLIMIT opcode",
                    "v": 2,
                  },
                  "gasprice": {
                    "d": "Base fee of the GASPRICE opcode",
                    "v": 2,
                  },
                  "gt": {
                    "d": "Base fee of the GT opcode",
                    "v": 3,
                  },
                  "identity": {
                    "d": "",
                    "v": 15,
                  },
                  "identityWord": {
                    "d": "",
                    "v": 3,
                  },
                  "invalid": {
                    "d": "Base fee of the INVALID opcode",
                    "v": 0,
                  },
                  "iszero": {
                    "d": "Base fee of the ISZERO opcode",
                    "v": 3,
                  },
                  "jump": {
                    "d": "Base fee of the JUMP opcode",
                    "v": 8,
                  },
                  "jumpdest": {
                    "d": "Base fee of the JUMPDEST opcode",
                    "v": 1,
                  },
                  "jumpi": {
                    "d": "Base fee of the JUMPI opcode",
                    "v": 10,
                  },
                  "keccak256": {
                    "d": "Base fee of the SHA3 opcode",
                    "v": 30,
                  },
                  "keccak256Word": {
                    "d": "Once per word of the SHA3 operation's data",
                    "v": 6,
                  },
                  "log": {
                    "d": "Base fee of the LOG opcode",
                    "v": 375,
                  },
                  "logData": {
                    "d": "Per byte in a LOG* operation's data",
                    "v": 8,
                  },
                  "logTopic": {
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                    "v": 375,
                  },
                  "lt": {
                    "d": "Base fee of the LT opcode",
                    "v": 3,
                  },
                  "memory": {
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                    "v": 3,
                  },
                  "mload": {
                    "d": "Base fee of the MLOAD opcode",
                    "v": 3,
                  },
                  "mod": {
                    "d": "Base fee of the MOD opcode",
                    "v": 5,
                  },
                  "msize": {
                    "d": "Base fee of the MSIZE opcode",
                    "v": 2,
                  },
                  "mstore": {
                    "d": "Base fee of the MSTORE opcode",
                    "v": 3,
                  },
                  "mstore8": {
                    "d": "Base fee of the MSTORE8 opcode",
                    "v": 3,
                  },
                  "mul": {
                    "d": "Base fee of the MUL opcode",
                    "v": 5,
                  },
                  "mulmod": {
                    "d": "Base fee of the MULMOD opcode",
                    "v": 8,
                  },
                  "not": {
                    "d": "Base fee of the NOT opcode",
                    "v": 3,
                  },
                  "number": {
                    "d": "Base fee of the NUMBER opcode",
                    "v": 2,
                  },
                  "or": {
                    "d": "Base fee of the OR opcode",
                    "v": 3,
                  },
                  "origin": {
                    "d": "Base fee of the ORIGIN opcode",
                    "v": 2,
                  },
                  "pc": {
                    "d": "Base fee of the PC opcode",
                    "v": 2,
                  },
                  "pop": {
                    "d": "Base fee of the POP opcode",
                    "v": 2,
                  },
                  "push": {
                    "d": "Base fee of the PUSH opcode",
                    "v": 3,
                  },
                  "quadCoeffDiv": {
                    "d": "Divisor for the quadratic particle of the memory cost equation",
                    "v": 512,
                  },
                  "return": {
                    "d": "Base fee of the RETURN opcode",
                    "v": 0,
                  },
                  "ripemd160": {
                    "d": "",
                    "v": 600,
                  },
                  "ripemd160Word": {
                    "d": "",
                    "v": 120,
                  },
                  "sdiv": {
                    "d": "Base fee of the SDIV opcode",
                    "v": 5,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 0,
                  },
                  "selfdestructRefund": {
                    "d": "Refunded following a selfdestruct operation",
                    "v": 24000,
                  },
                  "sgt": {
                    "d": "Base fee of the SGT opcode",
                    "v": 3,
                  },
                  "sha256": {
                    "d": "",
                    "v": 60,
                  },
                  "sha256Word": {
                    "d": "",
                    "v": 12,
                  },
                  "signextend": {
                    "d": "Base fee of the SIGNEXTEND opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 50,
                  },
                  "slt": {
                    "d": "Base fee of the SLT opcode",
                    "v": 3,
                  },
                  "smod": {
                    "d": "Base fee of the SMOD opcode",
                    "v": 5,
                  },
                  "sstore": {
                    "d": "Base fee of the SSTORE opcode",
                    "v": 0,
                  },
                  "sstoreRefund": {
                    "d": "Once per SSTORE operation if the zeroness changes to zero",
                    "v": 15000,
                  },
                  "sstoreReset": {
                    "d": "Once per SSTORE operation if the zeroness does not change from zero",
                    "v": 5000,
                  },
                  "sstoreSet": {
                    "d": "Once per SSTORE operation if the zeroness changes from zero",
                    "v": 20000,
                  },
                  "stop": {
                    "d": "Base fee of the STOP opcode",
                    "v": 0,
                  },
                  "sub": {
                    "d": "Base fee of the SUB opcode",
                    "v": 3,
                  },
                  "swap": {
                    "d": "Base fee of the SWAP opcode",
                    "v": 3,
                  },
                  "timestamp": {
                    "d": "Base fee of the TIMESTAMP opcode",
                    "v": 2,
                  },
                  "tx": {
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                    "v": 21000,
                  },
                  "txCreation": {
                    "d": "The cost of creating a contract via tx",
                    "v": 32000,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 68,
                  },
                  "txDataZero": {
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                    "v": 4,
                  },
                  "xor": {
                    "d": "Base fee of the XOR opcode",
                    "v": 3,
                  },
                },
                "name": "chainstart",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 0,
                  },
                  "difficultyBoundDivisor": {
                    "d": "The bound divisor of the difficulty, used in the update calculations",
                    "v": 2048,
                  },
                  "durationLimit": {
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                    "v": 13,
                  },
                  "epochDuration": {
                    "d": "Duration between proof-of-work epochs",
                    "v": 30000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 5000000000000000000n,
                  },
                  "minimumDifficulty": {
                    "d": "The minimum that the difficulty may ever be",
                    "v": 131072,
                  },
                  "timebombPeriod": {
                    "d": "Exponential difficulty timebomb period",
                    "v": 100000,
                  },
                },
                "status": "final",
                "url": "",
                "vm": {
                  "callCreateDepth": {
                    "d": "Maximum depth of call/create stack",
                    "v": 1024,
                  },
                  "maxExtraDataSize": {
                    "d": "Maximum size extra data may be after Genesis",
                    "v": 32,
                  },
                  "stackLimit": {
                    "d": "Maximum size of VM stack allowed",
                    "v": 1024,
                  },
                },
              },
            ],
            [
              "homestead",
              {
                "comment": "Homestead hardfork with protocol and network changes",
                "gasPrices": {
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 40,
                  },
                },
                "name": "homestead",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-606",
              },
            ],
            [
              "dao",
              {
                "comment": "DAO rescue hardfork",
                "name": "dao",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-779",
              },
            ],
            [
              "tangerineWhistle",
              {
                "comment": "Hardfork with gas cost changes for IO-heavy operations",
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 400,
                  },
                  "call": {
                    "d": "Once per CALL operation & message call transaction",
                    "v": 700,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 700,
                  },
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 700,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 700,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 700,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 5000,
                  },
                  "sload": {
                    "d": "Once per SLOAD operation",
                    "v": 200,
                  },
                },
                "name": "tangerineWhistle",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-608",
              },
            ],
            [
              "spuriousDragon",
              {
                "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
                "gasPrices": {
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 50,
                  },
                },
                "name": "spuriousDragon",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "vm": {
                  "maxCodeSize": {
                    "d": "Maximum length of contract code",
                    "v": 24576,
                  },
                },
              },
            ],
            [
              "byzantium",
              {
                "comment": "Hardfork with new precompiles, instructions and other protocol changes",
                "gasPrices": {
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 500,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 40000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 100000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 80000,
                  },
                  "modexpGquaddivisor": {
                    "d": "Gquaddivisor from modexp precompile for gas calculation",
                    "v": 20,
                  },
                  "returndatacopy": {
                    "d": "Base fee of the RETURNDATACOPY opcode",
                    "v": 3,
                  },
                  "returndatasize": {
                    "d": "Base fee of the RETURNDATASIZE opcode",
                    "v": 2,
                  },
                  "revert": {
                    "d": "Base fee of the REVERT opcode",
                    "v": 0,
                  },
                  "staticcall": {
                    "d": "Base fee of the STATICCALL opcode",
                    "v": 700,
                  },
                },
                "name": "byzantium",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 3000000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 3000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-609",
              },
            ],
            [
              "constantinople",
              {
                "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
                "gasPrices": {
                  "create2": {
                    "d": "Base fee of the CREATE2 opcode",
                    "v": 32000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 400,
                  },
                  "netSstoreCleanGas": {
                    "d": "Once per SSTORE operation from clean non-zero",
                    "v": 5000,
                  },
                  "netSstoreClearRefund": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Once per SSTORE operation from dirty",
                    "v": 200,
                  },
                  "netSstoreInitGas": {
                    "d": "Once per SSTORE operation from clean zero",
                    "v": 20000,
                  },
                  "netSstoreNoopGas": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 200,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19800,
                  },
                  "netSstoreResetRefund": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4800,
                  },
                  "sar": {
                    "d": "Base fee of the SAR opcode",
                    "v": 3,
                  },
                  "shl": {
                    "d": "Base fee of the SHL opcode",
                    "v": 3,
                  },
                  "shr": {
                    "d": "Base fee of the SHR opcode",
                    "v": 3,
                  },
                },
                "name": "constantinople",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 5000000,
                  },
                  "minerReward": {
                    "d": "The amount a miner gets rewarded for mining a block",
                    "v": 2000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
              },
            ],
            [
              "petersburg",
              {
                "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
                "gasPrices": {
                  "netSstoreCleanGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreInitGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreNoopGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                },
                "name": "petersburg",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
              },
            ],
            [
              "istanbul",
              {
                "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
                "gasConfig": {},
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 700,
                  },
                  "blake2Round": {
                    "d": "Gas cost per round for the Blake2 F precompile",
                    "v": 1,
                  },
                  "chainid": {
                    "d": "Base fee of the CHAINID opcode",
                    "v": 2,
                  },
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 150,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 6000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 45000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 34000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 700,
                  },
                  "selfbalance": {
                    "d": "Base fee of the SELFBALANCE opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 800,
                  },
                  "sstoreCleanGasEIP2200": {
                    "d": "Once per SSTORE operation from clean non-zero to something else",
                    "v": 5000,
                  },
                  "sstoreCleanRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4200,
                  },
                  "sstoreClearRefundEIP2200": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "sstoreDirtyGasEIP2200": {
                    "d": "Once per SSTORE operation if a dirty value is changed",
                    "v": 800,
                  },
                  "sstoreInitGasEIP2200": {
                    "d": "Once per SSTORE operation from clean zero to non-zero",
                    "v": 20000,
                  },
                  "sstoreInitRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19200,
                  },
                  "sstoreNoopGasEIP2200": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 800,
                  },
                  "sstoreSentryGasEIP2200": {
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                    "v": 2300,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 16,
                  },
                },
                "name": "istanbul",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
              },
            ],
            [
              "muirGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "name": "muirGlacier",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 9000000,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
              },
            ],
            [
              "berlin",
              {
                "comment": "HF targeted for July 2020 following the Muir Glacier HF",
                "eips": [
                  2565,
                  2929,
                  2718,
                  2930,
                ],
                "name": "berlin",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2070",
              },
            ],
            [
              "london",
              {
                "comment": "HF targeted for July 2021 following the Berlin fork",
                "eips": [
                  1559,
                  3198,
                  3529,
                  3541,
                ],
                "name": "london",
                "status": "final",
                "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
              },
            ],
            [
              "arrowGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "eips": [
                  4345,
                ],
                "name": "arrowGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
              },
            ],
            [
              "grayGlacier",
              {
                "comment": "Delaying the difficulty bomb to Mid September 2022",
                "eips": [
                  5133,
                ],
                "name": "grayGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
              },
            ],
            [
              "paris",
              {
                "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
                "consensus": {
                  "algorithm": "casper",
                  "casper": {},
                  "type": "pos",
                },
                "eips": [
                  3675,
                  4399,
                ],
                "name": "paris",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
              },
            ],
            [
              "mergeForkIdTransition",
              {
                "comment": "Pre-merge hardfork to fork off non-upgraded clients",
                "eips": [],
                "name": "mergeForkIdTransition",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-3675",
              },
            ],
            [
              "shanghai",
              {
                "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
                "eips": [
                  3651,
                  3855,
                  3860,
                  4895,
                ],
                "name": "shanghai",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
              },
            ],
            [
              "cancun",
              {
                "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
                "eips": [
                  1153,
                  4844,
                  4788,
                  5656,
                  6780,
                  7516,
                ],
                "name": "cancun",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
              },
            ],
          ],
          "_activatedEIPsCache": [
            2565,
            2929,
            2718,
            2930,
            1559,
            3198,
            3529,
            3541,
            4345,
            5133,
            3675,
            4399,
            3651,
            3855,
            3860,
            4895,
            1153,
            4844,
            4788,
            5656,
            6780,
            7516,
            1559,
            4895,
            4844,
            4788,
          ],
          "_chainParams": {
            "bootstrapNodes": [
              {
                "comment": "bootnode-aws-ap-southeast-1-001",
                "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                "ip": "18.138.108.67",
                "location": "ap-southeast-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-aws-us-east-1-001",
                "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                "ip": "3.209.45.79",
                "location": "us-east-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-hel",
                "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
                "ip": "65.108.70.101",
                "location": "eu-west-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-fsn",
                "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
                "ip": "157.90.35.166",
                "location": "eu-central-1-001",
                "port": 30303,
              },
            ],
            "chainId": 10,
            "comment": "The Ethereum main chain",
            "consensus": {
              "algorithm": "ethash",
              "ethash": {},
              "type": "pow",
            },
            "defaultHardfork": "shanghai",
            "dnsNetworks": [
              "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
            ],
            "genesis": {
              "difficulty": 17179869184,
              "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
              "gasLimit": 5000,
              "nonce": "0x0000000000000042",
            },
            "hardforks": [
              {
                "block": 0,
                "forkHash": "0xfc64ec04",
                "name": "chainstart",
              },
              {
                "block": 1150000,
                "forkHash": "0x97c2c34c",
                "name": "homestead",
              },
              {
                "block": 1920000,
                "forkHash": "0x91d1f948",
                "name": "dao",
              },
              {
                "block": 2463000,
                "forkHash": "0x7a64da13",
                "name": "tangerineWhistle",
              },
              {
                "block": 2675000,
                "forkHash": "0x3edd5b10",
                "name": "spuriousDragon",
              },
              {
                "block": 4370000,
                "forkHash": "0xa00bc324",
                "name": "byzantium",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "constantinople",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "petersburg",
              },
              {
                "block": 9069000,
                "forkHash": "0x879d6e30",
                "name": "istanbul",
              },
              {
                "block": 9200000,
                "forkHash": "0xe029e991",
                "name": "muirGlacier",
              },
              {
                "block": 12244000,
                "forkHash": "0x0eb440f6",
                "name": "berlin",
              },
              {
                "block": 12965000,
                "forkHash": "0xb715077d",
                "name": "london",
              },
              {
                "block": 13773000,
                "forkHash": "0x20c327fc",
                "name": "arrowGlacier",
              },
              {
                "block": 15050000,
                "forkHash": "0xf0afd0e3",
                "name": "grayGlacier",
              },
              {
                "block": 15537394,
                "forkHash": "0xf0afd0e3",
                "name": "paris",
                "ttd": "58750000000000000000000",
              },
              {
                "block": null,
                "forkHash": null,
                "name": "mergeForkIdTransition",
              },
              {
                "block": null,
                "forkHash": "0xdce96c2d",
                "name": "shanghai",
                "timestamp": "1681338455",
              },
              {
                "block": null,
                "forkHash": "0x9f3d2254",
                "name": "cancun",
                "timestamp": "1710338135",
              },
            ],
            "name": "TevmCustom",
            "networkId": 10,
            "url": "https://ethstats.net/",
          },
          "_customChains": [],
          "_eips": [
            1559,
            4895,
            4844,
            4788,
          ],
          "_hardfork": "cancun",
          "_paramsCache": {
            "gasConfig": {
              "baseFeeMaxChangeDenominator": {
                "d": "Maximum base fee change denominator",
                "v": 8,
              },
              "blobGasPerBlob": {
                "d": "The base fee for blob gas per blob",
                "v": 131072,
              },
              "blobGasPriceUpdateFraction": {
                "d": "The denominator used in the exponential when calculating a blob gas price",
                "v": 3338477,
              },
              "elasticityMultiplier": {
                "d": "Maximum block gas target elasticity",
                "v": 2,
              },
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "initialBaseFee": {
                "d": "Initial base fee on first EIP1559 block",
                "v": 1000000000,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 5,
              },
              "maxblobGasPerBlock": {
                "d": "The max blob gas allowable per block",
                "v": 786432,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
              "targetBlobGasPerBlock": {
                "d": "The target blob gas consumed per block",
                "v": 393216,
              },
            },
            "gasPrices": {
              "accessListAddressCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 2400,
              },
              "accessListStorageKeyCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 1900,
              },
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 0,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "basefee": {
                "d": "Gas cost of the BASEFEE opcode",
                "v": 2,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "blobbasefee": {
                "d": "Gas cost of the BLOBBASEFEE opcode",
                "v": 2,
              },
              "blobhash": {
                "d": "Base fee of the BLOBHASH opcode",
                "v": 3,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 0,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 0,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "coldaccountaccess": {
                "d": "Gas cost of the first read of a given address (per transaction)",
                "v": 2600,
              },
              "coldsload": {
                "d": "Gas cost of the first read of storage from a given location (per transaction)",
                "v": 2100,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 0,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 0,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 0,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 0,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "initCodeWordCost": {
                "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
                "v": 2,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "kzgPointEvaluationGasPrecompilePrice": {
                "d": "The fee associated with the point evaluation precompile",
                "v": 50000,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "mcopy": {
                "d": "Base fee of the MCOPY opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "minBlobGasPrice": {
                "d": "The minimum fee per blob gas",
                "v": 1,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 3,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "prevrandao": {
                "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "push0": {
                "d": "Base fee of the PUSH0 opcode",
                "v": 2,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 0,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "simpleGasPerBlob": {
                "d": "The basic gas fee for each blob",
                "v": 12000,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 0,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 2900,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4900,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 4800,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 100,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19900,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 100,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 0,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tload": {
                "d": "Base fee of the TLOAD opcode",
                "v": 100,
              },
              "tstore": {
                "d": "Base fee of the TSTORE opcode",
                "v": 100,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "warmstorageread": {
                "d": "Gas cost of reading storage locations which have already loaded 'cold'",
                "v": 100,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 11400000,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "sharding": {
              "blobCommitmentVersionKzg": {
                "d": "The number indicated a versioned hash is a KZG commitment",
                "v": 1,
              },
              "fieldElementsPerBlob": {
                "d": "The number of field elements allowed per blob",
                "v": 4096,
              },
            },
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "historicalRootsLength": {
                "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
                "v": 8191,
              },
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "maxInitCodeSize": {
                "d": "Maximum length of initialization code when creating a contract",
                "v": 49152,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
          "customCrypto": {
            "kzg": {
              "blobToKzgCommitment": [Function],
              "computeBlobKzgProof": [Function],
              "freeTrustedSetup": [Function],
              "loadTrustedSetup": [Function],
              "verifyBlobKzgProof": [Function],
              "verifyBlobKzgProofBatch": [Function],
              "verifyKzgProof": [Function],
            },
          },
          "events": EventEmitter2 {
            "_events": {},
            "_eventsCount": 0,
            "_maxListeners": undefined,
            [Symbol(kCapture)]: false,
          },
        },
      },
      "v": 56n,
      "value": 20185207865227278n,
    },
    LegacyTransaction {
      "DEFAULT_CHAIN": 1,
      "_type": 0,
      "activeCapabilities": [
        155,
      ],
      "cache": {
        "dataFee": undefined,
        "hash": undefined,
        "senderPubKey": undefined,
      },
      "common": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "data": Uint8Array [
        106,
        98,
        120,
        66,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        242,
        120,
        172,
        142,
        151,
        221,
        65,
        138,
        60,
        225,
        51,
        7,
        250,
        27,
        68,
        255,
        135,
        161,
        143,
        124,
      ],
      "gasLimit": 266736n,
      "gasPrice": 61070000n,
      "keccakFunction": [Function],
      "nonce": 98n,
      "r": 5657230791248526564374884145747039693990001503307842957805901615562754008438n,
      "s": 6118563466877839802840639727005423298708799685287447154775190322969512812455n,
      "to": Address {
        "bytes": Uint8Array [
          61,
          220,
          24,
          157,
          72,
          167,
          146,
          210,
          198,
          38,
          45,
          32,
          170,
          15,
          159,
          120,
          232,
          138,
          157,
          71,
        ],
      },
      "txOptions": {
        "common": Common {
          "DEFAULT_HARDFORK": "shanghai",
          "HARDFORK_CHANGES": [
            [
              "chainstart",
              {
                "comment": "Start of the Ethereum main chain",
                "gasConfig": {
                  "gasLimitBoundDivisor": {
                    "d": "The bound divisor of the gas limit, used in update calculations",
                    "v": 1024,
                  },
                  "maxRefundQuotient": {
                    "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                    "v": 2,
                  },
                  "minGasLimit": {
                    "d": "Minimum the gas limit may ever be",
                    "v": 5000,
                  },
                },
                "gasPrices": {
                  "add": {
                    "d": "Base fee of the ADD opcode",
                    "v": 3,
                  },
                  "addmod": {
                    "d": "Base fee of the ADDMOD opcode",
                    "v": 8,
                  },
                  "address": {
                    "d": "Base fee of the ADDRESS opcode",
                    "v": 2,
                  },
                  "and": {
                    "d": "Base fee of the AND opcode",
                    "v": 3,
                  },
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 20,
                  },
                  "base": {
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                    "v": 2,
                  },
                  "blockhash": {
                    "d": "Base fee of the BLOCKHASH opcode",
                    "v": 20,
                  },
                  "byte": {
                    "d": "Base fee of the BYTE opcode",
                    "v": 3,
                  },
                  "call": {
                    "d": "Base fee of the CALL opcode",
                    "v": 40,
                  },
                  "callNewAccount": {
                    "d": "Paid for CALL when the destination address didn't exist prior",
                    "v": 25000,
                  },
                  "callStipend": {
                    "d": "Free gas given at beginning of call",
                    "v": 2300,
                  },
                  "callValueTransfer": {
                    "d": "Paid for CALL when the value transfor is non-zero",
                    "v": 9000,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 40,
                  },
                  "calldatacopy": {
                    "d": "Base fee of the CALLDATACOPY opcode",
                    "v": 3,
                  },
                  "calldataload": {
                    "d": "Base fee of the CALLDATALOAD opcode",
                    "v": 3,
                  },
                  "calldatasize": {
                    "d": "Base fee of the CALLDATASIZE opcode",
                    "v": 2,
                  },
                  "caller": {
                    "d": "Base fee of the CALLER opcode",
                    "v": 2,
                  },
                  "callvalue": {
                    "d": "Base fee of the CALLVALUE opcode",
                    "v": 2,
                  },
                  "codecopy": {
                    "d": "Base fee of the CODECOPY opcode",
                    "v": 3,
                  },
                  "codesize": {
                    "d": "Base fee of the CODESIZE opcode",
                    "v": 2,
                  },
                  "coinbase": {
                    "d": "Base fee of the COINBASE opcode",
                    "v": 2,
                  },
                  "copy": {
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                    "v": 3,
                  },
                  "create": {
                    "d": "Base fee of the CREATE opcode",
                    "v": 32000,
                  },
                  "createData": {
                    "d": "",
                    "v": 200,
                  },
                  "difficulty": {
                    "d": "Base fee of the DIFFICULTY opcode",
                    "v": 2,
                  },
                  "div": {
                    "d": "Base fee of the DIV opcode",
                    "v": 5,
                  },
                  "dup": {
                    "d": "Base fee of the DUP opcode",
                    "v": 3,
                  },
                  "ecRecover": {
                    "d": "",
                    "v": 3000,
                  },
                  "eq": {
                    "d": "Base fee of the EQ opcode",
                    "v": 3,
                  },
                  "exp": {
                    "d": "Base fee of the EXP opcode",
                    "v": 10,
                  },
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 10,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 20,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 20,
                  },
                  "gas": {
                    "d": "Base fee of the GAS opcode",
                    "v": 2,
                  },
                  "gaslimit": {
                    "d": "Base fee of the GASLIMIT opcode",
                    "v": 2,
                  },
                  "gasprice": {
                    "d": "Base fee of the GASPRICE opcode",
                    "v": 2,
                  },
                  "gt": {
                    "d": "Base fee of the GT opcode",
                    "v": 3,
                  },
                  "identity": {
                    "d": "",
                    "v": 15,
                  },
                  "identityWord": {
                    "d": "",
                    "v": 3,
                  },
                  "invalid": {
                    "d": "Base fee of the INVALID opcode",
                    "v": 0,
                  },
                  "iszero": {
                    "d": "Base fee of the ISZERO opcode",
                    "v": 3,
                  },
                  "jump": {
                    "d": "Base fee of the JUMP opcode",
                    "v": 8,
                  },
                  "jumpdest": {
                    "d": "Base fee of the JUMPDEST opcode",
                    "v": 1,
                  },
                  "jumpi": {
                    "d": "Base fee of the JUMPI opcode",
                    "v": 10,
                  },
                  "keccak256": {
                    "d": "Base fee of the SHA3 opcode",
                    "v": 30,
                  },
                  "keccak256Word": {
                    "d": "Once per word of the SHA3 operation's data",
                    "v": 6,
                  },
                  "log": {
                    "d": "Base fee of the LOG opcode",
                    "v": 375,
                  },
                  "logData": {
                    "d": "Per byte in a LOG* operation's data",
                    "v": 8,
                  },
                  "logTopic": {
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                    "v": 375,
                  },
                  "lt": {
                    "d": "Base fee of the LT opcode",
                    "v": 3,
                  },
                  "memory": {
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                    "v": 3,
                  },
                  "mload": {
                    "d": "Base fee of the MLOAD opcode",
                    "v": 3,
                  },
                  "mod": {
                    "d": "Base fee of the MOD opcode",
                    "v": 5,
                  },
                  "msize": {
                    "d": "Base fee of the MSIZE opcode",
                    "v": 2,
                  },
                  "mstore": {
                    "d": "Base fee of the MSTORE opcode",
                    "v": 3,
                  },
                  "mstore8": {
                    "d": "Base fee of the MSTORE8 opcode",
                    "v": 3,
                  },
                  "mul": {
                    "d": "Base fee of the MUL opcode",
                    "v": 5,
                  },
                  "mulmod": {
                    "d": "Base fee of the MULMOD opcode",
                    "v": 8,
                  },
                  "not": {
                    "d": "Base fee of the NOT opcode",
                    "v": 3,
                  },
                  "number": {
                    "d": "Base fee of the NUMBER opcode",
                    "v": 2,
                  },
                  "or": {
                    "d": "Base fee of the OR opcode",
                    "v": 3,
                  },
                  "origin": {
                    "d": "Base fee of the ORIGIN opcode",
                    "v": 2,
                  },
                  "pc": {
                    "d": "Base fee of the PC opcode",
                    "v": 2,
                  },
                  "pop": {
                    "d": "Base fee of the POP opcode",
                    "v": 2,
                  },
                  "push": {
                    "d": "Base fee of the PUSH opcode",
                    "v": 3,
                  },
                  "quadCoeffDiv": {
                    "d": "Divisor for the quadratic particle of the memory cost equation",
                    "v": 512,
                  },
                  "return": {
                    "d": "Base fee of the RETURN opcode",
                    "v": 0,
                  },
                  "ripemd160": {
                    "d": "",
                    "v": 600,
                  },
                  "ripemd160Word": {
                    "d": "",
                    "v": 120,
                  },
                  "sdiv": {
                    "d": "Base fee of the SDIV opcode",
                    "v": 5,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 0,
                  },
                  "selfdestructRefund": {
                    "d": "Refunded following a selfdestruct operation",
                    "v": 24000,
                  },
                  "sgt": {
                    "d": "Base fee of the SGT opcode",
                    "v": 3,
                  },
                  "sha256": {
                    "d": "",
                    "v": 60,
                  },
                  "sha256Word": {
                    "d": "",
                    "v": 12,
                  },
                  "signextend": {
                    "d": "Base fee of the SIGNEXTEND opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 50,
                  },
                  "slt": {
                    "d": "Base fee of the SLT opcode",
                    "v": 3,
                  },
                  "smod": {
                    "d": "Base fee of the SMOD opcode",
                    "v": 5,
                  },
                  "sstore": {
                    "d": "Base fee of the SSTORE opcode",
                    "v": 0,
                  },
                  "sstoreRefund": {
                    "d": "Once per SSTORE operation if the zeroness changes to zero",
                    "v": 15000,
                  },
                  "sstoreReset": {
                    "d": "Once per SSTORE operation if the zeroness does not change from zero",
                    "v": 5000,
                  },
                  "sstoreSet": {
                    "d": "Once per SSTORE operation if the zeroness changes from zero",
                    "v": 20000,
                  },
                  "stop": {
                    "d": "Base fee of the STOP opcode",
                    "v": 0,
                  },
                  "sub": {
                    "d": "Base fee of the SUB opcode",
                    "v": 3,
                  },
                  "swap": {
                    "d": "Base fee of the SWAP opcode",
                    "v": 3,
                  },
                  "timestamp": {
                    "d": "Base fee of the TIMESTAMP opcode",
                    "v": 2,
                  },
                  "tx": {
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                    "v": 21000,
                  },
                  "txCreation": {
                    "d": "The cost of creating a contract via tx",
                    "v": 32000,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 68,
                  },
                  "txDataZero": {
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                    "v": 4,
                  },
                  "xor": {
                    "d": "Base fee of the XOR opcode",
                    "v": 3,
                  },
                },
                "name": "chainstart",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 0,
                  },
                  "difficultyBoundDivisor": {
                    "d": "The bound divisor of the difficulty, used in the update calculations",
                    "v": 2048,
                  },
                  "durationLimit": {
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                    "v": 13,
                  },
                  "epochDuration": {
                    "d": "Duration between proof-of-work epochs",
                    "v": 30000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 5000000000000000000n,
                  },
                  "minimumDifficulty": {
                    "d": "The minimum that the difficulty may ever be",
                    "v": 131072,
                  },
                  "timebombPeriod": {
                    "d": "Exponential difficulty timebomb period",
                    "v": 100000,
                  },
                },
                "status": "final",
                "url": "",
                "vm": {
                  "callCreateDepth": {
                    "d": "Maximum depth of call/create stack",
                    "v": 1024,
                  },
                  "maxExtraDataSize": {
                    "d": "Maximum size extra data may be after Genesis",
                    "v": 32,
                  },
                  "stackLimit": {
                    "d": "Maximum size of VM stack allowed",
                    "v": 1024,
                  },
                },
              },
            ],
            [
              "homestead",
              {
                "comment": "Homestead hardfork with protocol and network changes",
                "gasPrices": {
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 40,
                  },
                },
                "name": "homestead",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-606",
              },
            ],
            [
              "dao",
              {
                "comment": "DAO rescue hardfork",
                "name": "dao",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-779",
              },
            ],
            [
              "tangerineWhistle",
              {
                "comment": "Hardfork with gas cost changes for IO-heavy operations",
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 400,
                  },
                  "call": {
                    "d": "Once per CALL operation & message call transaction",
                    "v": 700,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 700,
                  },
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 700,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 700,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 700,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 5000,
                  },
                  "sload": {
                    "d": "Once per SLOAD operation",
                    "v": 200,
                  },
                },
                "name": "tangerineWhistle",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-608",
              },
            ],
            [
              "spuriousDragon",
              {
                "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
                "gasPrices": {
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 50,
                  },
                },
                "name": "spuriousDragon",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "vm": {
                  "maxCodeSize": {
                    "d": "Maximum length of contract code",
                    "v": 24576,
                  },
                },
              },
            ],
            [
              "byzantium",
              {
                "comment": "Hardfork with new precompiles, instructions and other protocol changes",
                "gasPrices": {
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 500,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 40000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 100000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 80000,
                  },
                  "modexpGquaddivisor": {
                    "d": "Gquaddivisor from modexp precompile for gas calculation",
                    "v": 20,
                  },
                  "returndatacopy": {
                    "d": "Base fee of the RETURNDATACOPY opcode",
                    "v": 3,
                  },
                  "returndatasize": {
                    "d": "Base fee of the RETURNDATASIZE opcode",
                    "v": 2,
                  },
                  "revert": {
                    "d": "Base fee of the REVERT opcode",
                    "v": 0,
                  },
                  "staticcall": {
                    "d": "Base fee of the STATICCALL opcode",
                    "v": 700,
                  },
                },
                "name": "byzantium",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 3000000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 3000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-609",
              },
            ],
            [
              "constantinople",
              {
                "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
                "gasPrices": {
                  "create2": {
                    "d": "Base fee of the CREATE2 opcode",
                    "v": 32000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 400,
                  },
                  "netSstoreCleanGas": {
                    "d": "Once per SSTORE operation from clean non-zero",
                    "v": 5000,
                  },
                  "netSstoreClearRefund": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Once per SSTORE operation from dirty",
                    "v": 200,
                  },
                  "netSstoreInitGas": {
                    "d": "Once per SSTORE operation from clean zero",
                    "v": 20000,
                  },
                  "netSstoreNoopGas": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 200,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19800,
                  },
                  "netSstoreResetRefund": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4800,
                  },
                  "sar": {
                    "d": "Base fee of the SAR opcode",
                    "v": 3,
                  },
                  "shl": {
                    "d": "Base fee of the SHL opcode",
                    "v": 3,
                  },
                  "shr": {
                    "d": "Base fee of the SHR opcode",
                    "v": 3,
                  },
                },
                "name": "constantinople",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 5000000,
                  },
                  "minerReward": {
                    "d": "The amount a miner gets rewarded for mining a block",
                    "v": 2000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
              },
            ],
            [
              "petersburg",
              {
                "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
                "gasPrices": {
                  "netSstoreCleanGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreInitGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreNoopGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                },
                "name": "petersburg",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
              },
            ],
            [
              "istanbul",
              {
                "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
                "gasConfig": {},
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 700,
                  },
                  "blake2Round": {
                    "d": "Gas cost per round for the Blake2 F precompile",
                    "v": 1,
                  },
                  "chainid": {
                    "d": "Base fee of the CHAINID opcode",
                    "v": 2,
                  },
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 150,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 6000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 45000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 34000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 700,
                  },
                  "selfbalance": {
                    "d": "Base fee of the SELFBALANCE opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 800,
                  },
                  "sstoreCleanGasEIP2200": {
                    "d": "Once per SSTORE operation from clean non-zero to something else",
                    "v": 5000,
                  },
                  "sstoreCleanRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4200,
                  },
                  "sstoreClearRefundEIP2200": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "sstoreDirtyGasEIP2200": {
                    "d": "Once per SSTORE operation if a dirty value is changed",
                    "v": 800,
                  },
                  "sstoreInitGasEIP2200": {
                    "d": "Once per SSTORE operation from clean zero to non-zero",
                    "v": 20000,
                  },
                  "sstoreInitRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19200,
                  },
                  "sstoreNoopGasEIP2200": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 800,
                  },
                  "sstoreSentryGasEIP2200": {
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                    "v": 2300,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 16,
                  },
                },
                "name": "istanbul",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
              },
            ],
            [
              "muirGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "name": "muirGlacier",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 9000000,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
              },
            ],
            [
              "berlin",
              {
                "comment": "HF targeted for July 2020 following the Muir Glacier HF",
                "eips": [
                  2565,
                  2929,
                  2718,
                  2930,
                ],
                "name": "berlin",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2070",
              },
            ],
            [
              "london",
              {
                "comment": "HF targeted for July 2021 following the Berlin fork",
                "eips": [
                  1559,
                  3198,
                  3529,
                  3541,
                ],
                "name": "london",
                "status": "final",
                "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
              },
            ],
            [
              "arrowGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "eips": [
                  4345,
                ],
                "name": "arrowGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
              },
            ],
            [
              "grayGlacier",
              {
                "comment": "Delaying the difficulty bomb to Mid September 2022",
                "eips": [
                  5133,
                ],
                "name": "grayGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
              },
            ],
            [
              "paris",
              {
                "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
                "consensus": {
                  "algorithm": "casper",
                  "casper": {},
                  "type": "pos",
                },
                "eips": [
                  3675,
                  4399,
                ],
                "name": "paris",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
              },
            ],
            [
              "mergeForkIdTransition",
              {
                "comment": "Pre-merge hardfork to fork off non-upgraded clients",
                "eips": [],
                "name": "mergeForkIdTransition",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-3675",
              },
            ],
            [
              "shanghai",
              {
                "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
                "eips": [
                  3651,
                  3855,
                  3860,
                  4895,
                ],
                "name": "shanghai",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
              },
            ],
            [
              "cancun",
              {
                "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
                "eips": [
                  1153,
                  4844,
                  4788,
                  5656,
                  6780,
                  7516,
                ],
                "name": "cancun",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
              },
            ],
          ],
          "_activatedEIPsCache": [
            2565,
            2929,
            2718,
            2930,
            1559,
            3198,
            3529,
            3541,
            4345,
            5133,
            3675,
            4399,
            3651,
            3855,
            3860,
            4895,
            1153,
            4844,
            4788,
            5656,
            6780,
            7516,
            1559,
            4895,
            4844,
            4788,
          ],
          "_chainParams": {
            "bootstrapNodes": [
              {
                "comment": "bootnode-aws-ap-southeast-1-001",
                "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                "ip": "18.138.108.67",
                "location": "ap-southeast-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-aws-us-east-1-001",
                "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                "ip": "3.209.45.79",
                "location": "us-east-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-hel",
                "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
                "ip": "65.108.70.101",
                "location": "eu-west-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-fsn",
                "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
                "ip": "157.90.35.166",
                "location": "eu-central-1-001",
                "port": 30303,
              },
            ],
            "chainId": 10,
            "comment": "The Ethereum main chain",
            "consensus": {
              "algorithm": "ethash",
              "ethash": {},
              "type": "pow",
            },
            "defaultHardfork": "shanghai",
            "dnsNetworks": [
              "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
            ],
            "genesis": {
              "difficulty": 17179869184,
              "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
              "gasLimit": 5000,
              "nonce": "0x0000000000000042",
            },
            "hardforks": [
              {
                "block": 0,
                "forkHash": "0xfc64ec04",
                "name": "chainstart",
              },
              {
                "block": 1150000,
                "forkHash": "0x97c2c34c",
                "name": "homestead",
              },
              {
                "block": 1920000,
                "forkHash": "0x91d1f948",
                "name": "dao",
              },
              {
                "block": 2463000,
                "forkHash": "0x7a64da13",
                "name": "tangerineWhistle",
              },
              {
                "block": 2675000,
                "forkHash": "0x3edd5b10",
                "name": "spuriousDragon",
              },
              {
                "block": 4370000,
                "forkHash": "0xa00bc324",
                "name": "byzantium",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "constantinople",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "petersburg",
              },
              {
                "block": 9069000,
                "forkHash": "0x879d6e30",
                "name": "istanbul",
              },
              {
                "block": 9200000,
                "forkHash": "0xe029e991",
                "name": "muirGlacier",
              },
              {
                "block": 12244000,
                "forkHash": "0x0eb440f6",
                "name": "berlin",
              },
              {
                "block": 12965000,
                "forkHash": "0xb715077d",
                "name": "london",
              },
              {
                "block": 13773000,
                "forkHash": "0x20c327fc",
                "name": "arrowGlacier",
              },
              {
                "block": 15050000,
                "forkHash": "0xf0afd0e3",
                "name": "grayGlacier",
              },
              {
                "block": 15537394,
                "forkHash": "0xf0afd0e3",
                "name": "paris",
                "ttd": "58750000000000000000000",
              },
              {
                "block": null,
                "forkHash": null,
                "name": "mergeForkIdTransition",
              },
              {
                "block": null,
                "forkHash": "0xdce96c2d",
                "name": "shanghai",
                "timestamp": "1681338455",
              },
              {
                "block": null,
                "forkHash": "0x9f3d2254",
                "name": "cancun",
                "timestamp": "1710338135",
              },
            ],
            "name": "TevmCustom",
            "networkId": 10,
            "url": "https://ethstats.net/",
          },
          "_customChains": [],
          "_eips": [
            1559,
            4895,
            4844,
            4788,
          ],
          "_hardfork": "cancun",
          "_paramsCache": {
            "gasConfig": {
              "baseFeeMaxChangeDenominator": {
                "d": "Maximum base fee change denominator",
                "v": 8,
              },
              "blobGasPerBlob": {
                "d": "The base fee for blob gas per blob",
                "v": 131072,
              },
              "blobGasPriceUpdateFraction": {
                "d": "The denominator used in the exponential when calculating a blob gas price",
                "v": 3338477,
              },
              "elasticityMultiplier": {
                "d": "Maximum block gas target elasticity",
                "v": 2,
              },
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "initialBaseFee": {
                "d": "Initial base fee on first EIP1559 block",
                "v": 1000000000,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 5,
              },
              "maxblobGasPerBlock": {
                "d": "The max blob gas allowable per block",
                "v": 786432,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
              "targetBlobGasPerBlock": {
                "d": "The target blob gas consumed per block",
                "v": 393216,
              },
            },
            "gasPrices": {
              "accessListAddressCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 2400,
              },
              "accessListStorageKeyCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 1900,
              },
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 0,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "basefee": {
                "d": "Gas cost of the BASEFEE opcode",
                "v": 2,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "blobbasefee": {
                "d": "Gas cost of the BLOBBASEFEE opcode",
                "v": 2,
              },
              "blobhash": {
                "d": "Base fee of the BLOBHASH opcode",
                "v": 3,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 0,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 0,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "coldaccountaccess": {
                "d": "Gas cost of the first read of a given address (per transaction)",
                "v": 2600,
              },
              "coldsload": {
                "d": "Gas cost of the first read of storage from a given location (per transaction)",
                "v": 2100,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 0,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 0,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 0,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 0,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "initCodeWordCost": {
                "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
                "v": 2,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "kzgPointEvaluationGasPrecompilePrice": {
                "d": "The fee associated with the point evaluation precompile",
                "v": 50000,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "mcopy": {
                "d": "Base fee of the MCOPY opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "minBlobGasPrice": {
                "d": "The minimum fee per blob gas",
                "v": 1,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 3,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "prevrandao": {
                "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "push0": {
                "d": "Base fee of the PUSH0 opcode",
                "v": 2,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 0,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "simpleGasPerBlob": {
                "d": "The basic gas fee for each blob",
                "v": 12000,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 0,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 2900,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4900,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 4800,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 100,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19900,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 100,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 0,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tload": {
                "d": "Base fee of the TLOAD opcode",
                "v": 100,
              },
              "tstore": {
                "d": "Base fee of the TSTORE opcode",
                "v": 100,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "warmstorageread": {
                "d": "Gas cost of reading storage locations which have already loaded 'cold'",
                "v": 100,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 11400000,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "sharding": {
              "blobCommitmentVersionKzg": {
                "d": "The number indicated a versioned hash is a KZG commitment",
                "v": 1,
              },
              "fieldElementsPerBlob": {
                "d": "The number of field elements allowed per blob",
                "v": 4096,
              },
            },
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "historicalRootsLength": {
                "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
                "v": 8191,
              },
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "maxInitCodeSize": {
                "d": "Maximum length of initialization code when creating a contract",
                "v": 49152,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
          "customCrypto": {
            "kzg": {
              "blobToKzgCommitment": [Function],
              "computeBlobKzgProof": [Function],
              "freeTrustedSetup": [Function],
              "loadTrustedSetup": [Function],
              "verifyBlobKzgProof": [Function],
              "verifyBlobKzgProofBatch": [Function],
              "verifyKzgProof": [Function],
            },
          },
          "events": EventEmitter2 {
            "_events": {},
            "_eventsCount": 0,
            "_maxListeners": undefined,
            [Symbol(kCapture)]: false,
          },
        },
      },
      "v": 56n,
      "value": 0n,
    },
    FeeMarketEIP1559Transaction {
      "AccessListJSON": [],
      "DEFAULT_CHAIN": 1,
      "_type": 2,
      "accessList": [],
      "activeCapabilities": [
        1559,
        2718,
        2930,
      ],
      "cache": {
        "dataFee": undefined,
        "hash": undefined,
        "senderPubKey": undefined,
      },
      "chainId": 10n,
      "common": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "data": Uint8Array [
        130,
        173,
        86,
        203,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        7,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        78,
        252,
        222,
        127,
        178,
        68,
        17,
        232,
        55,
        197,
        11,
        142,
        160,
        83,
        82,
        80,
        47,
        1,
        241,
        175,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        4,
        106,
        118,
        18,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        181,
        251,
        254,
        186,
        152,
        72,
        102,
        79,
        209,
        164,
        157,
        194,
        162,
        80,
        217,
        181,
        209,
        41,
        79,
        42,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        4,
        65,
        75,
        243,
        137,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        220,
        111,
        244,
        77,
        93,
        147,
        44,
        189,
        119,
        181,
        46,
        86,
        18,
        186,
        5,
        41,
        220,
        98,
        38,
        241,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        127,
        92,
        118,
        76,
        188,
        20,
        249,
        102,
        155,
        136,
        131,
        124,
        161,
        73,
        12,
        202,
        23,
        195,
        22,
        7,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        39,
        16,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        78,
        252,
        222,
        127,
        178,
        68,
        17,
        232,
        55,
        197,
        11,
        142,
        160,
        83,
        82,
        80,
        47,
        1,
        241,
        175,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        102,
        150,
        34,
        131,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        41,
        145,
        200,
        202,
        173,
        160,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        99,
        41,
        22,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        65,
        29,
        243,
        233,
        138,
        107,
        62,
        205,
        243,
        133,
        252,
        11,
        202,
        228,
        127,
        235,
        214,
        144,
        168,
        67,
        107,
        255,
        121,
        124,
        107,
        147,
        53,
        251,
        220,
        206,
        52,
        157,
        93,
        48,
        155,
        102,
        171,
        184,
        192,
        58,
        64,
        219,
        19,
        22,
        122,
        113,
        46,
        190,
        83,
        108,
        242,
        53,
        112,
        115,
        148,
        4,
        69,
        157,
        35,
        29,
        221,
        78,
        125,
        116,
        66,
        27,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        103,
        248,
        218,
        0,
        111,
        57,
        76,
        56,
        36,
        233,
        188,
        168,
        131,
        240,
        156,
        96,
        5,
        68,
        10,
        87,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        4,
        106,
        118,
        18,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        181,
        251,
        254,
        186,
        152,
        72,
        102,
        79,
        209,
        164,
        157,
        194,
        162,
        80,
        217,
        181,
        209,
        41,
        79,
        42,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        4,
        65,
        75,
        243,
        137,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        220,
        111,
        244,
        77,
        93,
        147,
        44,
        189,
        119,
        181,
        46,
        86,
        18,
        186,
        5,
        41,
        220,
        98,
        38,
        241,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        127,
        92,
        118,
        76,
        188,
        20,
        249,
        102,
        155,
        136,
        131,
        124,
        161,
        73,
        12,
        202,
        23,
        195,
        22,
        7,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        39,
        16,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        103,
        248,
        218,
        0,
        111,
        57,
        76,
        56,
        36,
        233,
        188,
        168,
        131,
        240,
        156,
        96,
        5,
        68,
        10,
        87,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        102,
        150,
        34,
        136,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        41,
        162,
        36,
        26,
        246,
        44,
        2,
        56,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        99,
        80,
        26,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        65,
        12,
        84,
        179,
        205,
        43,
        109,
        199,
        219,
        183,
        126,
        215,
        222,
        84,
        87,
        42,
        29,
        227,
        52,
        239,
        192,
        101,
        190,
        35,
        74,
        143,
        8,
        193,
        110,
        161,
        103,
        188,
        150,
        33,
        94,
        180,
        74,
        203,
        101,
        170,
        238,
        75,
        214,
        245,
        234,
        246,
        203,
        140,
        70,
        189,
        64,
        75,
        214,
        144,
        136,
        97,
        31,
        121,
        193,
        138,
        173,
        8,
        32,
        233,
        165,
        27,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        120,
        118,
        41,
        150,
        141,
        22,
        72,
        223,
        208,
        68,
        70,
        6,
        177,
        168,
        76,
        14,
        236,
        167,
        3,
        15,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        4,
        106,
        118,
        18,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        181,
        251,
        254,
        186,
        152,
        72,
        102,
        79,
        209,
        164,
        157,
        194,
        162,
        80,
        217,
        181,
        209,
        41,
        79,
        42,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        4,
        65,
        75,
        243,
        137,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        127,
        92,
        118,
        76,
        188,
        20,
        249,
        102,
        155,
        136,
        131,
        124,
        161,
        73,
        12,
        202,
        23,
        195,
        22,
        7,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        220,
        111,
        244,
        77,
        93,
        147,
        44,
        189,
        119,
        181,
        46,
        86,
        18,
        186,
        5,
        41,
        220,
        98,
        38,
        241,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        39,
        16,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        120,
        118,
        41,
        150,
        141,
        22,
        72,
        223,
        208,
        68,
        70,
        6,
        177,
        168,
        76,
        14,
        236,
        167,
        3,
        15,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        102,
        150,
        34,
        150,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        186,
        205,
        98,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        75,
        57,
        125,
        123,
        41,
        89,
        128,
        162,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        65,
        88,
        73,
        249,
        116,
        142,
        123,
        216,
        38,
        58,
        210,
        2,
        174,
        2,
        78,
        148,
        252,
        132,
        159,
        139,
        154,
        170,
        218,
        226,
        127,
        78,
        126,
        143,
        101,
        107,
        180,
        224,
        103,
        16,
        171,
        197,
        150,
        81,
        83,
        246,
        121,
        130,
        121,
        123,
        218,
        242,
        107,
        163,
        52,
        238,
        182,
        54,
        90,
        108,
        112,
        136,
        202,
        185,
        109,
        90,
        198,
        133,
        82,
        72,
        130,
        28,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
      ],
      "gasLimit": 391207n,
      "maxFeePerGas": 119724110n,
      "maxPriorityFeePerGas": 2158210n,
      "nonce": 1723077n,
      "r": 70142145291609272334342017847331967451334663687771641435220774698537503538944n,
      "s": 22217230745724245392060797158163291009097163044017807811211734075009792868917n,
      "to": Address {
        "bytes": Uint8Array [
          8,
          112,
          0,
          163,
          0,
          222,
          114,
          0,
          56,
          43,
          85,
          212,
          0,
          69,
          0,
          0,
          0,
          229,
          214,
          14,
        ],
      },
      "txOptions": {
        "common": Common {
          "DEFAULT_HARDFORK": "shanghai",
          "HARDFORK_CHANGES": [
            [
              "chainstart",
              {
                "comment": "Start of the Ethereum main chain",
                "gasConfig": {
                  "gasLimitBoundDivisor": {
                    "d": "The bound divisor of the gas limit, used in update calculations",
                    "v": 1024,
                  },
                  "maxRefundQuotient": {
                    "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                    "v": 2,
                  },
                  "minGasLimit": {
                    "d": "Minimum the gas limit may ever be",
                    "v": 5000,
                  },
                },
                "gasPrices": {
                  "add": {
                    "d": "Base fee of the ADD opcode",
                    "v": 3,
                  },
                  "addmod": {
                    "d": "Base fee of the ADDMOD opcode",
                    "v": 8,
                  },
                  "address": {
                    "d": "Base fee of the ADDRESS opcode",
                    "v": 2,
                  },
                  "and": {
                    "d": "Base fee of the AND opcode",
                    "v": 3,
                  },
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 20,
                  },
                  "base": {
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                    "v": 2,
                  },
                  "blockhash": {
                    "d": "Base fee of the BLOCKHASH opcode",
                    "v": 20,
                  },
                  "byte": {
                    "d": "Base fee of the BYTE opcode",
                    "v": 3,
                  },
                  "call": {
                    "d": "Base fee of the CALL opcode",
                    "v": 40,
                  },
                  "callNewAccount": {
                    "d": "Paid for CALL when the destination address didn't exist prior",
                    "v": 25000,
                  },
                  "callStipend": {
                    "d": "Free gas given at beginning of call",
                    "v": 2300,
                  },
                  "callValueTransfer": {
                    "d": "Paid for CALL when the value transfor is non-zero",
                    "v": 9000,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 40,
                  },
                  "calldatacopy": {
                    "d": "Base fee of the CALLDATACOPY opcode",
                    "v": 3,
                  },
                  "calldataload": {
                    "d": "Base fee of the CALLDATALOAD opcode",
                    "v": 3,
                  },
                  "calldatasize": {
                    "d": "Base fee of the CALLDATASIZE opcode",
                    "v": 2,
                  },
                  "caller": {
                    "d": "Base fee of the CALLER opcode",
                    "v": 2,
                  },
                  "callvalue": {
                    "d": "Base fee of the CALLVALUE opcode",
                    "v": 2,
                  },
                  "codecopy": {
                    "d": "Base fee of the CODECOPY opcode",
                    "v": 3,
                  },
                  "codesize": {
                    "d": "Base fee of the CODESIZE opcode",
                    "v": 2,
                  },
                  "coinbase": {
                    "d": "Base fee of the COINBASE opcode",
                    "v": 2,
                  },
                  "copy": {
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                    "v": 3,
                  },
                  "create": {
                    "d": "Base fee of the CREATE opcode",
                    "v": 32000,
                  },
                  "createData": {
                    "d": "",
                    "v": 200,
                  },
                  "difficulty": {
                    "d": "Base fee of the DIFFICULTY opcode",
                    "v": 2,
                  },
                  "div": {
                    "d": "Base fee of the DIV opcode",
                    "v": 5,
                  },
                  "dup": {
                    "d": "Base fee of the DUP opcode",
                    "v": 3,
                  },
                  "ecRecover": {
                    "d": "",
                    "v": 3000,
                  },
                  "eq": {
                    "d": "Base fee of the EQ opcode",
                    "v": 3,
                  },
                  "exp": {
                    "d": "Base fee of the EXP opcode",
                    "v": 10,
                  },
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 10,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 20,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 20,
                  },
                  "gas": {
                    "d": "Base fee of the GAS opcode",
                    "v": 2,
                  },
                  "gaslimit": {
                    "d": "Base fee of the GASLIMIT opcode",
                    "v": 2,
                  },
                  "gasprice": {
                    "d": "Base fee of the GASPRICE opcode",
                    "v": 2,
                  },
                  "gt": {
                    "d": "Base fee of the GT opcode",
                    "v": 3,
                  },
                  "identity": {
                    "d": "",
                    "v": 15,
                  },
                  "identityWord": {
                    "d": "",
                    "v": 3,
                  },
                  "invalid": {
                    "d": "Base fee of the INVALID opcode",
                    "v": 0,
                  },
                  "iszero": {
                    "d": "Base fee of the ISZERO opcode",
                    "v": 3,
                  },
                  "jump": {
                    "d": "Base fee of the JUMP opcode",
                    "v": 8,
                  },
                  "jumpdest": {
                    "d": "Base fee of the JUMPDEST opcode",
                    "v": 1,
                  },
                  "jumpi": {
                    "d": "Base fee of the JUMPI opcode",
                    "v": 10,
                  },
                  "keccak256": {
                    "d": "Base fee of the SHA3 opcode",
                    "v": 30,
                  },
                  "keccak256Word": {
                    "d": "Once per word of the SHA3 operation's data",
                    "v": 6,
                  },
                  "log": {
                    "d": "Base fee of the LOG opcode",
                    "v": 375,
                  },
                  "logData": {
                    "d": "Per byte in a LOG* operation's data",
                    "v": 8,
                  },
                  "logTopic": {
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                    "v": 375,
                  },
                  "lt": {
                    "d": "Base fee of the LT opcode",
                    "v": 3,
                  },
                  "memory": {
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                    "v": 3,
                  },
                  "mload": {
                    "d": "Base fee of the MLOAD opcode",
                    "v": 3,
                  },
                  "mod": {
                    "d": "Base fee of the MOD opcode",
                    "v": 5,
                  },
                  "msize": {
                    "d": "Base fee of the MSIZE opcode",
                    "v": 2,
                  },
                  "mstore": {
                    "d": "Base fee of the MSTORE opcode",
                    "v": 3,
                  },
                  "mstore8": {
                    "d": "Base fee of the MSTORE8 opcode",
                    "v": 3,
                  },
                  "mul": {
                    "d": "Base fee of the MUL opcode",
                    "v": 5,
                  },
                  "mulmod": {
                    "d": "Base fee of the MULMOD opcode",
                    "v": 8,
                  },
                  "not": {
                    "d": "Base fee of the NOT opcode",
                    "v": 3,
                  },
                  "number": {
                    "d": "Base fee of the NUMBER opcode",
                    "v": 2,
                  },
                  "or": {
                    "d": "Base fee of the OR opcode",
                    "v": 3,
                  },
                  "origin": {
                    "d": "Base fee of the ORIGIN opcode",
                    "v": 2,
                  },
                  "pc": {
                    "d": "Base fee of the PC opcode",
                    "v": 2,
                  },
                  "pop": {
                    "d": "Base fee of the POP opcode",
                    "v": 2,
                  },
                  "push": {
                    "d": "Base fee of the PUSH opcode",
                    "v": 3,
                  },
                  "quadCoeffDiv": {
                    "d": "Divisor for the quadratic particle of the memory cost equation",
                    "v": 512,
                  },
                  "return": {
                    "d": "Base fee of the RETURN opcode",
                    "v": 0,
                  },
                  "ripemd160": {
                    "d": "",
                    "v": 600,
                  },
                  "ripemd160Word": {
                    "d": "",
                    "v": 120,
                  },
                  "sdiv": {
                    "d": "Base fee of the SDIV opcode",
                    "v": 5,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 0,
                  },
                  "selfdestructRefund": {
                    "d": "Refunded following a selfdestruct operation",
                    "v": 24000,
                  },
                  "sgt": {
                    "d": "Base fee of the SGT opcode",
                    "v": 3,
                  },
                  "sha256": {
                    "d": "",
                    "v": 60,
                  },
                  "sha256Word": {
                    "d": "",
                    "v": 12,
                  },
                  "signextend": {
                    "d": "Base fee of the SIGNEXTEND opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 50,
                  },
                  "slt": {
                    "d": "Base fee of the SLT opcode",
                    "v": 3,
                  },
                  "smod": {
                    "d": "Base fee of the SMOD opcode",
                    "v": 5,
                  },
                  "sstore": {
                    "d": "Base fee of the SSTORE opcode",
                    "v": 0,
                  },
                  "sstoreRefund": {
                    "d": "Once per SSTORE operation if the zeroness changes to zero",
                    "v": 15000,
                  },
                  "sstoreReset": {
                    "d": "Once per SSTORE operation if the zeroness does not change from zero",
                    "v": 5000,
                  },
                  "sstoreSet": {
                    "d": "Once per SSTORE operation if the zeroness changes from zero",
                    "v": 20000,
                  },
                  "stop": {
                    "d": "Base fee of the STOP opcode",
                    "v": 0,
                  },
                  "sub": {
                    "d": "Base fee of the SUB opcode",
                    "v": 3,
                  },
                  "swap": {
                    "d": "Base fee of the SWAP opcode",
                    "v": 3,
                  },
                  "timestamp": {
                    "d": "Base fee of the TIMESTAMP opcode",
                    "v": 2,
                  },
                  "tx": {
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                    "v": 21000,
                  },
                  "txCreation": {
                    "d": "The cost of creating a contract via tx",
                    "v": 32000,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 68,
                  },
                  "txDataZero": {
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                    "v": 4,
                  },
                  "xor": {
                    "d": "Base fee of the XOR opcode",
                    "v": 3,
                  },
                },
                "name": "chainstart",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 0,
                  },
                  "difficultyBoundDivisor": {
                    "d": "The bound divisor of the difficulty, used in the update calculations",
                    "v": 2048,
                  },
                  "durationLimit": {
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                    "v": 13,
                  },
                  "epochDuration": {
                    "d": "Duration between proof-of-work epochs",
                    "v": 30000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 5000000000000000000n,
                  },
                  "minimumDifficulty": {
                    "d": "The minimum that the difficulty may ever be",
                    "v": 131072,
                  },
                  "timebombPeriod": {
                    "d": "Exponential difficulty timebomb period",
                    "v": 100000,
                  },
                },
                "status": "final",
                "url": "",
                "vm": {
                  "callCreateDepth": {
                    "d": "Maximum depth of call/create stack",
                    "v": 1024,
                  },
                  "maxExtraDataSize": {
                    "d": "Maximum size extra data may be after Genesis",
                    "v": 32,
                  },
                  "stackLimit": {
                    "d": "Maximum size of VM stack allowed",
                    "v": 1024,
                  },
                },
              },
            ],
            [
              "homestead",
              {
                "comment": "Homestead hardfork with protocol and network changes",
                "gasPrices": {
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 40,
                  },
                },
                "name": "homestead",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-606",
              },
            ],
            [
              "dao",
              {
                "comment": "DAO rescue hardfork",
                "name": "dao",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-779",
              },
            ],
            [
              "tangerineWhistle",
              {
                "comment": "Hardfork with gas cost changes for IO-heavy operations",
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 400,
                  },
                  "call": {
                    "d": "Once per CALL operation & message call transaction",
                    "v": 700,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 700,
                  },
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 700,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 700,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 700,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 5000,
                  },
                  "sload": {
                    "d": "Once per SLOAD operation",
                    "v": 200,
                  },
                },
                "name": "tangerineWhistle",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-608",
              },
            ],
            [
              "spuriousDragon",
              {
                "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
                "gasPrices": {
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 50,
                  },
                },
                "name": "spuriousDragon",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "vm": {
                  "maxCodeSize": {
                    "d": "Maximum length of contract code",
                    "v": 24576,
                  },
                },
              },
            ],
            [
              "byzantium",
              {
                "comment": "Hardfork with new precompiles, instructions and other protocol changes",
                "gasPrices": {
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 500,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 40000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 100000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 80000,
                  },
                  "modexpGquaddivisor": {
                    "d": "Gquaddivisor from modexp precompile for gas calculation",
                    "v": 20,
                  },
                  "returndatacopy": {
                    "d": "Base fee of the RETURNDATACOPY opcode",
                    "v": 3,
                  },
                  "returndatasize": {
                    "d": "Base fee of the RETURNDATASIZE opcode",
                    "v": 2,
                  },
                  "revert": {
                    "d": "Base fee of the REVERT opcode",
                    "v": 0,
                  },
                  "staticcall": {
                    "d": "Base fee of the STATICCALL opcode",
                    "v": 700,
                  },
                },
                "name": "byzantium",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 3000000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 3000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-609",
              },
            ],
            [
              "constantinople",
              {
                "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
                "gasPrices": {
                  "create2": {
                    "d": "Base fee of the CREATE2 opcode",
                    "v": 32000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 400,
                  },
                  "netSstoreCleanGas": {
                    "d": "Once per SSTORE operation from clean non-zero",
                    "v": 5000,
                  },
                  "netSstoreClearRefund": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Once per SSTORE operation from dirty",
                    "v": 200,
                  },
                  "netSstoreInitGas": {
                    "d": "Once per SSTORE operation from clean zero",
                    "v": 20000,
                  },
                  "netSstoreNoopGas": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 200,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19800,
                  },
                  "netSstoreResetRefund": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4800,
                  },
                  "sar": {
                    "d": "Base fee of the SAR opcode",
                    "v": 3,
                  },
                  "shl": {
                    "d": "Base fee of the SHL opcode",
                    "v": 3,
                  },
                  "shr": {
                    "d": "Base fee of the SHR opcode",
                    "v": 3,
                  },
                },
                "name": "constantinople",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 5000000,
                  },
                  "minerReward": {
                    "d": "The amount a miner gets rewarded for mining a block",
                    "v": 2000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
              },
            ],
            [
              "petersburg",
              {
                "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
                "gasPrices": {
                  "netSstoreCleanGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreInitGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreNoopGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                },
                "name": "petersburg",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
              },
            ],
            [
              "istanbul",
              {
                "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
                "gasConfig": {},
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 700,
                  },
                  "blake2Round": {
                    "d": "Gas cost per round for the Blake2 F precompile",
                    "v": 1,
                  },
                  "chainid": {
                    "d": "Base fee of the CHAINID opcode",
                    "v": 2,
                  },
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 150,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 6000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 45000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 34000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 700,
                  },
                  "selfbalance": {
                    "d": "Base fee of the SELFBALANCE opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 800,
                  },
                  "sstoreCleanGasEIP2200": {
                    "d": "Once per SSTORE operation from clean non-zero to something else",
                    "v": 5000,
                  },
                  "sstoreCleanRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4200,
                  },
                  "sstoreClearRefundEIP2200": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "sstoreDirtyGasEIP2200": {
                    "d": "Once per SSTORE operation if a dirty value is changed",
                    "v": 800,
                  },
                  "sstoreInitGasEIP2200": {
                    "d": "Once per SSTORE operation from clean zero to non-zero",
                    "v": 20000,
                  },
                  "sstoreInitRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19200,
                  },
                  "sstoreNoopGasEIP2200": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 800,
                  },
                  "sstoreSentryGasEIP2200": {
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                    "v": 2300,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 16,
                  },
                },
                "name": "istanbul",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
              },
            ],
            [
              "muirGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "name": "muirGlacier",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 9000000,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
              },
            ],
            [
              "berlin",
              {
                "comment": "HF targeted for July 2020 following the Muir Glacier HF",
                "eips": [
                  2565,
                  2929,
                  2718,
                  2930,
                ],
                "name": "berlin",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2070",
              },
            ],
            [
              "london",
              {
                "comment": "HF targeted for July 2021 following the Berlin fork",
                "eips": [
                  1559,
                  3198,
                  3529,
                  3541,
                ],
                "name": "london",
                "status": "final",
                "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
              },
            ],
            [
              "arrowGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "eips": [
                  4345,
                ],
                "name": "arrowGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
              },
            ],
            [
              "grayGlacier",
              {
                "comment": "Delaying the difficulty bomb to Mid September 2022",
                "eips": [
                  5133,
                ],
                "name": "grayGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
              },
            ],
            [
              "paris",
              {
                "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
                "consensus": {
                  "algorithm": "casper",
                  "casper": {},
                  "type": "pos",
                },
                "eips": [
                  3675,
                  4399,
                ],
                "name": "paris",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
              },
            ],
            [
              "mergeForkIdTransition",
              {
                "comment": "Pre-merge hardfork to fork off non-upgraded clients",
                "eips": [],
                "name": "mergeForkIdTransition",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-3675",
              },
            ],
            [
              "shanghai",
              {
                "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
                "eips": [
                  3651,
                  3855,
                  3860,
                  4895,
                ],
                "name": "shanghai",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
              },
            ],
            [
              "cancun",
              {
                "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
                "eips": [
                  1153,
                  4844,
                  4788,
                  5656,
                  6780,
                  7516,
                ],
                "name": "cancun",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
              },
            ],
          ],
          "_activatedEIPsCache": [
            2565,
            2929,
            2718,
            2930,
            1559,
            3198,
            3529,
            3541,
            4345,
            5133,
            3675,
            4399,
            3651,
            3855,
            3860,
            4895,
            1153,
            4844,
            4788,
            5656,
            6780,
            7516,
            1559,
            4895,
            4844,
            4788,
          ],
          "_chainParams": {
            "bootstrapNodes": [
              {
                "comment": "bootnode-aws-ap-southeast-1-001",
                "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                "ip": "18.138.108.67",
                "location": "ap-southeast-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-aws-us-east-1-001",
                "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                "ip": "3.209.45.79",
                "location": "us-east-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-hel",
                "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
                "ip": "65.108.70.101",
                "location": "eu-west-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-fsn",
                "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
                "ip": "157.90.35.166",
                "location": "eu-central-1-001",
                "port": 30303,
              },
            ],
            "chainId": 10,
            "comment": "The Ethereum main chain",
            "consensus": {
              "algorithm": "ethash",
              "ethash": {},
              "type": "pow",
            },
            "defaultHardfork": "shanghai",
            "dnsNetworks": [
              "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
            ],
            "genesis": {
              "difficulty": 17179869184,
              "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
              "gasLimit": 5000,
              "nonce": "0x0000000000000042",
            },
            "hardforks": [
              {
                "block": 0,
                "forkHash": "0xfc64ec04",
                "name": "chainstart",
              },
              {
                "block": 1150000,
                "forkHash": "0x97c2c34c",
                "name": "homestead",
              },
              {
                "block": 1920000,
                "forkHash": "0x91d1f948",
                "name": "dao",
              },
              {
                "block": 2463000,
                "forkHash": "0x7a64da13",
                "name": "tangerineWhistle",
              },
              {
                "block": 2675000,
                "forkHash": "0x3edd5b10",
                "name": "spuriousDragon",
              },
              {
                "block": 4370000,
                "forkHash": "0xa00bc324",
                "name": "byzantium",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "constantinople",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "petersburg",
              },
              {
                "block": 9069000,
                "forkHash": "0x879d6e30",
                "name": "istanbul",
              },
              {
                "block": 9200000,
                "forkHash": "0xe029e991",
                "name": "muirGlacier",
              },
              {
                "block": 12244000,
                "forkHash": "0x0eb440f6",
                "name": "berlin",
              },
              {
                "block": 12965000,
                "forkHash": "0xb715077d",
                "name": "london",
              },
              {
                "block": 13773000,
                "forkHash": "0x20c327fc",
                "name": "arrowGlacier",
              },
              {
                "block": 15050000,
                "forkHash": "0xf0afd0e3",
                "name": "grayGlacier",
              },
              {
                "block": 15537394,
                "forkHash": "0xf0afd0e3",
                "name": "paris",
                "ttd": "58750000000000000000000",
              },
              {
                "block": null,
                "forkHash": null,
                "name": "mergeForkIdTransition",
              },
              {
                "block": null,
                "forkHash": "0xdce96c2d",
                "name": "shanghai",
                "timestamp": "1681338455",
              },
              {
                "block": null,
                "forkHash": "0x9f3d2254",
                "name": "cancun",
                "timestamp": "1710338135",
              },
            ],
            "name": "TevmCustom",
            "networkId": 10,
            "url": "https://ethstats.net/",
          },
          "_customChains": [],
          "_eips": [
            1559,
            4895,
            4844,
            4788,
          ],
          "_hardfork": "cancun",
          "_paramsCache": {
            "gasConfig": {
              "baseFeeMaxChangeDenominator": {
                "d": "Maximum base fee change denominator",
                "v": 8,
              },
              "blobGasPerBlob": {
                "d": "The base fee for blob gas per blob",
                "v": 131072,
              },
              "blobGasPriceUpdateFraction": {
                "d": "The denominator used in the exponential when calculating a blob gas price",
                "v": 3338477,
              },
              "elasticityMultiplier": {
                "d": "Maximum block gas target elasticity",
                "v": 2,
              },
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "initialBaseFee": {
                "d": "Initial base fee on first EIP1559 block",
                "v": 1000000000,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 5,
              },
              "maxblobGasPerBlock": {
                "d": "The max blob gas allowable per block",
                "v": 786432,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
              "targetBlobGasPerBlock": {
                "d": "The target blob gas consumed per block",
                "v": 393216,
              },
            },
            "gasPrices": {
              "accessListAddressCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 2400,
              },
              "accessListStorageKeyCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 1900,
              },
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 0,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "basefee": {
                "d": "Gas cost of the BASEFEE opcode",
                "v": 2,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "blobbasefee": {
                "d": "Gas cost of the BLOBBASEFEE opcode",
                "v": 2,
              },
              "blobhash": {
                "d": "Base fee of the BLOBHASH opcode",
                "v": 3,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 0,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 0,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "coldaccountaccess": {
                "d": "Gas cost of the first read of a given address (per transaction)",
                "v": 2600,
              },
              "coldsload": {
                "d": "Gas cost of the first read of storage from a given location (per transaction)",
                "v": 2100,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 0,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 0,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 0,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 0,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "initCodeWordCost": {
                "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
                "v": 2,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "kzgPointEvaluationGasPrecompilePrice": {
                "d": "The fee associated with the point evaluation precompile",
                "v": 50000,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "mcopy": {
                "d": "Base fee of the MCOPY opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "minBlobGasPrice": {
                "d": "The minimum fee per blob gas",
                "v": 1,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 3,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "prevrandao": {
                "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "push0": {
                "d": "Base fee of the PUSH0 opcode",
                "v": 2,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 0,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "simpleGasPerBlob": {
                "d": "The basic gas fee for each blob",
                "v": 12000,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 0,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 2900,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4900,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 4800,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 100,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19900,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 100,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 0,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tload": {
                "d": "Base fee of the TLOAD opcode",
                "v": 100,
              },
              "tstore": {
                "d": "Base fee of the TSTORE opcode",
                "v": 100,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "warmstorageread": {
                "d": "Gas cost of reading storage locations which have already loaded 'cold'",
                "v": 100,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 11400000,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "sharding": {
              "blobCommitmentVersionKzg": {
                "d": "The number indicated a versioned hash is a KZG commitment",
                "v": 1,
              },
              "fieldElementsPerBlob": {
                "d": "The number of field elements allowed per blob",
                "v": 4096,
              },
            },
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "historicalRootsLength": {
                "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
                "v": 8191,
              },
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "maxInitCodeSize": {
                "d": "Maximum length of initialization code when creating a contract",
                "v": 49152,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
          "customCrypto": {
            "kzg": {
              "blobToKzgCommitment": [Function],
              "computeBlobKzgProof": [Function],
              "freeTrustedSetup": [Function],
              "loadTrustedSetup": [Function],
              "verifyBlobKzgProof": [Function],
              "verifyBlobKzgProofBatch": [Function],
              "verifyKzgProof": [Function],
            },
          },
          "events": EventEmitter2 {
            "_events": {},
            "_eventsCount": 0,
            "_maxListeners": undefined,
            [Symbol(kCapture)]: false,
          },
        },
      },
      "v": 0n,
      "value": 0n,
    },
    FeeMarketEIP1559Transaction {
      "AccessListJSON": [],
      "DEFAULT_CHAIN": 1,
      "_type": 2,
      "accessList": [],
      "activeCapabilities": [
        1559,
        2718,
        2930,
      ],
      "cache": {
        "dataFee": undefined,
        "hash": undefined,
        "senderPubKey": undefined,
      },
      "chainId": 10n,
      "common": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "data": Uint8Array [
        130,
        173,
        86,
        203,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        3,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        6,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        9,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        83,
        42,
        178,
        162,
        188,
        122,
        55,
        70,
        70,
        77,
        96,
        201,
        10,
        45,
        38,
        247,
        7,
        39,
        243,
        125,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        68,
        106,
        118,
        18,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        220,
        111,
        244,
        77,
        93,
        147,
        44,
        189,
        119,
        181,
        46,
        86,
        18,
        186,
        5,
        41,
        220,
        98,
        38,
        241,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        192,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        68,
        169,
        5,
        156,
        187,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        50,
        76,
        168,
        89,
        249,
        151,
        232,
        97,
        45,
        231,
        197,
        148,
        130,
        21,
        85,
        11,
        9,
        142,
        134,
        123,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        41,
        157,
        58,
        70,
        46,
        114,
        144,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        65,
        246,
        185,
        114,
        113,
        120,
        245,
        48,
        191,
        190,
        86,
        75,
        164,
        97,
        172,
        32,
        119,
        11,
        168,
        61,
        139,
        247,
        178,
        45,
        26,
        22,
        196,
        230,
        10,
        7,
        243,
        11,
        20,
        67,
        251,
        156,
        132,
        93,
        156,
        107,
        64,
        148,
        14,
        63,
        143,
        108,
        20,
        173,
        178,
        136,
        99,
        182,
        51,
        248,
        214,
        205,
        2,
        124,
        173,
        25,
        111,
        33,
        70,
        225,
        86,
        27,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        8,
        9,
        184,
        224,
        241,
        241,
        135,
        107,
        110,
        109,
        161,
        13,
        196,
        234,
        130,
        233,
        221,
        124,
        33,
        56,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        68,
        106,
        118,
        18,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        220,
        111,
        244,
        77,
        93,
        147,
        44,
        189,
        119,
        181,
        46,
        86,
        18,
        186,
        5,
        41,
        220,
        98,
        38,
        241,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        192,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        68,
        169,
        5,
        156,
        187,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        17,
        248,
        225,
        148,
        238,
        27,
        138,
        107,
        167,
        154,
        59,
        119,
        186,
        79,
        49,
        41,
        87,
        70,
        197,
        248,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        41,
        162,
        36,
        26,
        246,
        44,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        65,
        38,
        23,
        167,
        155,
        203,
        79,
        199,
        92,
        227,
        61,
        246,
        86,
        59,
        15,
        63,
        95,
        17,
        107,
        16,
        100,
        218,
        122,
        42,
        125,
        123,
        81,
        21,
        54,
        209,
        112,
        14,
        151,
        24,
        41,
        121,
        122,
        26,
        71,
        80,
        148,
        127,
        32,
        178,
        40,
        190,
        172,
        241,
        159,
        174,
        21,
        49,
        180,
        131,
        214,
        125,
        118,
        141,
        83,
        235,
        100,
        141,
        213,
        58,
        144,
        28,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        161,
        224,
        27,
        210,
        0,
        208,
        0,
        37,
        233,
        252,
        178,
        59,
        45,
        154,
        231,
        132,
        240,
        42,
        221,
        117,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        68,
        106,
        118,
        18,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        220,
        111,
        244,
        77,
        93,
        147,
        44,
        189,
        119,
        181,
        46,
        86,
        18,
        186,
        5,
        41,
        220,
        98,
        38,
        241,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        192,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        68,
        169,
        5,
        156,
        187,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        154,
        48,
        130,
        70,
        88,
        124,
        218,
        175,
        218,
        93,
        151,
        1,
        36,
        136,
        107,
        242,
        28,
        8,
        113,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        41,
        162,
        36,
        26,
        246,
        44,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        65,
        230,
        224,
        47,
        24,
        235,
        150,
        115,
        134,
        7,
        253,
        80,
        5,
        139,
        56,
        95,
        218,
        49,
        16,
        108,
        238,
        7,
        22,
        114,
        39,
        199,
        143,
        91,
        104,
        57,
        53,
        11,
        16,
        94,
        61,
        65,
        62,
        25,
        158,
        229,
        239,
        60,
        254,
        72,
        162,
        254,
        212,
        183,
        184,
        166,
        47,
        45,
        116,
        186,
        201,
        140,
        33,
        68,
        172,
        110,
        184,
        42,
        33,
        164,
        230,
        27,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        198,
        61,
        96,
        163,
        211,
        57,
        11,
        167,
        110,
        154,
        108,
        199,
        226,
        112,
        141,
        199,
        206,
        125,
        132,
        142,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        68,
        106,
        118,
        18,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        220,
        111,
        244,
        77,
        93,
        147,
        44,
        189,
        119,
        181,
        46,
        86,
        18,
        186,
        5,
        41,
        220,
        98,
        38,
        241,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        192,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        68,
        169,
        5,
        156,
        187,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        57,
        7,
        2,
        204,
        220,
        212,
        8,
        84,
        6,
        108,
        203,
        129,
        27,
        61,
        104,
        54,
        248,
        241,
        53,
        214,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        41,
        142,
        176,
        159,
        48,
        6,
        208,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        65,
        146,
        100,
        77,
        220,
        130,
        217,
        251,
        135,
        145,
        166,
        164,
        233,
        14,
        33,
        62,
        98,
        121,
        202,
        242,
        133,
        183,
        172,
        254,
        248,
        80,
        220,
        197,
        93,
        162,
        232,
        23,
        29,
        96,
        53,
        113,
        245,
        140,
        154,
        7,
        235,
        122,
        88,
        139,
        139,
        213,
        62,
        38,
        53,
        76,
        201,
        211,
        128,
        235,
        203,
        176,
        249,
        28,
        99,
        233,
        50,
        62,
        29,
        169,
        125,
        27,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
      ],
      "gasLimit": 320000n,
      "maxFeePerGas": 119724110n,
      "maxPriorityFeePerGas": 2158210n,
      "nonce": 1598772n,
      "r": 74388668338801116788036288095384804610692187894803539035474864124793861525721n,
      "s": 17025227446258277625385529156568034059116341323646103819263689325562810989157n,
      "to": Address {
        "bytes": Uint8Array [
          8,
          112,
          0,
          163,
          0,
          222,
          114,
          0,
          56,
          43,
          85,
          212,
          0,
          69,
          0,
          0,
          0,
          229,
          214,
          14,
        ],
      },
      "txOptions": {
        "common": Common {
          "DEFAULT_HARDFORK": "shanghai",
          "HARDFORK_CHANGES": [
            [
              "chainstart",
              {
                "comment": "Start of the Ethereum main chain",
                "gasConfig": {
                  "gasLimitBoundDivisor": {
                    "d": "The bound divisor of the gas limit, used in update calculations",
                    "v": 1024,
                  },
                  "maxRefundQuotient": {
                    "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                    "v": 2,
                  },
                  "minGasLimit": {
                    "d": "Minimum the gas limit may ever be",
                    "v": 5000,
                  },
                },
                "gasPrices": {
                  "add": {
                    "d": "Base fee of the ADD opcode",
                    "v": 3,
                  },
                  "addmod": {
                    "d": "Base fee of the ADDMOD opcode",
                    "v": 8,
                  },
                  "address": {
                    "d": "Base fee of the ADDRESS opcode",
                    "v": 2,
                  },
                  "and": {
                    "d": "Base fee of the AND opcode",
                    "v": 3,
                  },
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 20,
                  },
                  "base": {
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                    "v": 2,
                  },
                  "blockhash": {
                    "d": "Base fee of the BLOCKHASH opcode",
                    "v": 20,
                  },
                  "byte": {
                    "d": "Base fee of the BYTE opcode",
                    "v": 3,
                  },
                  "call": {
                    "d": "Base fee of the CALL opcode",
                    "v": 40,
                  },
                  "callNewAccount": {
                    "d": "Paid for CALL when the destination address didn't exist prior",
                    "v": 25000,
                  },
                  "callStipend": {
                    "d": "Free gas given at beginning of call",
                    "v": 2300,
                  },
                  "callValueTransfer": {
                    "d": "Paid for CALL when the value transfor is non-zero",
                    "v": 9000,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 40,
                  },
                  "calldatacopy": {
                    "d": "Base fee of the CALLDATACOPY opcode",
                    "v": 3,
                  },
                  "calldataload": {
                    "d": "Base fee of the CALLDATALOAD opcode",
                    "v": 3,
                  },
                  "calldatasize": {
                    "d": "Base fee of the CALLDATASIZE opcode",
                    "v": 2,
                  },
                  "caller": {
                    "d": "Base fee of the CALLER opcode",
                    "v": 2,
                  },
                  "callvalue": {
                    "d": "Base fee of the CALLVALUE opcode",
                    "v": 2,
                  },
                  "codecopy": {
                    "d": "Base fee of the CODECOPY opcode",
                    "v": 3,
                  },
                  "codesize": {
                    "d": "Base fee of the CODESIZE opcode",
                    "v": 2,
                  },
                  "coinbase": {
                    "d": "Base fee of the COINBASE opcode",
                    "v": 2,
                  },
                  "copy": {
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                    "v": 3,
                  },
                  "create": {
                    "d": "Base fee of the CREATE opcode",
                    "v": 32000,
                  },
                  "createData": {
                    "d": "",
                    "v": 200,
                  },
                  "difficulty": {
                    "d": "Base fee of the DIFFICULTY opcode",
                    "v": 2,
                  },
                  "div": {
                    "d": "Base fee of the DIV opcode",
                    "v": 5,
                  },
                  "dup": {
                    "d": "Base fee of the DUP opcode",
                    "v": 3,
                  },
                  "ecRecover": {
                    "d": "",
                    "v": 3000,
                  },
                  "eq": {
                    "d": "Base fee of the EQ opcode",
                    "v": 3,
                  },
                  "exp": {
                    "d": "Base fee of the EXP opcode",
                    "v": 10,
                  },
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 10,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 20,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 20,
                  },
                  "gas": {
                    "d": "Base fee of the GAS opcode",
                    "v": 2,
                  },
                  "gaslimit": {
                    "d": "Base fee of the GASLIMIT opcode",
                    "v": 2,
                  },
                  "gasprice": {
                    "d": "Base fee of the GASPRICE opcode",
                    "v": 2,
                  },
                  "gt": {
                    "d": "Base fee of the GT opcode",
                    "v": 3,
                  },
                  "identity": {
                    "d": "",
                    "v": 15,
                  },
                  "identityWord": {
                    "d": "",
                    "v": 3,
                  },
                  "invalid": {
                    "d": "Base fee of the INVALID opcode",
                    "v": 0,
                  },
                  "iszero": {
                    "d": "Base fee of the ISZERO opcode",
                    "v": 3,
                  },
                  "jump": {
                    "d": "Base fee of the JUMP opcode",
                    "v": 8,
                  },
                  "jumpdest": {
                    "d": "Base fee of the JUMPDEST opcode",
                    "v": 1,
                  },
                  "jumpi": {
                    "d": "Base fee of the JUMPI opcode",
                    "v": 10,
                  },
                  "keccak256": {
                    "d": "Base fee of the SHA3 opcode",
                    "v": 30,
                  },
                  "keccak256Word": {
                    "d": "Once per word of the SHA3 operation's data",
                    "v": 6,
                  },
                  "log": {
                    "d": "Base fee of the LOG opcode",
                    "v": 375,
                  },
                  "logData": {
                    "d": "Per byte in a LOG* operation's data",
                    "v": 8,
                  },
                  "logTopic": {
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                    "v": 375,
                  },
                  "lt": {
                    "d": "Base fee of the LT opcode",
                    "v": 3,
                  },
                  "memory": {
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                    "v": 3,
                  },
                  "mload": {
                    "d": "Base fee of the MLOAD opcode",
                    "v": 3,
                  },
                  "mod": {
                    "d": "Base fee of the MOD opcode",
                    "v": 5,
                  },
                  "msize": {
                    "d": "Base fee of the MSIZE opcode",
                    "v": 2,
                  },
                  "mstore": {
                    "d": "Base fee of the MSTORE opcode",
                    "v": 3,
                  },
                  "mstore8": {
                    "d": "Base fee of the MSTORE8 opcode",
                    "v": 3,
                  },
                  "mul": {
                    "d": "Base fee of the MUL opcode",
                    "v": 5,
                  },
                  "mulmod": {
                    "d": "Base fee of the MULMOD opcode",
                    "v": 8,
                  },
                  "not": {
                    "d": "Base fee of the NOT opcode",
                    "v": 3,
                  },
                  "number": {
                    "d": "Base fee of the NUMBER opcode",
                    "v": 2,
                  },
                  "or": {
                    "d": "Base fee of the OR opcode",
                    "v": 3,
                  },
                  "origin": {
                    "d": "Base fee of the ORIGIN opcode",
                    "v": 2,
                  },
                  "pc": {
                    "d": "Base fee of the PC opcode",
                    "v": 2,
                  },
                  "pop": {
                    "d": "Base fee of the POP opcode",
                    "v": 2,
                  },
                  "push": {
                    "d": "Base fee of the PUSH opcode",
                    "v": 3,
                  },
                  "quadCoeffDiv": {
                    "d": "Divisor for the quadratic particle of the memory cost equation",
                    "v": 512,
                  },
                  "return": {
                    "d": "Base fee of the RETURN opcode",
                    "v": 0,
                  },
                  "ripemd160": {
                    "d": "",
                    "v": 600,
                  },
                  "ripemd160Word": {
                    "d": "",
                    "v": 120,
                  },
                  "sdiv": {
                    "d": "Base fee of the SDIV opcode",
                    "v": 5,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 0,
                  },
                  "selfdestructRefund": {
                    "d": "Refunded following a selfdestruct operation",
                    "v": 24000,
                  },
                  "sgt": {
                    "d": "Base fee of the SGT opcode",
                    "v": 3,
                  },
                  "sha256": {
                    "d": "",
                    "v": 60,
                  },
                  "sha256Word": {
                    "d": "",
                    "v": 12,
                  },
                  "signextend": {
                    "d": "Base fee of the SIGNEXTEND opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 50,
                  },
                  "slt": {
                    "d": "Base fee of the SLT opcode",
                    "v": 3,
                  },
                  "smod": {
                    "d": "Base fee of the SMOD opcode",
                    "v": 5,
                  },
                  "sstore": {
                    "d": "Base fee of the SSTORE opcode",
                    "v": 0,
                  },
                  "sstoreRefund": {
                    "d": "Once per SSTORE operation if the zeroness changes to zero",
                    "v": 15000,
                  },
                  "sstoreReset": {
                    "d": "Once per SSTORE operation if the zeroness does not change from zero",
                    "v": 5000,
                  },
                  "sstoreSet": {
                    "d": "Once per SSTORE operation if the zeroness changes from zero",
                    "v": 20000,
                  },
                  "stop": {
                    "d": "Base fee of the STOP opcode",
                    "v": 0,
                  },
                  "sub": {
                    "d": "Base fee of the SUB opcode",
                    "v": 3,
                  },
                  "swap": {
                    "d": "Base fee of the SWAP opcode",
                    "v": 3,
                  },
                  "timestamp": {
                    "d": "Base fee of the TIMESTAMP opcode",
                    "v": 2,
                  },
                  "tx": {
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                    "v": 21000,
                  },
                  "txCreation": {
                    "d": "The cost of creating a contract via tx",
                    "v": 32000,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 68,
                  },
                  "txDataZero": {
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                    "v": 4,
                  },
                  "xor": {
                    "d": "Base fee of the XOR opcode",
                    "v": 3,
                  },
                },
                "name": "chainstart",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 0,
                  },
                  "difficultyBoundDivisor": {
                    "d": "The bound divisor of the difficulty, used in the update calculations",
                    "v": 2048,
                  },
                  "durationLimit": {
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                    "v": 13,
                  },
                  "epochDuration": {
                    "d": "Duration between proof-of-work epochs",
                    "v": 30000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 5000000000000000000n,
                  },
                  "minimumDifficulty": {
                    "d": "The minimum that the difficulty may ever be",
                    "v": 131072,
                  },
                  "timebombPeriod": {
                    "d": "Exponential difficulty timebomb period",
                    "v": 100000,
                  },
                },
                "status": "final",
                "url": "",
                "vm": {
                  "callCreateDepth": {
                    "d": "Maximum depth of call/create stack",
                    "v": 1024,
                  },
                  "maxExtraDataSize": {
                    "d": "Maximum size extra data may be after Genesis",
                    "v": 32,
                  },
                  "stackLimit": {
                    "d": "Maximum size of VM stack allowed",
                    "v": 1024,
                  },
                },
              },
            ],
            [
              "homestead",
              {
                "comment": "Homestead hardfork with protocol and network changes",
                "gasPrices": {
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 40,
                  },
                },
                "name": "homestead",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-606",
              },
            ],
            [
              "dao",
              {
                "comment": "DAO rescue hardfork",
                "name": "dao",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-779",
              },
            ],
            [
              "tangerineWhistle",
              {
                "comment": "Hardfork with gas cost changes for IO-heavy operations",
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 400,
                  },
                  "call": {
                    "d": "Once per CALL operation & message call transaction",
                    "v": 700,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 700,
                  },
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 700,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 700,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 700,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 5000,
                  },
                  "sload": {
                    "d": "Once per SLOAD operation",
                    "v": 200,
                  },
                },
                "name": "tangerineWhistle",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-608",
              },
            ],
            [
              "spuriousDragon",
              {
                "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
                "gasPrices": {
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 50,
                  },
                },
                "name": "spuriousDragon",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "vm": {
                  "maxCodeSize": {
                    "d": "Maximum length of contract code",
                    "v": 24576,
                  },
                },
              },
            ],
            [
              "byzantium",
              {
                "comment": "Hardfork with new precompiles, instructions and other protocol changes",
                "gasPrices": {
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 500,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 40000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 100000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 80000,
                  },
                  "modexpGquaddivisor": {
                    "d": "Gquaddivisor from modexp precompile for gas calculation",
                    "v": 20,
                  },
                  "returndatacopy": {
                    "d": "Base fee of the RETURNDATACOPY opcode",
                    "v": 3,
                  },
                  "returndatasize": {
                    "d": "Base fee of the RETURNDATASIZE opcode",
                    "v": 2,
                  },
                  "revert": {
                    "d": "Base fee of the REVERT opcode",
                    "v": 0,
                  },
                  "staticcall": {
                    "d": "Base fee of the STATICCALL opcode",
                    "v": 700,
                  },
                },
                "name": "byzantium",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 3000000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 3000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-609",
              },
            ],
            [
              "constantinople",
              {
                "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
                "gasPrices": {
                  "create2": {
                    "d": "Base fee of the CREATE2 opcode",
                    "v": 32000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 400,
                  },
                  "netSstoreCleanGas": {
                    "d": "Once per SSTORE operation from clean non-zero",
                    "v": 5000,
                  },
                  "netSstoreClearRefund": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Once per SSTORE operation from dirty",
                    "v": 200,
                  },
                  "netSstoreInitGas": {
                    "d": "Once per SSTORE operation from clean zero",
                    "v": 20000,
                  },
                  "netSstoreNoopGas": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 200,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19800,
                  },
                  "netSstoreResetRefund": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4800,
                  },
                  "sar": {
                    "d": "Base fee of the SAR opcode",
                    "v": 3,
                  },
                  "shl": {
                    "d": "Base fee of the SHL opcode",
                    "v": 3,
                  },
                  "shr": {
                    "d": "Base fee of the SHR opcode",
                    "v": 3,
                  },
                },
                "name": "constantinople",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 5000000,
                  },
                  "minerReward": {
                    "d": "The amount a miner gets rewarded for mining a block",
                    "v": 2000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
              },
            ],
            [
              "petersburg",
              {
                "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
                "gasPrices": {
                  "netSstoreCleanGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreInitGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreNoopGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                },
                "name": "petersburg",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
              },
            ],
            [
              "istanbul",
              {
                "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
                "gasConfig": {},
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 700,
                  },
                  "blake2Round": {
                    "d": "Gas cost per round for the Blake2 F precompile",
                    "v": 1,
                  },
                  "chainid": {
                    "d": "Base fee of the CHAINID opcode",
                    "v": 2,
                  },
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 150,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 6000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 45000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 34000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 700,
                  },
                  "selfbalance": {
                    "d": "Base fee of the SELFBALANCE opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 800,
                  },
                  "sstoreCleanGasEIP2200": {
                    "d": "Once per SSTORE operation from clean non-zero to something else",
                    "v": 5000,
                  },
                  "sstoreCleanRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4200,
                  },
                  "sstoreClearRefundEIP2200": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "sstoreDirtyGasEIP2200": {
                    "d": "Once per SSTORE operation if a dirty value is changed",
                    "v": 800,
                  },
                  "sstoreInitGasEIP2200": {
                    "d": "Once per SSTORE operation from clean zero to non-zero",
                    "v": 20000,
                  },
                  "sstoreInitRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19200,
                  },
                  "sstoreNoopGasEIP2200": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 800,
                  },
                  "sstoreSentryGasEIP2200": {
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                    "v": 2300,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 16,
                  },
                },
                "name": "istanbul",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
              },
            ],
            [
              "muirGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "name": "muirGlacier",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 9000000,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
              },
            ],
            [
              "berlin",
              {
                "comment": "HF targeted for July 2020 following the Muir Glacier HF",
                "eips": [
                  2565,
                  2929,
                  2718,
                  2930,
                ],
                "name": "berlin",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2070",
              },
            ],
            [
              "london",
              {
                "comment": "HF targeted for July 2021 following the Berlin fork",
                "eips": [
                  1559,
                  3198,
                  3529,
                  3541,
                ],
                "name": "london",
                "status": "final",
                "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
              },
            ],
            [
              "arrowGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "eips": [
                  4345,
                ],
                "name": "arrowGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
              },
            ],
            [
              "grayGlacier",
              {
                "comment": "Delaying the difficulty bomb to Mid September 2022",
                "eips": [
                  5133,
                ],
                "name": "grayGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
              },
            ],
            [
              "paris",
              {
                "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
                "consensus": {
                  "algorithm": "casper",
                  "casper": {},
                  "type": "pos",
                },
                "eips": [
                  3675,
                  4399,
                ],
                "name": "paris",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
              },
            ],
            [
              "mergeForkIdTransition",
              {
                "comment": "Pre-merge hardfork to fork off non-upgraded clients",
                "eips": [],
                "name": "mergeForkIdTransition",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-3675",
              },
            ],
            [
              "shanghai",
              {
                "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
                "eips": [
                  3651,
                  3855,
                  3860,
                  4895,
                ],
                "name": "shanghai",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
              },
            ],
            [
              "cancun",
              {
                "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
                "eips": [
                  1153,
                  4844,
                  4788,
                  5656,
                  6780,
                  7516,
                ],
                "name": "cancun",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
              },
            ],
          ],
          "_activatedEIPsCache": [
            2565,
            2929,
            2718,
            2930,
            1559,
            3198,
            3529,
            3541,
            4345,
            5133,
            3675,
            4399,
            3651,
            3855,
            3860,
            4895,
            1153,
            4844,
            4788,
            5656,
            6780,
            7516,
            1559,
            4895,
            4844,
            4788,
          ],
          "_chainParams": {
            "bootstrapNodes": [
              {
                "comment": "bootnode-aws-ap-southeast-1-001",
                "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                "ip": "18.138.108.67",
                "location": "ap-southeast-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-aws-us-east-1-001",
                "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                "ip": "3.209.45.79",
                "location": "us-east-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-hel",
                "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
                "ip": "65.108.70.101",
                "location": "eu-west-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-fsn",
                "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
                "ip": "157.90.35.166",
                "location": "eu-central-1-001",
                "port": 30303,
              },
            ],
            "chainId": 10,
            "comment": "The Ethereum main chain",
            "consensus": {
              "algorithm": "ethash",
              "ethash": {},
              "type": "pow",
            },
            "defaultHardfork": "shanghai",
            "dnsNetworks": [
              "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
            ],
            "genesis": {
              "difficulty": 17179869184,
              "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
              "gasLimit": 5000,
              "nonce": "0x0000000000000042",
            },
            "hardforks": [
              {
                "block": 0,
                "forkHash": "0xfc64ec04",
                "name": "chainstart",
              },
              {
                "block": 1150000,
                "forkHash": "0x97c2c34c",
                "name": "homestead",
              },
              {
                "block": 1920000,
                "forkHash": "0x91d1f948",
                "name": "dao",
              },
              {
                "block": 2463000,
                "forkHash": "0x7a64da13",
                "name": "tangerineWhistle",
              },
              {
                "block": 2675000,
                "forkHash": "0x3edd5b10",
                "name": "spuriousDragon",
              },
              {
                "block": 4370000,
                "forkHash": "0xa00bc324",
                "name": "byzantium",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "constantinople",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "petersburg",
              },
              {
                "block": 9069000,
                "forkHash": "0x879d6e30",
                "name": "istanbul",
              },
              {
                "block": 9200000,
                "forkHash": "0xe029e991",
                "name": "muirGlacier",
              },
              {
                "block": 12244000,
                "forkHash": "0x0eb440f6",
                "name": "berlin",
              },
              {
                "block": 12965000,
                "forkHash": "0xb715077d",
                "name": "london",
              },
              {
                "block": 13773000,
                "forkHash": "0x20c327fc",
                "name": "arrowGlacier",
              },
              {
                "block": 15050000,
                "forkHash": "0xf0afd0e3",
                "name": "grayGlacier",
              },
              {
                "block": 15537394,
                "forkHash": "0xf0afd0e3",
                "name": "paris",
                "ttd": "58750000000000000000000",
              },
              {
                "block": null,
                "forkHash": null,
                "name": "mergeForkIdTransition",
              },
              {
                "block": null,
                "forkHash": "0xdce96c2d",
                "name": "shanghai",
                "timestamp": "1681338455",
              },
              {
                "block": null,
                "forkHash": "0x9f3d2254",
                "name": "cancun",
                "timestamp": "1710338135",
              },
            ],
            "name": "TevmCustom",
            "networkId": 10,
            "url": "https://ethstats.net/",
          },
          "_customChains": [],
          "_eips": [
            1559,
            4895,
            4844,
            4788,
          ],
          "_hardfork": "cancun",
          "_paramsCache": {
            "gasConfig": {
              "baseFeeMaxChangeDenominator": {
                "d": "Maximum base fee change denominator",
                "v": 8,
              },
              "blobGasPerBlob": {
                "d": "The base fee for blob gas per blob",
                "v": 131072,
              },
              "blobGasPriceUpdateFraction": {
                "d": "The denominator used in the exponential when calculating a blob gas price",
                "v": 3338477,
              },
              "elasticityMultiplier": {
                "d": "Maximum block gas target elasticity",
                "v": 2,
              },
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "initialBaseFee": {
                "d": "Initial base fee on first EIP1559 block",
                "v": 1000000000,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 5,
              },
              "maxblobGasPerBlock": {
                "d": "The max blob gas allowable per block",
                "v": 786432,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
              "targetBlobGasPerBlock": {
                "d": "The target blob gas consumed per block",
                "v": 393216,
              },
            },
            "gasPrices": {
              "accessListAddressCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 2400,
              },
              "accessListStorageKeyCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 1900,
              },
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 0,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "basefee": {
                "d": "Gas cost of the BASEFEE opcode",
                "v": 2,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "blobbasefee": {
                "d": "Gas cost of the BLOBBASEFEE opcode",
                "v": 2,
              },
              "blobhash": {
                "d": "Base fee of the BLOBHASH opcode",
                "v": 3,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 0,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 0,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "coldaccountaccess": {
                "d": "Gas cost of the first read of a given address (per transaction)",
                "v": 2600,
              },
              "coldsload": {
                "d": "Gas cost of the first read of storage from a given location (per transaction)",
                "v": 2100,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 0,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 0,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 0,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 0,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "initCodeWordCost": {
                "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
                "v": 2,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "kzgPointEvaluationGasPrecompilePrice": {
                "d": "The fee associated with the point evaluation precompile",
                "v": 50000,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "mcopy": {
                "d": "Base fee of the MCOPY opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "minBlobGasPrice": {
                "d": "The minimum fee per blob gas",
                "v": 1,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 3,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "prevrandao": {
                "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "push0": {
                "d": "Base fee of the PUSH0 opcode",
                "v": 2,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 0,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "simpleGasPerBlob": {
                "d": "The basic gas fee for each blob",
                "v": 12000,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 0,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 2900,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4900,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 4800,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 100,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19900,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 100,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 0,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tload": {
                "d": "Base fee of the TLOAD opcode",
                "v": 100,
              },
              "tstore": {
                "d": "Base fee of the TSTORE opcode",
                "v": 100,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "warmstorageread": {
                "d": "Gas cost of reading storage locations which have already loaded 'cold'",
                "v": 100,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 11400000,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "sharding": {
              "blobCommitmentVersionKzg": {
                "d": "The number indicated a versioned hash is a KZG commitment",
                "v": 1,
              },
              "fieldElementsPerBlob": {
                "d": "The number of field elements allowed per blob",
                "v": 4096,
              },
            },
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "historicalRootsLength": {
                "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
                "v": 8191,
              },
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "maxInitCodeSize": {
                "d": "Maximum length of initialization code when creating a contract",
                "v": 49152,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
          "customCrypto": {
            "kzg": {
              "blobToKzgCommitment": [Function],
              "computeBlobKzgProof": [Function],
              "freeTrustedSetup": [Function],
              "loadTrustedSetup": [Function],
              "verifyBlobKzgProof": [Function],
              "verifyBlobKzgProofBatch": [Function],
              "verifyKzgProof": [Function],
            },
          },
          "events": EventEmitter2 {
            "_events": {},
            "_eventsCount": 0,
            "_maxListeners": undefined,
            [Symbol(kCapture)]: false,
          },
        },
      },
      "v": 1n,
      "value": 0n,
    },
    FeeMarketEIP1559Transaction {
      "AccessListJSON": [],
      "DEFAULT_CHAIN": 1,
      "_type": 2,
      "accessList": [],
      "activeCapabilities": [
        1559,
        2718,
        2930,
      ],
      "cache": {
        "dataFee": undefined,
        "hash": undefined,
        "senderPubKey": undefined,
      },
      "chainId": 10n,
      "common": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "data": Uint8Array [],
      "gasLimit": 21000n,
      "maxFeePerGas": 71736516n,
      "maxPriorityFeePerGas": 1000000n,
      "nonce": 1n,
      "r": 39379717149689839666056481288146116362827632018233844749711057947447958643550n,
      "s": 50509181897526935048371399160971952853767691233564367183061793632146388584781n,
      "to": Address {
        "bytes": Uint8Array [
          65,
          225,
          246,
          206,
          112,
          12,
          146,
          132,
          98,
          187,
          158,
          247,
          121,
          34,
          172,
          85,
          56,
          230,
          116,
          210,
        ],
      },
      "txOptions": {
        "common": Common {
          "DEFAULT_HARDFORK": "shanghai",
          "HARDFORK_CHANGES": [
            [
              "chainstart",
              {
                "comment": "Start of the Ethereum main chain",
                "gasConfig": {
                  "gasLimitBoundDivisor": {
                    "d": "The bound divisor of the gas limit, used in update calculations",
                    "v": 1024,
                  },
                  "maxRefundQuotient": {
                    "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                    "v": 2,
                  },
                  "minGasLimit": {
                    "d": "Minimum the gas limit may ever be",
                    "v": 5000,
                  },
                },
                "gasPrices": {
                  "add": {
                    "d": "Base fee of the ADD opcode",
                    "v": 3,
                  },
                  "addmod": {
                    "d": "Base fee of the ADDMOD opcode",
                    "v": 8,
                  },
                  "address": {
                    "d": "Base fee of the ADDRESS opcode",
                    "v": 2,
                  },
                  "and": {
                    "d": "Base fee of the AND opcode",
                    "v": 3,
                  },
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 20,
                  },
                  "base": {
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                    "v": 2,
                  },
                  "blockhash": {
                    "d": "Base fee of the BLOCKHASH opcode",
                    "v": 20,
                  },
                  "byte": {
                    "d": "Base fee of the BYTE opcode",
                    "v": 3,
                  },
                  "call": {
                    "d": "Base fee of the CALL opcode",
                    "v": 40,
                  },
                  "callNewAccount": {
                    "d": "Paid for CALL when the destination address didn't exist prior",
                    "v": 25000,
                  },
                  "callStipend": {
                    "d": "Free gas given at beginning of call",
                    "v": 2300,
                  },
                  "callValueTransfer": {
                    "d": "Paid for CALL when the value transfor is non-zero",
                    "v": 9000,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 40,
                  },
                  "calldatacopy": {
                    "d": "Base fee of the CALLDATACOPY opcode",
                    "v": 3,
                  },
                  "calldataload": {
                    "d": "Base fee of the CALLDATALOAD opcode",
                    "v": 3,
                  },
                  "calldatasize": {
                    "d": "Base fee of the CALLDATASIZE opcode",
                    "v": 2,
                  },
                  "caller": {
                    "d": "Base fee of the CALLER opcode",
                    "v": 2,
                  },
                  "callvalue": {
                    "d": "Base fee of the CALLVALUE opcode",
                    "v": 2,
                  },
                  "codecopy": {
                    "d": "Base fee of the CODECOPY opcode",
                    "v": 3,
                  },
                  "codesize": {
                    "d": "Base fee of the CODESIZE opcode",
                    "v": 2,
                  },
                  "coinbase": {
                    "d": "Base fee of the COINBASE opcode",
                    "v": 2,
                  },
                  "copy": {
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                    "v": 3,
                  },
                  "create": {
                    "d": "Base fee of the CREATE opcode",
                    "v": 32000,
                  },
                  "createData": {
                    "d": "",
                    "v": 200,
                  },
                  "difficulty": {
                    "d": "Base fee of the DIFFICULTY opcode",
                    "v": 2,
                  },
                  "div": {
                    "d": "Base fee of the DIV opcode",
                    "v": 5,
                  },
                  "dup": {
                    "d": "Base fee of the DUP opcode",
                    "v": 3,
                  },
                  "ecRecover": {
                    "d": "",
                    "v": 3000,
                  },
                  "eq": {
                    "d": "Base fee of the EQ opcode",
                    "v": 3,
                  },
                  "exp": {
                    "d": "Base fee of the EXP opcode",
                    "v": 10,
                  },
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 10,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 20,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 20,
                  },
                  "gas": {
                    "d": "Base fee of the GAS opcode",
                    "v": 2,
                  },
                  "gaslimit": {
                    "d": "Base fee of the GASLIMIT opcode",
                    "v": 2,
                  },
                  "gasprice": {
                    "d": "Base fee of the GASPRICE opcode",
                    "v": 2,
                  },
                  "gt": {
                    "d": "Base fee of the GT opcode",
                    "v": 3,
                  },
                  "identity": {
                    "d": "",
                    "v": 15,
                  },
                  "identityWord": {
                    "d": "",
                    "v": 3,
                  },
                  "invalid": {
                    "d": "Base fee of the INVALID opcode",
                    "v": 0,
                  },
                  "iszero": {
                    "d": "Base fee of the ISZERO opcode",
                    "v": 3,
                  },
                  "jump": {
                    "d": "Base fee of the JUMP opcode",
                    "v": 8,
                  },
                  "jumpdest": {
                    "d": "Base fee of the JUMPDEST opcode",
                    "v": 1,
                  },
                  "jumpi": {
                    "d": "Base fee of the JUMPI opcode",
                    "v": 10,
                  },
                  "keccak256": {
                    "d": "Base fee of the SHA3 opcode",
                    "v": 30,
                  },
                  "keccak256Word": {
                    "d": "Once per word of the SHA3 operation's data",
                    "v": 6,
                  },
                  "log": {
                    "d": "Base fee of the LOG opcode",
                    "v": 375,
                  },
                  "logData": {
                    "d": "Per byte in a LOG* operation's data",
                    "v": 8,
                  },
                  "logTopic": {
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                    "v": 375,
                  },
                  "lt": {
                    "d": "Base fee of the LT opcode",
                    "v": 3,
                  },
                  "memory": {
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                    "v": 3,
                  },
                  "mload": {
                    "d": "Base fee of the MLOAD opcode",
                    "v": 3,
                  },
                  "mod": {
                    "d": "Base fee of the MOD opcode",
                    "v": 5,
                  },
                  "msize": {
                    "d": "Base fee of the MSIZE opcode",
                    "v": 2,
                  },
                  "mstore": {
                    "d": "Base fee of the MSTORE opcode",
                    "v": 3,
                  },
                  "mstore8": {
                    "d": "Base fee of the MSTORE8 opcode",
                    "v": 3,
                  },
                  "mul": {
                    "d": "Base fee of the MUL opcode",
                    "v": 5,
                  },
                  "mulmod": {
                    "d": "Base fee of the MULMOD opcode",
                    "v": 8,
                  },
                  "not": {
                    "d": "Base fee of the NOT opcode",
                    "v": 3,
                  },
                  "number": {
                    "d": "Base fee of the NUMBER opcode",
                    "v": 2,
                  },
                  "or": {
                    "d": "Base fee of the OR opcode",
                    "v": 3,
                  },
                  "origin": {
                    "d": "Base fee of the ORIGIN opcode",
                    "v": 2,
                  },
                  "pc": {
                    "d": "Base fee of the PC opcode",
                    "v": 2,
                  },
                  "pop": {
                    "d": "Base fee of the POP opcode",
                    "v": 2,
                  },
                  "push": {
                    "d": "Base fee of the PUSH opcode",
                    "v": 3,
                  },
                  "quadCoeffDiv": {
                    "d": "Divisor for the quadratic particle of the memory cost equation",
                    "v": 512,
                  },
                  "return": {
                    "d": "Base fee of the RETURN opcode",
                    "v": 0,
                  },
                  "ripemd160": {
                    "d": "",
                    "v": 600,
                  },
                  "ripemd160Word": {
                    "d": "",
                    "v": 120,
                  },
                  "sdiv": {
                    "d": "Base fee of the SDIV opcode",
                    "v": 5,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 0,
                  },
                  "selfdestructRefund": {
                    "d": "Refunded following a selfdestruct operation",
                    "v": 24000,
                  },
                  "sgt": {
                    "d": "Base fee of the SGT opcode",
                    "v": 3,
                  },
                  "sha256": {
                    "d": "",
                    "v": 60,
                  },
                  "sha256Word": {
                    "d": "",
                    "v": 12,
                  },
                  "signextend": {
                    "d": "Base fee of the SIGNEXTEND opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 50,
                  },
                  "slt": {
                    "d": "Base fee of the SLT opcode",
                    "v": 3,
                  },
                  "smod": {
                    "d": "Base fee of the SMOD opcode",
                    "v": 5,
                  },
                  "sstore": {
                    "d": "Base fee of the SSTORE opcode",
                    "v": 0,
                  },
                  "sstoreRefund": {
                    "d": "Once per SSTORE operation if the zeroness changes to zero",
                    "v": 15000,
                  },
                  "sstoreReset": {
                    "d": "Once per SSTORE operation if the zeroness does not change from zero",
                    "v": 5000,
                  },
                  "sstoreSet": {
                    "d": "Once per SSTORE operation if the zeroness changes from zero",
                    "v": 20000,
                  },
                  "stop": {
                    "d": "Base fee of the STOP opcode",
                    "v": 0,
                  },
                  "sub": {
                    "d": "Base fee of the SUB opcode",
                    "v": 3,
                  },
                  "swap": {
                    "d": "Base fee of the SWAP opcode",
                    "v": 3,
                  },
                  "timestamp": {
                    "d": "Base fee of the TIMESTAMP opcode",
                    "v": 2,
                  },
                  "tx": {
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                    "v": 21000,
                  },
                  "txCreation": {
                    "d": "The cost of creating a contract via tx",
                    "v": 32000,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 68,
                  },
                  "txDataZero": {
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                    "v": 4,
                  },
                  "xor": {
                    "d": "Base fee of the XOR opcode",
                    "v": 3,
                  },
                },
                "name": "chainstart",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 0,
                  },
                  "difficultyBoundDivisor": {
                    "d": "The bound divisor of the difficulty, used in the update calculations",
                    "v": 2048,
                  },
                  "durationLimit": {
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                    "v": 13,
                  },
                  "epochDuration": {
                    "d": "Duration between proof-of-work epochs",
                    "v": 30000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 5000000000000000000n,
                  },
                  "minimumDifficulty": {
                    "d": "The minimum that the difficulty may ever be",
                    "v": 131072,
                  },
                  "timebombPeriod": {
                    "d": "Exponential difficulty timebomb period",
                    "v": 100000,
                  },
                },
                "status": "final",
                "url": "",
                "vm": {
                  "callCreateDepth": {
                    "d": "Maximum depth of call/create stack",
                    "v": 1024,
                  },
                  "maxExtraDataSize": {
                    "d": "Maximum size extra data may be after Genesis",
                    "v": 32,
                  },
                  "stackLimit": {
                    "d": "Maximum size of VM stack allowed",
                    "v": 1024,
                  },
                },
              },
            ],
            [
              "homestead",
              {
                "comment": "Homestead hardfork with protocol and network changes",
                "gasPrices": {
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 40,
                  },
                },
                "name": "homestead",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-606",
              },
            ],
            [
              "dao",
              {
                "comment": "DAO rescue hardfork",
                "name": "dao",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-779",
              },
            ],
            [
              "tangerineWhistle",
              {
                "comment": "Hardfork with gas cost changes for IO-heavy operations",
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 400,
                  },
                  "call": {
                    "d": "Once per CALL operation & message call transaction",
                    "v": 700,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 700,
                  },
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 700,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 700,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 700,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 5000,
                  },
                  "sload": {
                    "d": "Once per SLOAD operation",
                    "v": 200,
                  },
                },
                "name": "tangerineWhistle",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-608",
              },
            ],
            [
              "spuriousDragon",
              {
                "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
                "gasPrices": {
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 50,
                  },
                },
                "name": "spuriousDragon",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "vm": {
                  "maxCodeSize": {
                    "d": "Maximum length of contract code",
                    "v": 24576,
                  },
                },
              },
            ],
            [
              "byzantium",
              {
                "comment": "Hardfork with new precompiles, instructions and other protocol changes",
                "gasPrices": {
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 500,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 40000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 100000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 80000,
                  },
                  "modexpGquaddivisor": {
                    "d": "Gquaddivisor from modexp precompile for gas calculation",
                    "v": 20,
                  },
                  "returndatacopy": {
                    "d": "Base fee of the RETURNDATACOPY opcode",
                    "v": 3,
                  },
                  "returndatasize": {
                    "d": "Base fee of the RETURNDATASIZE opcode",
                    "v": 2,
                  },
                  "revert": {
                    "d": "Base fee of the REVERT opcode",
                    "v": 0,
                  },
                  "staticcall": {
                    "d": "Base fee of the STATICCALL opcode",
                    "v": 700,
                  },
                },
                "name": "byzantium",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 3000000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 3000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-609",
              },
            ],
            [
              "constantinople",
              {
                "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
                "gasPrices": {
                  "create2": {
                    "d": "Base fee of the CREATE2 opcode",
                    "v": 32000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 400,
                  },
                  "netSstoreCleanGas": {
                    "d": "Once per SSTORE operation from clean non-zero",
                    "v": 5000,
                  },
                  "netSstoreClearRefund": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Once per SSTORE operation from dirty",
                    "v": 200,
                  },
                  "netSstoreInitGas": {
                    "d": "Once per SSTORE operation from clean zero",
                    "v": 20000,
                  },
                  "netSstoreNoopGas": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 200,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19800,
                  },
                  "netSstoreResetRefund": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4800,
                  },
                  "sar": {
                    "d": "Base fee of the SAR opcode",
                    "v": 3,
                  },
                  "shl": {
                    "d": "Base fee of the SHL opcode",
                    "v": 3,
                  },
                  "shr": {
                    "d": "Base fee of the SHR opcode",
                    "v": 3,
                  },
                },
                "name": "constantinople",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 5000000,
                  },
                  "minerReward": {
                    "d": "The amount a miner gets rewarded for mining a block",
                    "v": 2000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
              },
            ],
            [
              "petersburg",
              {
                "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
                "gasPrices": {
                  "netSstoreCleanGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreInitGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreNoopGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                },
                "name": "petersburg",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
              },
            ],
            [
              "istanbul",
              {
                "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
                "gasConfig": {},
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 700,
                  },
                  "blake2Round": {
                    "d": "Gas cost per round for the Blake2 F precompile",
                    "v": 1,
                  },
                  "chainid": {
                    "d": "Base fee of the CHAINID opcode",
                    "v": 2,
                  },
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 150,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 6000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 45000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 34000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 700,
                  },
                  "selfbalance": {
                    "d": "Base fee of the SELFBALANCE opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 800,
                  },
                  "sstoreCleanGasEIP2200": {
                    "d": "Once per SSTORE operation from clean non-zero to something else",
                    "v": 5000,
                  },
                  "sstoreCleanRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4200,
                  },
                  "sstoreClearRefundEIP2200": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "sstoreDirtyGasEIP2200": {
                    "d": "Once per SSTORE operation if a dirty value is changed",
                    "v": 800,
                  },
                  "sstoreInitGasEIP2200": {
                    "d": "Once per SSTORE operation from clean zero to non-zero",
                    "v": 20000,
                  },
                  "sstoreInitRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19200,
                  },
                  "sstoreNoopGasEIP2200": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 800,
                  },
                  "sstoreSentryGasEIP2200": {
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                    "v": 2300,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 16,
                  },
                },
                "name": "istanbul",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
              },
            ],
            [
              "muirGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "name": "muirGlacier",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 9000000,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
              },
            ],
            [
              "berlin",
              {
                "comment": "HF targeted for July 2020 following the Muir Glacier HF",
                "eips": [
                  2565,
                  2929,
                  2718,
                  2930,
                ],
                "name": "berlin",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2070",
              },
            ],
            [
              "london",
              {
                "comment": "HF targeted for July 2021 following the Berlin fork",
                "eips": [
                  1559,
                  3198,
                  3529,
                  3541,
                ],
                "name": "london",
                "status": "final",
                "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
              },
            ],
            [
              "arrowGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "eips": [
                  4345,
                ],
                "name": "arrowGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
              },
            ],
            [
              "grayGlacier",
              {
                "comment": "Delaying the difficulty bomb to Mid September 2022",
                "eips": [
                  5133,
                ],
                "name": "grayGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
              },
            ],
            [
              "paris",
              {
                "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
                "consensus": {
                  "algorithm": "casper",
                  "casper": {},
                  "type": "pos",
                },
                "eips": [
                  3675,
                  4399,
                ],
                "name": "paris",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
              },
            ],
            [
              "mergeForkIdTransition",
              {
                "comment": "Pre-merge hardfork to fork off non-upgraded clients",
                "eips": [],
                "name": "mergeForkIdTransition",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-3675",
              },
            ],
            [
              "shanghai",
              {
                "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
                "eips": [
                  3651,
                  3855,
                  3860,
                  4895,
                ],
                "name": "shanghai",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
              },
            ],
            [
              "cancun",
              {
                "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
                "eips": [
                  1153,
                  4844,
                  4788,
                  5656,
                  6780,
                  7516,
                ],
                "name": "cancun",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
              },
            ],
          ],
          "_activatedEIPsCache": [
            2565,
            2929,
            2718,
            2930,
            1559,
            3198,
            3529,
            3541,
            4345,
            5133,
            3675,
            4399,
            3651,
            3855,
            3860,
            4895,
            1153,
            4844,
            4788,
            5656,
            6780,
            7516,
            1559,
            4895,
            4844,
            4788,
          ],
          "_chainParams": {
            "bootstrapNodes": [
              {
                "comment": "bootnode-aws-ap-southeast-1-001",
                "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                "ip": "18.138.108.67",
                "location": "ap-southeast-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-aws-us-east-1-001",
                "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                "ip": "3.209.45.79",
                "location": "us-east-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-hel",
                "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
                "ip": "65.108.70.101",
                "location": "eu-west-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-fsn",
                "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
                "ip": "157.90.35.166",
                "location": "eu-central-1-001",
                "port": 30303,
              },
            ],
            "chainId": 10,
            "comment": "The Ethereum main chain",
            "consensus": {
              "algorithm": "ethash",
              "ethash": {},
              "type": "pow",
            },
            "defaultHardfork": "shanghai",
            "dnsNetworks": [
              "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
            ],
            "genesis": {
              "difficulty": 17179869184,
              "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
              "gasLimit": 5000,
              "nonce": "0x0000000000000042",
            },
            "hardforks": [
              {
                "block": 0,
                "forkHash": "0xfc64ec04",
                "name": "chainstart",
              },
              {
                "block": 1150000,
                "forkHash": "0x97c2c34c",
                "name": "homestead",
              },
              {
                "block": 1920000,
                "forkHash": "0x91d1f948",
                "name": "dao",
              },
              {
                "block": 2463000,
                "forkHash": "0x7a64da13",
                "name": "tangerineWhistle",
              },
              {
                "block": 2675000,
                "forkHash": "0x3edd5b10",
                "name": "spuriousDragon",
              },
              {
                "block": 4370000,
                "forkHash": "0xa00bc324",
                "name": "byzantium",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "constantinople",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "petersburg",
              },
              {
                "block": 9069000,
                "forkHash": "0x879d6e30",
                "name": "istanbul",
              },
              {
                "block": 9200000,
                "forkHash": "0xe029e991",
                "name": "muirGlacier",
              },
              {
                "block": 12244000,
                "forkHash": "0x0eb440f6",
                "name": "berlin",
              },
              {
                "block": 12965000,
                "forkHash": "0xb715077d",
                "name": "london",
              },
              {
                "block": 13773000,
                "forkHash": "0x20c327fc",
                "name": "arrowGlacier",
              },
              {
                "block": 15050000,
                "forkHash": "0xf0afd0e3",
                "name": "grayGlacier",
              },
              {
                "block": 15537394,
                "forkHash": "0xf0afd0e3",
                "name": "paris",
                "ttd": "58750000000000000000000",
              },
              {
                "block": null,
                "forkHash": null,
                "name": "mergeForkIdTransition",
              },
              {
                "block": null,
                "forkHash": "0xdce96c2d",
                "name": "shanghai",
                "timestamp": "1681338455",
              },
              {
                "block": null,
                "forkHash": "0x9f3d2254",
                "name": "cancun",
                "timestamp": "1710338135",
              },
            ],
            "name": "TevmCustom",
            "networkId": 10,
            "url": "https://ethstats.net/",
          },
          "_customChains": [],
          "_eips": [
            1559,
            4895,
            4844,
            4788,
          ],
          "_hardfork": "cancun",
          "_paramsCache": {
            "gasConfig": {
              "baseFeeMaxChangeDenominator": {
                "d": "Maximum base fee change denominator",
                "v": 8,
              },
              "blobGasPerBlob": {
                "d": "The base fee for blob gas per blob",
                "v": 131072,
              },
              "blobGasPriceUpdateFraction": {
                "d": "The denominator used in the exponential when calculating a blob gas price",
                "v": 3338477,
              },
              "elasticityMultiplier": {
                "d": "Maximum block gas target elasticity",
                "v": 2,
              },
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "initialBaseFee": {
                "d": "Initial base fee on first EIP1559 block",
                "v": 1000000000,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 5,
              },
              "maxblobGasPerBlock": {
                "d": "The max blob gas allowable per block",
                "v": 786432,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
              "targetBlobGasPerBlock": {
                "d": "The target blob gas consumed per block",
                "v": 393216,
              },
            },
            "gasPrices": {
              "accessListAddressCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 2400,
              },
              "accessListStorageKeyCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 1900,
              },
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 0,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "basefee": {
                "d": "Gas cost of the BASEFEE opcode",
                "v": 2,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "blobbasefee": {
                "d": "Gas cost of the BLOBBASEFEE opcode",
                "v": 2,
              },
              "blobhash": {
                "d": "Base fee of the BLOBHASH opcode",
                "v": 3,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 0,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 0,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "coldaccountaccess": {
                "d": "Gas cost of the first read of a given address (per transaction)",
                "v": 2600,
              },
              "coldsload": {
                "d": "Gas cost of the first read of storage from a given location (per transaction)",
                "v": 2100,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 0,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 0,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 0,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 0,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "initCodeWordCost": {
                "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
                "v": 2,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "kzgPointEvaluationGasPrecompilePrice": {
                "d": "The fee associated with the point evaluation precompile",
                "v": 50000,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "mcopy": {
                "d": "Base fee of the MCOPY opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "minBlobGasPrice": {
                "d": "The minimum fee per blob gas",
                "v": 1,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 3,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "prevrandao": {
                "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "push0": {
                "d": "Base fee of the PUSH0 opcode",
                "v": 2,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 0,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "simpleGasPerBlob": {
                "d": "The basic gas fee for each blob",
                "v": 12000,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 0,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 2900,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4900,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 4800,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 100,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19900,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 100,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 0,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tload": {
                "d": "Base fee of the TLOAD opcode",
                "v": 100,
              },
              "tstore": {
                "d": "Base fee of the TSTORE opcode",
                "v": 100,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "warmstorageread": {
                "d": "Gas cost of reading storage locations which have already loaded 'cold'",
                "v": 100,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 11400000,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "sharding": {
              "blobCommitmentVersionKzg": {
                "d": "The number indicated a versioned hash is a KZG commitment",
                "v": 1,
              },
              "fieldElementsPerBlob": {
                "d": "The number of field elements allowed per blob",
                "v": 4096,
              },
            },
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "historicalRootsLength": {
                "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
                "v": 8191,
              },
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "maxInitCodeSize": {
                "d": "Maximum length of initialization code when creating a contract",
                "v": 49152,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
          "customCrypto": {
            "kzg": {
              "blobToKzgCommitment": [Function],
              "computeBlobKzgProof": [Function],
              "freeTrustedSetup": [Function],
              "loadTrustedSetup": [Function],
              "verifyBlobKzgProof": [Function],
              "verifyBlobKzgProofBatch": [Function],
              "verifyKzgProof": [Function],
            },
          },
          "events": EventEmitter2 {
            "_events": {},
            "_eventsCount": 0,
            "_maxListeners": undefined,
            [Symbol(kCapture)]: false,
          },
        },
      },
      "v": 0n,
      "value": 533954642934503n,
    },
    FeeMarketEIP1559Transaction {
      "AccessListJSON": [],
      "DEFAULT_CHAIN": 1,
      "_type": 2,
      "accessList": [],
      "activeCapabilities": [
        1559,
        2718,
        2930,
      ],
      "cache": {
        "dataFee": undefined,
        "hash": undefined,
        "senderPubKey": undefined,
      },
      "chainId": 10n,
      "common": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "data": Uint8Array [
        217,
        133,
        241,
        232,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        10,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        12,
        105,
        223,
        106,
        161,
        218,
        192,
        39,
        131,
        240,
        43,
        59,
        121,
        19,
        1,
        227,
        208,
        32,
        104,
        121,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        36,
        20,
        94,
        110,
        61,
        111,
        200,
        15,
        173,
        6,
        61,
        73,
        96,
        159,
        39,
        204,
        209,
        7,
        159,
        191,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        6,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        6,
        36,
        113,
        137,
        253,
        63,
        230,
        45,
        246,
        200,
        180,
        168,
        95,
        225,
        166,
        125,
        180,
        77,
        193,
        45,
        229,
        219,
        51,
        15,
        122,
        198,
        107,
        114,
        220,
        101,
        138,
        254,
        223,
        15,
        74,
        65,
        91,
        67,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        5,
        189,
        80,
        78,
        65,
        85,
        1,
        0,
        0,
        0,
        4,
        126,
        1,
        0,
        0,
        0,
        4,
        16,
        0,
        46,
        138,
        119,
        169,
        42,
        141,
        71,
        89,
        242,
        29,
        12,
        229,
        34,
        193,
        190,
        254,
        166,
        85,
        231,
        243,
        4,
        112,
        203,
        163,
        33,
        115,
        13,
        192,
        139,
        157,
        224,
        207,
        26,
        111,
        80,
        104,
        208,
        88,
        92,
        206,
        91,
        180,
        69,
        191,
        188,
        248,
        250,
        224,
        197,
        215,
        119,
        150,
        36,
        8,
        140,
        119,
        21,
        194,
        124,
        42,
        181,
        152,
        239,
        105,
        0,
        1,
        69,
        22,
        189,
        4,
        148,
        36,
        52,
        153,
        174,
        20,
        255,
        236,
        66,
        77,
        95,
        27,
        234,
        96,
        211,
        147,
        80,
        214,
        110,
        94,
        197,
        96,
        55,
        230,
        123,
        120,
        185,
        181,
        55,
        29,
        132,
        137,
        3,
        191,
        80,
        161,
        71,
        94,
        21,
        165,
        100,
        177,
        136,
        73,
        78,
        33,
        243,
        224,
        198,
        202,
        187,
        74,
        238,
        84,
        84,
        161,
        76,
        149,
        254,
        182,
        1,
        2,
        200,
        170,
        97,
        22,
        204,
        20,
        178,
        109,
        251,
        46,
        141,
        187,
        89,
        192,
        18,
        62,
        152,
        38,
        91,
        150,
        127,
        101,
        222,
        212,
        118,
        138,
        56,
        60,
        13,
        235,
        190,
        111,
        27,
        81,
        97,
        29,
        22,
        235,
        157,
        202,
        225,
        3,
        60,
        198,
        137,
        195,
        89,
        94,
        16,
        71,
        56,
        124,
        101,
        31,
        143,
        138,
        83,
        5,
        45,
        58,
        2,
        167,
        248,
        233,
        1,
        3,
        102,
        72,
        116,
        201,
        105,
        229,
        180,
        114,
        57,
        229,
        26,
        142,
        76,
        88,
        35,
        181,
        46,
        6,
        212,
        150,
        224,
        188,
        101,
        200,
        15,
        91,
        55,
        82,
        225,
        229,
        181,
        25,
        63,
        254,
        172,
        126,
        212,
        29,
        154,
        84,
        30,
        233,
        46,
        101,
        21,
        236,
        57,
        114,
        147,
        191,
        2,
        110,
        181,
        3,
        111,
        24,
        160,
        61,
        42,
        152,
        145,
        67,
        216,
        81,
        1,
        4,
        23,
        193,
        140,
        112,
        11,
        173,
        180,
        65,
        122,
        213,
        99,
        54,
        159,
        231,
        120,
        181,
        80,
        73,
        225,
        185,
        227,
        244,
        87,
        77,
        92,
        238,
        44,
        17,
        64,
        114,
        99,
        137,
        10,
        2,
        166,
        223,
        0,
        191,
        11,
        254,
        236,
        179,
        225,
        234,
        85,
        97,
        192,
        47,
        187,
        226,
        191,
        61,
        52,
        60,
        153,
        135,
        109,
        62,
        112,
        65,
        161,
        205,
        177,
        111,
        0,
        6,
        37,
        232,
        65,
        22,
        171,
        56,
        212,
        49,
        79,
        198,
        184,
        70,
        25,
        176,
        215,
        150,
        84,
        200,
        27,
        208,
        48,
        19,
        18,
        23,
        6,
        103,
        46,
        9,
        16,
        193,
        118,
        107,
        14,
        158,
        53,
        51,
        102,
        28,
        147,
        178,
        33,
        157,
        223,
        44,
        226,
        17,
        132,
        77,
        97,
        33,
        140,
        130,
        159,
        10,
        74,
        41,
        32,
        184,
        120,
        103,
        48,
        83,
        1,
        11,
        0,
        8,
        241,
        79,
        95,
        122,
        237,
        99,
        153,
        0,
        179,
        254,
        236,
        192,
        65,
        115,
        230,
        120,
        118,
        220,
        248,
        248,
        17,
        1,
        253,
        49,
        204,
        16,
        196,
        60,
        69,
        233,
        161,
        69,
        39,
        78,
        116,
        139,
        153,
        85,
        78,
        110,
        63,
        203,
        23,
        135,
        64,
        181,
        139,
        146,
        66,
        93,
        204,
        77,
        239,
        92,
        201,
        36,
        173,
        84,
        134,
        71,
        80,
        185,
        8,
        46,
        1,
        9,
        57,
        123,
        203,
        155,
        177,
        104,
        247,
        53,
        190,
        204,
        233,
        106,
        85,
        158,
        241,
        174,
        44,
        137,
        45,
        250,
        145,
        161,
        251,
        154,
        221,
        18,
        79,
        140,
        141,
        183,
        65,
        66,
        87,
        129,
        56,
        201,
        17,
        220,
        179,
        92,
        214,
        178,
        223,
        45,
        71,
        101,
        190,
        252,
        253,
        65,
        92,
        80,
        128,
        233,
        224,
        217,
        60,
        193,
        129,
        135,
        144,
        75,
        163,
        28,
        1,
        10,
        219,
        249,
        18,
        151,
        224,
        66,
        49,
        29,
        38,
        129,
        33,
        36,
        202,
        20,
        20,
        201,
        159,
        83,
        127,
        40,
        116,
        113,
        245,
        158,
        233,
        2,
        175,
        185,
        93,
        146,
        90,
        140,
        79,
        203,
        44,
        157,
        174,
        223,
        78,
        204,
        117,
        47,
        233,
        33,
        9,
        52,
        217,
        200,
        14,
        55,
        157,
        175,
        129,
        71,
        242,
        215,
        81,
        106,
        20,
        236,
        177,
        74,
        191,
        51,
        1,
        11,
        230,
        24,
        240,
        200,
        181,
        110,
        157,
        238,
        67,
        195,
        179,
        89,
        52,
        156,
        36,
        19,
        125,
        182,
        152,
        146,
        48,
        77,
        161,
        18,
        232,
        244,
        201,
        238,
        218,
        253,
        131,
        96,
        114,
        10,
        49,
        125,
        149,
        51,
        181,
        62,
        55,
        160,
        1,
        117,
        250,
        165,
        86,
        0,
        219,
        44,
        4,
        142,
        134,
        215,
        2,
        129,
        248,
        81,
        214,
        191,
        145,
        50,
        109,
        155,
        1,
        12,
        17,
        112,
        103,
        129,
        94,
        174,
        69,
        31,
        174,
        221,
        100,
        125,
        100,
        132,
        235,
        150,
        145,
        231,
        110,
        18,
        233,
        129,
        211,
        44,
        9,
        246,
        196,
        186,
        92,
        150,
        14,
        159,
        87,
        125,
        50,
        178,
        234,
        162,
        117,
        197,
        62,
        23,
        150,
        37,
        251,
        110,
        93,
        237,
        90,
        245,
        126,
        71,
        228,
        254,
        52,
        70,
        146,
        49,
        22,
        95,
        129,
        42,
        103,
        201,
        1,
        13,
        62,
        214,
        56,
        165,
        110,
        45,
        68,
        25,
        254,
        192,
        42,
        126,
        25,
        175,
        180,
        208,
        214,
        64,
        36,
        170,
        252,
        116,
        23,
        235,
        59,
        192,
        49,
        217,
        166,
        166,
        148,
        91,
        45,
        47,
        217,
        149,
        6,
        223,
        93,
        96,
        159,
        17,
        40,
        158,
        25,
        230,
        219,
        232,
        110,
        179,
        202,
        105,
        95,
        227,
        134,
        38,
        165,
        79,
        102,
        110,
        129,
        19,
        8,
        212,
        1,
        14,
        35,
        133,
        15,
        175,
        122,
        44,
        124,
        208,
        3,
        105,
        61,
        124,
        24,
        55,
        69,
        102,
        81,
        95,
        190,
        181,
        93,
        3,
        155,
        27,
        7,
        170,
        220,
        140,
        111,
        232,
        148,
        118,
        57,
        224,
        225,
        151,
        129,
        150,
        81,
        113,
        148,
        193,
        237,
        117,
        119,
        100,
        97,
        9,
        97,
        251,
        38,
        17,
        163,
        3,
        237,
        124,
        81,
        19,
        29,
        136,
        243,
        36,
        253,
        91,
        0,
        15,
        55,
        157,
        70,
        137,
        67,
        47,
        216,
        9,
        99,
        188,
        62,
        44,
        189,
        236,
        172,
        83,
        42,
        193,
        91,
        206,
        68,
        230,
        6,
        146,
        125,
        87,
        255,
        248,
        104,
        20,
        168,
        151,
        127,
        134,
        19,
        29,
        163,
        32,
        144,
        247,
        3,
        102,
        44,
        51,
        187,
        45,
        66,
        214,
        38,
        186,
        0,
        219,
        42,
        140,
        102,
        208,
        243,
        149,
        91,
        163,
        118,
        79,
        131,
        56,
        0,
        16,
        108,
        131,
        51,
        133,
        228,
        21,
        238,
        155,
        71,
        67,
        232,
        208,
        116,
        35,
        244,
        54,
        177,
        233,
        142,
        4,
        2,
        166,
        142,
        135,
        19,
        192,
        126,
        205,
        70,
        160,
        1,
        8,
        11,
        117,
        78,
        124,
        176,
        27,
        114,
        250,
        63,
        9,
        42,
        204,
        119,
        11,
        58,
        150,
        179,
        219,
        218,
        128,
        240,
        6,
        201,
        166,
        208,
        126,
        0,
        88,
        169,
        167,
        187,
        35,
        0,
        18,
        85,
        77,
        88,
        24,
        67,
        53,
        132,
        66,
        13,
        141,
        114,
        169,
        180,
        132,
        208,
        230,
        175,
        138,
        24,
        41,
        246,
        63,
        79,
        81,
        180,
        237,
        97,
        95,
        253,
        138,
        176,
        175,
        104,
        72,
        70,
        224,
        179,
        222,
        199,
        172,
        158,
        238,
        48,
        236,
        67,
        177,
        237,
        220,
        186,
        188,
        63,
        242,
        33,
        185,
        190,
        177,
        121,
        85,
        106,
        69,
        5,
        77,
        99,
        173,
        0,
        102,
        150,
        20,
        159,
        0,
        0,
        0,
        0,
        0,
        26,
        225,
        1,
        250,
        237,
        172,
        88,
        81,
        227,
        43,
        155,
        35,
        181,
        249,
        65,
        26,
        140,
        43,
        172,
        74,
        174,
        62,
        212,
        221,
        123,
        129,
        29,
        209,
        167,
        46,
        164,
        170,
        113,
        0,
        0,
        0,
        0,
        4,
        29,
        131,
        68,
        1,
        65,
        85,
        87,
        86,
        0,
        0,
        0,
        0,
        0,
        9,
        40,
        11,
        60,
        0,
        0,
        39,
        16,
        9,
        75,
        21,
        184,
        212,
        128,
        182,
        243,
        138,
        182,
        29,
        189,
        73,
        57,
        153,
        147,
        81,
        71,
        254,
        204,
        1,
        0,
        85,
        0,
        230,
        45,
        246,
        200,
        180,
        168,
        95,
        225,
        166,
        125,
        180,
        77,
        193,
        45,
        229,
        219,
        51,
        15,
        122,
        198,
        107,
        114,
        220,
        101,
        138,
        254,
        223,
        15,
        74,
        65,
        91,
        67,
        0,
        0,
        5,
        205,
        218,
        156,
        73,
        247,
        0,
        0,
        0,
        0,
        232,
        176,
        241,
        55,
        255,
        255,
        255,
        248,
        0,
        0,
        0,
        0,
        102,
        150,
        20,
        159,
        0,
        0,
        0,
        0,
        102,
        150,
        20,
        158,
        0,
        0,
        5,
        212,
        99,
        170,
        34,
        160,
        0,
        0,
        0,
        1,
        18,
        103,
        126,
        52,
        11,
        229,
        208,
        34,
        221,
        99,
        145,
        215,
        189,
        21,
        66,
        120,
        49,
        152,
        199,
        139,
        215,
        129,
        90,
        38,
        188,
        199,
        237,
        236,
        149,
        71,
        45,
        55,
        149,
        189,
        117,
        33,
        236,
        183,
        80,
        171,
        127,
        110,
        103,
        5,
        61,
        44,
        174,
        174,
        158,
        36,
        152,
        70,
        220,
        39,
        235,
        208,
        199,
        246,
        213,
        13,
        144,
        228,
        150,
        86,
        125,
        90,
        70,
        194,
        49,
        233,
        182,
        196,
        76,
        92,
        177,
        247,
        151,
        117,
        245,
        253,
        224,
        107,
        76,
        171,
        160,
        88,
        61,
        132,
        83,
        103,
        219,
        218,
        73,
        66,
        180,
        36,
        198,
        193,
        92,
        134,
        148,
        50,
        126,
        201,
        71,
        83,
        4,
        181,
        78,
        219,
        132,
        41,
        177,
        141,
        93,
        68,
        120,
        93,
        110,
        235,
        220,
        131,
        181,
        54,
        19,
        139,
        58,
        10,
        84,
        239,
        248,
        146,
        73,
        24,
        131,
        206,
        65,
        28,
        26,
        102,
        29,
        171,
        96,
        162,
        222,
        249,
        80,
        220,
        174,
        66,
        46,
        177,
        44,
        62,
        206,
        146,
        32,
        233,
        184,
        86,
        151,
        108,
        156,
        16,
        247,
        55,
        44,
        152,
        0,
        81,
        69,
        237,
        123,
        0,
        68,
        48,
        232,
        161,
        159,
        130,
        115,
        54,
        229,
        36,
        110,
        243,
        66,
        147,
        185,
        100,
        230,
        2,
        88,
        214,
        104,
        39,
        42,
        211,
        228,
        73,
        20,
        185,
        218,
        138,
        38,
        146,
        106,
        244,
        36,
        230,
        60,
        235,
        228,
        255,
        26,
        187,
        38,
        213,
        72,
        231,
        133,
        163,
        116,
        25,
        4,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        228,
        225,
        228,
        233,
        141,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        42,
        127,
        113,
        125,
        114,
        163,
        204,
        137,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        21,
        137,
        209,
        57,
        225,
        216,
        87,
        138,
        119,
        10,
        161,
        33,
        34,
        245,
        0,
        86,
        101,
        111,
        165,
        217,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        42,
        127,
        113,
        125,
        114,
        163,
        204,
        137,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        13,
        169,
        249,
        126,
        29,
        228,
        233,
        244,
        228,
        235,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        102,
        150,
        20,
        246,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        95,
        5,
        34,
        8,
        7,
        155,
        241,
        232,
        13,
        183,
        119,
        252,
        215,
        70,
        142,
        2,
        99,
        210,
        39,
        51,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        48,
        189,
        142,
        238,
        56,
        98,
        66,
        219,
        151,
        134,
        233,
        165,
        27,
        159,
        204,
        139,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        71,
        2,
        155,
        203,
        232,
        105,
        255,
        62,
        105,
        246,
        187,
        8,
        15,
        165,
        83,
        196,
        11,
        64,
        109,
        99,
        14,
        168,
        42,
        164,
        20,
        49,
        169,
        93,
        51,
        229,
        165,
        130,
        249,
        130,
        45,
        68,
        51,
        251,
        210,
        113,
        149,
        122,
        111,
        97,
        130,
        201,
        168,
        5,
        122,
        88,
        29,
        180,
        88,
        50,
        71,
        180,
        223,
        167,
        125,
        53,
        94,
        32,
        67,
        236,
        113,
        253,
        74,
        73,
        114,
        91,
        103,
        28,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
      ],
      "gasLimit": 10000000n,
      "maxFeePerGas": 5000000000n,
      "maxPriorityFeePerGas": 1000000n,
      "nonce": 19400n,
      "r": 5139093969579658172540458661088557231783624622442737940356899506362013936405n,
      "s": 40570607585511977464950724717396695264235308816352285135324358258959892991468n,
      "to": Address {
        "bytes": Uint8Array [
          0,
          0,
          0,
          0,
          0,
          47,
          213,
          174,
          179,
          133,
          211,
          36,
          181,
          128,
          252,
          167,
          200,
          56,
          35,
          160,
        ],
      },
      "txOptions": {
        "common": Common {
          "DEFAULT_HARDFORK": "shanghai",
          "HARDFORK_CHANGES": [
            [
              "chainstart",
              {
                "comment": "Start of the Ethereum main chain",
                "gasConfig": {
                  "gasLimitBoundDivisor": {
                    "d": "The bound divisor of the gas limit, used in update calculations",
                    "v": 1024,
                  },
                  "maxRefundQuotient": {
                    "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                    "v": 2,
                  },
                  "minGasLimit": {
                    "d": "Minimum the gas limit may ever be",
                    "v": 5000,
                  },
                },
                "gasPrices": {
                  "add": {
                    "d": "Base fee of the ADD opcode",
                    "v": 3,
                  },
                  "addmod": {
                    "d": "Base fee of the ADDMOD opcode",
                    "v": 8,
                  },
                  "address": {
                    "d": "Base fee of the ADDRESS opcode",
                    "v": 2,
                  },
                  "and": {
                    "d": "Base fee of the AND opcode",
                    "v": 3,
                  },
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 20,
                  },
                  "base": {
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                    "v": 2,
                  },
                  "blockhash": {
                    "d": "Base fee of the BLOCKHASH opcode",
                    "v": 20,
                  },
                  "byte": {
                    "d": "Base fee of the BYTE opcode",
                    "v": 3,
                  },
                  "call": {
                    "d": "Base fee of the CALL opcode",
                    "v": 40,
                  },
                  "callNewAccount": {
                    "d": "Paid for CALL when the destination address didn't exist prior",
                    "v": 25000,
                  },
                  "callStipend": {
                    "d": "Free gas given at beginning of call",
                    "v": 2300,
                  },
                  "callValueTransfer": {
                    "d": "Paid for CALL when the value transfor is non-zero",
                    "v": 9000,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 40,
                  },
                  "calldatacopy": {
                    "d": "Base fee of the CALLDATACOPY opcode",
                    "v": 3,
                  },
                  "calldataload": {
                    "d": "Base fee of the CALLDATALOAD opcode",
                    "v": 3,
                  },
                  "calldatasize": {
                    "d": "Base fee of the CALLDATASIZE opcode",
                    "v": 2,
                  },
                  "caller": {
                    "d": "Base fee of the CALLER opcode",
                    "v": 2,
                  },
                  "callvalue": {
                    "d": "Base fee of the CALLVALUE opcode",
                    "v": 2,
                  },
                  "codecopy": {
                    "d": "Base fee of the CODECOPY opcode",
                    "v": 3,
                  },
                  "codesize": {
                    "d": "Base fee of the CODESIZE opcode",
                    "v": 2,
                  },
                  "coinbase": {
                    "d": "Base fee of the COINBASE opcode",
                    "v": 2,
                  },
                  "copy": {
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                    "v": 3,
                  },
                  "create": {
                    "d": "Base fee of the CREATE opcode",
                    "v": 32000,
                  },
                  "createData": {
                    "d": "",
                    "v": 200,
                  },
                  "difficulty": {
                    "d": "Base fee of the DIFFICULTY opcode",
                    "v": 2,
                  },
                  "div": {
                    "d": "Base fee of the DIV opcode",
                    "v": 5,
                  },
                  "dup": {
                    "d": "Base fee of the DUP opcode",
                    "v": 3,
                  },
                  "ecRecover": {
                    "d": "",
                    "v": 3000,
                  },
                  "eq": {
                    "d": "Base fee of the EQ opcode",
                    "v": 3,
                  },
                  "exp": {
                    "d": "Base fee of the EXP opcode",
                    "v": 10,
                  },
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 10,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 20,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 20,
                  },
                  "gas": {
                    "d": "Base fee of the GAS opcode",
                    "v": 2,
                  },
                  "gaslimit": {
                    "d": "Base fee of the GASLIMIT opcode",
                    "v": 2,
                  },
                  "gasprice": {
                    "d": "Base fee of the GASPRICE opcode",
                    "v": 2,
                  },
                  "gt": {
                    "d": "Base fee of the GT opcode",
                    "v": 3,
                  },
                  "identity": {
                    "d": "",
                    "v": 15,
                  },
                  "identityWord": {
                    "d": "",
                    "v": 3,
                  },
                  "invalid": {
                    "d": "Base fee of the INVALID opcode",
                    "v": 0,
                  },
                  "iszero": {
                    "d": "Base fee of the ISZERO opcode",
                    "v": 3,
                  },
                  "jump": {
                    "d": "Base fee of the JUMP opcode",
                    "v": 8,
                  },
                  "jumpdest": {
                    "d": "Base fee of the JUMPDEST opcode",
                    "v": 1,
                  },
                  "jumpi": {
                    "d": "Base fee of the JUMPI opcode",
                    "v": 10,
                  },
                  "keccak256": {
                    "d": "Base fee of the SHA3 opcode",
                    "v": 30,
                  },
                  "keccak256Word": {
                    "d": "Once per word of the SHA3 operation's data",
                    "v": 6,
                  },
                  "log": {
                    "d": "Base fee of the LOG opcode",
                    "v": 375,
                  },
                  "logData": {
                    "d": "Per byte in a LOG* operation's data",
                    "v": 8,
                  },
                  "logTopic": {
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                    "v": 375,
                  },
                  "lt": {
                    "d": "Base fee of the LT opcode",
                    "v": 3,
                  },
                  "memory": {
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                    "v": 3,
                  },
                  "mload": {
                    "d": "Base fee of the MLOAD opcode",
                    "v": 3,
                  },
                  "mod": {
                    "d": "Base fee of the MOD opcode",
                    "v": 5,
                  },
                  "msize": {
                    "d": "Base fee of the MSIZE opcode",
                    "v": 2,
                  },
                  "mstore": {
                    "d": "Base fee of the MSTORE opcode",
                    "v": 3,
                  },
                  "mstore8": {
                    "d": "Base fee of the MSTORE8 opcode",
                    "v": 3,
                  },
                  "mul": {
                    "d": "Base fee of the MUL opcode",
                    "v": 5,
                  },
                  "mulmod": {
                    "d": "Base fee of the MULMOD opcode",
                    "v": 8,
                  },
                  "not": {
                    "d": "Base fee of the NOT opcode",
                    "v": 3,
                  },
                  "number": {
                    "d": "Base fee of the NUMBER opcode",
                    "v": 2,
                  },
                  "or": {
                    "d": "Base fee of the OR opcode",
                    "v": 3,
                  },
                  "origin": {
                    "d": "Base fee of the ORIGIN opcode",
                    "v": 2,
                  },
                  "pc": {
                    "d": "Base fee of the PC opcode",
                    "v": 2,
                  },
                  "pop": {
                    "d": "Base fee of the POP opcode",
                    "v": 2,
                  },
                  "push": {
                    "d": "Base fee of the PUSH opcode",
                    "v": 3,
                  },
                  "quadCoeffDiv": {
                    "d": "Divisor for the quadratic particle of the memory cost equation",
                    "v": 512,
                  },
                  "return": {
                    "d": "Base fee of the RETURN opcode",
                    "v": 0,
                  },
                  "ripemd160": {
                    "d": "",
                    "v": 600,
                  },
                  "ripemd160Word": {
                    "d": "",
                    "v": 120,
                  },
                  "sdiv": {
                    "d": "Base fee of the SDIV opcode",
                    "v": 5,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 0,
                  },
                  "selfdestructRefund": {
                    "d": "Refunded following a selfdestruct operation",
                    "v": 24000,
                  },
                  "sgt": {
                    "d": "Base fee of the SGT opcode",
                    "v": 3,
                  },
                  "sha256": {
                    "d": "",
                    "v": 60,
                  },
                  "sha256Word": {
                    "d": "",
                    "v": 12,
                  },
                  "signextend": {
                    "d": "Base fee of the SIGNEXTEND opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 50,
                  },
                  "slt": {
                    "d": "Base fee of the SLT opcode",
                    "v": 3,
                  },
                  "smod": {
                    "d": "Base fee of the SMOD opcode",
                    "v": 5,
                  },
                  "sstore": {
                    "d": "Base fee of the SSTORE opcode",
                    "v": 0,
                  },
                  "sstoreRefund": {
                    "d": "Once per SSTORE operation if the zeroness changes to zero",
                    "v": 15000,
                  },
                  "sstoreReset": {
                    "d": "Once per SSTORE operation if the zeroness does not change from zero",
                    "v": 5000,
                  },
                  "sstoreSet": {
                    "d": "Once per SSTORE operation if the zeroness changes from zero",
                    "v": 20000,
                  },
                  "stop": {
                    "d": "Base fee of the STOP opcode",
                    "v": 0,
                  },
                  "sub": {
                    "d": "Base fee of the SUB opcode",
                    "v": 3,
                  },
                  "swap": {
                    "d": "Base fee of the SWAP opcode",
                    "v": 3,
                  },
                  "timestamp": {
                    "d": "Base fee of the TIMESTAMP opcode",
                    "v": 2,
                  },
                  "tx": {
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                    "v": 21000,
                  },
                  "txCreation": {
                    "d": "The cost of creating a contract via tx",
                    "v": 32000,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 68,
                  },
                  "txDataZero": {
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                    "v": 4,
                  },
                  "xor": {
                    "d": "Base fee of the XOR opcode",
                    "v": 3,
                  },
                },
                "name": "chainstart",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 0,
                  },
                  "difficultyBoundDivisor": {
                    "d": "The bound divisor of the difficulty, used in the update calculations",
                    "v": 2048,
                  },
                  "durationLimit": {
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                    "v": 13,
                  },
                  "epochDuration": {
                    "d": "Duration between proof-of-work epochs",
                    "v": 30000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 5000000000000000000n,
                  },
                  "minimumDifficulty": {
                    "d": "The minimum that the difficulty may ever be",
                    "v": 131072,
                  },
                  "timebombPeriod": {
                    "d": "Exponential difficulty timebomb period",
                    "v": 100000,
                  },
                },
                "status": "final",
                "url": "",
                "vm": {
                  "callCreateDepth": {
                    "d": "Maximum depth of call/create stack",
                    "v": 1024,
                  },
                  "maxExtraDataSize": {
                    "d": "Maximum size extra data may be after Genesis",
                    "v": 32,
                  },
                  "stackLimit": {
                    "d": "Maximum size of VM stack allowed",
                    "v": 1024,
                  },
                },
              },
            ],
            [
              "homestead",
              {
                "comment": "Homestead hardfork with protocol and network changes",
                "gasPrices": {
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 40,
                  },
                },
                "name": "homestead",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-606",
              },
            ],
            [
              "dao",
              {
                "comment": "DAO rescue hardfork",
                "name": "dao",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-779",
              },
            ],
            [
              "tangerineWhistle",
              {
                "comment": "Hardfork with gas cost changes for IO-heavy operations",
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 400,
                  },
                  "call": {
                    "d": "Once per CALL operation & message call transaction",
                    "v": 700,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 700,
                  },
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 700,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 700,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 700,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 5000,
                  },
                  "sload": {
                    "d": "Once per SLOAD operation",
                    "v": 200,
                  },
                },
                "name": "tangerineWhistle",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-608",
              },
            ],
            [
              "spuriousDragon",
              {
                "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
                "gasPrices": {
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 50,
                  },
                },
                "name": "spuriousDragon",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "vm": {
                  "maxCodeSize": {
                    "d": "Maximum length of contract code",
                    "v": 24576,
                  },
                },
              },
            ],
            [
              "byzantium",
              {
                "comment": "Hardfork with new precompiles, instructions and other protocol changes",
                "gasPrices": {
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 500,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 40000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 100000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 80000,
                  },
                  "modexpGquaddivisor": {
                    "d": "Gquaddivisor from modexp precompile for gas calculation",
                    "v": 20,
                  },
                  "returndatacopy": {
                    "d": "Base fee of the RETURNDATACOPY opcode",
                    "v": 3,
                  },
                  "returndatasize": {
                    "d": "Base fee of the RETURNDATASIZE opcode",
                    "v": 2,
                  },
                  "revert": {
                    "d": "Base fee of the REVERT opcode",
                    "v": 0,
                  },
                  "staticcall": {
                    "d": "Base fee of the STATICCALL opcode",
                    "v": 700,
                  },
                },
                "name": "byzantium",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 3000000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 3000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-609",
              },
            ],
            [
              "constantinople",
              {
                "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
                "gasPrices": {
                  "create2": {
                    "d": "Base fee of the CREATE2 opcode",
                    "v": 32000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 400,
                  },
                  "netSstoreCleanGas": {
                    "d": "Once per SSTORE operation from clean non-zero",
                    "v": 5000,
                  },
                  "netSstoreClearRefund": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Once per SSTORE operation from dirty",
                    "v": 200,
                  },
                  "netSstoreInitGas": {
                    "d": "Once per SSTORE operation from clean zero",
                    "v": 20000,
                  },
                  "netSstoreNoopGas": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 200,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19800,
                  },
                  "netSstoreResetRefund": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4800,
                  },
                  "sar": {
                    "d": "Base fee of the SAR opcode",
                    "v": 3,
                  },
                  "shl": {
                    "d": "Base fee of the SHL opcode",
                    "v": 3,
                  },
                  "shr": {
                    "d": "Base fee of the SHR opcode",
                    "v": 3,
                  },
                },
                "name": "constantinople",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 5000000,
                  },
                  "minerReward": {
                    "d": "The amount a miner gets rewarded for mining a block",
                    "v": 2000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
              },
            ],
            [
              "petersburg",
              {
                "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
                "gasPrices": {
                  "netSstoreCleanGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreInitGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreNoopGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                },
                "name": "petersburg",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
              },
            ],
            [
              "istanbul",
              {
                "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
                "gasConfig": {},
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 700,
                  },
                  "blake2Round": {
                    "d": "Gas cost per round for the Blake2 F precompile",
                    "v": 1,
                  },
                  "chainid": {
                    "d": "Base fee of the CHAINID opcode",
                    "v": 2,
                  },
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 150,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 6000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 45000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 34000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 700,
                  },
                  "selfbalance": {
                    "d": "Base fee of the SELFBALANCE opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 800,
                  },
                  "sstoreCleanGasEIP2200": {
                    "d": "Once per SSTORE operation from clean non-zero to something else",
                    "v": 5000,
                  },
                  "sstoreCleanRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4200,
                  },
                  "sstoreClearRefundEIP2200": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "sstoreDirtyGasEIP2200": {
                    "d": "Once per SSTORE operation if a dirty value is changed",
                    "v": 800,
                  },
                  "sstoreInitGasEIP2200": {
                    "d": "Once per SSTORE operation from clean zero to non-zero",
                    "v": 20000,
                  },
                  "sstoreInitRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19200,
                  },
                  "sstoreNoopGasEIP2200": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 800,
                  },
                  "sstoreSentryGasEIP2200": {
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                    "v": 2300,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 16,
                  },
                },
                "name": "istanbul",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
              },
            ],
            [
              "muirGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "name": "muirGlacier",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 9000000,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
              },
            ],
            [
              "berlin",
              {
                "comment": "HF targeted for July 2020 following the Muir Glacier HF",
                "eips": [
                  2565,
                  2929,
                  2718,
                  2930,
                ],
                "name": "berlin",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2070",
              },
            ],
            [
              "london",
              {
                "comment": "HF targeted for July 2021 following the Berlin fork",
                "eips": [
                  1559,
                  3198,
                  3529,
                  3541,
                ],
                "name": "london",
                "status": "final",
                "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
              },
            ],
            [
              "arrowGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "eips": [
                  4345,
                ],
                "name": "arrowGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
              },
            ],
            [
              "grayGlacier",
              {
                "comment": "Delaying the difficulty bomb to Mid September 2022",
                "eips": [
                  5133,
                ],
                "name": "grayGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
              },
            ],
            [
              "paris",
              {
                "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
                "consensus": {
                  "algorithm": "casper",
                  "casper": {},
                  "type": "pos",
                },
                "eips": [
                  3675,
                  4399,
                ],
                "name": "paris",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
              },
            ],
            [
              "mergeForkIdTransition",
              {
                "comment": "Pre-merge hardfork to fork off non-upgraded clients",
                "eips": [],
                "name": "mergeForkIdTransition",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-3675",
              },
            ],
            [
              "shanghai",
              {
                "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
                "eips": [
                  3651,
                  3855,
                  3860,
                  4895,
                ],
                "name": "shanghai",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
              },
            ],
            [
              "cancun",
              {
                "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
                "eips": [
                  1153,
                  4844,
                  4788,
                  5656,
                  6780,
                  7516,
                ],
                "name": "cancun",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
              },
            ],
          ],
          "_activatedEIPsCache": [
            2565,
            2929,
            2718,
            2930,
            1559,
            3198,
            3529,
            3541,
            4345,
            5133,
            3675,
            4399,
            3651,
            3855,
            3860,
            4895,
            1153,
            4844,
            4788,
            5656,
            6780,
            7516,
            1559,
            4895,
            4844,
            4788,
          ],
          "_chainParams": {
            "bootstrapNodes": [
              {
                "comment": "bootnode-aws-ap-southeast-1-001",
                "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                "ip": "18.138.108.67",
                "location": "ap-southeast-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-aws-us-east-1-001",
                "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                "ip": "3.209.45.79",
                "location": "us-east-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-hel",
                "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
                "ip": "65.108.70.101",
                "location": "eu-west-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-fsn",
                "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
                "ip": "157.90.35.166",
                "location": "eu-central-1-001",
                "port": 30303,
              },
            ],
            "chainId": 10,
            "comment": "The Ethereum main chain",
            "consensus": {
              "algorithm": "ethash",
              "ethash": {},
              "type": "pow",
            },
            "defaultHardfork": "shanghai",
            "dnsNetworks": [
              "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
            ],
            "genesis": {
              "difficulty": 17179869184,
              "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
              "gasLimit": 5000,
              "nonce": "0x0000000000000042",
            },
            "hardforks": [
              {
                "block": 0,
                "forkHash": "0xfc64ec04",
                "name": "chainstart",
              },
              {
                "block": 1150000,
                "forkHash": "0x97c2c34c",
                "name": "homestead",
              },
              {
                "block": 1920000,
                "forkHash": "0x91d1f948",
                "name": "dao",
              },
              {
                "block": 2463000,
                "forkHash": "0x7a64da13",
                "name": "tangerineWhistle",
              },
              {
                "block": 2675000,
                "forkHash": "0x3edd5b10",
                "name": "spuriousDragon",
              },
              {
                "block": 4370000,
                "forkHash": "0xa00bc324",
                "name": "byzantium",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "constantinople",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "petersburg",
              },
              {
                "block": 9069000,
                "forkHash": "0x879d6e30",
                "name": "istanbul",
              },
              {
                "block": 9200000,
                "forkHash": "0xe029e991",
                "name": "muirGlacier",
              },
              {
                "block": 12244000,
                "forkHash": "0x0eb440f6",
                "name": "berlin",
              },
              {
                "block": 12965000,
                "forkHash": "0xb715077d",
                "name": "london",
              },
              {
                "block": 13773000,
                "forkHash": "0x20c327fc",
                "name": "arrowGlacier",
              },
              {
                "block": 15050000,
                "forkHash": "0xf0afd0e3",
                "name": "grayGlacier",
              },
              {
                "block": 15537394,
                "forkHash": "0xf0afd0e3",
                "name": "paris",
                "ttd": "58750000000000000000000",
              },
              {
                "block": null,
                "forkHash": null,
                "name": "mergeForkIdTransition",
              },
              {
                "block": null,
                "forkHash": "0xdce96c2d",
                "name": "shanghai",
                "timestamp": "1681338455",
              },
              {
                "block": null,
                "forkHash": "0x9f3d2254",
                "name": "cancun",
                "timestamp": "1710338135",
              },
            ],
            "name": "TevmCustom",
            "networkId": 10,
            "url": "https://ethstats.net/",
          },
          "_customChains": [],
          "_eips": [
            1559,
            4895,
            4844,
            4788,
          ],
          "_hardfork": "cancun",
          "_paramsCache": {
            "gasConfig": {
              "baseFeeMaxChangeDenominator": {
                "d": "Maximum base fee change denominator",
                "v": 8,
              },
              "blobGasPerBlob": {
                "d": "The base fee for blob gas per blob",
                "v": 131072,
              },
              "blobGasPriceUpdateFraction": {
                "d": "The denominator used in the exponential when calculating a blob gas price",
                "v": 3338477,
              },
              "elasticityMultiplier": {
                "d": "Maximum block gas target elasticity",
                "v": 2,
              },
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "initialBaseFee": {
                "d": "Initial base fee on first EIP1559 block",
                "v": 1000000000,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 5,
              },
              "maxblobGasPerBlock": {
                "d": "The max blob gas allowable per block",
                "v": 786432,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
              "targetBlobGasPerBlock": {
                "d": "The target blob gas consumed per block",
                "v": 393216,
              },
            },
            "gasPrices": {
              "accessListAddressCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 2400,
              },
              "accessListStorageKeyCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 1900,
              },
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 0,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "basefee": {
                "d": "Gas cost of the BASEFEE opcode",
                "v": 2,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "blobbasefee": {
                "d": "Gas cost of the BLOBBASEFEE opcode",
                "v": 2,
              },
              "blobhash": {
                "d": "Base fee of the BLOBHASH opcode",
                "v": 3,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 0,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 0,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "coldaccountaccess": {
                "d": "Gas cost of the first read of a given address (per transaction)",
                "v": 2600,
              },
              "coldsload": {
                "d": "Gas cost of the first read of storage from a given location (per transaction)",
                "v": 2100,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 0,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 0,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 0,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 0,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "initCodeWordCost": {
                "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
                "v": 2,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "kzgPointEvaluationGasPrecompilePrice": {
                "d": "The fee associated with the point evaluation precompile",
                "v": 50000,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "mcopy": {
                "d": "Base fee of the MCOPY opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "minBlobGasPrice": {
                "d": "The minimum fee per blob gas",
                "v": 1,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 3,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "prevrandao": {
                "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "push0": {
                "d": "Base fee of the PUSH0 opcode",
                "v": 2,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 0,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "simpleGasPerBlob": {
                "d": "The basic gas fee for each blob",
                "v": 12000,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 0,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 2900,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4900,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 4800,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 100,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19900,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 100,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 0,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tload": {
                "d": "Base fee of the TLOAD opcode",
                "v": 100,
              },
              "tstore": {
                "d": "Base fee of the TSTORE opcode",
                "v": 100,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "warmstorageread": {
                "d": "Gas cost of reading storage locations which have already loaded 'cold'",
                "v": 100,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 11400000,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "sharding": {
              "blobCommitmentVersionKzg": {
                "d": "The number indicated a versioned hash is a KZG commitment",
                "v": 1,
              },
              "fieldElementsPerBlob": {
                "d": "The number of field elements allowed per blob",
                "v": 4096,
              },
            },
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "historicalRootsLength": {
                "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
                "v": 8191,
              },
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "maxInitCodeSize": {
                "d": "Maximum length of initialization code when creating a contract",
                "v": 49152,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
          "customCrypto": {
            "kzg": {
              "blobToKzgCommitment": [Function],
              "computeBlobKzgProof": [Function],
              "freeTrustedSetup": [Function],
              "loadTrustedSetup": [Function],
              "verifyBlobKzgProof": [Function],
              "verifyBlobKzgProofBatch": [Function],
              "verifyKzgProof": [Function],
            },
          },
          "events": EventEmitter2 {
            "_events": {},
            "_eventsCount": 0,
            "_maxListeners": undefined,
            [Symbol(kCapture)]: false,
          },
        },
      },
      "v": 0n,
      "value": 0n,
    },
    FeeMarketEIP1559Transaction {
      "AccessListJSON": [],
      "DEFAULT_CHAIN": 1,
      "_type": 2,
      "accessList": [],
      "activeCapabilities": [
        1559,
        2718,
        2930,
      ],
      "cache": {
        "dataFee": undefined,
        "hash": undefined,
        "senderPubKey": undefined,
      },
      "chainId": 10n,
      "common": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "data": Uint8Array [],
      "gasLimit": 21000n,
      "maxFeePerGas": 82569651n,
      "maxPriorityFeePerGas": 990626n,
      "nonce": 8n,
      "r": 47587669516383411966875730095864971915047459675324323317700223968589773949901n,
      "s": 9799871735346903091568715493084716619365522034188784251103305659818835178628n,
      "to": Address {
        "bytes": Uint8Array [
          221,
          65,
          78,
          162,
          138,
          103,
          26,
          220,
          99,
          158,
          223,
          122,
          158,
          148,
          172,
          213,
          224,
          238,
          121,
          23,
        ],
      },
      "txOptions": {
        "common": Common {
          "DEFAULT_HARDFORK": "shanghai",
          "HARDFORK_CHANGES": [
            [
              "chainstart",
              {
                "comment": "Start of the Ethereum main chain",
                "gasConfig": {
                  "gasLimitBoundDivisor": {
                    "d": "The bound divisor of the gas limit, used in update calculations",
                    "v": 1024,
                  },
                  "maxRefundQuotient": {
                    "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                    "v": 2,
                  },
                  "minGasLimit": {
                    "d": "Minimum the gas limit may ever be",
                    "v": 5000,
                  },
                },
                "gasPrices": {
                  "add": {
                    "d": "Base fee of the ADD opcode",
                    "v": 3,
                  },
                  "addmod": {
                    "d": "Base fee of the ADDMOD opcode",
                    "v": 8,
                  },
                  "address": {
                    "d": "Base fee of the ADDRESS opcode",
                    "v": 2,
                  },
                  "and": {
                    "d": "Base fee of the AND opcode",
                    "v": 3,
                  },
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 20,
                  },
                  "base": {
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                    "v": 2,
                  },
                  "blockhash": {
                    "d": "Base fee of the BLOCKHASH opcode",
                    "v": 20,
                  },
                  "byte": {
                    "d": "Base fee of the BYTE opcode",
                    "v": 3,
                  },
                  "call": {
                    "d": "Base fee of the CALL opcode",
                    "v": 40,
                  },
                  "callNewAccount": {
                    "d": "Paid for CALL when the destination address didn't exist prior",
                    "v": 25000,
                  },
                  "callStipend": {
                    "d": "Free gas given at beginning of call",
                    "v": 2300,
                  },
                  "callValueTransfer": {
                    "d": "Paid for CALL when the value transfor is non-zero",
                    "v": 9000,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 40,
                  },
                  "calldatacopy": {
                    "d": "Base fee of the CALLDATACOPY opcode",
                    "v": 3,
                  },
                  "calldataload": {
                    "d": "Base fee of the CALLDATALOAD opcode",
                    "v": 3,
                  },
                  "calldatasize": {
                    "d": "Base fee of the CALLDATASIZE opcode",
                    "v": 2,
                  },
                  "caller": {
                    "d": "Base fee of the CALLER opcode",
                    "v": 2,
                  },
                  "callvalue": {
                    "d": "Base fee of the CALLVALUE opcode",
                    "v": 2,
                  },
                  "codecopy": {
                    "d": "Base fee of the CODECOPY opcode",
                    "v": 3,
                  },
                  "codesize": {
                    "d": "Base fee of the CODESIZE opcode",
                    "v": 2,
                  },
                  "coinbase": {
                    "d": "Base fee of the COINBASE opcode",
                    "v": 2,
                  },
                  "copy": {
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                    "v": 3,
                  },
                  "create": {
                    "d": "Base fee of the CREATE opcode",
                    "v": 32000,
                  },
                  "createData": {
                    "d": "",
                    "v": 200,
                  },
                  "difficulty": {
                    "d": "Base fee of the DIFFICULTY opcode",
                    "v": 2,
                  },
                  "div": {
                    "d": "Base fee of the DIV opcode",
                    "v": 5,
                  },
                  "dup": {
                    "d": "Base fee of the DUP opcode",
                    "v": 3,
                  },
                  "ecRecover": {
                    "d": "",
                    "v": 3000,
                  },
                  "eq": {
                    "d": "Base fee of the EQ opcode",
                    "v": 3,
                  },
                  "exp": {
                    "d": "Base fee of the EXP opcode",
                    "v": 10,
                  },
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 10,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 20,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 20,
                  },
                  "gas": {
                    "d": "Base fee of the GAS opcode",
                    "v": 2,
                  },
                  "gaslimit": {
                    "d": "Base fee of the GASLIMIT opcode",
                    "v": 2,
                  },
                  "gasprice": {
                    "d": "Base fee of the GASPRICE opcode",
                    "v": 2,
                  },
                  "gt": {
                    "d": "Base fee of the GT opcode",
                    "v": 3,
                  },
                  "identity": {
                    "d": "",
                    "v": 15,
                  },
                  "identityWord": {
                    "d": "",
                    "v": 3,
                  },
                  "invalid": {
                    "d": "Base fee of the INVALID opcode",
                    "v": 0,
                  },
                  "iszero": {
                    "d": "Base fee of the ISZERO opcode",
                    "v": 3,
                  },
                  "jump": {
                    "d": "Base fee of the JUMP opcode",
                    "v": 8,
                  },
                  "jumpdest": {
                    "d": "Base fee of the JUMPDEST opcode",
                    "v": 1,
                  },
                  "jumpi": {
                    "d": "Base fee of the JUMPI opcode",
                    "v": 10,
                  },
                  "keccak256": {
                    "d": "Base fee of the SHA3 opcode",
                    "v": 30,
                  },
                  "keccak256Word": {
                    "d": "Once per word of the SHA3 operation's data",
                    "v": 6,
                  },
                  "log": {
                    "d": "Base fee of the LOG opcode",
                    "v": 375,
                  },
                  "logData": {
                    "d": "Per byte in a LOG* operation's data",
                    "v": 8,
                  },
                  "logTopic": {
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                    "v": 375,
                  },
                  "lt": {
                    "d": "Base fee of the LT opcode",
                    "v": 3,
                  },
                  "memory": {
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                    "v": 3,
                  },
                  "mload": {
                    "d": "Base fee of the MLOAD opcode",
                    "v": 3,
                  },
                  "mod": {
                    "d": "Base fee of the MOD opcode",
                    "v": 5,
                  },
                  "msize": {
                    "d": "Base fee of the MSIZE opcode",
                    "v": 2,
                  },
                  "mstore": {
                    "d": "Base fee of the MSTORE opcode",
                    "v": 3,
                  },
                  "mstore8": {
                    "d": "Base fee of the MSTORE8 opcode",
                    "v": 3,
                  },
                  "mul": {
                    "d": "Base fee of the MUL opcode",
                    "v": 5,
                  },
                  "mulmod": {
                    "d": "Base fee of the MULMOD opcode",
                    "v": 8,
                  },
                  "not": {
                    "d": "Base fee of the NOT opcode",
                    "v": 3,
                  },
                  "number": {
                    "d": "Base fee of the NUMBER opcode",
                    "v": 2,
                  },
                  "or": {
                    "d": "Base fee of the OR opcode",
                    "v": 3,
                  },
                  "origin": {
                    "d": "Base fee of the ORIGIN opcode",
                    "v": 2,
                  },
                  "pc": {
                    "d": "Base fee of the PC opcode",
                    "v": 2,
                  },
                  "pop": {
                    "d": "Base fee of the POP opcode",
                    "v": 2,
                  },
                  "push": {
                    "d": "Base fee of the PUSH opcode",
                    "v": 3,
                  },
                  "quadCoeffDiv": {
                    "d": "Divisor for the quadratic particle of the memory cost equation",
                    "v": 512,
                  },
                  "return": {
                    "d": "Base fee of the RETURN opcode",
                    "v": 0,
                  },
                  "ripemd160": {
                    "d": "",
                    "v": 600,
                  },
                  "ripemd160Word": {
                    "d": "",
                    "v": 120,
                  },
                  "sdiv": {
                    "d": "Base fee of the SDIV opcode",
                    "v": 5,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 0,
                  },
                  "selfdestructRefund": {
                    "d": "Refunded following a selfdestruct operation",
                    "v": 24000,
                  },
                  "sgt": {
                    "d": "Base fee of the SGT opcode",
                    "v": 3,
                  },
                  "sha256": {
                    "d": "",
                    "v": 60,
                  },
                  "sha256Word": {
                    "d": "",
                    "v": 12,
                  },
                  "signextend": {
                    "d": "Base fee of the SIGNEXTEND opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 50,
                  },
                  "slt": {
                    "d": "Base fee of the SLT opcode",
                    "v": 3,
                  },
                  "smod": {
                    "d": "Base fee of the SMOD opcode",
                    "v": 5,
                  },
                  "sstore": {
                    "d": "Base fee of the SSTORE opcode",
                    "v": 0,
                  },
                  "sstoreRefund": {
                    "d": "Once per SSTORE operation if the zeroness changes to zero",
                    "v": 15000,
                  },
                  "sstoreReset": {
                    "d": "Once per SSTORE operation if the zeroness does not change from zero",
                    "v": 5000,
                  },
                  "sstoreSet": {
                    "d": "Once per SSTORE operation if the zeroness changes from zero",
                    "v": 20000,
                  },
                  "stop": {
                    "d": "Base fee of the STOP opcode",
                    "v": 0,
                  },
                  "sub": {
                    "d": "Base fee of the SUB opcode",
                    "v": 3,
                  },
                  "swap": {
                    "d": "Base fee of the SWAP opcode",
                    "v": 3,
                  },
                  "timestamp": {
                    "d": "Base fee of the TIMESTAMP opcode",
                    "v": 2,
                  },
                  "tx": {
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                    "v": 21000,
                  },
                  "txCreation": {
                    "d": "The cost of creating a contract via tx",
                    "v": 32000,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 68,
                  },
                  "txDataZero": {
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                    "v": 4,
                  },
                  "xor": {
                    "d": "Base fee of the XOR opcode",
                    "v": 3,
                  },
                },
                "name": "chainstart",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 0,
                  },
                  "difficultyBoundDivisor": {
                    "d": "The bound divisor of the difficulty, used in the update calculations",
                    "v": 2048,
                  },
                  "durationLimit": {
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                    "v": 13,
                  },
                  "epochDuration": {
                    "d": "Duration between proof-of-work epochs",
                    "v": 30000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 5000000000000000000n,
                  },
                  "minimumDifficulty": {
                    "d": "The minimum that the difficulty may ever be",
                    "v": 131072,
                  },
                  "timebombPeriod": {
                    "d": "Exponential difficulty timebomb period",
                    "v": 100000,
                  },
                },
                "status": "final",
                "url": "",
                "vm": {
                  "callCreateDepth": {
                    "d": "Maximum depth of call/create stack",
                    "v": 1024,
                  },
                  "maxExtraDataSize": {
                    "d": "Maximum size extra data may be after Genesis",
                    "v": 32,
                  },
                  "stackLimit": {
                    "d": "Maximum size of VM stack allowed",
                    "v": 1024,
                  },
                },
              },
            ],
            [
              "homestead",
              {
                "comment": "Homestead hardfork with protocol and network changes",
                "gasPrices": {
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 40,
                  },
                },
                "name": "homestead",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-606",
              },
            ],
            [
              "dao",
              {
                "comment": "DAO rescue hardfork",
                "name": "dao",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-779",
              },
            ],
            [
              "tangerineWhistle",
              {
                "comment": "Hardfork with gas cost changes for IO-heavy operations",
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 400,
                  },
                  "call": {
                    "d": "Once per CALL operation & message call transaction",
                    "v": 700,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 700,
                  },
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 700,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 700,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 700,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 5000,
                  },
                  "sload": {
                    "d": "Once per SLOAD operation",
                    "v": 200,
                  },
                },
                "name": "tangerineWhistle",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-608",
              },
            ],
            [
              "spuriousDragon",
              {
                "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
                "gasPrices": {
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 50,
                  },
                },
                "name": "spuriousDragon",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "vm": {
                  "maxCodeSize": {
                    "d": "Maximum length of contract code",
                    "v": 24576,
                  },
                },
              },
            ],
            [
              "byzantium",
              {
                "comment": "Hardfork with new precompiles, instructions and other protocol changes",
                "gasPrices": {
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 500,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 40000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 100000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 80000,
                  },
                  "modexpGquaddivisor": {
                    "d": "Gquaddivisor from modexp precompile for gas calculation",
                    "v": 20,
                  },
                  "returndatacopy": {
                    "d": "Base fee of the RETURNDATACOPY opcode",
                    "v": 3,
                  },
                  "returndatasize": {
                    "d": "Base fee of the RETURNDATASIZE opcode",
                    "v": 2,
                  },
                  "revert": {
                    "d": "Base fee of the REVERT opcode",
                    "v": 0,
                  },
                  "staticcall": {
                    "d": "Base fee of the STATICCALL opcode",
                    "v": 700,
                  },
                },
                "name": "byzantium",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 3000000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 3000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-609",
              },
            ],
            [
              "constantinople",
              {
                "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
                "gasPrices": {
                  "create2": {
                    "d": "Base fee of the CREATE2 opcode",
                    "v": 32000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 400,
                  },
                  "netSstoreCleanGas": {
                    "d": "Once per SSTORE operation from clean non-zero",
                    "v": 5000,
                  },
                  "netSstoreClearRefund": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Once per SSTORE operation from dirty",
                    "v": 200,
                  },
                  "netSstoreInitGas": {
                    "d": "Once per SSTORE operation from clean zero",
                    "v": 20000,
                  },
                  "netSstoreNoopGas": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 200,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19800,
                  },
                  "netSstoreResetRefund": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4800,
                  },
                  "sar": {
                    "d": "Base fee of the SAR opcode",
                    "v": 3,
                  },
                  "shl": {
                    "d": "Base fee of the SHL opcode",
                    "v": 3,
                  },
                  "shr": {
                    "d": "Base fee of the SHR opcode",
                    "v": 3,
                  },
                },
                "name": "constantinople",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 5000000,
                  },
                  "minerReward": {
                    "d": "The amount a miner gets rewarded for mining a block",
                    "v": 2000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
              },
            ],
            [
              "petersburg",
              {
                "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
                "gasPrices": {
                  "netSstoreCleanGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreInitGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreNoopGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                },
                "name": "petersburg",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
              },
            ],
            [
              "istanbul",
              {
                "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
                "gasConfig": {},
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 700,
                  },
                  "blake2Round": {
                    "d": "Gas cost per round for the Blake2 F precompile",
                    "v": 1,
                  },
                  "chainid": {
                    "d": "Base fee of the CHAINID opcode",
                    "v": 2,
                  },
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 150,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 6000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 45000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 34000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 700,
                  },
                  "selfbalance": {
                    "d": "Base fee of the SELFBALANCE opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 800,
                  },
                  "sstoreCleanGasEIP2200": {
                    "d": "Once per SSTORE operation from clean non-zero to something else",
                    "v": 5000,
                  },
                  "sstoreCleanRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4200,
                  },
                  "sstoreClearRefundEIP2200": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "sstoreDirtyGasEIP2200": {
                    "d": "Once per SSTORE operation if a dirty value is changed",
                    "v": 800,
                  },
                  "sstoreInitGasEIP2200": {
                    "d": "Once per SSTORE operation from clean zero to non-zero",
                    "v": 20000,
                  },
                  "sstoreInitRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19200,
                  },
                  "sstoreNoopGasEIP2200": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 800,
                  },
                  "sstoreSentryGasEIP2200": {
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                    "v": 2300,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 16,
                  },
                },
                "name": "istanbul",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
              },
            ],
            [
              "muirGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "name": "muirGlacier",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 9000000,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
              },
            ],
            [
              "berlin",
              {
                "comment": "HF targeted for July 2020 following the Muir Glacier HF",
                "eips": [
                  2565,
                  2929,
                  2718,
                  2930,
                ],
                "name": "berlin",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2070",
              },
            ],
            [
              "london",
              {
                "comment": "HF targeted for July 2021 following the Berlin fork",
                "eips": [
                  1559,
                  3198,
                  3529,
                  3541,
                ],
                "name": "london",
                "status": "final",
                "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
              },
            ],
            [
              "arrowGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "eips": [
                  4345,
                ],
                "name": "arrowGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
              },
            ],
            [
              "grayGlacier",
              {
                "comment": "Delaying the difficulty bomb to Mid September 2022",
                "eips": [
                  5133,
                ],
                "name": "grayGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
              },
            ],
            [
              "paris",
              {
                "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
                "consensus": {
                  "algorithm": "casper",
                  "casper": {},
                  "type": "pos",
                },
                "eips": [
                  3675,
                  4399,
                ],
                "name": "paris",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
              },
            ],
            [
              "mergeForkIdTransition",
              {
                "comment": "Pre-merge hardfork to fork off non-upgraded clients",
                "eips": [],
                "name": "mergeForkIdTransition",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-3675",
              },
            ],
            [
              "shanghai",
              {
                "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
                "eips": [
                  3651,
                  3855,
                  3860,
                  4895,
                ],
                "name": "shanghai",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
              },
            ],
            [
              "cancun",
              {
                "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
                "eips": [
                  1153,
                  4844,
                  4788,
                  5656,
                  6780,
                  7516,
                ],
                "name": "cancun",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
              },
            ],
          ],
          "_activatedEIPsCache": [
            2565,
            2929,
            2718,
            2930,
            1559,
            3198,
            3529,
            3541,
            4345,
            5133,
            3675,
            4399,
            3651,
            3855,
            3860,
            4895,
            1153,
            4844,
            4788,
            5656,
            6780,
            7516,
            1559,
            4895,
            4844,
            4788,
          ],
          "_chainParams": {
            "bootstrapNodes": [
              {
                "comment": "bootnode-aws-ap-southeast-1-001",
                "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                "ip": "18.138.108.67",
                "location": "ap-southeast-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-aws-us-east-1-001",
                "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                "ip": "3.209.45.79",
                "location": "us-east-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-hel",
                "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
                "ip": "65.108.70.101",
                "location": "eu-west-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-fsn",
                "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
                "ip": "157.90.35.166",
                "location": "eu-central-1-001",
                "port": 30303,
              },
            ],
            "chainId": 10,
            "comment": "The Ethereum main chain",
            "consensus": {
              "algorithm": "ethash",
              "ethash": {},
              "type": "pow",
            },
            "defaultHardfork": "shanghai",
            "dnsNetworks": [
              "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
            ],
            "genesis": {
              "difficulty": 17179869184,
              "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
              "gasLimit": 5000,
              "nonce": "0x0000000000000042",
            },
            "hardforks": [
              {
                "block": 0,
                "forkHash": "0xfc64ec04",
                "name": "chainstart",
              },
              {
                "block": 1150000,
                "forkHash": "0x97c2c34c",
                "name": "homestead",
              },
              {
                "block": 1920000,
                "forkHash": "0x91d1f948",
                "name": "dao",
              },
              {
                "block": 2463000,
                "forkHash": "0x7a64da13",
                "name": "tangerineWhistle",
              },
              {
                "block": 2675000,
                "forkHash": "0x3edd5b10",
                "name": "spuriousDragon",
              },
              {
                "block": 4370000,
                "forkHash": "0xa00bc324",
                "name": "byzantium",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "constantinople",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "petersburg",
              },
              {
                "block": 9069000,
                "forkHash": "0x879d6e30",
                "name": "istanbul",
              },
              {
                "block": 9200000,
                "forkHash": "0xe029e991",
                "name": "muirGlacier",
              },
              {
                "block": 12244000,
                "forkHash": "0x0eb440f6",
                "name": "berlin",
              },
              {
                "block": 12965000,
                "forkHash": "0xb715077d",
                "name": "london",
              },
              {
                "block": 13773000,
                "forkHash": "0x20c327fc",
                "name": "arrowGlacier",
              },
              {
                "block": 15050000,
                "forkHash": "0xf0afd0e3",
                "name": "grayGlacier",
              },
              {
                "block": 15537394,
                "forkHash": "0xf0afd0e3",
                "name": "paris",
                "ttd": "58750000000000000000000",
              },
              {
                "block": null,
                "forkHash": null,
                "name": "mergeForkIdTransition",
              },
              {
                "block": null,
                "forkHash": "0xdce96c2d",
                "name": "shanghai",
                "timestamp": "1681338455",
              },
              {
                "block": null,
                "forkHash": "0x9f3d2254",
                "name": "cancun",
                "timestamp": "1710338135",
              },
            ],
            "name": "TevmCustom",
            "networkId": 10,
            "url": "https://ethstats.net/",
          },
          "_customChains": [],
          "_eips": [
            1559,
            4895,
            4844,
            4788,
          ],
          "_hardfork": "cancun",
          "_paramsCache": {
            "gasConfig": {
              "baseFeeMaxChangeDenominator": {
                "d": "Maximum base fee change denominator",
                "v": 8,
              },
              "blobGasPerBlob": {
                "d": "The base fee for blob gas per blob",
                "v": 131072,
              },
              "blobGasPriceUpdateFraction": {
                "d": "The denominator used in the exponential when calculating a blob gas price",
                "v": 3338477,
              },
              "elasticityMultiplier": {
                "d": "Maximum block gas target elasticity",
                "v": 2,
              },
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "initialBaseFee": {
                "d": "Initial base fee on first EIP1559 block",
                "v": 1000000000,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 5,
              },
              "maxblobGasPerBlock": {
                "d": "The max blob gas allowable per block",
                "v": 786432,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
              "targetBlobGasPerBlock": {
                "d": "The target blob gas consumed per block",
                "v": 393216,
              },
            },
            "gasPrices": {
              "accessListAddressCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 2400,
              },
              "accessListStorageKeyCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 1900,
              },
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 0,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "basefee": {
                "d": "Gas cost of the BASEFEE opcode",
                "v": 2,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "blobbasefee": {
                "d": "Gas cost of the BLOBBASEFEE opcode",
                "v": 2,
              },
              "blobhash": {
                "d": "Base fee of the BLOBHASH opcode",
                "v": 3,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 0,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 0,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "coldaccountaccess": {
                "d": "Gas cost of the first read of a given address (per transaction)",
                "v": 2600,
              },
              "coldsload": {
                "d": "Gas cost of the first read of storage from a given location (per transaction)",
                "v": 2100,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 0,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 0,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 0,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 0,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "initCodeWordCost": {
                "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
                "v": 2,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "kzgPointEvaluationGasPrecompilePrice": {
                "d": "The fee associated with the point evaluation precompile",
                "v": 50000,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "mcopy": {
                "d": "Base fee of the MCOPY opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "minBlobGasPrice": {
                "d": "The minimum fee per blob gas",
                "v": 1,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 3,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "prevrandao": {
                "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "push0": {
                "d": "Base fee of the PUSH0 opcode",
                "v": 2,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 0,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "simpleGasPerBlob": {
                "d": "The basic gas fee for each blob",
                "v": 12000,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 0,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 2900,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4900,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 4800,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 100,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19900,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 100,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 0,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tload": {
                "d": "Base fee of the TLOAD opcode",
                "v": 100,
              },
              "tstore": {
                "d": "Base fee of the TSTORE opcode",
                "v": 100,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "warmstorageread": {
                "d": "Gas cost of reading storage locations which have already loaded 'cold'",
                "v": 100,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 11400000,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "sharding": {
              "blobCommitmentVersionKzg": {
                "d": "The number indicated a versioned hash is a KZG commitment",
                "v": 1,
              },
              "fieldElementsPerBlob": {
                "d": "The number of field elements allowed per blob",
                "v": 4096,
              },
            },
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "historicalRootsLength": {
                "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
                "v": 8191,
              },
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "maxInitCodeSize": {
                "d": "Maximum length of initialization code when creating a contract",
                "v": 49152,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
          "customCrypto": {
            "kzg": {
              "blobToKzgCommitment": [Function],
              "computeBlobKzgProof": [Function],
              "freeTrustedSetup": [Function],
              "loadTrustedSetup": [Function],
              "verifyBlobKzgProof": [Function],
              "verifyBlobKzgProofBatch": [Function],
              "verifyKzgProof": [Function],
            },
          },
          "events": EventEmitter2 {
            "_events": {},
            "_eventsCount": 0,
            "_maxListeners": undefined,
            [Symbol(kCapture)]: false,
          },
        },
      },
      "v": 0n,
      "value": 24225467520128295n,
    },
    FeeMarketEIP1559Transaction {
      "AccessListJSON": [],
      "DEFAULT_CHAIN": 1,
      "_type": 2,
      "accessList": [],
      "activeCapabilities": [
        1559,
        2718,
        2930,
      ],
      "cache": {
        "dataFee": undefined,
        "hash": undefined,
        "senderPubKey": undefined,
      },
      "chainId": 10n,
      "common": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "data": Uint8Array [
        149,
        96,
        194,
        121,
        48,
        120,
        57,
        68,
        69,
        54,
        45,
        49,
        50,
        68,
        51,
        70,
        48,
        45,
        49,
        55,
        50,
        49,
        49,
        49,
        49,
        54,
        54,
        57,
        57,
        55,
        49,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        69,
        221,
        94,
        194,
        141,
        191,
        82,
        150,
        223,
        250,
        228,
        40,
        215,
        244,
        132,
        171,
        2,
        238,
        123,
        173,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        67,
        100,
        197,
        187,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        7,
        121,
        98,
        114,
        105,
        100,
        103,
        101,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        20,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        20,
        157,
        230,
        81,
        195,
        145,
        140,
        20,
        142,
        193,
        224,
        164,
        48,
        43,
        185,
        66,
        41,
        197,
        18,
        211,
        240,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        122,
        110,
        1,
        136,
        6,
        147,
        9,
        58,
        186,
        204,
        244,
        66,
        252,
        190,
        217,
        224,
        67,
        95,
        16,
        48,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        122,
        110,
        1,
        136,
        6,
        147,
        9,
        58,
        186,
        204,
        244,
        66,
        252,
        190,
        217,
        224,
        67,
        95,
        16,
        48,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        6,
        100,
        42,
        172,
        60,
        172,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        242,
        173,
        133,
        96,
        112,
        176,
        53,
        169,
        158,
        15,
        128,
        27,
        212,
        166,
        139,
        34,
        175,
        183,
        220,
        72,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        148,
        176,
        8,
        170,
        0,
        87,
        156,
        19,
        7,
        176,
        239,
        44,
        73,
        154,
        217,
        138,
        140,
        229,
        142,
        88,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        157,
        230,
        81,
        195,
        145,
        140,
        20,
        142,
        193,
        224,
        164,
        48,
        43,
        185,
        66,
        41,
        197,
        18,
        211,
        240,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        67,
        100,
        197,
        187,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        62,
        45,
        70,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        196,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        74,
        175,
        125,
        51,
        63,
        9,
        255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        183,
        205,
        193,
        39,
        136,
        30,
        136,
        228,
        196,
        125,
        91,
        220,
        99,
        253,
        34,
        162,
        31,
        191,
        248,
        95,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        164,
        3,
        184,
        126,
        95,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        135,
        149,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        122,
        110,
        1,
        136,
        6,
        147,
        9,
        58,
        186,
        204,
        244,
        66,
        252,
        190,
        217,
        224,
        67,
        95,
        16,
        48,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        238,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        148,
        176,
        8,
        170,
        0,
        87,
        156,
        19,
        7,
        176,
        239,
        44,
        73,
        154,
        217,
        138,
        140,
        229,
        142,
        88,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        67,
        100,
        197,
        187,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        62,
        45,
        70,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        102,
        150,
        34,
        130,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        4,
        67,
        100,
        197,
        187,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        66,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        6,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        68,
        62,
        240,
        24,
        225,
        130,
        212,
        9,
        188,
        247,
        247,
        148,
        212,
        9,
        188,
        234,
        76,
        115,
        194,
        199,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        68,
        62,
        240,
        24,
        225,
        130,
        212,
        9,
        188,
        247,
        247,
        148,
        212,
        9,
        188,
        234,
        76,
        115,
        194,
        199,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        39,
        16,
        200,
        88,
        163,
        41,
        191,
        5,
        59,
        231,
        141,
        98,
        57,
        196,
        164,
        52,
        59,
        143,
        189,
        33,
        71,
        43,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        192,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        64,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        66,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        6,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        148,
        176,
        8,
        170,
        0,
        87,
        156,
        19,
        7,
        176,
        239,
        44,
        73,
        154,
        217,
        138,
        140,
        229,
        142,
        88,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        244,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
      ],
      "gasLimit": 356068n,
      "maxFeePerGas": 180852552n,
      "maxPriorityFeePerGas": 642957n,
      "nonce": 367n,
      "r": 18649764668151519876930186851646454126176179154655941441101019726599402280264n,
      "s": 47897089604518786322963690002984920200879978502149136250417041579603939112251n,
      "to": Address {
        "bytes": Uint8Array [
          247,
          8,
          225,
          26,
          124,
          148,
          171,
          222,
          143,
          98,
          23,
          177,
          62,
          111,
          227,
          156,
          139,
          156,
          192,
          166,
        ],
      },
      "txOptions": {
        "common": Common {
          "DEFAULT_HARDFORK": "shanghai",
          "HARDFORK_CHANGES": [
            [
              "chainstart",
              {
                "comment": "Start of the Ethereum main chain",
                "gasConfig": {
                  "gasLimitBoundDivisor": {
                    "d": "The bound divisor of the gas limit, used in update calculations",
                    "v": 1024,
                  },
                  "maxRefundQuotient": {
                    "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                    "v": 2,
                  },
                  "minGasLimit": {
                    "d": "Minimum the gas limit may ever be",
                    "v": 5000,
                  },
                },
                "gasPrices": {
                  "add": {
                    "d": "Base fee of the ADD opcode",
                    "v": 3,
                  },
                  "addmod": {
                    "d": "Base fee of the ADDMOD opcode",
                    "v": 8,
                  },
                  "address": {
                    "d": "Base fee of the ADDRESS opcode",
                    "v": 2,
                  },
                  "and": {
                    "d": "Base fee of the AND opcode",
                    "v": 3,
                  },
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 20,
                  },
                  "base": {
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                    "v": 2,
                  },
                  "blockhash": {
                    "d": "Base fee of the BLOCKHASH opcode",
                    "v": 20,
                  },
                  "byte": {
                    "d": "Base fee of the BYTE opcode",
                    "v": 3,
                  },
                  "call": {
                    "d": "Base fee of the CALL opcode",
                    "v": 40,
                  },
                  "callNewAccount": {
                    "d": "Paid for CALL when the destination address didn't exist prior",
                    "v": 25000,
                  },
                  "callStipend": {
                    "d": "Free gas given at beginning of call",
                    "v": 2300,
                  },
                  "callValueTransfer": {
                    "d": "Paid for CALL when the value transfor is non-zero",
                    "v": 9000,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 40,
                  },
                  "calldatacopy": {
                    "d": "Base fee of the CALLDATACOPY opcode",
                    "v": 3,
                  },
                  "calldataload": {
                    "d": "Base fee of the CALLDATALOAD opcode",
                    "v": 3,
                  },
                  "calldatasize": {
                    "d": "Base fee of the CALLDATASIZE opcode",
                    "v": 2,
                  },
                  "caller": {
                    "d": "Base fee of the CALLER opcode",
                    "v": 2,
                  },
                  "callvalue": {
                    "d": "Base fee of the CALLVALUE opcode",
                    "v": 2,
                  },
                  "codecopy": {
                    "d": "Base fee of the CODECOPY opcode",
                    "v": 3,
                  },
                  "codesize": {
                    "d": "Base fee of the CODESIZE opcode",
                    "v": 2,
                  },
                  "coinbase": {
                    "d": "Base fee of the COINBASE opcode",
                    "v": 2,
                  },
                  "copy": {
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                    "v": 3,
                  },
                  "create": {
                    "d": "Base fee of the CREATE opcode",
                    "v": 32000,
                  },
                  "createData": {
                    "d": "",
                    "v": 200,
                  },
                  "difficulty": {
                    "d": "Base fee of the DIFFICULTY opcode",
                    "v": 2,
                  },
                  "div": {
                    "d": "Base fee of the DIV opcode",
                    "v": 5,
                  },
                  "dup": {
                    "d": "Base fee of the DUP opcode",
                    "v": 3,
                  },
                  "ecRecover": {
                    "d": "",
                    "v": 3000,
                  },
                  "eq": {
                    "d": "Base fee of the EQ opcode",
                    "v": 3,
                  },
                  "exp": {
                    "d": "Base fee of the EXP opcode",
                    "v": 10,
                  },
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 10,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 20,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 20,
                  },
                  "gas": {
                    "d": "Base fee of the GAS opcode",
                    "v": 2,
                  },
                  "gaslimit": {
                    "d": "Base fee of the GASLIMIT opcode",
                    "v": 2,
                  },
                  "gasprice": {
                    "d": "Base fee of the GASPRICE opcode",
                    "v": 2,
                  },
                  "gt": {
                    "d": "Base fee of the GT opcode",
                    "v": 3,
                  },
                  "identity": {
                    "d": "",
                    "v": 15,
                  },
                  "identityWord": {
                    "d": "",
                    "v": 3,
                  },
                  "invalid": {
                    "d": "Base fee of the INVALID opcode",
                    "v": 0,
                  },
                  "iszero": {
                    "d": "Base fee of the ISZERO opcode",
                    "v": 3,
                  },
                  "jump": {
                    "d": "Base fee of the JUMP opcode",
                    "v": 8,
                  },
                  "jumpdest": {
                    "d": "Base fee of the JUMPDEST opcode",
                    "v": 1,
                  },
                  "jumpi": {
                    "d": "Base fee of the JUMPI opcode",
                    "v": 10,
                  },
                  "keccak256": {
                    "d": "Base fee of the SHA3 opcode",
                    "v": 30,
                  },
                  "keccak256Word": {
                    "d": "Once per word of the SHA3 operation's data",
                    "v": 6,
                  },
                  "log": {
                    "d": "Base fee of the LOG opcode",
                    "v": 375,
                  },
                  "logData": {
                    "d": "Per byte in a LOG* operation's data",
                    "v": 8,
                  },
                  "logTopic": {
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                    "v": 375,
                  },
                  "lt": {
                    "d": "Base fee of the LT opcode",
                    "v": 3,
                  },
                  "memory": {
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                    "v": 3,
                  },
                  "mload": {
                    "d": "Base fee of the MLOAD opcode",
                    "v": 3,
                  },
                  "mod": {
                    "d": "Base fee of the MOD opcode",
                    "v": 5,
                  },
                  "msize": {
                    "d": "Base fee of the MSIZE opcode",
                    "v": 2,
                  },
                  "mstore": {
                    "d": "Base fee of the MSTORE opcode",
                    "v": 3,
                  },
                  "mstore8": {
                    "d": "Base fee of the MSTORE8 opcode",
                    "v": 3,
                  },
                  "mul": {
                    "d": "Base fee of the MUL opcode",
                    "v": 5,
                  },
                  "mulmod": {
                    "d": "Base fee of the MULMOD opcode",
                    "v": 8,
                  },
                  "not": {
                    "d": "Base fee of the NOT opcode",
                    "v": 3,
                  },
                  "number": {
                    "d": "Base fee of the NUMBER opcode",
                    "v": 2,
                  },
                  "or": {
                    "d": "Base fee of the OR opcode",
                    "v": 3,
                  },
                  "origin": {
                    "d": "Base fee of the ORIGIN opcode",
                    "v": 2,
                  },
                  "pc": {
                    "d": "Base fee of the PC opcode",
                    "v": 2,
                  },
                  "pop": {
                    "d": "Base fee of the POP opcode",
                    "v": 2,
                  },
                  "push": {
                    "d": "Base fee of the PUSH opcode",
                    "v": 3,
                  },
                  "quadCoeffDiv": {
                    "d": "Divisor for the quadratic particle of the memory cost equation",
                    "v": 512,
                  },
                  "return": {
                    "d": "Base fee of the RETURN opcode",
                    "v": 0,
                  },
                  "ripemd160": {
                    "d": "",
                    "v": 600,
                  },
                  "ripemd160Word": {
                    "d": "",
                    "v": 120,
                  },
                  "sdiv": {
                    "d": "Base fee of the SDIV opcode",
                    "v": 5,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 0,
                  },
                  "selfdestructRefund": {
                    "d": "Refunded following a selfdestruct operation",
                    "v": 24000,
                  },
                  "sgt": {
                    "d": "Base fee of the SGT opcode",
                    "v": 3,
                  },
                  "sha256": {
                    "d": "",
                    "v": 60,
                  },
                  "sha256Word": {
                    "d": "",
                    "v": 12,
                  },
                  "signextend": {
                    "d": "Base fee of the SIGNEXTEND opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 50,
                  },
                  "slt": {
                    "d": "Base fee of the SLT opcode",
                    "v": 3,
                  },
                  "smod": {
                    "d": "Base fee of the SMOD opcode",
                    "v": 5,
                  },
                  "sstore": {
                    "d": "Base fee of the SSTORE opcode",
                    "v": 0,
                  },
                  "sstoreRefund": {
                    "d": "Once per SSTORE operation if the zeroness changes to zero",
                    "v": 15000,
                  },
                  "sstoreReset": {
                    "d": "Once per SSTORE operation if the zeroness does not change from zero",
                    "v": 5000,
                  },
                  "sstoreSet": {
                    "d": "Once per SSTORE operation if the zeroness changes from zero",
                    "v": 20000,
                  },
                  "stop": {
                    "d": "Base fee of the STOP opcode",
                    "v": 0,
                  },
                  "sub": {
                    "d": "Base fee of the SUB opcode",
                    "v": 3,
                  },
                  "swap": {
                    "d": "Base fee of the SWAP opcode",
                    "v": 3,
                  },
                  "timestamp": {
                    "d": "Base fee of the TIMESTAMP opcode",
                    "v": 2,
                  },
                  "tx": {
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                    "v": 21000,
                  },
                  "txCreation": {
                    "d": "The cost of creating a contract via tx",
                    "v": 32000,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 68,
                  },
                  "txDataZero": {
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                    "v": 4,
                  },
                  "xor": {
                    "d": "Base fee of the XOR opcode",
                    "v": 3,
                  },
                },
                "name": "chainstart",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 0,
                  },
                  "difficultyBoundDivisor": {
                    "d": "The bound divisor of the difficulty, used in the update calculations",
                    "v": 2048,
                  },
                  "durationLimit": {
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                    "v": 13,
                  },
                  "epochDuration": {
                    "d": "Duration between proof-of-work epochs",
                    "v": 30000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 5000000000000000000n,
                  },
                  "minimumDifficulty": {
                    "d": "The minimum that the difficulty may ever be",
                    "v": 131072,
                  },
                  "timebombPeriod": {
                    "d": "Exponential difficulty timebomb period",
                    "v": 100000,
                  },
                },
                "status": "final",
                "url": "",
                "vm": {
                  "callCreateDepth": {
                    "d": "Maximum depth of call/create stack",
                    "v": 1024,
                  },
                  "maxExtraDataSize": {
                    "d": "Maximum size extra data may be after Genesis",
                    "v": 32,
                  },
                  "stackLimit": {
                    "d": "Maximum size of VM stack allowed",
                    "v": 1024,
                  },
                },
              },
            ],
            [
              "homestead",
              {
                "comment": "Homestead hardfork with protocol and network changes",
                "gasPrices": {
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 40,
                  },
                },
                "name": "homestead",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-606",
              },
            ],
            [
              "dao",
              {
                "comment": "DAO rescue hardfork",
                "name": "dao",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-779",
              },
            ],
            [
              "tangerineWhistle",
              {
                "comment": "Hardfork with gas cost changes for IO-heavy operations",
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 400,
                  },
                  "call": {
                    "d": "Once per CALL operation & message call transaction",
                    "v": 700,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 700,
                  },
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 700,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 700,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 700,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 5000,
                  },
                  "sload": {
                    "d": "Once per SLOAD operation",
                    "v": 200,
                  },
                },
                "name": "tangerineWhistle",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-608",
              },
            ],
            [
              "spuriousDragon",
              {
                "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
                "gasPrices": {
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 50,
                  },
                },
                "name": "spuriousDragon",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "vm": {
                  "maxCodeSize": {
                    "d": "Maximum length of contract code",
                    "v": 24576,
                  },
                },
              },
            ],
            [
              "byzantium",
              {
                "comment": "Hardfork with new precompiles, instructions and other protocol changes",
                "gasPrices": {
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 500,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 40000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 100000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 80000,
                  },
                  "modexpGquaddivisor": {
                    "d": "Gquaddivisor from modexp precompile for gas calculation",
                    "v": 20,
                  },
                  "returndatacopy": {
                    "d": "Base fee of the RETURNDATACOPY opcode",
                    "v": 3,
                  },
                  "returndatasize": {
                    "d": "Base fee of the RETURNDATASIZE opcode",
                    "v": 2,
                  },
                  "revert": {
                    "d": "Base fee of the REVERT opcode",
                    "v": 0,
                  },
                  "staticcall": {
                    "d": "Base fee of the STATICCALL opcode",
                    "v": 700,
                  },
                },
                "name": "byzantium",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 3000000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 3000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-609",
              },
            ],
            [
              "constantinople",
              {
                "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
                "gasPrices": {
                  "create2": {
                    "d": "Base fee of the CREATE2 opcode",
                    "v": 32000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 400,
                  },
                  "netSstoreCleanGas": {
                    "d": "Once per SSTORE operation from clean non-zero",
                    "v": 5000,
                  },
                  "netSstoreClearRefund": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Once per SSTORE operation from dirty",
                    "v": 200,
                  },
                  "netSstoreInitGas": {
                    "d": "Once per SSTORE operation from clean zero",
                    "v": 20000,
                  },
                  "netSstoreNoopGas": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 200,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19800,
                  },
                  "netSstoreResetRefund": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4800,
                  },
                  "sar": {
                    "d": "Base fee of the SAR opcode",
                    "v": 3,
                  },
                  "shl": {
                    "d": "Base fee of the SHL opcode",
                    "v": 3,
                  },
                  "shr": {
                    "d": "Base fee of the SHR opcode",
                    "v": 3,
                  },
                },
                "name": "constantinople",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 5000000,
                  },
                  "minerReward": {
                    "d": "The amount a miner gets rewarded for mining a block",
                    "v": 2000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
              },
            ],
            [
              "petersburg",
              {
                "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
                "gasPrices": {
                  "netSstoreCleanGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreInitGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreNoopGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                },
                "name": "petersburg",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
              },
            ],
            [
              "istanbul",
              {
                "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
                "gasConfig": {},
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 700,
                  },
                  "blake2Round": {
                    "d": "Gas cost per round for the Blake2 F precompile",
                    "v": 1,
                  },
                  "chainid": {
                    "d": "Base fee of the CHAINID opcode",
                    "v": 2,
                  },
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 150,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 6000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 45000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 34000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 700,
                  },
                  "selfbalance": {
                    "d": "Base fee of the SELFBALANCE opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 800,
                  },
                  "sstoreCleanGasEIP2200": {
                    "d": "Once per SSTORE operation from clean non-zero to something else",
                    "v": 5000,
                  },
                  "sstoreCleanRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4200,
                  },
                  "sstoreClearRefundEIP2200": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "sstoreDirtyGasEIP2200": {
                    "d": "Once per SSTORE operation if a dirty value is changed",
                    "v": 800,
                  },
                  "sstoreInitGasEIP2200": {
                    "d": "Once per SSTORE operation from clean zero to non-zero",
                    "v": 20000,
                  },
                  "sstoreInitRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19200,
                  },
                  "sstoreNoopGasEIP2200": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 800,
                  },
                  "sstoreSentryGasEIP2200": {
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                    "v": 2300,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 16,
                  },
                },
                "name": "istanbul",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
              },
            ],
            [
              "muirGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "name": "muirGlacier",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 9000000,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
              },
            ],
            [
              "berlin",
              {
                "comment": "HF targeted for July 2020 following the Muir Glacier HF",
                "eips": [
                  2565,
                  2929,
                  2718,
                  2930,
                ],
                "name": "berlin",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2070",
              },
            ],
            [
              "london",
              {
                "comment": "HF targeted for July 2021 following the Berlin fork",
                "eips": [
                  1559,
                  3198,
                  3529,
                  3541,
                ],
                "name": "london",
                "status": "final",
                "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
              },
            ],
            [
              "arrowGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "eips": [
                  4345,
                ],
                "name": "arrowGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
              },
            ],
            [
              "grayGlacier",
              {
                "comment": "Delaying the difficulty bomb to Mid September 2022",
                "eips": [
                  5133,
                ],
                "name": "grayGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
              },
            ],
            [
              "paris",
              {
                "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
                "consensus": {
                  "algorithm": "casper",
                  "casper": {},
                  "type": "pos",
                },
                "eips": [
                  3675,
                  4399,
                ],
                "name": "paris",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
              },
            ],
            [
              "mergeForkIdTransition",
              {
                "comment": "Pre-merge hardfork to fork off non-upgraded clients",
                "eips": [],
                "name": "mergeForkIdTransition",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-3675",
              },
            ],
            [
              "shanghai",
              {
                "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
                "eips": [
                  3651,
                  3855,
                  3860,
                  4895,
                ],
                "name": "shanghai",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
              },
            ],
            [
              "cancun",
              {
                "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
                "eips": [
                  1153,
                  4844,
                  4788,
                  5656,
                  6780,
                  7516,
                ],
                "name": "cancun",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
              },
            ],
          ],
          "_activatedEIPsCache": [
            2565,
            2929,
            2718,
            2930,
            1559,
            3198,
            3529,
            3541,
            4345,
            5133,
            3675,
            4399,
            3651,
            3855,
            3860,
            4895,
            1153,
            4844,
            4788,
            5656,
            6780,
            7516,
            1559,
            4895,
            4844,
            4788,
          ],
          "_chainParams": {
            "bootstrapNodes": [
              {
                "comment": "bootnode-aws-ap-southeast-1-001",
                "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                "ip": "18.138.108.67",
                "location": "ap-southeast-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-aws-us-east-1-001",
                "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                "ip": "3.209.45.79",
                "location": "us-east-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-hel",
                "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
                "ip": "65.108.70.101",
                "location": "eu-west-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-fsn",
                "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
                "ip": "157.90.35.166",
                "location": "eu-central-1-001",
                "port": 30303,
              },
            ],
            "chainId": 10,
            "comment": "The Ethereum main chain",
            "consensus": {
              "algorithm": "ethash",
              "ethash": {},
              "type": "pow",
            },
            "defaultHardfork": "shanghai",
            "dnsNetworks": [
              "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
            ],
            "genesis": {
              "difficulty": 17179869184,
              "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
              "gasLimit": 5000,
              "nonce": "0x0000000000000042",
            },
            "hardforks": [
              {
                "block": 0,
                "forkHash": "0xfc64ec04",
                "name": "chainstart",
              },
              {
                "block": 1150000,
                "forkHash": "0x97c2c34c",
                "name": "homestead",
              },
              {
                "block": 1920000,
                "forkHash": "0x91d1f948",
                "name": "dao",
              },
              {
                "block": 2463000,
                "forkHash": "0x7a64da13",
                "name": "tangerineWhistle",
              },
              {
                "block": 2675000,
                "forkHash": "0x3edd5b10",
                "name": "spuriousDragon",
              },
              {
                "block": 4370000,
                "forkHash": "0xa00bc324",
                "name": "byzantium",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "constantinople",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "petersburg",
              },
              {
                "block": 9069000,
                "forkHash": "0x879d6e30",
                "name": "istanbul",
              },
              {
                "block": 9200000,
                "forkHash": "0xe029e991",
                "name": "muirGlacier",
              },
              {
                "block": 12244000,
                "forkHash": "0x0eb440f6",
                "name": "berlin",
              },
              {
                "block": 12965000,
                "forkHash": "0xb715077d",
                "name": "london",
              },
              {
                "block": 13773000,
                "forkHash": "0x20c327fc",
                "name": "arrowGlacier",
              },
              {
                "block": 15050000,
                "forkHash": "0xf0afd0e3",
                "name": "grayGlacier",
              },
              {
                "block": 15537394,
                "forkHash": "0xf0afd0e3",
                "name": "paris",
                "ttd": "58750000000000000000000",
              },
              {
                "block": null,
                "forkHash": null,
                "name": "mergeForkIdTransition",
              },
              {
                "block": null,
                "forkHash": "0xdce96c2d",
                "name": "shanghai",
                "timestamp": "1681338455",
              },
              {
                "block": null,
                "forkHash": "0x9f3d2254",
                "name": "cancun",
                "timestamp": "1710338135",
              },
            ],
            "name": "TevmCustom",
            "networkId": 10,
            "url": "https://ethstats.net/",
          },
          "_customChains": [],
          "_eips": [
            1559,
            4895,
            4844,
            4788,
          ],
          "_hardfork": "cancun",
          "_paramsCache": {
            "gasConfig": {
              "baseFeeMaxChangeDenominator": {
                "d": "Maximum base fee change denominator",
                "v": 8,
              },
              "blobGasPerBlob": {
                "d": "The base fee for blob gas per blob",
                "v": 131072,
              },
              "blobGasPriceUpdateFraction": {
                "d": "The denominator used in the exponential when calculating a blob gas price",
                "v": 3338477,
              },
              "elasticityMultiplier": {
                "d": "Maximum block gas target elasticity",
                "v": 2,
              },
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "initialBaseFee": {
                "d": "Initial base fee on first EIP1559 block",
                "v": 1000000000,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 5,
              },
              "maxblobGasPerBlock": {
                "d": "The max blob gas allowable per block",
                "v": 786432,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
              "targetBlobGasPerBlock": {
                "d": "The target blob gas consumed per block",
                "v": 393216,
              },
            },
            "gasPrices": {
              "accessListAddressCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 2400,
              },
              "accessListStorageKeyCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 1900,
              },
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 0,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "basefee": {
                "d": "Gas cost of the BASEFEE opcode",
                "v": 2,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "blobbasefee": {
                "d": "Gas cost of the BLOBBASEFEE opcode",
                "v": 2,
              },
              "blobhash": {
                "d": "Base fee of the BLOBHASH opcode",
                "v": 3,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 0,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 0,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "coldaccountaccess": {
                "d": "Gas cost of the first read of a given address (per transaction)",
                "v": 2600,
              },
              "coldsload": {
                "d": "Gas cost of the first read of storage from a given location (per transaction)",
                "v": 2100,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 0,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 0,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 0,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 0,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "initCodeWordCost": {
                "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
                "v": 2,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "kzgPointEvaluationGasPrecompilePrice": {
                "d": "The fee associated with the point evaluation precompile",
                "v": 50000,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "mcopy": {
                "d": "Base fee of the MCOPY opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "minBlobGasPrice": {
                "d": "The minimum fee per blob gas",
                "v": 1,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 3,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "prevrandao": {
                "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "push0": {
                "d": "Base fee of the PUSH0 opcode",
                "v": 2,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 0,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "simpleGasPerBlob": {
                "d": "The basic gas fee for each blob",
                "v": 12000,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 0,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 2900,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4900,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 4800,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 100,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19900,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 100,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 0,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tload": {
                "d": "Base fee of the TLOAD opcode",
                "v": 100,
              },
              "tstore": {
                "d": "Base fee of the TSTORE opcode",
                "v": 100,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "warmstorageread": {
                "d": "Gas cost of reading storage locations which have already loaded 'cold'",
                "v": 100,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 11400000,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "sharding": {
              "blobCommitmentVersionKzg": {
                "d": "The number indicated a versioned hash is a KZG commitment",
                "v": 1,
              },
              "fieldElementsPerBlob": {
                "d": "The number of field elements allowed per blob",
                "v": 4096,
              },
            },
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "historicalRootsLength": {
                "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
                "v": 8191,
              },
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "maxInitCodeSize": {
                "d": "Maximum length of initialization code when creating a contract",
                "v": 49152,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
          "customCrypto": {
            "kzg": {
              "blobToKzgCommitment": [Function],
              "computeBlobKzgProof": [Function],
              "freeTrustedSetup": [Function],
              "loadTrustedSetup": [Function],
              "verifyBlobKzgProof": [Function],
              "verifyBlobKzgProofBatch": [Function],
              "verifyKzgProof": [Function],
            },
          },
          "events": EventEmitter2 {
            "_events": {},
            "_eventsCount": 0,
            "_maxListeners": undefined,
            [Symbol(kCapture)]: false,
          },
        },
      },
      "v": 1n,
      "value": 1200000000000000n,
    },
    FeeMarketEIP1559Transaction {
      "AccessListJSON": [],
      "DEFAULT_CHAIN": 1,
      "_type": 2,
      "accessList": [],
      "activeCapabilities": [
        1559,
        2718,
        2930,
      ],
      "cache": {
        "dataFee": undefined,
        "hash": undefined,
        "senderPubKey": undefined,
      },
      "chainId": 10n,
      "common": Common {
        "DEFAULT_HARDFORK": "shanghai",
        "HARDFORK_CHANGES": [
          [
            "chainstart",
            {
              "comment": "Start of the Ethereum main chain",
              "gasConfig": {
                "gasLimitBoundDivisor": {
                  "d": "The bound divisor of the gas limit, used in update calculations",
                  "v": 1024,
                },
                "maxRefundQuotient": {
                  "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                  "v": 2,
                },
                "minGasLimit": {
                  "d": "Minimum the gas limit may ever be",
                  "v": 5000,
                },
              },
              "gasPrices": {
                "add": {
                  "d": "Base fee of the ADD opcode",
                  "v": 3,
                },
                "addmod": {
                  "d": "Base fee of the ADDMOD opcode",
                  "v": 8,
                },
                "address": {
                  "d": "Base fee of the ADDRESS opcode",
                  "v": 2,
                },
                "and": {
                  "d": "Base fee of the AND opcode",
                  "v": 3,
                },
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 20,
                },
                "base": {
                  "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                  "v": 2,
                },
                "blockhash": {
                  "d": "Base fee of the BLOCKHASH opcode",
                  "v": 20,
                },
                "byte": {
                  "d": "Base fee of the BYTE opcode",
                  "v": 3,
                },
                "call": {
                  "d": "Base fee of the CALL opcode",
                  "v": 40,
                },
                "callNewAccount": {
                  "d": "Paid for CALL when the destination address didn't exist prior",
                  "v": 25000,
                },
                "callStipend": {
                  "d": "Free gas given at beginning of call",
                  "v": 2300,
                },
                "callValueTransfer": {
                  "d": "Paid for CALL when the value transfor is non-zero",
                  "v": 9000,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 40,
                },
                "calldatacopy": {
                  "d": "Base fee of the CALLDATACOPY opcode",
                  "v": 3,
                },
                "calldataload": {
                  "d": "Base fee of the CALLDATALOAD opcode",
                  "v": 3,
                },
                "calldatasize": {
                  "d": "Base fee of the CALLDATASIZE opcode",
                  "v": 2,
                },
                "caller": {
                  "d": "Base fee of the CALLER opcode",
                  "v": 2,
                },
                "callvalue": {
                  "d": "Base fee of the CALLVALUE opcode",
                  "v": 2,
                },
                "codecopy": {
                  "d": "Base fee of the CODECOPY opcode",
                  "v": 3,
                },
                "codesize": {
                  "d": "Base fee of the CODESIZE opcode",
                  "v": 2,
                },
                "coinbase": {
                  "d": "Base fee of the COINBASE opcode",
                  "v": 2,
                },
                "copy": {
                  "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                  "v": 3,
                },
                "create": {
                  "d": "Base fee of the CREATE opcode",
                  "v": 32000,
                },
                "createData": {
                  "d": "",
                  "v": 200,
                },
                "difficulty": {
                  "d": "Base fee of the DIFFICULTY opcode",
                  "v": 2,
                },
                "div": {
                  "d": "Base fee of the DIV opcode",
                  "v": 5,
                },
                "dup": {
                  "d": "Base fee of the DUP opcode",
                  "v": 3,
                },
                "ecRecover": {
                  "d": "",
                  "v": 3000,
                },
                "eq": {
                  "d": "Base fee of the EQ opcode",
                  "v": 3,
                },
                "exp": {
                  "d": "Base fee of the EXP opcode",
                  "v": 10,
                },
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 10,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 20,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 20,
                },
                "gas": {
                  "d": "Base fee of the GAS opcode",
                  "v": 2,
                },
                "gaslimit": {
                  "d": "Base fee of the GASLIMIT opcode",
                  "v": 2,
                },
                "gasprice": {
                  "d": "Base fee of the GASPRICE opcode",
                  "v": 2,
                },
                "gt": {
                  "d": "Base fee of the GT opcode",
                  "v": 3,
                },
                "identity": {
                  "d": "",
                  "v": 15,
                },
                "identityWord": {
                  "d": "",
                  "v": 3,
                },
                "invalid": {
                  "d": "Base fee of the INVALID opcode",
                  "v": 0,
                },
                "iszero": {
                  "d": "Base fee of the ISZERO opcode",
                  "v": 3,
                },
                "jump": {
                  "d": "Base fee of the JUMP opcode",
                  "v": 8,
                },
                "jumpdest": {
                  "d": "Base fee of the JUMPDEST opcode",
                  "v": 1,
                },
                "jumpi": {
                  "d": "Base fee of the JUMPI opcode",
                  "v": 10,
                },
                "keccak256": {
                  "d": "Base fee of the SHA3 opcode",
                  "v": 30,
                },
                "keccak256Word": {
                  "d": "Once per word of the SHA3 operation's data",
                  "v": 6,
                },
                "log": {
                  "d": "Base fee of the LOG opcode",
                  "v": 375,
                },
                "logData": {
                  "d": "Per byte in a LOG* operation's data",
                  "v": 8,
                },
                "logTopic": {
                  "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                  "v": 375,
                },
                "lt": {
                  "d": "Base fee of the LT opcode",
                  "v": 3,
                },
                "memory": {
                  "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                  "v": 3,
                },
                "mload": {
                  "d": "Base fee of the MLOAD opcode",
                  "v": 3,
                },
                "mod": {
                  "d": "Base fee of the MOD opcode",
                  "v": 5,
                },
                "msize": {
                  "d": "Base fee of the MSIZE opcode",
                  "v": 2,
                },
                "mstore": {
                  "d": "Base fee of the MSTORE opcode",
                  "v": 3,
                },
                "mstore8": {
                  "d": "Base fee of the MSTORE8 opcode",
                  "v": 3,
                },
                "mul": {
                  "d": "Base fee of the MUL opcode",
                  "v": 5,
                },
                "mulmod": {
                  "d": "Base fee of the MULMOD opcode",
                  "v": 8,
                },
                "not": {
                  "d": "Base fee of the NOT opcode",
                  "v": 3,
                },
                "number": {
                  "d": "Base fee of the NUMBER opcode",
                  "v": 2,
                },
                "or": {
                  "d": "Base fee of the OR opcode",
                  "v": 3,
                },
                "origin": {
                  "d": "Base fee of the ORIGIN opcode",
                  "v": 2,
                },
                "pc": {
                  "d": "Base fee of the PC opcode",
                  "v": 2,
                },
                "pop": {
                  "d": "Base fee of the POP opcode",
                  "v": 2,
                },
                "push": {
                  "d": "Base fee of the PUSH opcode",
                  "v": 3,
                },
                "quadCoeffDiv": {
                  "d": "Divisor for the quadratic particle of the memory cost equation",
                  "v": 512,
                },
                "return": {
                  "d": "Base fee of the RETURN opcode",
                  "v": 0,
                },
                "ripemd160": {
                  "d": "",
                  "v": 600,
                },
                "ripemd160Word": {
                  "d": "",
                  "v": 120,
                },
                "sdiv": {
                  "d": "Base fee of the SDIV opcode",
                  "v": 5,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 0,
                },
                "selfdestructRefund": {
                  "d": "Refunded following a selfdestruct operation",
                  "v": 24000,
                },
                "sgt": {
                  "d": "Base fee of the SGT opcode",
                  "v": 3,
                },
                "sha256": {
                  "d": "",
                  "v": 60,
                },
                "sha256Word": {
                  "d": "",
                  "v": 12,
                },
                "signextend": {
                  "d": "Base fee of the SIGNEXTEND opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 50,
                },
                "slt": {
                  "d": "Base fee of the SLT opcode",
                  "v": 3,
                },
                "smod": {
                  "d": "Base fee of the SMOD opcode",
                  "v": 5,
                },
                "sstore": {
                  "d": "Base fee of the SSTORE opcode",
                  "v": 0,
                },
                "sstoreRefund": {
                  "d": "Once per SSTORE operation if the zeroness changes to zero",
                  "v": 15000,
                },
                "sstoreReset": {
                  "d": "Once per SSTORE operation if the zeroness does not change from zero",
                  "v": 5000,
                },
                "sstoreSet": {
                  "d": "Once per SSTORE operation if the zeroness changes from zero",
                  "v": 20000,
                },
                "stop": {
                  "d": "Base fee of the STOP opcode",
                  "v": 0,
                },
                "sub": {
                  "d": "Base fee of the SUB opcode",
                  "v": 3,
                },
                "swap": {
                  "d": "Base fee of the SWAP opcode",
                  "v": 3,
                },
                "timestamp": {
                  "d": "Base fee of the TIMESTAMP opcode",
                  "v": 2,
                },
                "tx": {
                  "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                  "v": 21000,
                },
                "txCreation": {
                  "d": "The cost of creating a contract via tx",
                  "v": 32000,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 68,
                },
                "txDataZero": {
                  "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                  "v": 4,
                },
                "xor": {
                  "d": "Base fee of the XOR opcode",
                  "v": 3,
                },
              },
              "name": "chainstart",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 0,
                },
                "difficultyBoundDivisor": {
                  "d": "The bound divisor of the difficulty, used in the update calculations",
                  "v": 2048,
                },
                "durationLimit": {
                  "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                  "v": 13,
                },
                "epochDuration": {
                  "d": "Duration between proof-of-work epochs",
                  "v": 30000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 5000000000000000000n,
                },
                "minimumDifficulty": {
                  "d": "The minimum that the difficulty may ever be",
                  "v": 131072,
                },
                "timebombPeriod": {
                  "d": "Exponential difficulty timebomb period",
                  "v": 100000,
                },
              },
              "status": "final",
              "url": "",
              "vm": {
                "callCreateDepth": {
                  "d": "Maximum depth of call/create stack",
                  "v": 1024,
                },
                "maxExtraDataSize": {
                  "d": "Maximum size extra data may be after Genesis",
                  "v": 32,
                },
                "stackLimit": {
                  "d": "Maximum size of VM stack allowed",
                  "v": 1024,
                },
              },
            },
          ],
          [
            "homestead",
            {
              "comment": "Homestead hardfork with protocol and network changes",
              "gasPrices": {
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 40,
                },
              },
              "name": "homestead",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-606",
            },
          ],
          [
            "dao",
            {
              "comment": "DAO rescue hardfork",
              "name": "dao",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-779",
            },
          ],
          [
            "tangerineWhistle",
            {
              "comment": "Hardfork with gas cost changes for IO-heavy operations",
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 400,
                },
                "call": {
                  "d": "Once per CALL operation & message call transaction",
                  "v": 700,
                },
                "callcode": {
                  "d": "Base fee of the CALLCODE opcode",
                  "v": 700,
                },
                "delegatecall": {
                  "d": "Base fee of the DELEGATECALL opcode",
                  "v": 700,
                },
                "extcodecopy": {
                  "d": "Base fee of the EXTCODECOPY opcode",
                  "v": 700,
                },
                "extcodesize": {
                  "d": "Base fee of the EXTCODESIZE opcode",
                  "v": 700,
                },
                "selfdestruct": {
                  "d": "Base fee of the SELFDESTRUCT opcode",
                  "v": 5000,
                },
                "sload": {
                  "d": "Once per SLOAD operation",
                  "v": 200,
                },
              },
              "name": "tangerineWhistle",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-608",
            },
          ],
          [
            "spuriousDragon",
            {
              "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
              "gasPrices": {
                "expByte": {
                  "d": "Times ceil(log256(exponent)) for the EXP instruction",
                  "v": 50,
                },
              },
              "name": "spuriousDragon",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-607",
              "vm": {
                "maxCodeSize": {
                  "d": "Maximum length of contract code",
                  "v": 24576,
                },
              },
            },
          ],
          [
            "byzantium",
            {
              "comment": "Hardfork with new precompiles, instructions and other protocol changes",
              "gasPrices": {
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 500,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 40000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 100000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 80000,
                },
                "modexpGquaddivisor": {
                  "d": "Gquaddivisor from modexp precompile for gas calculation",
                  "v": 20,
                },
                "returndatacopy": {
                  "d": "Base fee of the RETURNDATACOPY opcode",
                  "v": 3,
                },
                "returndatasize": {
                  "d": "Base fee of the RETURNDATASIZE opcode",
                  "v": 2,
                },
                "revert": {
                  "d": "Base fee of the REVERT opcode",
                  "v": 0,
                },
                "staticcall": {
                  "d": "Base fee of the STATICCALL opcode",
                  "v": 700,
                },
              },
              "name": "byzantium",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 3000000,
                },
                "minerReward": {
                  "d": "the amount a miner get rewarded for mining a block",
                  "v": 3000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-609",
            },
          ],
          [
            "constantinople",
            {
              "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
              "gasPrices": {
                "create2": {
                  "d": "Base fee of the CREATE2 opcode",
                  "v": 32000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 400,
                },
                "netSstoreCleanGas": {
                  "d": "Once per SSTORE operation from clean non-zero",
                  "v": 5000,
                },
                "netSstoreClearRefund": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "netSstoreDirtyGas": {
                  "d": "Once per SSTORE operation from dirty",
                  "v": 200,
                },
                "netSstoreInitGas": {
                  "d": "Once per SSTORE operation from clean zero",
                  "v": 20000,
                },
                "netSstoreNoopGas": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 200,
                },
                "netSstoreResetClearRefund": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19800,
                },
                "netSstoreResetRefund": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4800,
                },
                "sar": {
                  "d": "Base fee of the SAR opcode",
                  "v": 3,
                },
                "shl": {
                  "d": "Base fee of the SHL opcode",
                  "v": 3,
                },
                "shr": {
                  "d": "Base fee of the SHR opcode",
                  "v": 3,
                },
              },
              "name": "constantinople",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 5000000,
                },
                "minerReward": {
                  "d": "The amount a miner gets rewarded for mining a block",
                  "v": 2000000000000000000n,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1013",
            },
          ],
          [
            "petersburg",
            {
              "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
              "gasPrices": {
                "netSstoreCleanGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreDirtyGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreInitGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreNoopGas": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetClearRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
                "netSstoreResetRefund": {
                  "d": "Removed along EIP-1283",
                  "v": null,
                },
              },
              "name": "petersburg",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1716",
            },
          ],
          [
            "istanbul",
            {
              "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
              "gasConfig": {},
              "gasPrices": {
                "balance": {
                  "d": "Base fee of the BALANCE opcode",
                  "v": 700,
                },
                "blake2Round": {
                  "d": "Gas cost per round for the Blake2 F precompile",
                  "v": 1,
                },
                "chainid": {
                  "d": "Base fee of the CHAINID opcode",
                  "v": 2,
                },
                "ecAdd": {
                  "d": "Gas costs for curve addition precompile",
                  "v": 150,
                },
                "ecMul": {
                  "d": "Gas costs for curve multiplication precompile",
                  "v": 6000,
                },
                "ecPairing": {
                  "d": "Base gas costs for curve pairing precompile",
                  "v": 45000,
                },
                "ecPairingWord": {
                  "d": "Gas costs regarding curve pairing precompile input length",
                  "v": 34000,
                },
                "extcodehash": {
                  "d": "Base fee of the EXTCODEHASH opcode",
                  "v": 700,
                },
                "selfbalance": {
                  "d": "Base fee of the SELFBALANCE opcode",
                  "v": 5,
                },
                "sload": {
                  "d": "Base fee of the SLOAD opcode",
                  "v": 800,
                },
                "sstoreCleanGasEIP2200": {
                  "d": "Once per SSTORE operation from clean non-zero to something else",
                  "v": 5000,
                },
                "sstoreCleanRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original non-zero value",
                  "v": 4200,
                },
                "sstoreClearRefundEIP2200": {
                  "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                  "v": 15000,
                },
                "sstoreDirtyGasEIP2200": {
                  "d": "Once per SSTORE operation if a dirty value is changed",
                  "v": 800,
                },
                "sstoreInitGasEIP2200": {
                  "d": "Once per SSTORE operation from clean zero to non-zero",
                  "v": 20000,
                },
                "sstoreInitRefundEIP2200": {
                  "d": "Once per SSTORE operation for resetting to the original zero value",
                  "v": 19200,
                },
                "sstoreNoopGasEIP2200": {
                  "d": "Once per SSTORE operation if the value doesn't change",
                  "v": 800,
                },
                "sstoreSentryGasEIP2200": {
                  "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                  "v": 2300,
                },
                "txDataNonZero": {
                  "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                  "v": 16,
                },
              },
              "name": "istanbul",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-1679",
            },
          ],
          [
            "muirGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "name": "muirGlacier",
              "pow": {
                "difficultyBombDelay": {
                  "d": "the amount of blocks to delay the difficulty bomb with",
                  "v": 9000000,
                },
              },
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2384",
            },
          ],
          [
            "berlin",
            {
              "comment": "HF targeted for July 2020 following the Muir Glacier HF",
              "eips": [
                2565,
                2929,
                2718,
                2930,
              ],
              "name": "berlin",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-2070",
            },
          ],
          [
            "london",
            {
              "comment": "HF targeted for July 2021 following the Berlin fork",
              "eips": [
                1559,
                3198,
                3529,
                3541,
              ],
              "name": "london",
              "status": "final",
              "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
            },
          ],
          [
            "arrowGlacier",
            {
              "comment": "HF to delay the difficulty bomb",
              "eips": [
                4345,
              ],
              "name": "arrowGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
            },
          ],
          [
            "grayGlacier",
            {
              "comment": "Delaying the difficulty bomb to Mid September 2022",
              "eips": [
                5133,
              ],
              "name": "grayGlacier",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
            },
          ],
          [
            "paris",
            {
              "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
              "consensus": {
                "algorithm": "casper",
                "casper": {},
                "type": "pos",
              },
              "eips": [
                3675,
                4399,
              ],
              "name": "paris",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
            },
          ],
          [
            "mergeForkIdTransition",
            {
              "comment": "Pre-merge hardfork to fork off non-upgraded clients",
              "eips": [],
              "name": "mergeForkIdTransition",
              "status": "final",
              "url": "https://eips.ethereum.org/EIPS/eip-3675",
            },
          ],
          [
            "shanghai",
            {
              "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
              "eips": [
                3651,
                3855,
                3860,
                4895,
              ],
              "name": "shanghai",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
            },
          ],
          [
            "cancun",
            {
              "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
              "eips": [
                1153,
                4844,
                4788,
                5656,
                6780,
                7516,
              ],
              "name": "cancun",
              "status": "final",
              "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
            },
          ],
        ],
        "_activatedEIPsCache": [
          2565,
          2929,
          2718,
          2930,
          1559,
          3198,
          3529,
          3541,
          4345,
          5133,
          3675,
          4399,
          3651,
          3855,
          3860,
          4895,
          1153,
          4844,
          4788,
          5656,
          6780,
          7516,
          1559,
          4895,
          4844,
          4788,
        ],
        "_chainParams": {
          "bootstrapNodes": [
            {
              "comment": "bootnode-aws-ap-southeast-1-001",
              "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
              "ip": "18.138.108.67",
              "location": "ap-southeast-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-aws-us-east-1-001",
              "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
              "ip": "3.209.45.79",
              "location": "us-east-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-hel",
              "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
              "ip": "65.108.70.101",
              "location": "eu-west-1-001",
              "port": 30303,
            },
            {
              "comment": "bootnode-hetzner-fsn",
              "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
              "ip": "157.90.35.166",
              "location": "eu-central-1-001",
              "port": 30303,
            },
          ],
          "chainId": 10,
          "comment": "The Ethereum main chain",
          "consensus": {
            "algorithm": "ethash",
            "ethash": {},
            "type": "pow",
          },
          "defaultHardfork": "shanghai",
          "dnsNetworks": [
            "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
          ],
          "genesis": {
            "difficulty": 17179869184,
            "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
            "gasLimit": 5000,
            "nonce": "0x0000000000000042",
          },
          "hardforks": [
            {
              "block": 0,
              "forkHash": "0xfc64ec04",
              "name": "chainstart",
            },
            {
              "block": 1150000,
              "forkHash": "0x97c2c34c",
              "name": "homestead",
            },
            {
              "block": 1920000,
              "forkHash": "0x91d1f948",
              "name": "dao",
            },
            {
              "block": 2463000,
              "forkHash": "0x7a64da13",
              "name": "tangerineWhistle",
            },
            {
              "block": 2675000,
              "forkHash": "0x3edd5b10",
              "name": "spuriousDragon",
            },
            {
              "block": 4370000,
              "forkHash": "0xa00bc324",
              "name": "byzantium",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "constantinople",
            },
            {
              "block": 7280000,
              "forkHash": "0x668db0af",
              "name": "petersburg",
            },
            {
              "block": 9069000,
              "forkHash": "0x879d6e30",
              "name": "istanbul",
            },
            {
              "block": 9200000,
              "forkHash": "0xe029e991",
              "name": "muirGlacier",
            },
            {
              "block": 12244000,
              "forkHash": "0x0eb440f6",
              "name": "berlin",
            },
            {
              "block": 12965000,
              "forkHash": "0xb715077d",
              "name": "london",
            },
            {
              "block": 13773000,
              "forkHash": "0x20c327fc",
              "name": "arrowGlacier",
            },
            {
              "block": 15050000,
              "forkHash": "0xf0afd0e3",
              "name": "grayGlacier",
            },
            {
              "block": 15537394,
              "forkHash": "0xf0afd0e3",
              "name": "paris",
              "ttd": "58750000000000000000000",
            },
            {
              "block": null,
              "forkHash": null,
              "name": "mergeForkIdTransition",
            },
            {
              "block": null,
              "forkHash": "0xdce96c2d",
              "name": "shanghai",
              "timestamp": "1681338455",
            },
            {
              "block": null,
              "forkHash": "0x9f3d2254",
              "name": "cancun",
              "timestamp": "1710338135",
            },
          ],
          "name": "TevmCustom",
          "networkId": 10,
          "url": "https://ethstats.net/",
        },
        "_customChains": [],
        "_eips": [
          1559,
          4895,
          4844,
          4788,
        ],
        "_hardfork": "cancun",
        "_paramsCache": {
          "gasConfig": {
            "baseFeeMaxChangeDenominator": {
              "d": "Maximum base fee change denominator",
              "v": 8,
            },
            "blobGasPerBlob": {
              "d": "The base fee for blob gas per blob",
              "v": 131072,
            },
            "blobGasPriceUpdateFraction": {
              "d": "The denominator used in the exponential when calculating a blob gas price",
              "v": 3338477,
            },
            "elasticityMultiplier": {
              "d": "Maximum block gas target elasticity",
              "v": 2,
            },
            "gasLimitBoundDivisor": {
              "d": "The bound divisor of the gas limit, used in update calculations",
              "v": 1024,
            },
            "initialBaseFee": {
              "d": "Initial base fee on first EIP1559 block",
              "v": 1000000000,
            },
            "maxRefundQuotient": {
              "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
              "v": 5,
            },
            "maxblobGasPerBlock": {
              "d": "The max blob gas allowable per block",
              "v": 786432,
            },
            "minGasLimit": {
              "d": "Minimum the gas limit may ever be",
              "v": 5000,
            },
            "targetBlobGasPerBlock": {
              "d": "The target blob gas consumed per block",
              "v": 393216,
            },
          },
          "gasPrices": {
            "accessListAddressCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 2400,
            },
            "accessListStorageKeyCost": {
              "d": "Gas cost per storage key in an Access List transaction",
              "v": 1900,
            },
            "add": {
              "d": "Base fee of the ADD opcode",
              "v": 3,
            },
            "addmod": {
              "d": "Base fee of the ADDMOD opcode",
              "v": 8,
            },
            "address": {
              "d": "Base fee of the ADDRESS opcode",
              "v": 2,
            },
            "and": {
              "d": "Base fee of the AND opcode",
              "v": 3,
            },
            "balance": {
              "d": "Base fee of the BALANCE opcode",
              "v": 0,
            },
            "base": {
              "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
              "v": 2,
            },
            "basefee": {
              "d": "Gas cost of the BASEFEE opcode",
              "v": 2,
            },
            "blake2Round": {
              "d": "Gas cost per round for the Blake2 F precompile",
              "v": 1,
            },
            "blobbasefee": {
              "d": "Gas cost of the BLOBBASEFEE opcode",
              "v": 2,
            },
            "blobhash": {
              "d": "Base fee of the BLOBHASH opcode",
              "v": 3,
            },
            "blockhash": {
              "d": "Base fee of the BLOCKHASH opcode",
              "v": 20,
            },
            "byte": {
              "d": "Base fee of the BYTE opcode",
              "v": 3,
            },
            "call": {
              "d": "Base fee of the CALL opcode",
              "v": 0,
            },
            "callNewAccount": {
              "d": "Paid for CALL when the destination address didn't exist prior",
              "v": 25000,
            },
            "callStipend": {
              "d": "Free gas given at beginning of call",
              "v": 2300,
            },
            "callValueTransfer": {
              "d": "Paid for CALL when the value transfor is non-zero",
              "v": 9000,
            },
            "callcode": {
              "d": "Base fee of the CALLCODE opcode",
              "v": 0,
            },
            "calldatacopy": {
              "d": "Base fee of the CALLDATACOPY opcode",
              "v": 3,
            },
            "calldataload": {
              "d": "Base fee of the CALLDATALOAD opcode",
              "v": 3,
            },
            "calldatasize": {
              "d": "Base fee of the CALLDATASIZE opcode",
              "v": 2,
            },
            "caller": {
              "d": "Base fee of the CALLER opcode",
              "v": 2,
            },
            "callvalue": {
              "d": "Base fee of the CALLVALUE opcode",
              "v": 2,
            },
            "chainid": {
              "d": "Base fee of the CHAINID opcode",
              "v": 2,
            },
            "codecopy": {
              "d": "Base fee of the CODECOPY opcode",
              "v": 3,
            },
            "codesize": {
              "d": "Base fee of the CODESIZE opcode",
              "v": 2,
            },
            "coinbase": {
              "d": "Base fee of the COINBASE opcode",
              "v": 2,
            },
            "coldaccountaccess": {
              "d": "Gas cost of the first read of a given address (per transaction)",
              "v": 2600,
            },
            "coldsload": {
              "d": "Gas cost of the first read of storage from a given location (per transaction)",
              "v": 2100,
            },
            "copy": {
              "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
              "v": 3,
            },
            "create": {
              "d": "Base fee of the CREATE opcode",
              "v": 32000,
            },
            "create2": {
              "d": "Base fee of the CREATE2 opcode",
              "v": 32000,
            },
            "createData": {
              "d": "",
              "v": 200,
            },
            "delegatecall": {
              "d": "Base fee of the DELEGATECALL opcode",
              "v": 0,
            },
            "difficulty": {
              "d": "Base fee of the DIFFICULTY opcode",
              "v": 2,
            },
            "div": {
              "d": "Base fee of the DIV opcode",
              "v": 5,
            },
            "dup": {
              "d": "Base fee of the DUP opcode",
              "v": 3,
            },
            "ecAdd": {
              "d": "Gas costs for curve addition precompile",
              "v": 150,
            },
            "ecMul": {
              "d": "Gas costs for curve multiplication precompile",
              "v": 6000,
            },
            "ecPairing": {
              "d": "Base gas costs for curve pairing precompile",
              "v": 45000,
            },
            "ecPairingWord": {
              "d": "Gas costs regarding curve pairing precompile input length",
              "v": 34000,
            },
            "ecRecover": {
              "d": "",
              "v": 3000,
            },
            "eq": {
              "d": "Base fee of the EQ opcode",
              "v": 3,
            },
            "exp": {
              "d": "Base fee of the EXP opcode",
              "v": 10,
            },
            "expByte": {
              "d": "Times ceil(log256(exponent)) for the EXP instruction",
              "v": 50,
            },
            "extcodecopy": {
              "d": "Base fee of the EXTCODECOPY opcode",
              "v": 0,
            },
            "extcodehash": {
              "d": "Base fee of the EXTCODEHASH opcode",
              "v": 0,
            },
            "extcodesize": {
              "d": "Base fee of the EXTCODESIZE opcode",
              "v": 0,
            },
            "gas": {
              "d": "Base fee of the GAS opcode",
              "v": 2,
            },
            "gaslimit": {
              "d": "Base fee of the GASLIMIT opcode",
              "v": 2,
            },
            "gasprice": {
              "d": "Base fee of the GASPRICE opcode",
              "v": 2,
            },
            "gt": {
              "d": "Base fee of the GT opcode",
              "v": 3,
            },
            "identity": {
              "d": "",
              "v": 15,
            },
            "identityWord": {
              "d": "",
              "v": 3,
            },
            "initCodeWordCost": {
              "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
              "v": 2,
            },
            "invalid": {
              "d": "Base fee of the INVALID opcode",
              "v": 0,
            },
            "iszero": {
              "d": "Base fee of the ISZERO opcode",
              "v": 3,
            },
            "jump": {
              "d": "Base fee of the JUMP opcode",
              "v": 8,
            },
            "jumpdest": {
              "d": "Base fee of the JUMPDEST opcode",
              "v": 1,
            },
            "jumpi": {
              "d": "Base fee of the JUMPI opcode",
              "v": 10,
            },
            "keccak256": {
              "d": "Base fee of the SHA3 opcode",
              "v": 30,
            },
            "keccak256Word": {
              "d": "Once per word of the SHA3 operation's data",
              "v": 6,
            },
            "kzgPointEvaluationGasPrecompilePrice": {
              "d": "The fee associated with the point evaluation precompile",
              "v": 50000,
            },
            "log": {
              "d": "Base fee of the LOG opcode",
              "v": 375,
            },
            "logData": {
              "d": "Per byte in a LOG* operation's data",
              "v": 8,
            },
            "logTopic": {
              "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
              "v": 375,
            },
            "lt": {
              "d": "Base fee of the LT opcode",
              "v": 3,
            },
            "mcopy": {
              "d": "Base fee of the MCOPY opcode",
              "v": 3,
            },
            "memory": {
              "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
              "v": 3,
            },
            "minBlobGasPrice": {
              "d": "The minimum fee per blob gas",
              "v": 1,
            },
            "mload": {
              "d": "Base fee of the MLOAD opcode",
              "v": 3,
            },
            "mod": {
              "d": "Base fee of the MOD opcode",
              "v": 5,
            },
            "modexpGquaddivisor": {
              "d": "Gquaddivisor from modexp precompile for gas calculation",
              "v": 3,
            },
            "msize": {
              "d": "Base fee of the MSIZE opcode",
              "v": 2,
            },
            "mstore": {
              "d": "Base fee of the MSTORE opcode",
              "v": 3,
            },
            "mstore8": {
              "d": "Base fee of the MSTORE8 opcode",
              "v": 3,
            },
            "mul": {
              "d": "Base fee of the MUL opcode",
              "v": 5,
            },
            "mulmod": {
              "d": "Base fee of the MULMOD opcode",
              "v": 8,
            },
            "netSstoreCleanGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreDirtyGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreInitGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreNoopGas": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetClearRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "netSstoreResetRefund": {
              "d": "Removed along EIP-1283",
              "v": null,
            },
            "not": {
              "d": "Base fee of the NOT opcode",
              "v": 3,
            },
            "number": {
              "d": "Base fee of the NUMBER opcode",
              "v": 2,
            },
            "or": {
              "d": "Base fee of the OR opcode",
              "v": 3,
            },
            "origin": {
              "d": "Base fee of the ORIGIN opcode",
              "v": 2,
            },
            "pc": {
              "d": "Base fee of the PC opcode",
              "v": 2,
            },
            "pop": {
              "d": "Base fee of the POP opcode",
              "v": 2,
            },
            "prevrandao": {
              "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
              "v": 2,
            },
            "push": {
              "d": "Base fee of the PUSH opcode",
              "v": 3,
            },
            "push0": {
              "d": "Base fee of the PUSH0 opcode",
              "v": 2,
            },
            "quadCoeffDiv": {
              "d": "Divisor for the quadratic particle of the memory cost equation",
              "v": 512,
            },
            "return": {
              "d": "Base fee of the RETURN opcode",
              "v": 0,
            },
            "returndatacopy": {
              "d": "Base fee of the RETURNDATACOPY opcode",
              "v": 3,
            },
            "returndatasize": {
              "d": "Base fee of the RETURNDATASIZE opcode",
              "v": 2,
            },
            "revert": {
              "d": "Base fee of the REVERT opcode",
              "v": 0,
            },
            "ripemd160": {
              "d": "",
              "v": 600,
            },
            "ripemd160Word": {
              "d": "",
              "v": 120,
            },
            "sar": {
              "d": "Base fee of the SAR opcode",
              "v": 3,
            },
            "sdiv": {
              "d": "Base fee of the SDIV opcode",
              "v": 5,
            },
            "selfbalance": {
              "d": "Base fee of the SELFBALANCE opcode",
              "v": 5,
            },
            "selfdestruct": {
              "d": "Base fee of the SELFDESTRUCT opcode",
              "v": 5000,
            },
            "selfdestructRefund": {
              "d": "Refunded following a selfdestruct operation",
              "v": 0,
            },
            "sgt": {
              "d": "Base fee of the SGT opcode",
              "v": 3,
            },
            "sha256": {
              "d": "",
              "v": 60,
            },
            "sha256Word": {
              "d": "",
              "v": 12,
            },
            "shl": {
              "d": "Base fee of the SHL opcode",
              "v": 3,
            },
            "shr": {
              "d": "Base fee of the SHR opcode",
              "v": 3,
            },
            "signextend": {
              "d": "Base fee of the SIGNEXTEND opcode",
              "v": 5,
            },
            "simpleGasPerBlob": {
              "d": "The basic gas fee for each blob",
              "v": 12000,
            },
            "sload": {
              "d": "Base fee of the SLOAD opcode",
              "v": 0,
            },
            "slt": {
              "d": "Base fee of the SLT opcode",
              "v": 3,
            },
            "smod": {
              "d": "Base fee of the SMOD opcode",
              "v": 5,
            },
            "sstore": {
              "d": "Base fee of the SSTORE opcode",
              "v": 0,
            },
            "sstoreCleanGasEIP2200": {
              "d": "Once per SSTORE operation from clean non-zero to something else",
              "v": 2900,
            },
            "sstoreCleanRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original non-zero value",
              "v": 4900,
            },
            "sstoreClearRefundEIP2200": {
              "d": "Once per SSTORE operation for clearing an originally existing storage slot",
              "v": 4800,
            },
            "sstoreDirtyGasEIP2200": {
              "d": "Once per SSTORE operation if a dirty value is changed",
              "v": 100,
            },
            "sstoreInitGasEIP2200": {
              "d": "Once per SSTORE operation from clean zero to non-zero",
              "v": 20000,
            },
            "sstoreInitRefundEIP2200": {
              "d": "Once per SSTORE operation for resetting to the original zero value",
              "v": 19900,
            },
            "sstoreNoopGasEIP2200": {
              "d": "Once per SSTORE operation if the value doesn't change",
              "v": 100,
            },
            "sstoreRefund": {
              "d": "Once per SSTORE operation if the zeroness changes to zero",
              "v": 15000,
            },
            "sstoreReset": {
              "d": "Once per SSTORE operation if the zeroness does not change from zero",
              "v": 5000,
            },
            "sstoreSentryGasEIP2200": {
              "d": "Minimum gas required to be present for an SSTORE call, not consumed",
              "v": 2300,
            },
            "sstoreSet": {
              "d": "Once per SSTORE operation if the zeroness changes from zero",
              "v": 20000,
            },
            "staticcall": {
              "d": "Base fee of the STATICCALL opcode",
              "v": 0,
            },
            "stop": {
              "d": "Base fee of the STOP opcode",
              "v": 0,
            },
            "sub": {
              "d": "Base fee of the SUB opcode",
              "v": 3,
            },
            "swap": {
              "d": "Base fee of the SWAP opcode",
              "v": 3,
            },
            "timestamp": {
              "d": "Base fee of the TIMESTAMP opcode",
              "v": 2,
            },
            "tload": {
              "d": "Base fee of the TLOAD opcode",
              "v": 100,
            },
            "tstore": {
              "d": "Base fee of the TSTORE opcode",
              "v": 100,
            },
            "tx": {
              "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
              "v": 21000,
            },
            "txCreation": {
              "d": "The cost of creating a contract via tx",
              "v": 32000,
            },
            "txDataNonZero": {
              "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
              "v": 16,
            },
            "txDataZero": {
              "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
              "v": 4,
            },
            "warmstorageread": {
              "d": "Gas cost of reading storage locations which have already loaded 'cold'",
              "v": 100,
            },
            "xor": {
              "d": "Base fee of the XOR opcode",
              "v": 3,
            },
          },
          "pow": {
            "difficultyBombDelay": {
              "d": "the amount of blocks to delay the difficulty bomb with",
              "v": 11400000,
            },
            "difficultyBoundDivisor": {
              "d": "The bound divisor of the difficulty, used in the update calculations",
              "v": 2048,
            },
            "durationLimit": {
              "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
              "v": 13,
            },
            "epochDuration": {
              "d": "Duration between proof-of-work epochs",
              "v": 30000,
            },
            "minerReward": {
              "d": "The amount a miner gets rewarded for mining a block",
              "v": 2000000000000000000n,
            },
            "minimumDifficulty": {
              "d": "The minimum that the difficulty may ever be",
              "v": 131072,
            },
            "timebombPeriod": {
              "d": "Exponential difficulty timebomb period",
              "v": 100000,
            },
          },
          "sharding": {
            "blobCommitmentVersionKzg": {
              "d": "The number indicated a versioned hash is a KZG commitment",
              "v": 1,
            },
            "fieldElementsPerBlob": {
              "d": "The number of field elements allowed per blob",
              "v": 4096,
            },
          },
          "vm": {
            "callCreateDepth": {
              "d": "Maximum depth of call/create stack",
              "v": 1024,
            },
            "historicalRootsLength": {
              "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
              "v": 8191,
            },
            "maxCodeSize": {
              "d": "Maximum length of contract code",
              "v": 24576,
            },
            "maxExtraDataSize": {
              "d": "Maximum size extra data may be after Genesis",
              "v": 32,
            },
            "maxInitCodeSize": {
              "d": "Maximum length of initialization code when creating a contract",
              "v": 49152,
            },
            "stackLimit": {
              "d": "Maximum size of VM stack allowed",
              "v": 1024,
            },
          },
        },
        "customCrypto": {
          "kzg": {
            "blobToKzgCommitment": [Function],
            "computeBlobKzgProof": [Function],
            "freeTrustedSetup": [Function],
            "loadTrustedSetup": [Function],
            "verifyBlobKzgProof": [Function],
            "verifyBlobKzgProofBatch": [Function],
            "verifyKzgProof": [Function],
          },
        },
        "events": EventEmitter2 {
          "_events": {},
          "_eventsCount": 0,
          "_maxListeners": undefined,
          [Symbol(kCapture)]: false,
        },
      },
      "data": Uint8Array [
        160,
        5,
        211,
        210,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        157,
        56,
        15,
        62,
        158,
        240,
        134,
        142,
        62,
        204,
        111,
        205,
        153,
        224,
        203,
        50,
        147,
        141,
        211,
        2,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        224,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        102,
        159,
        79,
        28,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        2,
        96,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        32,
        235,
        205,
        102,
        171,
        101,
        195,
        179,
        142,
        157,
        246,
        98,
        10,
        28,
        70,
        2,
        105,
        66,
        123,
        13,
        148,
        102,
        250,
        105,
        21,
        85,
        210,
        112,
        176,
        218,
        222,
        105,
        238,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        32,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        72,
        116,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        230,
        140,
        168,
        36,
        195,
        118,
        234,
        112,
        196,
        57,
        253,
        127,
        60,
        151,
        135,
        114,
        144,
        62,
        127,
        157,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        128,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        102,
        159,
        79,
        28,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        65,
        84,
        0,
        161,
        80,
        110,
        25,
        172,
        95,
        61,
        37,
        159,
        240,
        104,
        111,
        44,
        228,
        103,
        156,
        158,
        234,
        81,
        142,
        33,
        219,
        159,
        28,
        84,
        150,
        88,
        168,
        138,
        11,
        69,
        121,
        25,
        36,
        233,
        133,
        171,
        246,
        147,
        255,
        59,
        169,
        76,
        76,
        8,
        50,
        66,
        113,
        14,
        81,
        192,
        28,
        142,
        184,
        48,
        35,
        48,
        103,
        130,
        226,
        117,
        184,
        27,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        65,
        89,
        135,
        199,
        215,
        35,
        78,
        57,
        121,
        59,
        37,
        95,
        167,
        218,
        162,
        53,
        145,
        18,
        88,
        29,
        185,
        54,
        19,
        78,
        155,
        90,
        0,
        198,
        159,
        31,
        80,
        29,
        169,
        114,
        119,
        212,
        174,
        37,
        95,
        136,
        246,
        164,
        136,
        9,
        225,
        177,
        195,
        84,
        29,
        55,
        9,
        235,
        33,
        221,
        64,
        17,
        206,
        39,
        141,
        251,
        26,
        100,
        19,
        109,
        165,
        27,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
      ],
      "gasLimit": 250000n,
      "maxFeePerGas": 59165684n,
      "maxPriorityFeePerGas": 59165684n,
      "nonce": 3062n,
      "r": 80105650428477741518320772015073261410796709404472545809718768852637473625475n,
      "s": 32535061435677288041899893993545833096530782996189387353691103861320189244598n,
      "to": Address {
        "bytes": Uint8Array [
          0,
          0,
          0,
          0,
          252,
          86,
          148,
          124,
          126,
          113,
          131,
          248,
          202,
          75,
          98,
          57,
          140,
          170,
          223,
          11,
        ],
      },
      "txOptions": {
        "common": Common {
          "DEFAULT_HARDFORK": "shanghai",
          "HARDFORK_CHANGES": [
            [
              "chainstart",
              {
                "comment": "Start of the Ethereum main chain",
                "gasConfig": {
                  "gasLimitBoundDivisor": {
                    "d": "The bound divisor of the gas limit, used in update calculations",
                    "v": 1024,
                  },
                  "maxRefundQuotient": {
                    "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                    "v": 2,
                  },
                  "minGasLimit": {
                    "d": "Minimum the gas limit may ever be",
                    "v": 5000,
                  },
                },
                "gasPrices": {
                  "add": {
                    "d": "Base fee of the ADD opcode",
                    "v": 3,
                  },
                  "addmod": {
                    "d": "Base fee of the ADDMOD opcode",
                    "v": 8,
                  },
                  "address": {
                    "d": "Base fee of the ADDRESS opcode",
                    "v": 2,
                  },
                  "and": {
                    "d": "Base fee of the AND opcode",
                    "v": 3,
                  },
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 20,
                  },
                  "base": {
                    "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                    "v": 2,
                  },
                  "blockhash": {
                    "d": "Base fee of the BLOCKHASH opcode",
                    "v": 20,
                  },
                  "byte": {
                    "d": "Base fee of the BYTE opcode",
                    "v": 3,
                  },
                  "call": {
                    "d": "Base fee of the CALL opcode",
                    "v": 40,
                  },
                  "callNewAccount": {
                    "d": "Paid for CALL when the destination address didn't exist prior",
                    "v": 25000,
                  },
                  "callStipend": {
                    "d": "Free gas given at beginning of call",
                    "v": 2300,
                  },
                  "callValueTransfer": {
                    "d": "Paid for CALL when the value transfor is non-zero",
                    "v": 9000,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 40,
                  },
                  "calldatacopy": {
                    "d": "Base fee of the CALLDATACOPY opcode",
                    "v": 3,
                  },
                  "calldataload": {
                    "d": "Base fee of the CALLDATALOAD opcode",
                    "v": 3,
                  },
                  "calldatasize": {
                    "d": "Base fee of the CALLDATASIZE opcode",
                    "v": 2,
                  },
                  "caller": {
                    "d": "Base fee of the CALLER opcode",
                    "v": 2,
                  },
                  "callvalue": {
                    "d": "Base fee of the CALLVALUE opcode",
                    "v": 2,
                  },
                  "codecopy": {
                    "d": "Base fee of the CODECOPY opcode",
                    "v": 3,
                  },
                  "codesize": {
                    "d": "Base fee of the CODESIZE opcode",
                    "v": 2,
                  },
                  "coinbase": {
                    "d": "Base fee of the COINBASE opcode",
                    "v": 2,
                  },
                  "copy": {
                    "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                    "v": 3,
                  },
                  "create": {
                    "d": "Base fee of the CREATE opcode",
                    "v": 32000,
                  },
                  "createData": {
                    "d": "",
                    "v": 200,
                  },
                  "difficulty": {
                    "d": "Base fee of the DIFFICULTY opcode",
                    "v": 2,
                  },
                  "div": {
                    "d": "Base fee of the DIV opcode",
                    "v": 5,
                  },
                  "dup": {
                    "d": "Base fee of the DUP opcode",
                    "v": 3,
                  },
                  "ecRecover": {
                    "d": "",
                    "v": 3000,
                  },
                  "eq": {
                    "d": "Base fee of the EQ opcode",
                    "v": 3,
                  },
                  "exp": {
                    "d": "Base fee of the EXP opcode",
                    "v": 10,
                  },
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 10,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 20,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 20,
                  },
                  "gas": {
                    "d": "Base fee of the GAS opcode",
                    "v": 2,
                  },
                  "gaslimit": {
                    "d": "Base fee of the GASLIMIT opcode",
                    "v": 2,
                  },
                  "gasprice": {
                    "d": "Base fee of the GASPRICE opcode",
                    "v": 2,
                  },
                  "gt": {
                    "d": "Base fee of the GT opcode",
                    "v": 3,
                  },
                  "identity": {
                    "d": "",
                    "v": 15,
                  },
                  "identityWord": {
                    "d": "",
                    "v": 3,
                  },
                  "invalid": {
                    "d": "Base fee of the INVALID opcode",
                    "v": 0,
                  },
                  "iszero": {
                    "d": "Base fee of the ISZERO opcode",
                    "v": 3,
                  },
                  "jump": {
                    "d": "Base fee of the JUMP opcode",
                    "v": 8,
                  },
                  "jumpdest": {
                    "d": "Base fee of the JUMPDEST opcode",
                    "v": 1,
                  },
                  "jumpi": {
                    "d": "Base fee of the JUMPI opcode",
                    "v": 10,
                  },
                  "keccak256": {
                    "d": "Base fee of the SHA3 opcode",
                    "v": 30,
                  },
                  "keccak256Word": {
                    "d": "Once per word of the SHA3 operation's data",
                    "v": 6,
                  },
                  "log": {
                    "d": "Base fee of the LOG opcode",
                    "v": 375,
                  },
                  "logData": {
                    "d": "Per byte in a LOG* operation's data",
                    "v": 8,
                  },
                  "logTopic": {
                    "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                    "v": 375,
                  },
                  "lt": {
                    "d": "Base fee of the LT opcode",
                    "v": 3,
                  },
                  "memory": {
                    "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                    "v": 3,
                  },
                  "mload": {
                    "d": "Base fee of the MLOAD opcode",
                    "v": 3,
                  },
                  "mod": {
                    "d": "Base fee of the MOD opcode",
                    "v": 5,
                  },
                  "msize": {
                    "d": "Base fee of the MSIZE opcode",
                    "v": 2,
                  },
                  "mstore": {
                    "d": "Base fee of the MSTORE opcode",
                    "v": 3,
                  },
                  "mstore8": {
                    "d": "Base fee of the MSTORE8 opcode",
                    "v": 3,
                  },
                  "mul": {
                    "d": "Base fee of the MUL opcode",
                    "v": 5,
                  },
                  "mulmod": {
                    "d": "Base fee of the MULMOD opcode",
                    "v": 8,
                  },
                  "not": {
                    "d": "Base fee of the NOT opcode",
                    "v": 3,
                  },
                  "number": {
                    "d": "Base fee of the NUMBER opcode",
                    "v": 2,
                  },
                  "or": {
                    "d": "Base fee of the OR opcode",
                    "v": 3,
                  },
                  "origin": {
                    "d": "Base fee of the ORIGIN opcode",
                    "v": 2,
                  },
                  "pc": {
                    "d": "Base fee of the PC opcode",
                    "v": 2,
                  },
                  "pop": {
                    "d": "Base fee of the POP opcode",
                    "v": 2,
                  },
                  "push": {
                    "d": "Base fee of the PUSH opcode",
                    "v": 3,
                  },
                  "quadCoeffDiv": {
                    "d": "Divisor for the quadratic particle of the memory cost equation",
                    "v": 512,
                  },
                  "return": {
                    "d": "Base fee of the RETURN opcode",
                    "v": 0,
                  },
                  "ripemd160": {
                    "d": "",
                    "v": 600,
                  },
                  "ripemd160Word": {
                    "d": "",
                    "v": 120,
                  },
                  "sdiv": {
                    "d": "Base fee of the SDIV opcode",
                    "v": 5,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 0,
                  },
                  "selfdestructRefund": {
                    "d": "Refunded following a selfdestruct operation",
                    "v": 24000,
                  },
                  "sgt": {
                    "d": "Base fee of the SGT opcode",
                    "v": 3,
                  },
                  "sha256": {
                    "d": "",
                    "v": 60,
                  },
                  "sha256Word": {
                    "d": "",
                    "v": 12,
                  },
                  "signextend": {
                    "d": "Base fee of the SIGNEXTEND opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 50,
                  },
                  "slt": {
                    "d": "Base fee of the SLT opcode",
                    "v": 3,
                  },
                  "smod": {
                    "d": "Base fee of the SMOD opcode",
                    "v": 5,
                  },
                  "sstore": {
                    "d": "Base fee of the SSTORE opcode",
                    "v": 0,
                  },
                  "sstoreRefund": {
                    "d": "Once per SSTORE operation if the zeroness changes to zero",
                    "v": 15000,
                  },
                  "sstoreReset": {
                    "d": "Once per SSTORE operation if the zeroness does not change from zero",
                    "v": 5000,
                  },
                  "sstoreSet": {
                    "d": "Once per SSTORE operation if the zeroness changes from zero",
                    "v": 20000,
                  },
                  "stop": {
                    "d": "Base fee of the STOP opcode",
                    "v": 0,
                  },
                  "sub": {
                    "d": "Base fee of the SUB opcode",
                    "v": 3,
                  },
                  "swap": {
                    "d": "Base fee of the SWAP opcode",
                    "v": 3,
                  },
                  "timestamp": {
                    "d": "Base fee of the TIMESTAMP opcode",
                    "v": 2,
                  },
                  "tx": {
                    "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                    "v": 21000,
                  },
                  "txCreation": {
                    "d": "The cost of creating a contract via tx",
                    "v": 32000,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 68,
                  },
                  "txDataZero": {
                    "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                    "v": 4,
                  },
                  "xor": {
                    "d": "Base fee of the XOR opcode",
                    "v": 3,
                  },
                },
                "name": "chainstart",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 0,
                  },
                  "difficultyBoundDivisor": {
                    "d": "The bound divisor of the difficulty, used in the update calculations",
                    "v": 2048,
                  },
                  "durationLimit": {
                    "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                    "v": 13,
                  },
                  "epochDuration": {
                    "d": "Duration between proof-of-work epochs",
                    "v": 30000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 5000000000000000000n,
                  },
                  "minimumDifficulty": {
                    "d": "The minimum that the difficulty may ever be",
                    "v": 131072,
                  },
                  "timebombPeriod": {
                    "d": "Exponential difficulty timebomb period",
                    "v": 100000,
                  },
                },
                "status": "final",
                "url": "",
                "vm": {
                  "callCreateDepth": {
                    "d": "Maximum depth of call/create stack",
                    "v": 1024,
                  },
                  "maxExtraDataSize": {
                    "d": "Maximum size extra data may be after Genesis",
                    "v": 32,
                  },
                  "stackLimit": {
                    "d": "Maximum size of VM stack allowed",
                    "v": 1024,
                  },
                },
              },
            ],
            [
              "homestead",
              {
                "comment": "Homestead hardfork with protocol and network changes",
                "gasPrices": {
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 40,
                  },
                },
                "name": "homestead",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-606",
              },
            ],
            [
              "dao",
              {
                "comment": "DAO rescue hardfork",
                "name": "dao",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-779",
              },
            ],
            [
              "tangerineWhistle",
              {
                "comment": "Hardfork with gas cost changes for IO-heavy operations",
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 400,
                  },
                  "call": {
                    "d": "Once per CALL operation & message call transaction",
                    "v": 700,
                  },
                  "callcode": {
                    "d": "Base fee of the CALLCODE opcode",
                    "v": 700,
                  },
                  "delegatecall": {
                    "d": "Base fee of the DELEGATECALL opcode",
                    "v": 700,
                  },
                  "extcodecopy": {
                    "d": "Base fee of the EXTCODECOPY opcode",
                    "v": 700,
                  },
                  "extcodesize": {
                    "d": "Base fee of the EXTCODESIZE opcode",
                    "v": 700,
                  },
                  "selfdestruct": {
                    "d": "Base fee of the SELFDESTRUCT opcode",
                    "v": 5000,
                  },
                  "sload": {
                    "d": "Once per SLOAD operation",
                    "v": 200,
                  },
                },
                "name": "tangerineWhistle",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-608",
              },
            ],
            [
              "spuriousDragon",
              {
                "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
                "gasPrices": {
                  "expByte": {
                    "d": "Times ceil(log256(exponent)) for the EXP instruction",
                    "v": 50,
                  },
                },
                "name": "spuriousDragon",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-607",
                "vm": {
                  "maxCodeSize": {
                    "d": "Maximum length of contract code",
                    "v": 24576,
                  },
                },
              },
            ],
            [
              "byzantium",
              {
                "comment": "Hardfork with new precompiles, instructions and other protocol changes",
                "gasPrices": {
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 500,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 40000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 100000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 80000,
                  },
                  "modexpGquaddivisor": {
                    "d": "Gquaddivisor from modexp precompile for gas calculation",
                    "v": 20,
                  },
                  "returndatacopy": {
                    "d": "Base fee of the RETURNDATACOPY opcode",
                    "v": 3,
                  },
                  "returndatasize": {
                    "d": "Base fee of the RETURNDATASIZE opcode",
                    "v": 2,
                  },
                  "revert": {
                    "d": "Base fee of the REVERT opcode",
                    "v": 0,
                  },
                  "staticcall": {
                    "d": "Base fee of the STATICCALL opcode",
                    "v": 700,
                  },
                },
                "name": "byzantium",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 3000000,
                  },
                  "minerReward": {
                    "d": "the amount a miner get rewarded for mining a block",
                    "v": 3000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-609",
              },
            ],
            [
              "constantinople",
              {
                "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
                "gasPrices": {
                  "create2": {
                    "d": "Base fee of the CREATE2 opcode",
                    "v": 32000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 400,
                  },
                  "netSstoreCleanGas": {
                    "d": "Once per SSTORE operation from clean non-zero",
                    "v": 5000,
                  },
                  "netSstoreClearRefund": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Once per SSTORE operation from dirty",
                    "v": 200,
                  },
                  "netSstoreInitGas": {
                    "d": "Once per SSTORE operation from clean zero",
                    "v": 20000,
                  },
                  "netSstoreNoopGas": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 200,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19800,
                  },
                  "netSstoreResetRefund": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4800,
                  },
                  "sar": {
                    "d": "Base fee of the SAR opcode",
                    "v": 3,
                  },
                  "shl": {
                    "d": "Base fee of the SHL opcode",
                    "v": 3,
                  },
                  "shr": {
                    "d": "Base fee of the SHR opcode",
                    "v": 3,
                  },
                },
                "name": "constantinople",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 5000000,
                  },
                  "minerReward": {
                    "d": "The amount a miner gets rewarded for mining a block",
                    "v": 2000000000000000000n,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1013",
              },
            ],
            [
              "petersburg",
              {
                "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
                "gasPrices": {
                  "netSstoreCleanGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreDirtyGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreInitGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreNoopGas": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetClearRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                  "netSstoreResetRefund": {
                    "d": "Removed along EIP-1283",
                    "v": null,
                  },
                },
                "name": "petersburg",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1716",
              },
            ],
            [
              "istanbul",
              {
                "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
                "gasConfig": {},
                "gasPrices": {
                  "balance": {
                    "d": "Base fee of the BALANCE opcode",
                    "v": 700,
                  },
                  "blake2Round": {
                    "d": "Gas cost per round for the Blake2 F precompile",
                    "v": 1,
                  },
                  "chainid": {
                    "d": "Base fee of the CHAINID opcode",
                    "v": 2,
                  },
                  "ecAdd": {
                    "d": "Gas costs for curve addition precompile",
                    "v": 150,
                  },
                  "ecMul": {
                    "d": "Gas costs for curve multiplication precompile",
                    "v": 6000,
                  },
                  "ecPairing": {
                    "d": "Base gas costs for curve pairing precompile",
                    "v": 45000,
                  },
                  "ecPairingWord": {
                    "d": "Gas costs regarding curve pairing precompile input length",
                    "v": 34000,
                  },
                  "extcodehash": {
                    "d": "Base fee of the EXTCODEHASH opcode",
                    "v": 700,
                  },
                  "selfbalance": {
                    "d": "Base fee of the SELFBALANCE opcode",
                    "v": 5,
                  },
                  "sload": {
                    "d": "Base fee of the SLOAD opcode",
                    "v": 800,
                  },
                  "sstoreCleanGasEIP2200": {
                    "d": "Once per SSTORE operation from clean non-zero to something else",
                    "v": 5000,
                  },
                  "sstoreCleanRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original non-zero value",
                    "v": 4200,
                  },
                  "sstoreClearRefundEIP2200": {
                    "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                    "v": 15000,
                  },
                  "sstoreDirtyGasEIP2200": {
                    "d": "Once per SSTORE operation if a dirty value is changed",
                    "v": 800,
                  },
                  "sstoreInitGasEIP2200": {
                    "d": "Once per SSTORE operation from clean zero to non-zero",
                    "v": 20000,
                  },
                  "sstoreInitRefundEIP2200": {
                    "d": "Once per SSTORE operation for resetting to the original zero value",
                    "v": 19200,
                  },
                  "sstoreNoopGasEIP2200": {
                    "d": "Once per SSTORE operation if the value doesn't change",
                    "v": 800,
                  },
                  "sstoreSentryGasEIP2200": {
                    "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                    "v": 2300,
                  },
                  "txDataNonZero": {
                    "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                    "v": 16,
                  },
                },
                "name": "istanbul",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-1679",
              },
            ],
            [
              "muirGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "name": "muirGlacier",
                "pow": {
                  "difficultyBombDelay": {
                    "d": "the amount of blocks to delay the difficulty bomb with",
                    "v": 9000000,
                  },
                },
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2384",
              },
            ],
            [
              "berlin",
              {
                "comment": "HF targeted for July 2020 following the Muir Glacier HF",
                "eips": [
                  2565,
                  2929,
                  2718,
                  2930,
                ],
                "name": "berlin",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-2070",
              },
            ],
            [
              "london",
              {
                "comment": "HF targeted for July 2021 following the Berlin fork",
                "eips": [
                  1559,
                  3198,
                  3529,
                  3541,
                ],
                "name": "london",
                "status": "final",
                "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
              },
            ],
            [
              "arrowGlacier",
              {
                "comment": "HF to delay the difficulty bomb",
                "eips": [
                  4345,
                ],
                "name": "arrowGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
              },
            ],
            [
              "grayGlacier",
              {
                "comment": "Delaying the difficulty bomb to Mid September 2022",
                "eips": [
                  5133,
                ],
                "name": "grayGlacier",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
              },
            ],
            [
              "paris",
              {
                "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
                "consensus": {
                  "algorithm": "casper",
                  "casper": {},
                  "type": "pos",
                },
                "eips": [
                  3675,
                  4399,
                ],
                "name": "paris",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
              },
            ],
            [
              "mergeForkIdTransition",
              {
                "comment": "Pre-merge hardfork to fork off non-upgraded clients",
                "eips": [],
                "name": "mergeForkIdTransition",
                "status": "final",
                "url": "https://eips.ethereum.org/EIPS/eip-3675",
              },
            ],
            [
              "shanghai",
              {
                "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
                "eips": [
                  3651,
                  3855,
                  3860,
                  4895,
                ],
                "name": "shanghai",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
              },
            ],
            [
              "cancun",
              {
                "comment": "Next feature hardfork after shanghai, includes proto-danksharding EIP 4844 blobs (still WIP hence not for production use), transient storage opcodes, parent beacon block root availability in EVM, selfdestruct only in same transaction, and blob base fee opcode",
                "eips": [
                  1153,
                  4844,
                  4788,
                  5656,
                  6780,
                  7516,
                ],
                "name": "cancun",
                "status": "final",
                "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/cancun.md",
              },
            ],
          ],
          "_activatedEIPsCache": [
            2565,
            2929,
            2718,
            2930,
            1559,
            3198,
            3529,
            3541,
            4345,
            5133,
            3675,
            4399,
            3651,
            3855,
            3860,
            4895,
            1153,
            4844,
            4788,
            5656,
            6780,
            7516,
            1559,
            4895,
            4844,
            4788,
          ],
          "_chainParams": {
            "bootstrapNodes": [
              {
                "comment": "bootnode-aws-ap-southeast-1-001",
                "id": "d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666",
                "ip": "18.138.108.67",
                "location": "ap-southeast-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-aws-us-east-1-001",
                "id": "22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de",
                "ip": "3.209.45.79",
                "location": "us-east-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-hel",
                "id": "2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc",
                "ip": "65.108.70.101",
                "location": "eu-west-1-001",
                "port": 30303,
              },
              {
                "comment": "bootnode-hetzner-fsn",
                "id": "4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052",
                "ip": "157.90.35.166",
                "location": "eu-central-1-001",
                "port": 30303,
              },
            ],
            "chainId": 10,
            "comment": "The Ethereum main chain",
            "consensus": {
              "algorithm": "ethash",
              "ethash": {},
              "type": "pow",
            },
            "defaultHardfork": "shanghai",
            "dnsNetworks": [
              "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net",
            ],
            "genesis": {
              "difficulty": 17179869184,
              "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa",
              "gasLimit": 5000,
              "nonce": "0x0000000000000042",
            },
            "hardforks": [
              {
                "block": 0,
                "forkHash": "0xfc64ec04",
                "name": "chainstart",
              },
              {
                "block": 1150000,
                "forkHash": "0x97c2c34c",
                "name": "homestead",
              },
              {
                "block": 1920000,
                "forkHash": "0x91d1f948",
                "name": "dao",
              },
              {
                "block": 2463000,
                "forkHash": "0x7a64da13",
                "name": "tangerineWhistle",
              },
              {
                "block": 2675000,
                "forkHash": "0x3edd5b10",
                "name": "spuriousDragon",
              },
              {
                "block": 4370000,
                "forkHash": "0xa00bc324",
                "name": "byzantium",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "constantinople",
              },
              {
                "block": 7280000,
                "forkHash": "0x668db0af",
                "name": "petersburg",
              },
              {
                "block": 9069000,
                "forkHash": "0x879d6e30",
                "name": "istanbul",
              },
              {
                "block": 9200000,
                "forkHash": "0xe029e991",
                "name": "muirGlacier",
              },
              {
                "block": 12244000,
                "forkHash": "0x0eb440f6",
                "name": "berlin",
              },
              {
                "block": 12965000,
                "forkHash": "0xb715077d",
                "name": "london",
              },
              {
                "block": 13773000,
                "forkHash": "0x20c327fc",
                "name": "arrowGlacier",
              },
              {
                "block": 15050000,
                "forkHash": "0xf0afd0e3",
                "name": "grayGlacier",
              },
              {
                "block": 15537394,
                "forkHash": "0xf0afd0e3",
                "name": "paris",
                "ttd": "58750000000000000000000",
              },
              {
                "block": null,
                "forkHash": null,
                "name": "mergeForkIdTransition",
              },
              {
                "block": null,
                "forkHash": "0xdce96c2d",
                "name": "shanghai",
                "timestamp": "1681338455",
              },
              {
                "block": null,
                "forkHash": "0x9f3d2254",
                "name": "cancun",
                "timestamp": "1710338135",
              },
            ],
            "name": "TevmCustom",
            "networkId": 10,
            "url": "https://ethstats.net/",
          },
          "_customChains": [],
          "_eips": [
            1559,
            4895,
            4844,
            4788,
          ],
          "_hardfork": "cancun",
          "_paramsCache": {
            "gasConfig": {
              "baseFeeMaxChangeDenominator": {
                "d": "Maximum base fee change denominator",
                "v": 8,
              },
              "blobGasPerBlob": {
                "d": "The base fee for blob gas per blob",
                "v": 131072,
              },
              "blobGasPriceUpdateFraction": {
                "d": "The denominator used in the exponential when calculating a blob gas price",
                "v": 3338477,
              },
              "elasticityMultiplier": {
                "d": "Maximum block gas target elasticity",
                "v": 2,
              },
              "gasLimitBoundDivisor": {
                "d": "The bound divisor of the gas limit, used in update calculations",
                "v": 1024,
              },
              "initialBaseFee": {
                "d": "Initial base fee on first EIP1559 block",
                "v": 1000000000,
              },
              "maxRefundQuotient": {
                "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)",
                "v": 5,
              },
              "maxblobGasPerBlock": {
                "d": "The max blob gas allowable per block",
                "v": 786432,
              },
              "minGasLimit": {
                "d": "Minimum the gas limit may ever be",
                "v": 5000,
              },
              "targetBlobGasPerBlock": {
                "d": "The target blob gas consumed per block",
                "v": 393216,
              },
            },
            "gasPrices": {
              "accessListAddressCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 2400,
              },
              "accessListStorageKeyCost": {
                "d": "Gas cost per storage key in an Access List transaction",
                "v": 1900,
              },
              "add": {
                "d": "Base fee of the ADD opcode",
                "v": 3,
              },
              "addmod": {
                "d": "Base fee of the ADDMOD opcode",
                "v": 8,
              },
              "address": {
                "d": "Base fee of the ADDRESS opcode",
                "v": 2,
              },
              "and": {
                "d": "Base fee of the AND opcode",
                "v": 3,
              },
              "balance": {
                "d": "Base fee of the BALANCE opcode",
                "v": 0,
              },
              "base": {
                "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)",
                "v": 2,
              },
              "basefee": {
                "d": "Gas cost of the BASEFEE opcode",
                "v": 2,
              },
              "blake2Round": {
                "d": "Gas cost per round for the Blake2 F precompile",
                "v": 1,
              },
              "blobbasefee": {
                "d": "Gas cost of the BLOBBASEFEE opcode",
                "v": 2,
              },
              "blobhash": {
                "d": "Base fee of the BLOBHASH opcode",
                "v": 3,
              },
              "blockhash": {
                "d": "Base fee of the BLOCKHASH opcode",
                "v": 20,
              },
              "byte": {
                "d": "Base fee of the BYTE opcode",
                "v": 3,
              },
              "call": {
                "d": "Base fee of the CALL opcode",
                "v": 0,
              },
              "callNewAccount": {
                "d": "Paid for CALL when the destination address didn't exist prior",
                "v": 25000,
              },
              "callStipend": {
                "d": "Free gas given at beginning of call",
                "v": 2300,
              },
              "callValueTransfer": {
                "d": "Paid for CALL when the value transfor is non-zero",
                "v": 9000,
              },
              "callcode": {
                "d": "Base fee of the CALLCODE opcode",
                "v": 0,
              },
              "calldatacopy": {
                "d": "Base fee of the CALLDATACOPY opcode",
                "v": 3,
              },
              "calldataload": {
                "d": "Base fee of the CALLDATALOAD opcode",
                "v": 3,
              },
              "calldatasize": {
                "d": "Base fee of the CALLDATASIZE opcode",
                "v": 2,
              },
              "caller": {
                "d": "Base fee of the CALLER opcode",
                "v": 2,
              },
              "callvalue": {
                "d": "Base fee of the CALLVALUE opcode",
                "v": 2,
              },
              "chainid": {
                "d": "Base fee of the CHAINID opcode",
                "v": 2,
              },
              "codecopy": {
                "d": "Base fee of the CODECOPY opcode",
                "v": 3,
              },
              "codesize": {
                "d": "Base fee of the CODESIZE opcode",
                "v": 2,
              },
              "coinbase": {
                "d": "Base fee of the COINBASE opcode",
                "v": 2,
              },
              "coldaccountaccess": {
                "d": "Gas cost of the first read of a given address (per transaction)",
                "v": 2600,
              },
              "coldsload": {
                "d": "Gas cost of the first read of storage from a given location (per transaction)",
                "v": 2100,
              },
              "copy": {
                "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added",
                "v": 3,
              },
              "create": {
                "d": "Base fee of the CREATE opcode",
                "v": 32000,
              },
              "create2": {
                "d": "Base fee of the CREATE2 opcode",
                "v": 32000,
              },
              "createData": {
                "d": "",
                "v": 200,
              },
              "delegatecall": {
                "d": "Base fee of the DELEGATECALL opcode",
                "v": 0,
              },
              "difficulty": {
                "d": "Base fee of the DIFFICULTY opcode",
                "v": 2,
              },
              "div": {
                "d": "Base fee of the DIV opcode",
                "v": 5,
              },
              "dup": {
                "d": "Base fee of the DUP opcode",
                "v": 3,
              },
              "ecAdd": {
                "d": "Gas costs for curve addition precompile",
                "v": 150,
              },
              "ecMul": {
                "d": "Gas costs for curve multiplication precompile",
                "v": 6000,
              },
              "ecPairing": {
                "d": "Base gas costs for curve pairing precompile",
                "v": 45000,
              },
              "ecPairingWord": {
                "d": "Gas costs regarding curve pairing precompile input length",
                "v": 34000,
              },
              "ecRecover": {
                "d": "",
                "v": 3000,
              },
              "eq": {
                "d": "Base fee of the EQ opcode",
                "v": 3,
              },
              "exp": {
                "d": "Base fee of the EXP opcode",
                "v": 10,
              },
              "expByte": {
                "d": "Times ceil(log256(exponent)) for the EXP instruction",
                "v": 50,
              },
              "extcodecopy": {
                "d": "Base fee of the EXTCODECOPY opcode",
                "v": 0,
              },
              "extcodehash": {
                "d": "Base fee of the EXTCODEHASH opcode",
                "v": 0,
              },
              "extcodesize": {
                "d": "Base fee of the EXTCODESIZE opcode",
                "v": 0,
              },
              "gas": {
                "d": "Base fee of the GAS opcode",
                "v": 2,
              },
              "gaslimit": {
                "d": "Base fee of the GASLIMIT opcode",
                "v": 2,
              },
              "gasprice": {
                "d": "Base fee of the GASPRICE opcode",
                "v": 2,
              },
              "gt": {
                "d": "Base fee of the GT opcode",
                "v": 3,
              },
              "identity": {
                "d": "",
                "v": 15,
              },
              "identityWord": {
                "d": "",
                "v": 3,
              },
              "initCodeWordCost": {
                "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract",
                "v": 2,
              },
              "invalid": {
                "d": "Base fee of the INVALID opcode",
                "v": 0,
              },
              "iszero": {
                "d": "Base fee of the ISZERO opcode",
                "v": 3,
              },
              "jump": {
                "d": "Base fee of the JUMP opcode",
                "v": 8,
              },
              "jumpdest": {
                "d": "Base fee of the JUMPDEST opcode",
                "v": 1,
              },
              "jumpi": {
                "d": "Base fee of the JUMPI opcode",
                "v": 10,
              },
              "keccak256": {
                "d": "Base fee of the SHA3 opcode",
                "v": 30,
              },
              "keccak256Word": {
                "d": "Once per word of the SHA3 operation's data",
                "v": 6,
              },
              "kzgPointEvaluationGasPrecompilePrice": {
                "d": "The fee associated with the point evaluation precompile",
                "v": 50000,
              },
              "log": {
                "d": "Base fee of the LOG opcode",
                "v": 375,
              },
              "logData": {
                "d": "Per byte in a LOG* operation's data",
                "v": 8,
              },
              "logTopic": {
                "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas",
                "v": 375,
              },
              "lt": {
                "d": "Base fee of the LT opcode",
                "v": 3,
              },
              "mcopy": {
                "d": "Base fee of the MCOPY opcode",
                "v": 3,
              },
              "memory": {
                "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL",
                "v": 3,
              },
              "minBlobGasPrice": {
                "d": "The minimum fee per blob gas",
                "v": 1,
              },
              "mload": {
                "d": "Base fee of the MLOAD opcode",
                "v": 3,
              },
              "mod": {
                "d": "Base fee of the MOD opcode",
                "v": 5,
              },
              "modexpGquaddivisor": {
                "d": "Gquaddivisor from modexp precompile for gas calculation",
                "v": 3,
              },
              "msize": {
                "d": "Base fee of the MSIZE opcode",
                "v": 2,
              },
              "mstore": {
                "d": "Base fee of the MSTORE opcode",
                "v": 3,
              },
              "mstore8": {
                "d": "Base fee of the MSTORE8 opcode",
                "v": 3,
              },
              "mul": {
                "d": "Base fee of the MUL opcode",
                "v": 5,
              },
              "mulmod": {
                "d": "Base fee of the MULMOD opcode",
                "v": 8,
              },
              "netSstoreCleanGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreDirtyGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreInitGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreNoopGas": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetClearRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "netSstoreResetRefund": {
                "d": "Removed along EIP-1283",
                "v": null,
              },
              "not": {
                "d": "Base fee of the NOT opcode",
                "v": 3,
              },
              "number": {
                "d": "Base fee of the NUMBER opcode",
                "v": 2,
              },
              "or": {
                "d": "Base fee of the OR opcode",
                "v": 3,
              },
              "origin": {
                "d": "Base fee of the ORIGIN opcode",
                "v": 2,
              },
              "pc": {
                "d": "Base fee of the PC opcode",
                "v": 2,
              },
              "pop": {
                "d": "Base fee of the POP opcode",
                "v": 2,
              },
              "prevrandao": {
                "d": "Base fee of the PREVRANDAO opcode (previously DIFFICULTY)",
                "v": 2,
              },
              "push": {
                "d": "Base fee of the PUSH opcode",
                "v": 3,
              },
              "push0": {
                "d": "Base fee of the PUSH0 opcode",
                "v": 2,
              },
              "quadCoeffDiv": {
                "d": "Divisor for the quadratic particle of the memory cost equation",
                "v": 512,
              },
              "return": {
                "d": "Base fee of the RETURN opcode",
                "v": 0,
              },
              "returndatacopy": {
                "d": "Base fee of the RETURNDATACOPY opcode",
                "v": 3,
              },
              "returndatasize": {
                "d": "Base fee of the RETURNDATASIZE opcode",
                "v": 2,
              },
              "revert": {
                "d": "Base fee of the REVERT opcode",
                "v": 0,
              },
              "ripemd160": {
                "d": "",
                "v": 600,
              },
              "ripemd160Word": {
                "d": "",
                "v": 120,
              },
              "sar": {
                "d": "Base fee of the SAR opcode",
                "v": 3,
              },
              "sdiv": {
                "d": "Base fee of the SDIV opcode",
                "v": 5,
              },
              "selfbalance": {
                "d": "Base fee of the SELFBALANCE opcode",
                "v": 5,
              },
              "selfdestruct": {
                "d": "Base fee of the SELFDESTRUCT opcode",
                "v": 5000,
              },
              "selfdestructRefund": {
                "d": "Refunded following a selfdestruct operation",
                "v": 0,
              },
              "sgt": {
                "d": "Base fee of the SGT opcode",
                "v": 3,
              },
              "sha256": {
                "d": "",
                "v": 60,
              },
              "sha256Word": {
                "d": "",
                "v": 12,
              },
              "shl": {
                "d": "Base fee of the SHL opcode",
                "v": 3,
              },
              "shr": {
                "d": "Base fee of the SHR opcode",
                "v": 3,
              },
              "signextend": {
                "d": "Base fee of the SIGNEXTEND opcode",
                "v": 5,
              },
              "simpleGasPerBlob": {
                "d": "The basic gas fee for each blob",
                "v": 12000,
              },
              "sload": {
                "d": "Base fee of the SLOAD opcode",
                "v": 0,
              },
              "slt": {
                "d": "Base fee of the SLT opcode",
                "v": 3,
              },
              "smod": {
                "d": "Base fee of the SMOD opcode",
                "v": 5,
              },
              "sstore": {
                "d": "Base fee of the SSTORE opcode",
                "v": 0,
              },
              "sstoreCleanGasEIP2200": {
                "d": "Once per SSTORE operation from clean non-zero to something else",
                "v": 2900,
              },
              "sstoreCleanRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original non-zero value",
                "v": 4900,
              },
              "sstoreClearRefundEIP2200": {
                "d": "Once per SSTORE operation for clearing an originally existing storage slot",
                "v": 4800,
              },
              "sstoreDirtyGasEIP2200": {
                "d": "Once per SSTORE operation if a dirty value is changed",
                "v": 100,
              },
              "sstoreInitGasEIP2200": {
                "d": "Once per SSTORE operation from clean zero to non-zero",
                "v": 20000,
              },
              "sstoreInitRefundEIP2200": {
                "d": "Once per SSTORE operation for resetting to the original zero value",
                "v": 19900,
              },
              "sstoreNoopGasEIP2200": {
                "d": "Once per SSTORE operation if the value doesn't change",
                "v": 100,
              },
              "sstoreRefund": {
                "d": "Once per SSTORE operation if the zeroness changes to zero",
                "v": 15000,
              },
              "sstoreReset": {
                "d": "Once per SSTORE operation if the zeroness does not change from zero",
                "v": 5000,
              },
              "sstoreSentryGasEIP2200": {
                "d": "Minimum gas required to be present for an SSTORE call, not consumed",
                "v": 2300,
              },
              "sstoreSet": {
                "d": "Once per SSTORE operation if the zeroness changes from zero",
                "v": 20000,
              },
              "staticcall": {
                "d": "Base fee of the STATICCALL opcode",
                "v": 0,
              },
              "stop": {
                "d": "Base fee of the STOP opcode",
                "v": 0,
              },
              "sub": {
                "d": "Base fee of the SUB opcode",
                "v": 3,
              },
              "swap": {
                "d": "Base fee of the SWAP opcode",
                "v": 3,
              },
              "timestamp": {
                "d": "Base fee of the TIMESTAMP opcode",
                "v": 2,
              },
              "tload": {
                "d": "Base fee of the TLOAD opcode",
                "v": 100,
              },
              "tstore": {
                "d": "Base fee of the TSTORE opcode",
                "v": 100,
              },
              "tx": {
                "d": "Per transaction. NOTE: Not payable on data of calls between transactions",
                "v": 21000,
              },
              "txCreation": {
                "d": "The cost of creating a contract via tx",
                "v": 32000,
              },
              "txDataNonZero": {
                "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions",
                "v": 16,
              },
              "txDataZero": {
                "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions",
                "v": 4,
              },
              "warmstorageread": {
                "d": "Gas cost of reading storage locations which have already loaded 'cold'",
                "v": 100,
              },
              "xor": {
                "d": "Base fee of the XOR opcode",
                "v": 3,
              },
            },
            "pow": {
              "difficultyBombDelay": {
                "d": "the amount of blocks to delay the difficulty bomb with",
                "v": 11400000,
              },
              "difficultyBoundDivisor": {
                "d": "The bound divisor of the difficulty, used in the update calculations",
                "v": 2048,
              },
              "durationLimit": {
                "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not",
                "v": 13,
              },
              "epochDuration": {
                "d": "Duration between proof-of-work epochs",
                "v": 30000,
              },
              "minerReward": {
                "d": "The amount a miner gets rewarded for mining a block",
                "v": 2000000000000000000n,
              },
              "minimumDifficulty": {
                "d": "The minimum that the difficulty may ever be",
                "v": 131072,
              },
              "timebombPeriod": {
                "d": "Exponential difficulty timebomb period",
                "v": 100000,
              },
            },
            "sharding": {
              "blobCommitmentVersionKzg": {
                "d": "The number indicated a versioned hash is a KZG commitment",
                "v": 1,
              },
              "fieldElementsPerBlob": {
                "d": "The number of field elements allowed per blob",
                "v": 4096,
              },
            },
            "vm": {
              "callCreateDepth": {
                "d": "Maximum depth of call/create stack",
                "v": 1024,
              },
              "historicalRootsLength": {
                "d": "The modulo parameter of the beaconroot ring buffer in the beaconroot statefull precompile",
                "v": 8191,
              },
              "maxCodeSize": {
                "d": "Maximum length of contract code",
                "v": 24576,
              },
              "maxExtraDataSize": {
                "d": "Maximum size extra data may be after Genesis",
                "v": 32,
              },
              "maxInitCodeSize": {
                "d": "Maximum length of initialization code when creating a contract",
                "v": 49152,
              },
              "stackLimit": {
                "d": "Maximum size of VM stack allowed",
                "v": 1024,
              },
            },
          },
          "customCrypto": {
            "kzg": {
              "blobToKzgCommitment": [Function],
              "computeBlobKzgProof": [Function],
              "freeTrustedSetup": [Function],
              "loadTrustedSetup": [Function],
              "verifyBlobKzgProof": [Function],
              "verifyBlobKzgProofBatch": [Function],
              "verifyKzgProof": [Function],
            },
          },
          "events": EventEmitter2 {
            "_events": {},
            "_eventsCount": 0,
            "_maxListeners": undefined,
            [Symbol(kCapture)]: false,
          },
        },
      },
      "v": 1n,
      "value": 0n,
    },
  ],
  "uncleHeaders": [],
  "withdrawals": [],
}
`;

exports[`getBlock should throw an error if attempting to fetch a block newer than the forked block 1`] = `[InvalidBlockError: The fetched block 122750001 has a higher block height than the forked block 122750000 but less than the latest block 122750000
This could indicate a bug in tevm as it implies a block is missing if the internal chain tried fetching it from rpc
Did you manually delete the block? If not consider opening an issue

Docs: https://tevm.sh/reference/tevm/errors/classes/invalidblockerror/
Version: 1.1.0.next-73]`;

exports[`getBlock should throw an error if the block does not exist 1`] = `[UnknownBlockError: Block number 69 does not exist

Docs: https://tevm.sh/reference/tevm/errors/classes/unknownblockerror/
Version: 1.1.0.next-73]`;

exports[`getBlock should throw an error if the block does not exist 2`] = `[UnknownBlockError: Block with hash 0x6e2b61c3625a559681df81f5d1140d26d4883537aa500a0e4cdad312032cc2e1 does not exist

Docs: https://tevm.sh/reference/tevm/errors/classes/unknownblockerror/
Version: 1.1.0.next-73]`;

exports[`getBlock should throw in a completely invalid blockTag format is passed 1`] = `[InvalidBlockError: Unknown blockid wtf

Docs: https://tevm.sh/reference/tevm/errors/classes/invalidblockerror/
Version: 1.1.0.next-73]`;
