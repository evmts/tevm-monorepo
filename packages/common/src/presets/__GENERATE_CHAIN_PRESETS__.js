// This script is used to geenrate this folder
import { promises as fs } from 'node:fs'
import path from 'node:path'
import * as chains from 'viem/chains'

const allChains = {
	abstractTestnet: chains.abstractTestnet,
	acala: chains.acala,
	ancient8: chains.ancient8,
	ancient8Sepolia: chains.ancient8Sepolia,
	anvil: chains.anvil,
	apexTestnet: chains.apexTestnet,
	arbitrum: chains.arbitrum,
	arbitrumGoerli: chains.arbitrumGoerli,
	arbitrumNova: chains.arbitrumNova,
	assetChainTestnet: chains.assetChainTestnet,
	astar: chains.astar,
	astarZkEVM: chains.astarZkEVM,
	astarZkyoto: chains.astarZkyoto,
	arbitrumSepolia: chains.arbitrumSepolia,
	areonNetwork: chains.areonNetwork,
	areonNetworkTestnet: chains.areonNetworkTestnet,
	artelaTestnet: chains.artelaTestnet,
	atletaOlympia: chains.atletaOlympia,
	aurora: chains.aurora,
	auroraTestnet: chains.auroraTestnet,
	auroria: chains.auroria,
	avalanche: chains.avalanche,
	avalancheFuji: chains.avalancheFuji,
	b3Sepolia: chains.b3Sepolia,
	b3: chains.b3,
	bahamut: chains.bahamut,
	base: chains.base,
	baseGoerli: chains.baseGoerli,
	baseSepolia: chains.baseSepolia,
	beam: chains.beam,
	beamTestnet: chains.beamTestnet,
	bearNetworkChainMainnet: chains.bearNetworkChainMainnet,
	bearNetworkChainTestnet: chains.bearNetworkChainTestnet,
	berachainTestnet: chains.berachainTestnet,
	berachainTestnetbArtio: chains.berachainTestnetbArtio,
	bevmMainnet: chains.bevmMainnet,
	bitkub: chains.bitkub,
	bitkubTestnet: chains.bitkubTestnet,
	bitTorrent: chains.bitTorrent,
	bitTorrentTestnet: chains.bitTorrentTestnet,
	blast: chains.blast,
	blastSepolia: chains.blastSepolia,
	bob: chains.bob,
	bobSepolia: chains.bobSepolia,
	boba: chains.boba,
	bobaSepolia: chains.bobaSepolia,
	botanixTestnet: chains.botanixTestnet,
	bronos: chains.bronos,
	bronosTestnet: chains.bronosTestnet,
	bsc: chains.bsc,
	bscTestnet: chains.bscTestnet,
	bscGreenfield: chains.bscGreenfield,
	btr: chains.btr,
	btrTestnet: chains.btrTestnet,
	bxn: chains.bxn,
	bxnTestnet: chains.bxnTestnet,
	canto: chains.canto,
	celo: chains.celo,
	celoAlfajores: chains.celoAlfajores,
	chiliz: chains.chiliz,
	chips: chains.chips,
	classic: chains.classic,
	confluxESpace: chains.confluxESpace,
	confluxESpaceTestnet: chains.confluxESpaceTestnet,
	coreDao: chains.coreDao,
	crab: chains.crab,
	cronos: chains.cronos,
	cronoszkEVM: chains.cronoszkEVM,
	cronoszkEVMTestnet: chains.cronoszkEVMTestnet,
	cronosTestnet: chains.cronosTestnet,
	crossbell: chains.crossbell,
	curtis: chains.curtis,
	cyber: chains.cyber,
	cyberTestnet: chains.cyberTestnet,
	darwinia: chains.darwinia,
	dchain: chains.dchain,
	dchainTestnet: chains.dchainTestnet,
	defichainEvm: chains.defichainEvm,
	defichainEvmTestnet: chains.defichainEvmTestnet,
	degen: chains.degen,
	dfk: chains.dfk,
	dodochainTestnet: chains.dodochainTestnet,
	dogechain: chains.dogechain,
	dreyerxMainnet: chains.dreyerxMainnet,
	dreyerxTestnet: chains.dreyerxTestnet,
	edgeless: chains.edgeless,
	edgelessTestnet: chains.edgelessTestnet,
	edgeware: chains.edgeware,
	edgewareTestnet: chains.edgewareTestnet,
	eon: chains.eon,
	eos: chains.eos,
	eosTestnet: chains.eosTestnet,
	etherlink: chains.etherlink,
	etherlinkTestnet: chains.etherlinkTestnet,
	evmos: chains.evmos,
	evmosTestnet: chains.evmosTestnet,
	ekta: chains.ekta,
	ektaTestnet: chains.ektaTestnet,
	fantom: chains.fantom,
	fantomSonicTestnet: chains.fantomSonicTestnet,
	fantomTestnet: chains.fantomTestnet,
	fibo: chains.fibo,
	filecoin: chains.filecoin,
	filecoinCalibration: chains.filecoinCalibration,
	filecoinHyperspace: chains.filecoinHyperspace,
	flare: chains.flare,
	flareTestnet: chains.flareTestnet,
	flowPreviewnet: chains.flowPreviewnet,
	flowMainnet: chains.flowMainnet,
	flowTestnet: chains.flowTestnet,
	fluence: chains.fluence,
	fluenceStage: chains.fluenceStage,
	fluenceTestnet: chains.fluenceTestnet,
	forma: chains.forma,
	foundry: chains.foundry,
	fraxtal: chains.fraxtal,
	fraxtalTestnet: chains.fraxtalTestnet,
	funkiMainnet: chains.funkiMainnet,
	funkiSepolia: chains.funkiSepolia,
	fuse: chains.fuse,
	fuseSparknet: chains.fuseSparknet,
	iotex: chains.iotex,
	iotexTestnet: chains.iotexTestnet,
	jbc: chains.jbc,
	jbcTestnet: chains.jbcTestnet,
	karura: chains.karura,
	gobi: chains.gobi,
	goerli: chains.goerli,
	gnosis: chains.gnosis,
	gnosisChiado: chains.gnosisChiado,
	gravity: chains.gravity,
	ham: chains.ham,
	hardhat: chains.hardhat,
	harmonyOne: chains.harmonyOne,
	hashkeyTestnet: chains.hashkeyTestnet,
	haqqMainnet: chains.haqqMainnet,
	haqqTestedge2: chains.haqqTestedge2,
	hedera: chains.hedera,
	hederaTestnet: chains.hederaTestnet,
	hederaPreviewnet: chains.hederaPreviewnet,
	holesky: chains.holesky,
	immutableZkEvm: chains.immutableZkEvm,
	immutableZkEvmTestnet: chains.immutableZkEvmTestnet,
	inEVM: chains.inEVM,
	iota: chains.iota,
	iotaTestnet: chains.iotaTestnet,
	kakarotSepolia: chains.kakarotSepolia,
	kava: chains.kava,
	kavaTestnet: chains.kavaTestnet,
	kcc: chains.kcc,
	klaytn: chains.klaytn,
	klaytnBaobab: chains.klaytnBaobab,
	kaia: chains.kaia,
	kairos: chains.kairos,
	koi: chains.koi,
	kroma: chains.kroma,
	kromaSepolia: chains.kromaSepolia,
	l3x: chains.l3x,
	l3xTestnet: chains.l3xTestnet,
	lightlinkPegasus: chains.lightlinkPegasus,
	lightlinkPhoenix: chains.lightlinkPhoenix,
	linea: chains.linea,
	lineaGoerli: chains.lineaGoerli,
	lineaSepolia: chains.lineaSepolia,
	lineaTestnet: chains.lineaTestnet,
	lisk: chains.lisk,
	liskSepolia: chains.liskSepolia,
	localhost: chains.localhost,
	lukso: chains.lukso,
	luksoTestnet: chains.luksoTestnet,
	lycan: chains.lycan,
	lyra: chains.lyra,
	mainnet: chains.mainnet,
	mandala: chains.mandala,
	manta: chains.manta,
	mantaSepoliaTestnet: chains.mantaSepoliaTestnet,
	mantaTestnet: chains.mantaTestnet,
	mantle: chains.mantle,
	mantleSepoliaTestnet: chains.mantleSepoliaTestnet,
	mantleTestnet: chains.mantleTestnet,
	merlin: chains.merlin,
	metachain: chains.metachain,
	metachainIstanbul: chains.metachainIstanbul,
	metalL2: chains.metalL2,
	meter: chains.meter,
	meterTestnet: chains.meterTestnet,
	metis: chains.metis,
	metisGoerli: chains.metisGoerli,
	mev: chains.mev,
	mevTestnet: chains.mevTestnet,
	mintSepoliaTestnet: chains.mintSepoliaTestnet,
	mode: chains.mode,
	modeTestnet: chains.modeTestnet,
	moonbaseAlpha: chains.moonbaseAlpha,
	moonbeam: chains.moonbeam,
	moonbeamDev: chains.moonbeamDev,
	moonriver: chains.moonriver,
	morphHolesky: chains.morphHolesky,
	morphSepolia: chains.morphSepolia,
	nautilus: chains.nautilus,
	neonDevnet: chains.neonDevnet,
	neonMainnet: chains.neonMainnet,
	nexi: chains.nexi,
	nexilix: chains.nexilix,
	oasys: chains.oasys,
	oasisTestnet: chains.oasisTestnet,
	okc: chains.okc,
	optimism: chains.optimism,
	optimismGoerli: chains.optimismGoerli,
	optimismSepolia: chains.optimismSepolia,
	opBNB: chains.opBNB,
	opBNBTestnet: chains.opBNBTestnet,
	oortMainnetDev: chains.oortMainnetDev,
	otimDevnet: chains.otimDevnet,
	palm: chains.palm,
	palmTestnet: chains.palmTestnet,
	playfiAlbireo: chains.playfiAlbireo,
	pgn: chains.pgn,
	pgnTestnet: chains.pgnTestnet,
	phoenix: chains.phoenix,
	plinga: chains.plinga,
	plumeTestnet: chains.plumeTestnet,
	polygon: chains.polygon,
	polygonAmoy: chains.polygonAmoy,
	polygonMumbai: chains.polygonMumbai,
	polygonZkEvm: chains.polygonZkEvm,
	polygonZkEvmCardona: chains.polygonZkEvmCardona,
	polygonZkEvmTestnet: chains.polygonZkEvmTestnet,
	pulsechain: chains.pulsechain,
	pulsechainV4: chains.pulsechainV4,
	qMainnet: chains.qMainnet,
	qTestnet: chains.qTestnet,
	real: chains.real,
	redbellyTestnet: chains.redbellyTestnet,
	redstone: chains.redstone,
	reyaNetwork: chains.reyaNetwork,
	rollux: chains.rollux,
	rolluxTestnet: chains.rolluxTestnet,
	ronin: chains.ronin,
	root: chains.root,
	rootPorcini: chains.rootPorcini,
	rootstock: chains.rootstock,
	rootstockTestnet: chains.rootstockTestnet,
	rss3: chains.rss3,
	rss3Sepolia: chains.rss3Sepolia,
	saigon: chains.saigon,
	sapphire: chains.sapphire,
	sapphireTestnet: chains.sapphireTestnet,
	satoshiVM: chains.satoshiVM,
	satoshiVMTestnet: chains.satoshiVMTestnet,
	scroll: chains.scroll,
	scrollSepolia: chains.scrollSepolia,
	sei: chains.sei,
	seiDevnet: chains.seiDevnet,
	seiTestnet: chains.seiTestnet,
	sepolia: chains.sepolia,
	shapeSepolia: chains.shapeSepolia,
	shimmer: chains.shimmer,
	shimmerTestnet: chains.shimmerTestnet,
	skaleBlockBrawlers: chains.skaleBlockBrawlers,
	skaleCalypso: chains.skaleCalypso,
	skaleCalypsoTestnet: chains.skaleCalypsoTestnet,
	skaleCryptoBlades: chains.skaleCryptoBlades,
	skaleCryptoColosseum: chains.skaleCryptoColosseum,
	skaleEuropa: chains.skaleEuropa,
	skaleEuropaTestnet: chains.skaleEuropaTestnet,
	skaleExorde: chains.skaleExorde,
	skaleHumanProtocol: chains.skaleHumanProtocol,
	skaleNebula: chains.skaleNebula,
	skaleNebulaTestnet: chains.skaleNebulaTestnet,
	skaleRazor: chains.skaleRazor,
	skaleTitan: chains.skaleTitan,
	skaleTitanTestnet: chains.skaleTitanTestnet,
	sketchpad: chains.sketchpad,
	soneiumMinato: chains.soneiumMinato,
	songbird: chains.songbird,
	songbirdTestnet: chains.songbirdTestnet,
	sophonTestnet: chains.sophonTestnet,
	spicy: chains.spicy,
	shardeumSphinx: chains.shardeumSphinx,
	shibarium: chains.shibarium,
	shibariumTestnet: chains.shibariumTestnet,
	storyTestnet: chains.storyTestnet,
	stratis: chains.stratis,
	syscoin: chains.syscoin,
	syscoinTestnet: chains.syscoinTestnet,
	taraxa: chains.taraxa,
	taiko: chains.taiko,
	taikoHekla: chains.taikoHekla,
	taikoJolnir: chains.taikoJolnir,
	taikoKatla: chains.taikoKatla,
	taikoTestnetSepolia: chains.taikoTestnetSepolia,
	taraxaTestnet: chains.taraxaTestnet,
	telcoinTestnet: chains.telcoinTestnet,
	telos: chains.telos,
	telosTestnet: chains.telosTestnet,
	tenet: chains.tenet,
	thaiChain: chains.thaiChain,
	thunderTestnet: chains.thunderTestnet,
	tron: chains.tron,
	unreal: chains.unreal,
	vechain: chains.vechain,
	wanchain: chains.wanchain,
	wanchainTestnet: chains.wanchainTestnet,
	wemix: chains.wemix,
	wemixTestnet: chains.wemixTestnet,
	xLayerTestnet: chains.xLayerTestnet,
	x1Testnet: chains.x1Testnet,
	xLayer: chains.xLayer,
	xai: chains.xai,
	xaiTestnet: chains.xaiTestnet,
	xdc: chains.xdc,
	xdcTestnet: chains.xdcTestnet,
	xrSepolia: chains.xrSepolia,
	yooldoVerse: chains.yooldoVerse,
	yooldoVerseTestnet: chains.yooldoVerseTestnet,
	zetachain: chains.zetachain,
	zetachainAthensTestnet: chains.zetachainAthensTestnet,
	zhejiang: chains.zhejiang,
	zilliqa: chains.zilliqa,
	zilliqaTestnet: chains.zilliqaTestnet,
	zkFair: chains.zkFair,
	zkFairTestnet: chains.zkFairTestnet,
	zkLinkNova: chains.zkLinkNova,
	zkLinkNovaSepoliaTestnet: chains.zkLinkNovaSepoliaTestnet,
	zksync: chains.zksync,
	zksyncInMemoryNode: chains.zksyncInMemoryNode,
	zksyncLocalNode: chains.zksyncLocalNode,
	zksyncSepoliaTestnet: chains.zksyncSepoliaTestnet,
	zora: chains.zora,
	zoraSepolia: chains.zoraSepolia,
	zoraTestnet: chains.zoraTestnet,
	zircuitTestnet: chains.zircuitTestnet,
}

/**
 * @param {string} chainName
 * @returns {string}
 */
const template = (chainName) => `import { ${chainName} as _${chainName} } from 'viem/chains'
import { createCommon } from '../createCommon.js'

/**
 * Creates a common configuration for the ${chainName} chain.
 * @type {import('../Common.js').Common}
 * @description
 * Chain ID: ${allChains[/** @type {keyof typeof allChains} */ (chainName)].id}
 * Chain Name: ${allChains[/** @type {keyof typeof allChains} */ (chainName)].name}
 * Default Block Explorer: ${allChains[/** @type {keyof typeof allChains} */ (chainName)].blockExplorers?.default?.url || 'Not specified'}
 * Default RPC URL: ${allChains[/** @type {keyof typeof allChains} */ (chainName)].rpcUrls?.default?.http[0] || 'Not specified'}
 * @example
 * import { createMemoryClient } from 'tevm'
 * import { ${chainName} } from 'tevm/common'
 * import { http } from 'tevm'
 *
 * const client = createMemoryClient({
 *   common: ${chainName},
 *   fork: {
 *     transport: http({ url: 'https://example.com' })({})
 *   },
 * })
 */
export const ${chainName} = createCommon({
	..._${chainName},
	loggingLevel: 'warn',
	eips: [],
	hardfork: 'cancun',
})
`

async function generateChainPresets() {
	for (const chainName of Object.keys(allChains)) {
		const fileName = `${chainName}.js`
		const filePath = path.join(__dirname, fileName)

		try {
			const fileContent = `// This file was auto-generated by __GENERATE_CHAIN_PRESETS__.js. Do not edit manually.\n\n${template(chainName)}`
			await fs.writeFile(filePath, fileContent)
			console.log(`Generated ${fileName}`)
		} catch (error) {
			console.error(`Error generating ${fileName}:`, error)
		}
	}
	// Generate index.ts file
	const indexContent = `// This file was auto-generated by __GENERATE_CHAIN_PRESETS__.js. Do not edit manually.

export { tevmDefault } from './tevmDefault.js'
${Object.keys(allChains)
	.map((chainName) => `export { ${chainName} } from './${chainName}.js'`)
	.join('\n')}
`

	const indexPath = path.join(__dirname, 'index.ts')
	try {
		await fs.writeFile(indexPath, indexContent)
		console.log('Generated index.ts')
	} catch (error) {
		console.error('Error generating index.ts:', error)
	}
}

generateChainPresets().then(() => console.log('All files generated successfully.'))
