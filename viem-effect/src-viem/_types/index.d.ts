export { type Abi, type Address, type Narrow, type ParseAbi, type ParseAbiItem, type ParseAbiParameter, type ParseAbiParameters, type ResolvedConfig, type TypedData, type TypedDataDomain, type TypedDataParameter, CircularReferenceError, InvalidAbiParameterError, InvalidAbiParametersError, InvalidAbiItemError, InvalidAbiTypeParameterError, InvalidFunctionModifierError, InvalidModifierError, InvalidParameterError, InvalidParenthesisError, InvalidSignatureError, InvalidStructSignatureError, SolidityProtectedKeywordError, UnknownTypeError, UnknownSignatureError, parseAbi, parseAbiItem, parseAbiParameter, parseAbiParameters, } from 'abitype';
export { getContract, type GetContractParameters, type GetContractReturnType, } from './actions/getContract.js';
export { type AddChainParameters } from './actions/wallet/addChain.js';
export { type CallParameters, type CallReturnType, } from './actions/public/call.js';
export type { CreateBlockFilterReturnType } from './actions/public/createBlockFilter.js';
export type { CreateContractEventFilterParameters, CreateContractEventFilterReturnType, } from './actions/public/createContractEventFilter.js';
export type { CreateEventFilterParameters, CreateEventFilterReturnType, } from './actions/public/createEventFilter.js';
export type { CreatePendingTransactionFilterReturnType } from './actions/public/createPendingTransactionFilter.js';
export type { DeployContractParameters, DeployContractReturnType, } from './actions/wallet/deployContract.js';
export type { DropTransactionParameters } from './actions/test/dropTransaction.js';
export type { GetAutomineReturnType } from './actions/test/getAutomine.js';
export type { EstimateContractGasParameters, EstimateContractGasReturnType, } from './actions/public/estimateContractGas.js';
export type { EstimateGasParameters, EstimateGasReturnType, } from './actions/public/estimateGas.js';
export type { EstimateFeesPerGasParameters, EstimateFeesPerGasReturnType, } from './actions/public/estimateFeesPerGas.js';
export type { EstimateMaxPriorityFeePerGasParameters, EstimateMaxPriorityFeePerGasReturnType, } from './actions/public/estimateMaxPriorityFeePerGas.js';
export type { GetAddressesReturnType } from './actions/wallet/getAddresses.js';
export type { GetBalanceParameters, GetBalanceReturnType, } from './actions/public/getBalance.js';
export type { GetBlockNumberParameters, GetBlockNumberReturnType, } from './actions/public/getBlockNumber.js';
export type { GetBlockParameters, GetBlockReturnType, } from './actions/public/getBlock.js';
export type { GetBlockTransactionCountParameters, GetBlockTransactionCountReturnType, } from './actions/public/getBlockTransactionCount.js';
export type { GetBytecodeParameters, GetBytecodeReturnType, } from './actions/public/getBytecode.js';
export type { GetChainIdReturnType } from './actions/public/getChainId.js';
export type { GetEnsAddressParameters, GetEnsAddressReturnType, } from './actions/ens/getEnsAddress.js';
export type { GetEnsNameParameters, GetEnsNameReturnType, } from './actions/ens/getEnsName.js';
export type { GetEnsResolverParameters, GetEnsResolverReturnType, } from './actions/ens/getEnsResolver.js';
export type { GetFeeHistoryParameters, GetFeeHistoryReturnType, } from './actions/public/getFeeHistory.js';
export type { GetFilterChangesParameters, GetFilterChangesReturnType, } from './actions/public/getFilterChanges.js';
export type { GetFilterLogsParameters, GetFilterLogsReturnType, } from './actions/public/getFilterLogs.js';
export type { GetGasPriceReturnType } from './actions/public/getGasPrice.js';
export type { GetLogsParameters, GetLogsReturnType, } from './actions/public/getLogs.js';
export type { GetPermissionsReturnType } from './actions/wallet/getPermissions.js';
export type { GetStorageAtParameters, GetStorageAtReturnType, } from './actions/public/getStorageAt.js';
export type { GetTransactionConfirmationsParameters, GetTransactionConfirmationsReturnType, } from './actions/public/getTransactionConfirmations.js';
export type { GetTransactionCountParameters, GetTransactionCountReturnType, } from './actions/public/getTransactionCount.js';
export type { GetTransactionParameters, GetTransactionReturnType, } from './actions/public/getTransaction.js';
export type { GetTransactionReceiptParameters, GetTransactionReceiptReturnType, } from './actions/public/getTransactionReceipt.js';
export type { ImpersonateAccountParameters } from './actions/test/impersonateAccount.js';
export type { IncreaseTimeParameters } from './actions/test/increaseTime.js';
export type { MineParameters } from './actions/test/mine.js';
export type { MulticallParameters, MulticallReturnType, } from './actions/public/multicall.js';
export type { OnBlock, OnBlockParameter, WatchBlocksParameters, WatchBlocksReturnType, } from './actions/public/watchBlocks.js';
export type { OnBlockNumberFn, OnBlockNumberParameter, WatchBlockNumberParameters, WatchBlockNumberReturnType, } from './actions/public/watchBlockNumber.js';
export type { WatchEventOnLogsFn, 
/** @deprecated - use `WatchEventOnLogsFn` instead. */
WatchEventOnLogsFn as OnLogFn, WatchEventOnLogsParameter, 
/** @deprecated - use `WatchEventOnLogsParameter` instead. */
WatchEventOnLogsParameter as OnLogParameter, WatchEventParameters, WatchEventReturnType, } from './actions/public/watchEvent.js';
export type { OnTransactionsFn, OnTransactionsParameter, WatchPendingTransactionsParameters, WatchPendingTransactionsReturnType, } from './actions/public/watchPendingTransactions.js';
export type { ReadContractParameters, ReadContractReturnType, } from './actions/public/readContract.js';
export type { ReplacementReason, ReplacementReturnType, WaitForTransactionReceiptParameters, WaitForTransactionReceiptReturnType, } from './actions/public/waitForTransactionReceipt.js';
export type { RequestAddressesReturnType } from './actions/wallet/requestAddresses.js';
export type { RequestPermissionsReturnType, RequestPermissionsParameters, } from './actions/wallet/requestPermissions.js';
export type { GetTxpoolContentReturnType } from './actions/test/getTxpoolContent.js';
export type { GetTxpoolStatusReturnType } from './actions/test/getTxpoolStatus.js';
export type { InspectTxpoolReturnType } from './actions/test/inspectTxpool.js';
export type { ResetParameters } from './actions/test/reset.js';
export type { RevertParameters } from './actions/test/revert.js';
export type { SendTransactionParameters, SendTransactionReturnType, } from './actions/wallet/sendTransaction.js';
export type { PrepareTransactionRequestParameters, PrepareTransactionRequestReturnType, 
/** @deprecated import `prepareTransactionRequest` from `viem/actions` instead. */
prepareTransactionRequest as prepareRequest, } from './actions/wallet/prepareTransactionRequest.js';
export type { SendUnsignedTransactionParameters, SendUnsignedTransactionReturnType, } from './actions/test/sendUnsignedTransaction.js';
export type { SetBalanceParameters } from './actions/test/setBalance.js';
export type { SetBlockGasLimitParameters } from './actions/test/setBlockGasLimit.js';
export type { SetBlockTimestampIntervalParameters } from './actions/test/setBlockTimestampInterval.js';
export type { SetCodeParameters } from './actions/test/setCode.js';
export type { SetCoinbaseParameters } from './actions/test/setCoinbase.js';
export type { SetIntervalMiningParameters } from './actions/test/setIntervalMining.js';
export type { SetMinGasPriceParameters } from './actions/test/setMinGasPrice.js';
export type { SetNextBlockBaseFeePerGasParameters } from './actions/test/setNextBlockBaseFeePerGas.js';
export type { SetNextBlockTimestampParameters } from './actions/test/setNextBlockTimestamp.js';
export type { SetNonceParameters } from './actions/test/setNonce.js';
export type { SetStorageAtParameters } from './actions/test/setStorageAt.js';
export type { SignMessageParameters, SignMessageReturnType, } from './actions/wallet/signMessage.js';
export type { SignTypedDataParameters, SignTypedDataReturnType, } from './actions/wallet/signTypedData.js';
export type { SimulateContractParameters, SimulateContractReturnType, } from './actions/public/simulateContract.js';
export type { StopImpersonatingAccountParameters } from './actions/test/stopImpersonatingAccount.js';
export type { SwitchChainParameters } from './actions/wallet/switchChain.js';
export type { UninstallFilterParameters, UninstallFilterReturnType, } from './actions/public/uninstallFilter.js';
export type { WatchAssetParameters, WatchAssetReturnType, } from './actions/wallet/watchAsset.js';
export type { VerifyHashParameters, VerifyHashReturnType, } from './actions/public/verifyHash.js';
export type { WatchContractEventOnLogsParameter, WatchContractEventParameters, WatchContractEventReturnType, } from './actions/public/watchContractEvent.js';
export type { WriteContractParameters, WriteContractReturnType, } from './actions/wallet/writeContract.js';
export type { Chain, ChainContract, ChainFees, ChainFormatter, 
/** @deprecated use `ChainFormatter` instead. */
ChainFormatter as Formatter, ChainFormatters, 
/** @deprecated use `ChainFormatters` instead. */
ChainFormatters as Formatters, ChainSerializers, 
/** @deprecated use `ChainSerializers` instead. */
ChainSerializers as Serializers, ExtractChainFormatterExclude, 
/** @deprecated use `ExtractChainFormatterExclude` instead. */
ExtractChainFormatterExclude as ExtractFormatterExclude, ExtractChainFormatterParameters, 
/** @deprecated use `ExtractChainFormatterParameters` instead. */
ExtractChainFormatterParameters as ExtractFormatterParameters, ExtractChainFormatterReturnType, 
/** @deprecated use `ExtractChainFormatterReturnType` instead. */
ExtractChainFormatterReturnType as ExtractFormatterReturnType, } from './types/chain.js';
export { type Client, type ClientConfig, type MulticallBatchOptions, createClient, } from './clients/createClient.js';
export { type CustomTransport, type CustomTransportConfig, custom, } from './clients/transports/custom.js';
export { type FallbackTransport, type FallbackTransportConfig, fallback, } from './clients/transports/fallback.js';
export { type HttpTransport, type HttpTransportConfig, http, } from './clients/transports/http.js';
export { type PublicClient, type PublicClientConfig, createPublicClient, } from './clients/createPublicClient.js';
export { type TestClient, type TestClientConfig, createTestClient, } from './clients/createTestClient.js';
export { type PublicActions, publicActions, } from './clients/decorators/public.js';
export { type TestActions, testActions, } from './clients/decorators/test.js';
export { type WalletActions, walletActions, } from './clients/decorators/wallet.js';
export { type Transport, type TransportConfig, createTransport, } from './clients/transports/createTransport.js';
export { type WalletClient, type WalletClientConfig, createWalletClient, } from './clients/createWalletClient.js';
export { type WebSocketTransport, type WebSocketTransportConfig, webSocket, } from './clients/transports/webSocket.js';
export { multicall3Abi } from './constants/abis.js';
export { zeroAddress } from './constants/address.js';
export { etherUnits, gweiUnits, weiUnits } from './constants/unit.js';
export { maxInt8, maxInt16, maxInt24, maxInt32, maxInt40, maxInt48, maxInt56, maxInt64, maxInt72, maxInt80, maxInt88, maxInt96, maxInt104, maxInt112, maxInt120, maxInt128, maxInt136, maxInt144, maxInt152, maxInt160, maxInt168, maxInt176, maxInt184, maxInt192, maxInt200, maxInt208, maxInt216, maxInt224, maxInt232, maxInt240, maxInt248, maxInt256, maxUint8, maxUint16, maxUint24, maxUint32, maxUint40, maxUint48, maxUint56, maxUint64, maxUint72, maxUint80, maxUint88, maxUint96, maxUint104, maxUint112, maxUint120, maxUint128, maxUint136, maxUint144, maxUint152, maxUint160, maxUint168, maxUint176, maxUint184, maxUint192, maxUint200, maxUint208, maxUint216, maxUint224, maxUint232, maxUint240, maxUint248, maxUint256, minInt8, minInt16, minInt24, minInt32, minInt40, minInt48, minInt56, minInt64, minInt72, minInt80, minInt88, minInt96, minInt104, minInt112, minInt120, minInt128, minInt136, minInt144, minInt152, minInt160, minInt168, minInt176, minInt184, minInt192, minInt200, minInt208, minInt216, minInt224, minInt232, minInt240, minInt248, minInt256, } from './constants/number.js';
export { AbiConstructorNotFoundError, AbiConstructorParamsNotFoundError, AbiDecodingDataSizeInvalidError, AbiDecodingZeroDataError, AbiEncodingArrayLengthMismatchError, AbiEncodingLengthMismatchError, AbiErrorInputsNotFoundError, AbiErrorNotFoundError, AbiErrorSignatureNotFoundError, AbiEventNotFoundError, AbiEventSignatureEmptyTopicsError, AbiEventSignatureNotFoundError, AbiFunctionNotFoundError, AbiFunctionOutputsNotFoundError, AbiFunctionSignatureNotFoundError, DecodeLogTopicsMismatch, InvalidAbiDecodingTypeError, InvalidAbiEncodingTypeError, InvalidArrayError, InvalidDefinitionTypeError, } from './errors/abi.js';
export { BaseError } from './errors/base.js';
export { BlockNotFoundError } from './errors/block.js';
export { CallExecutionError, ContractFunctionExecutionError, ContractFunctionRevertedError, ContractFunctionZeroDataError, RawContractError, } from './errors/contract.js';
export { BaseFeeScalarError, Eip1559FeesNotSupportedError, MaxFeePerGasTooLowError, } from './errors/fee.js';
export { ChainDisconnectedError, InternalRpcError, InvalidInputRpcError, InvalidParamsRpcError, InvalidRequestRpcError, JsonRpcVersionUnsupportedError, LimitExceededRpcError, MethodNotFoundRpcError, MethodNotSupportedRpcError, ParseRpcError, ProviderDisconnectedError, ProviderRpcError, type ProviderRpcErrorCode, ResourceNotFoundRpcError, ResourceUnavailableRpcError, RpcError, type RpcErrorCode, TransactionRejectedRpcError, SwitchChainError, UnauthorizedProviderError, UnknownRpcError, UnsupportedProviderMethodError, UserRejectedRequestError, } from './errors/rpc.js';
export { ChainDoesNotSupportContract, ClientChainNotConfiguredError, InvalidChainIdError, } from './errors/chain.js';
export { DataLengthTooLongError, DataLengthTooShortError, InvalidBytesBooleanError, InvalidHexBooleanError, InvalidHexValueError, OffsetOutOfBoundsError, } from './errors/encoding.js';
export { EnsAvatarUriResolutionError } from './errors/ens.js';
export { EstimateGasExecutionError } from './errors/estimateGas.js';
export { ExecutionRevertedError, FeeCapTooHighError, FeeCapTooLowError, InsufficientFundsError, IntrinsicGasTooHighError, IntrinsicGasTooLowError, NonceMaxValueError, NonceTooHighError, NonceTooLowError, TipAboveFeeCapError, TransactionTypeNotSupportedError, UnknownNodeError, } from './errors/node.js';
export { FilterTypeNotSupportedError } from './errors/log.js';
export { HttpRequestError, RpcRequestError, TimeoutError, WebSocketRequestError, } from './errors/request.js';
export { InvalidAddressError } from './errors/address.js';
export { InvalidLegacyVError, TransactionExecutionError, TransactionNotFoundError, TransactionReceiptNotFoundError, WaitForTransactionReceiptTimeoutError, } from './errors/transaction.js';
export { SizeExceedsPaddingSizeError } from './errors/data.js';
export { UrlRequiredError } from './errors/transport.js';
export type { AbiItem, ContractFunctionConfig, ContractFunctionResult, GetConstructorArgs, GetErrorArgs, GetEventArgs, GetEventArgsFromTopics, GetFunctionArgs, GetValue, InferErrorName, InferEventName, InferFunctionName, InferItemName, } from './types/contract.js';
export type { AccessList, Transaction, TransactionBase, TransactionEIP1559, TransactionEIP2930, TransactionLegacy, TransactionReceipt, TransactionRequest, TransactionRequestBase, TransactionRequestEIP1559, TransactionRequestEIP2930, TransactionRequestLegacy, TransactionSerializable, TransactionSerializableBase, TransactionSerializableEIP1559, TransactionSerializableEIP2930, TransactionSerializableLegacy, TransactionSerialized, TransactionSerializedEIP1559, TransactionSerializedEIP2930, TransactionSerializedLegacy, TransactionType, } from './types/transaction.js';
export type { Account, AccountSource, CustomSource, HDAccount, HDOptions, JsonRpcAccount, LocalAccount, PrivateKeyAccount, } from './accounts/types.js';
export type { AssetGateway, AssetGatewayUrls } from './types/ens.js';
export type { Block, BlockIdentifier, BlockNumber, BlockTag, Uncle, } from './types/block.js';
export type { ByteArray, Hash, Hex, LogTopic, Signature, SignableMessage, } from './types/misc.js';
export type { GetChain } from './types/chain.js';
export type { AddEthereumChainParameter, EIP1193EventMap, EIP1193Events, EIP1193Parameters, EIP1193Provider, EIP1193RequestFn, EIP1474Methods, ProviderRpcError as EIP1193ProviderRpcError, ProviderConnectInfo, ProviderMessage, PublicRpcSchema, NetworkSync, RpcSchema, RpcSchemaOverride, TestRpcSchema, WatchAssetParams, WalletPermissionCaveat, WalletPermission, WalletRpcSchema, } from './types/eip1193.js';
export type { FeeHistory, FeeValues, FeeValuesEIP1559, FeeValuesLegacy, FeeValuesType, } from './types/fee.js';
export type { Filter } from './types/filter.js';
export type { GetTypedDataDomain, GetTypedDataMessage, GetTypedDataPrimaryType, GetTypedDataTypes, TypedDataDefinition, } from './types/typedData.js';
export type { GetTransportConfig } from './types/transport.js';
export type { HDKey } from '@scure/bip32';
export type { Log } from './types/log.js';
export type { MulticallContract, MulticallContracts, MulticallResult, MulticallResults, } from './types/multicall.js';
export type { ParseAccount } from './types/account.js';
export type { RpcBlock, RpcBlockIdentifier, RpcBlockNumber, RpcFeeHistory, RpcFeeValues, RpcLog, RpcTransaction, RpcTransactionReceipt, RpcTransactionRequest, RpcUncle, } from './types/rpc.js';
export { labelhash } from './utils/ens/labelhash.js';
export { namehash } from './utils/ens/namehash.js';
export { type FormattedBlock, defineBlock, formatBlock, } from './utils/formatters/block.js';
export { formatLog } from './utils/formatters/log.js';
export { type DecodeAbiParametersReturnType, decodeAbiParameters, } from './utils/abi/decodeAbiParameters.js';
export { type DecodeDeployDataParameters, type DecodeDeployDataReturnType, decodeDeployData, } from './utils/abi/decodeDeployData.js';
export { type DecodeErrorResultParameters, type DecodeErrorResultReturnType, decodeErrorResult, } from './utils/abi/decodeErrorResult.js';
export { type DecodeEventLogParameters, type DecodeEventLogReturnType, decodeEventLog, } from './utils/abi/decodeEventLog.js';
export { type DecodeFunctionDataParameters, decodeFunctionData, } from './utils/abi/decodeFunctionData.js';
export { type DecodeFunctionResultParameters, type DecodeFunctionResultReturnType, decodeFunctionResult, } from './utils/abi/decodeFunctionResult.js';
export { type EncodeAbiParametersReturnType, encodeAbiParameters, } from './utils/abi/encodeAbiParameters.js';
export { type EncodeDeployDataParameters, encodeDeployData, } from './utils/abi/encodeDeployData.js';
export { type EncodeErrorResultParameters, encodeErrorResult, } from './utils/abi/encodeErrorResult.js';
export { type EncodeEventTopicsParameters, encodeEventTopics, } from './utils/abi/encodeEventTopics.js';
export { type EncodeFunctionDataParameters, encodeFunctionData, } from './utils/abi/encodeFunctionData.js';
export { type EncodeFunctionResultParameters, encodeFunctionResult, } from './utils/abi/encodeFunctionResult.js';
export { type FormattedTransaction, defineTransaction, formatTransaction, transactionType, } from './utils/formatters/transaction.js';
export { type FormattedTransactionReceipt, defineTransactionReceipt, } from './utils/formatters/transactionReceipt.js';
export { type FormattedTransactionRequest, defineTransactionRequest, formatTransactionRequest, rpcTransactionType, } from './utils/formatters/transactionRequest.js';
export { type GetAbiItemParameters, getAbiItem, } from './utils/abi/getAbiItem.js';
export { type GetContractAddressOptions, type GetCreate2AddressOptions, type GetCreateAddressOptions, getContractAddress, getCreate2Address, getCreateAddress, } from './utils/address/getContractAddress.js';
export { type GetSerializedTransactionType, getSerializedTransactionType, } from './utils/transaction/getSerializedTransactionType.js';
export { type GetTransactionType, getTransactionType, } from './utils/transaction/getTransactionType.js';
export { type HashTypedDataParameters, type HashTypedDataReturnType, hashTypedData, } from './utils/signature/hashTypedData.js';
export { hexToSignature } from './utils/signature/hexToSignature.js';
export { type RecoverAddressParameters, type RecoverAddressReturnType, recoverAddress, } from './utils/signature/recoverAddress.js';
export { type RecoverMessageAddressParameters, type RecoverMessageAddressReturnType, recoverMessageAddress, } from './utils/signature/recoverMessageAddress.js';
export { type RecoverPublicKeyParameters, type RecoverPublicKeyReturnType, recoverPublicKey, } from './utils/signature/recoverPublicKey.js';
export { type RecoverTypedDataAddressParameters, type RecoverTypedDataAddressReturnType, recoverTypedDataAddress, } from './utils/signature/recoverTypedDataAddress.js';
export { signatureToHex } from './utils/signature/signatureToHex.js';
export { type ToRlpReturnType, toRlp } from './utils/encoding/toRlp.js';
export { type VerifyMessageParameters, type VerifyMessageReturnType, verifyMessage, } from './utils/signature/verifyMessage.js';
export { type VerifyTypedDataParameters, type VerifyTypedDataReturnType, verifyTypedData, } from './utils/signature/verifyTypedData.js';
export { assertRequest } from './utils/transaction/assertRequest.js';
export { assertTransactionEIP1559, assertTransactionEIP2930, assertTransactionLegacy, } from './utils/transaction/assertTransaction.js';
export { boolToBytes, hexToBytes, numberToBytes, stringToBytes, toBytes, } from './utils/encoding/toBytes.js';
export { boolToHex, bytesToHex, numberToHex, stringToHex, toHex, } from './utils/encoding/toHex.js';
export { bytesToBigint, bytesToBool, bytesToNumber, bytesToString, fromBytes, } from './utils/encoding/fromBytes.js';
export { ccipFetch, offchainLookup, offchainLookupAbiItem, offchainLookupSignature, } from './utils/ccip.js';
export { concat, concatBytes, concatHex } from './utils/data/concat.js';
export { assertCurrentChain, defineChain } from './utils/chain.js';
export { encodePacked } from './utils/abi/encodePacked.js';
export { formatEther } from './utils/unit/formatEther.js';
export { formatGwei } from './utils/unit/formatGwei.js';
export { formatUnits } from './utils/unit/formatUnits.js';
export { fromHex, hexToBigInt, hexToBool, hexToNumber, hexToString, } from './utils/encoding/fromHex.js';
export { fromRlp } from './utils/encoding/fromRlp.js';
export { getAddress } from './utils/address/getAddress.js';
export { getContractError } from './utils/errors/getContractError.js';
export { getEventSelector } from './utils/hash/getEventSelector.js';
export { getFunctionSelector } from './utils/hash/getFunctionSelector.js';
export { hashMessage } from './utils/signature/hashMessage.js';
export { isAddress } from './utils/address/isAddress.js';
export { isAddressEqual } from './utils/address/isAddressEqual.js';
export { isBytes } from './utils/data/isBytes.js';
export { isHash } from './utils/hash/isHash.js';
export { isHex } from './utils/data/isHex.js';
export { keccak256 } from './utils/hash/keccak256.js';
export { pad, padBytes, padHex } from './utils/data/pad.js';
export { parseEther } from './utils/unit/parseEther.js';
export { parseGwei } from './utils/unit/parseGwei.js';
export { parseTransaction } from './utils/transaction/parseTransaction.js';
export { parseUnits } from './utils/unit/parseUnits.js';
export { serializeAccessList } from './utils/transaction/serializeAccessList.js';
export { serializeTransaction, type SerializeTransactionFn, } from './utils/transaction/serializeTransaction.js';
export { size } from './utils/data/size.js';
export { slice, sliceBytes, sliceHex } from './utils/data/slice.js';
export { stringify } from './utils/stringify.js';
export { trim } from './utils/data/trim.js';
export { validateTypedData, domainSeparator } from './utils/typedData.js';
//# sourceMappingURL=index.d.ts.map