{"version":3,"sources":["../src/targets.js","../src/createTsupOptions.js","../src/browser.js","../src/js.js","../src/node.js"],"names":["readFileSync","join"],"mappings":";;;;;;;;AAGA,IAAM,WAAA,GAAc,CAAC,QAAQ,CAAA,CAAA;AAI7B,IAAM,iBAAiB,CAAC,UAAA,EAAY,aAAa,QAAU,EAAA,UAAA,EAAY,SAAS,SAAS,CAAA,CAAA;AASlF,IAAM,OAAU,GAAA;AAAA;AAAA,EAEtB,EAAI,EAAA,cAAA;AAAA;AAAA,EAEJ,IAAM,EAAA,WAAA;AAAA;AAAA,EAEN,OAAS,EAAA,cAAA;AACV,CAAA,CAAA;;;ACVO,IAAM,oBAAoB,CAAC;AAAA,EACjC,KAAA,GAAQ,CAAC,cAAc,CAAA;AAAA,EACvB,MAAS,GAAA,MAAA;AAAA,EACT,MAAS,GAAA,IAAA;AAAA,EACT,MAAA,GAAS,CAAC,KAAA,EAAO,KAAK,CAAA;AACvB,CAAM,KAAA;AACL,EAAA,MAAM,EAAE,IAAA,EAAS,GAAA,IAAA,CAAK,KAAM,CAAAA,eAAA,CAAaC,SAAK,CAAA,OAAA,CAAQ,GAAI,EAAA,EAAG,cAAc,CAAA,EAAG,OAAO,CAAC,CAAA,CAAA;AAEtF,EAAO,OAAA;AAAA,IACN,IAAA;AAAA,IACA,KAAA;AAAA,IACA,MAAA;AAAA,IACA,MAAA,EAAQ,QAAQ,MAAM,CAAA;AAAA,IACtB,MAAA;AAAA,IACA,SAAW,EAAA,KAAA;AAAA,IACX,SAAW,EAAA,IAAA;AAAA,IACX,SAAW,EAAA,IAAA;AAAA,IACX,KAAO,EAAA,KAAA;AAAA,IACP,qBAAuB,EAAA,IAAA;AAAA,GACxB,CAAA;AACD,EAAA;;;AC/BO,IAAM,UAAU,iBAAkB,CAAA;AAAA,EACxC,MAAQ,EAAA,SAAA;AACT,CAAC,EAAA;;;ACFM,IAAM,KAAK,iBAAkB,CAAA;AAAA,EACnC,MAAQ,EAAA,IAAA;AACT,CAAC,EAAA;;;ACFM,IAAM,OAAO,iBAAkB,CAAA;AAAA,EACrC,MAAQ,EAAA,MAAA;AACT,CAAC","file":"index.cjs","sourcesContent":["/**\n * @type {import('tsup').Options['target']}\n */\nconst nodeTargets = ['node16']\n/**\n * @type {import('tsup').Options['target']}\n */\nconst browserTargets = ['chrome91', 'firefox90', 'edge91', 'safari15', 'ios15', 'opera77']\n\n/**\n * @typedef {'js' | 'node' | 'browser'} Target\n */\n\n/**\n * @type {Record<Target, Exclude<import('tsup').Options['target'], undefined>>}\n */\nexport const targets = {\n\t// target both node and browser applications\n\tjs: browserTargets,\n\t// target node applications\n\tnode: nodeTargets,\n\t// target browsers\n\tbrowser: browserTargets,\n}\n","import { readFileSync } from 'node:fs'\nimport { join } from 'node:path'\nimport { targets } from './targets.js'\n\n/**\n * Creates tsup options from params\n * @param {object} options\n * @param {Array<string>} [options.entry] - entry points Defaults to src/index.js\n * @param {string} [options.outDir] - output directory Defaults to dist\n * @param {import('./targets.js').Target} [options.target] - environment to target Defaults to js\n * @param {Array<'cjs' | 'esm'>} [options.format] - module format Defaults to cjs and esm\n * @returns {import('tsup').Options}\n */\nexport const createTsUpOptions = ({\n\tentry = ['src/index.js'],\n\toutDir = 'dist',\n\ttarget = 'js',\n\tformat = ['cjs', 'esm'],\n}) => {\n\tconst { name } = JSON.parse(readFileSync(join(process.cwd(), 'package.json'), 'utf-8'))\n\n\treturn {\n\t\tname,\n\t\tentry,\n\t\toutDir,\n\t\ttarget: targets[target],\n\t\tformat,\n\t\tsplitting: false,\n\t\ttreeshake: true,\n\t\tsourcemap: true,\n\t\tclean: false,\n\t\tskipNodeModulesBundle: true,\n\t}\n}\n","import { createTsUpOptions } from './createTsupOptions.js'\n\nexport const browser = createTsUpOptions({\n\ttarget: 'browser',\n})\n","import { createTsUpOptions } from './createTsupOptions.js'\n\nexport const js = createTsUpOptions({\n\ttarget: 'js',\n})\n","import { createTsUpOptions } from './createTsupOptions.js'\n\nexport const node = createTsUpOptions({\n\ttarget: 'node',\n})\n"]}