{"version":3,"sources":["../src/client/createClient.ts","../src/actions/putAccount/DEFAULT_BALANCE.js","../src/actions/putAccount/putAccountHandler.js","../src/actions/runCall/runCallHandler.js","../src/actions/contractCall/defaultCaller.js","../src/actions/contractCall/defaultGasLimit.js","../src/actions/contractCall/runContractCallHandler.js","../src/actions/putContractCode/putContractCodeHandler.js","../src/actions/runScript/runScriptHandler.js","../src/jsonrpc/contractCall/tevmContractCall.js","../src/jsonrpc/putAccount/tevmPutAccount.js","../src/jsonrpc/putContractCode/tevmPutContractCode.js","../src/jsonrpc/runCall/tevmCall.js","../src/jsonrpc/runScript/tevmScript.js","../src/jsonrpc/createJsonRpcClient.ts","../src/jsonrpc/createHttpHandler.ts","../src/stateManager/ViemStateManager.ts","../src/stateManager/Cache.ts","../src/createTevm.js"],"names":["EthjsAddress","hexToBytes","parse","stringify","toHex","http","request","createJsonRpcClient","createHttpHandler"],"mappings":"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","sourcesContent":["import type { RunContractCallAction } from '../actions/contractCall/RunContractCallAction.js'\nimport type { RunContractCallResult } from '../actions/contractCall/RunContractCallResult.js'\nimport type { PutAccountAction } from '../actions/index.js'\nimport type { PutContractCodeAction } from '../actions/putContractCode/PutContractCodeAction.js'\nimport type { RunCallAction } from '../actions/runCall/RunCallAction.js'\nimport type { RunScriptAction } from '../actions/runScript/RunScriptAction.js'\nimport type { RunScriptResult } from '../actions/runScript/RunScriptResult.js'\nimport type { TevmJsonRpcRequest } from '../jsonrpc/TevmJsonRpcRequest.js'\nimport type { BackendReturnType } from '../jsonrpc/createJsonRpcClient.js'\nimport type { TevmPutAccountResponse } from '../jsonrpc/putAccount/TevmPutAccountResponse.js'\nimport type { TevmPutContractCodeResponse } from '../jsonrpc/putContractCode/TevmPutContractCodeResponse.js'\nimport type { TevmCallResponse } from '../jsonrpc/runCall/TevmCallResponse.js'\nimport type { Abi } from 'abitype'\nimport { parse, stringify } from 'superjson'\nimport { http } from 'viem'\n\nexport type Client = {\n\trequest<T extends TevmJsonRpcRequest>(r: T): Promise<BackendReturnType<T>>\n\trunScript<\n\t\tTAbi extends Abi | readonly unknown[] = Abi,\n\t\tTFunctionName extends string = string,\n\t>(\n\t\taction: RunScriptAction<TAbi, TFunctionName>,\n\t): Promise<RunScriptResult<TAbi, TFunctionName>>\n\tputAccount(action: PutAccountAction): Promise<TevmPutAccountResponse>\n\tputContractCode(\n\t\taction: PutContractCodeAction,\n\t): Promise<TevmPutContractCodeResponse>\n\trunCall(action: RunCallAction): Promise<TevmCallResponse>\n\trunContractCall<\n\t\tTAbi extends Abi | readonly unknown[] = Abi,\n\t\tTFunctionName extends string = string,\n\t>(\n\t\taction: RunContractCallAction<TAbi, TFunctionName>,\n\t): Promise<RunContractCallResult<TAbi, TFunctionName>>\n}\n\nexport function createClient(rpcUrl: string): Client {\n\tconst httpRequest = http(rpcUrl)({})\n\n\tconst request = async <T extends TevmJsonRpcRequest>(\n\t\tr: T,\n\t): Promise<BackendReturnType<T>> => {\n\t\tconst asSuperJson = JSON.parse(stringify(r))\n\t\treturn httpRequest.request(asSuperJson)\n\t}\n\n\treturn {\n\t\trequest,\n\t\trunScript: async <\n\t\t\tTAbi extends Abi | readonly unknown[] = Abi,\n\t\t\tTFunctionName extends string = string,\n\t\t>(\n\t\t\taction: RunScriptAction<TAbi, TFunctionName>,\n\t\t): Promise<RunScriptResult<TAbi, TFunctionName>> => {\n\t\t\tconst res = await request({\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: 'tevm_script',\n\t\t\t\tparams: action as any,\n\t\t\t})\n\t\t\tconst parsedSuperjson = parse(JSON.stringify(res.result))\n\t\t\treturn parsedSuperjson as RunScriptResult<TAbi, TFunctionName>\n\t\t},\n\n\t\tputAccount: async (\n\t\t\taction: PutAccountAction,\n\t\t): Promise<TevmPutAccountResponse> => {\n\t\t\tconst res = await request({\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: 'tevm_putAccount',\n\t\t\t\tparams: action as any,\n\t\t\t})\n\t\t\tconst parsedSuperjson = parse(JSON.stringify(res.result))\n\t\t\treturn parsedSuperjson as TevmPutAccountResponse\n\t\t},\n\n\t\tputContractCode: async (\n\t\t\taction: PutContractCodeAction,\n\t\t): Promise<TevmPutContractCodeResponse> => {\n\t\t\tconst res = await request({\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: 'tevm_putContractCode',\n\t\t\t\tparams: action as any,\n\t\t\t})\n\t\t\tconst parsedSuperjson = parse(JSON.stringify(res.result))\n\t\t\treturn parsedSuperjson as TevmPutContractCodeResponse\n\t\t},\n\n\t\trunCall: async (action: RunCallAction): Promise<TevmCallResponse> => {\n\t\t\tconst res = await request({\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: 'tevm_call',\n\t\t\t\tparams: action as any,\n\t\t\t})\n\t\t\tconst parsedSuperjson = parse(JSON.stringify(res.result))\n\t\t\treturn parsedSuperjson as TevmCallResponse\n\t\t},\n\n\t\trunContractCall: async <\n\t\t\tTAbi extends Abi | readonly unknown[] = Abi,\n\t\t\tTFunctionName extends string = string,\n\t\t>(\n\t\t\taction: RunContractCallAction<TAbi, TFunctionName>,\n\t\t): Promise<RunContractCallResult<TAbi, TFunctionName>> => {\n\t\t\tconst res = await request({\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tmethod: 'tevm_contractCall',\n\t\t\t\tparams: action as any,\n\t\t\t})\n\t\t\tconst parsedSuperjson = parse(JSON.stringify(res.result))\n\t\t\treturn parsedSuperjson as RunContractCallResult<TAbi, TFunctionName>\n\t\t},\n\t}\n}\n","import { parseEther } from 'viem'\n\nexport const DEFAULT_BALANCE = parseEther('1000')\n","import { DEFAULT_BALANCE } from './DEFAULT_BALANCE.js'\nimport {\n\tAccount as EthjsAccount,\n\tAddress as EthjsAddress,\n} from '@ethereumjs/util'\nimport { hexToBytes } from 'viem'\n\n/**\n * @param {import(\"../../Tevm.js\").Tevm} tevm\n * @param {import(\"./PutAccountAction.js\").PutAccountAction} action\n * @returns {Promise<import(\"./PutAccountResult.js\").PutAccountResult>}\n */\nexport const putAccountHandler = async (\n\ttevm,\n\t{ account, balance = DEFAULT_BALANCE },\n) => {\n\tconst address = new EthjsAddress(hexToBytes(account))\n\tawait tevm._evm.stateManager.putAccount(\n\t\taddress,\n\t\tnew EthjsAccount(BigInt(0), balance),\n\t)\n\tconst out = await tevm._evm.stateManager.getAccount(address)\n\tif (!out) {\n\t\tthrow new Error('Account not successfuly put')\n\t}\n\treturn out\n}\n","import { Address as EthjsAddress } from '@ethereumjs/util'\nimport { hexToBytes, maxInt256 } from 'viem'\n\n/**\n * Executes a call on the vm\n * @param {import(\"../../Tevm.js\").Tevm} tevm\n * @param {import(\"./RunCallAction.js\").RunCallAction} action\n * @returns {Promise<import(\"./RunCallResponse.js\").RunCallResponse>}\n */\nexport const runCallHandler = async (tevm, action) => {\n\treturn tevm._evm.runCall({\n\t\t...(action.to && {\n\t\t\tto: new EthjsAddress(hexToBytes(action.to)),\n\t\t}),\n\t\tcaller: new EthjsAddress(hexToBytes(action.caller)),\n\t\tgasLimit: action.gasLimit ?? maxInt256,\n\t\tdata: hexToBytes(action.data),\n\t\tvalue: action.value ?? 0n,\n\t\t...(action.origin && {\n\t\t\torigin: new EthjsAddress(hexToBytes(action.origin)),\n\t\t}),\n\t})\n}\n","export const defaultCaller = '0x0000000000000000000000000000000000000000'\n","export const defaultGasLimit = BigInt(0xfffffffffffff)\n","import { putAccountHandler } from '../putAccount/putAccountHandler.js'\nimport { runCallHandler } from '../runCall/runCallHandler.js'\nimport { defaultCaller } from './defaultCaller.js'\nimport { defaultGasLimit } from './defaultGasLimit.js'\nimport { Address } from '@ethereumjs/util'\nimport { decodeFunctionResult, encodeFunctionData, toHex } from 'viem'\n\nexport class ContractDoesNotExistError extends Error {\n\t/**\n\t * @type {'ContractDoesNotExistError'}\n\t * @override\n\t */\n\tname = 'ContractDoesNotExistError'\n\t/**\n\t * @type {'ContractDoesNotExistError'}\n\t */\n\t_tag = 'ContractDoesNotExistError'\n\n\t/**\n\t * @param {string} contractAddress\n\t */\n\tconstructor(contractAddress) {\n\t\tsuper(\n\t\t\t`Contract ${contractAddress} does not exist because no bytecode was found at the address`,\n\t\t)\n\t}\n}\n\n/**\n * @type {import(\"./RunContractCallHandlerGeneric.js\").RunContractCallHandlerGeneric}\n */\nexport const runContractCallHandler = async (\n\ttevm,\n\t{\n\t\tabi,\n\t\targs,\n\t\tfunctionName,\n\t\tcaller = defaultCaller,\n\t\tcontractAddress,\n\t\tgasLimit = defaultGasLimit,\n\t},\n) => {\n\tif (caller === defaultCaller) {\n\t\tawait putAccountHandler(tevm, {\n\t\t\taccount: defaultCaller,\n\t\t\tbalance: BigInt(0x11111111),\n\t\t})\n\t}\n\n\t// check early if contract exists\n\tconst contract = await tevm._evm.stateManager.getContractCode(\n\t\tAddress.fromString(contractAddress),\n\t)\n\tif (contract.length === 0) {\n\t\tthrow new ContractDoesNotExistError(contractAddress)\n\t}\n\n\tconst result = await runCallHandler(tevm, {\n\t\tto: contractAddress,\n\t\tcaller: caller,\n\t\torigin: caller,\n\t\t// pass lots of gas\n\t\tgasLimit,\n\t\tdata: encodeFunctionData(\n\t\t\t/** @type {any} */ ({\n\t\t\t\tabi,\n\t\t\t\tfunctionName,\n\t\t\t\targs,\n\t\t\t}),\n\t\t),\n\t})\n\n\tif (result.execResult.exceptionError) {\n\t\t// TODO Return the error instead of throwing\n\t\tthrow result.execResult.exceptionError\n\t}\n\n\treturn {\n\t\tgasUsed: result.execResult.executionGasUsed,\n\t\tlogs: result.execResult.logs ?? [],\n\t\tdata: decodeFunctionResult(\n\t\t\t/** @type any */ ({\n\t\t\t\tabi,\n\t\t\t\tdata: toHex(result.execResult.returnValue),\n\t\t\t\tfunctionName,\n\t\t\t}),\n\t\t),\n\t}\n}\n","import { Address as EthjsAddress } from '@ethereumjs/util'\nimport { hexToBytes } from 'viem'\n\n/**\n * @param {import(\"../../Tevm.js\").Tevm} tevm\n * @param {import(\"./PutContractCodeAction.js\").PutContractCodeAction} action\n * @returns {Promise<import(\"./PutContractCodeResult.js\").PutContractCodeResult>}\n */\nexport const putContractCodeHandler = async (tevm, action) => {\n\tconst ethAddress = new EthjsAddress(hexToBytes(action.contractAddress))\n\tawait tevm._evm.stateManager.putContractCode(\n\t\tethAddress,\n\t\thexToBytes(action.deployedBytecode),\n\t)\n\treturn tevm._evm.stateManager.getContractCode(ethAddress)\n}\n","import { runContractCallHandler } from '../contractCall/runContractCallHandler.js'\nimport { putContractCodeHandler } from '../putContractCode/putContractCodeHandler.js'\n\n/**\n * @type {import(\"./RunScriptHandlerGeneric.js\").RunScriptHandler}\n */\nexport const runScriptHandler = async (\n\ttevm,\n\t{ deployedBytecode, args, abi, caller, functionName },\n) => {\n\tconst contractAddress = '0x00000000000000000000000000000000000000ff'\n\tawait putContractCodeHandler(tevm, {\n\t\tcontractAddress: '0x00000000000000000000000000000000000000ff',\n\t\tdeployedBytecode,\n\t})\n\treturn runContractCallHandler(\n\t\ttevm,\n\t\t/** @type {any} */ ({\n\t\t\tfunctionName,\n\t\t\tcaller,\n\t\t\targs,\n\t\t\tcontractAddress,\n\t\t\tabi,\n\t\t}),\n\t)\n}\n","import { runContractCallHandler } from '../../actions/contractCall/runContractCallHandler.js'\n\n/**\n * @type {import(\"./TevmContractCallGeneric.js\").TevmContractCallGeneric}\n */\nexport const tevmContractCall = async (vm, request) => {\n\treturn {\n\t\tjsonrpc: '2.0',\n\t\tresult: await runContractCallHandler(vm, request.params),\n\t\tmethod: 'tevm_contractCall',\n\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t}\n}\n","import { putAccountHandler } from '../../actions/putAccount/putAccountHandler.js'\n\n/**\n * @param {import('../../Tevm.js').Tevm} vm\n * @param {import('./TevmPutAccountRequest.js').TevmPutAccountRequest} request\n * @returns {Promise<import('./TevmPutAccountResponse.js').TevmPutAccountResponse>}\n */\nexport const tevmPutAccount = async (vm, request) => {\n\treturn {\n\t\tjsonrpc: '2.0',\n\t\tresult: await putAccountHandler(vm, request.params),\n\t\tmethod: 'tevm_putAccount',\n\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t}\n}\n","import { putContractCodeHandler } from '../../actions/putContractCode/putContractCodeHandler.js'\n\n/**\n * @param {import('../../Tevm.js').Tevm} vm\n * @param {import('./TevmPutContractCodeRequest.js').TevmPutContractCodeRequest} request\n * @returns {Promise<import('./TevmPutContractCodeResponse.js').TevmPutContractCodeResponse>}\n */\nexport const tevmPutContractCode = async (vm, request) => {\n\treturn {\n\t\tjsonrpc: '2.0',\n\t\tresult: await putContractCodeHandler(vm, request.params),\n\t\tmethod: 'tevm_putContractCode',\n\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t}\n}\n","import { runCallHandler } from '../../actions/runCall/runCallHandler.js'\n\n/**\n * @param {import('../../Tevm.js').Tevm} vm\n * @param {import('./TevmCallRequest.js').TevmCallRequest} request\n * @returns {Promise<import('./TevmCallResponse.js').TevmCallResponse>}\n */\nexport const tevmCall = async (vm, request) => {\n\treturn {\n\t\tjsonrpc: '2.0',\n\t\tresult: await runCallHandler(vm, request.params),\n\t\tmethod: 'tevm_call',\n\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t}\n}\n","import { runScriptHandler } from '../../actions/runScript/runScriptHandler.js'\n\n/**\n * @type {import(\"./TevmScriptGeneric.js\").TevmScriptGeneric}\n */\nexport const tevmScript = async (vm, request) => {\n\treturn {\n\t\tjsonrpc: '2.0',\n\t\tresult: await runScriptHandler(vm, request.params),\n\t\tmethod: 'tevm_script',\n\t\t...(request.id === undefined ? {} : { id: request.id }),\n\t}\n}\n","import type { Tevm } from '../Tevm.js'\nimport type {\n\tNonVerboseTevmJsonRpcRequest,\n\tTevmJsonRpcRequest,\n} from './TevmJsonRpcRequest.js'\nimport type { TevmContractCallResponse } from './contractCall/TevmContractCallResponse.js'\nimport {\n\ttevmCall,\n\ttevmContractCall,\n\ttevmPutAccount,\n\ttevmPutContractCode,\n\ttevmScript,\n} from './index.js'\nimport type { TevmPutAccountResponse } from './putAccount/TevmPutAccountResponse.js'\nimport type { TevmPutContractCodeResponse } from './putContractCode/TevmPutContractCodeResponse.js'\nimport type { TevmCallResponse } from './runCall/TevmCallResponse.js'\nimport type { TevmScriptResponse } from './runScript/TevmScriptResponse.js'\n\nexport class UnknownMethodError extends Error {\n\toverride name = 'UnknownMethodError'\n\t_tag = 'UnknownMethodError'\n\tconstructor(request: never) {\n\t\tsuper(`Unknown method in request: ${JSON.stringify(request)}`)\n\t}\n}\n\nexport type BackendReturnType<T extends NonVerboseTevmJsonRpcRequest> =\n\tT extends {\n\t\tmethod: 'tevm_call'\n\t}\n\t\t? TevmCallResponse\n\t\t: T extends { method: 'tevm_contractCall' }\n\t\t? TevmContractCallResponse<\n\t\t\t\tT['params']['abi'],\n\t\t\t\tT['params']['functionName'] & string\n\t\t  >\n\t\t: T extends { method: 'tevm_putAccount' }\n\t\t? TevmPutAccountResponse\n\t\t: T extends { method: 'tevm_putContractCode' }\n\t\t? TevmPutContractCodeResponse\n\t\t: T extends { method: 'tevm_script' }\n\t\t? TevmScriptResponse<\n\t\t\t\tT['params']['abi'],\n\t\t\t\tT['params']['functionName'] & string\n\t\t  >\n\t\t: never\n\n/**\n * Creates a vanillajs jsonrpc handler for tevm requests\n * Infers return type from request\n * @example\n * ```typescript\n * const handler = createJsonrpcClient(tevm)\n * const res = await handler({\n *  jsonrpc: '2.0',\n *  id: '1',\n *  method: 'tevm_call',\n *  params: {\n *    to: '0x000000000'\n *  }\n * })\n * ```\n */\nexport const createJsonRpcClient = (tevm: Tevm) => {\n\treturn <TRequest extends TevmJsonRpcRequest>(\n\t\trequest: TRequest,\n\t): Promise<BackendReturnType<TRequest>> => {\n\t\tswitch (request.method) {\n\t\t\tcase 'tevm_call':\n\t\t\t\treturn tevmCall(tevm, request) as Promise<BackendReturnType<TRequest>>\n\t\t\tcase 'tevm_contractCall':\n\t\t\t\treturn tevmContractCall(tevm, request) as Promise<\n\t\t\t\t\tBackendReturnType<TRequest>\n\t\t\t\t>\n\t\t\tcase 'tevm_putAccount':\n\t\t\t\treturn tevmPutAccount(tevm, request) as Promise<\n\t\t\t\t\tBackendReturnType<TRequest>\n\t\t\t\t>\n\t\t\tcase 'tevm_putContractCode':\n\t\t\t\treturn tevmPutContractCode(tevm, request) as Promise<\n\t\t\t\t\tBackendReturnType<TRequest>\n\t\t\t\t>\n\t\t\tcase 'tevm_script':\n\t\t\t\treturn tevmScript(tevm, request) as Promise<BackendReturnType<TRequest>>\n\t\t\tdefault:\n\t\t\t\tthrow new UnknownMethodError(request)\n\t\t}\n\t}\n}\n\nexport type JsonRpcClient = ReturnType<typeof createJsonRpcClient>\n","import type { Tevm } from '../Tevm.js'\nimport type { TevmJsonRpcRequest } from '../jsonrpc/TevmJsonRpcRequest.js'\nimport { createJsonRpcClient } from './createJsonRpcClient.js'\nimport type { IncomingMessage, ServerResponse } from 'http'\nimport { parse, stringify } from 'superjson'\n\n/**\n * Creates an http request handler for tevm requests\n */\nexport function createHttpHandler(tevm: Tevm) {\n\tconst client = createJsonRpcClient(tevm)\n\treturn async (req: IncomingMessage, res: ServerResponse) => {\n\t\tlet body = ''\n\n\t\treq.on('data', (chunk) => {\n\t\t\tbody += chunk.toString()\n\t\t})\n\n\t\treq.on('end', () => {\n\t\t\tlet jsonBody: TevmJsonRpcRequest\n\t\t\ttry {\n\t\t\t\tconst raw = JSON.parse(body)\n\t\t\t\tif (!raw.method.startsWith('tevm_')) {\n\t\t\t\t\tif (!tevm.forkUrl) {\n\t\t\t\t\t\tres.writeHead(404, { 'Content-Type': 'application/json' })\n\t\t\t\t\t\tconst error = {\n\t\t\t\t\t\t\tid: raw.id,\n\t\t\t\t\t\t\tmethod: raw.method,\n\t\t\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\t\tcode: 404,\n\t\t\t\t\t\t\t\tmessage: 'Invalid jsonrpc request: Fork url not set',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t\tres.end(JSON.stringify(error))\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t\tfetch(tevm.forkUrl, {\n\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\tbody: JSON.stringify(raw),\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t},\n\t\t\t\t\t}).then((response) => {\n\t\t\t\t\t\tres.writeHead(\n\t\t\t\t\t\t\tresponse.status,\n\t\t\t\t\t\t\tObject.fromEntries(response.headers.entries()),\n\t\t\t\t\t\t)\n\t\t\t\t\t\tres.end(response.body)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tjsonBody = { ...raw, params: raw.params && parse(raw.params) }\n\t\t\t} catch (e) {\n\t\t\t\tres.writeHead(500, { 'Content-Type': 'application/json' })\n\t\t\t\tconst error = {\n\t\t\t\t\tid: 'unknown',\n\t\t\t\t\tmethod: 'unknown',\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: 500,\n\t\t\t\t\t\tmessage: 'Invalid jsonrpc request: Unable to parse json',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tres.end(JSON.stringify(error))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// Verify if it's a valid JSON RPC 2.0 request\n\t\t\tif (jsonBody.jsonrpc !== '2.0') {\n\t\t\t\tres.writeHead(500, { 'Content-Type': 'application/json' })\n\t\t\t\tconst error = {\n\t\t\t\t\tid: 'unknown',\n\t\t\t\t\tmethod: 'unknown',\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: 500,\n\t\t\t\t\t\tmessage: `Invalid jsonrpc request: Invalid schema ${jsonBody.jsonrpc}`,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tres.end(JSON.stringify(error))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\t(jsonBody.method as string) === '' ||\n\t\t\t\ttypeof jsonBody.method !== 'string'\n\t\t\t) {\n\t\t\t\tres.writeHead(500, { 'Content-Type': 'application/json' })\n\t\t\t\tconst error = {\n\t\t\t\t\tid: 'unknown',\n\t\t\t\t\tmethod: 'unknown',\n\t\t\t\t\tjsonrpc: '2.0',\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: 500,\n\t\t\t\t\t\tmessage: 'Invalid jsonrpc request',\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t\tres.end(JSON.stringify(error))\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tclient(jsonBody)\n\t\t\t\t.then((result) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tres.writeHead(200, { 'Content-Type': 'application/json' })\n\t\t\t\t\t\tres.end(stringify(result))\n\t\t\t\t\t\treturn\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tres.writeHead(500, { 'Content-Type': 'application/json' })\n\t\t\t\t\t\tconst error = {\n\t\t\t\t\t\t\tid: jsonBody.id,\n\t\t\t\t\t\t\tmethod: jsonBody.method,\n\t\t\t\t\t\t\tjsonrpc: jsonBody.jsonrpc,\n\t\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\t\tcode: 500,\n\t\t\t\t\t\t\t\tmessage: 'Internal server error',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t\tres.end(JSON.stringify(error))\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((e: Error) => {\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tres.writeHead(500, { 'Content-Type': 'application/json' })\n\t\t\t\t\tconst error = {\n\t\t\t\t\t\tid: jsonBody.id,\n\t\t\t\t\t\tmethod: jsonBody.method,\n\t\t\t\t\t\tjsonrpc: jsonBody.jsonrpc,\n\t\t\t\t\t\terror: {\n\t\t\t\t\t\t\tcode: 404,\n\t\t\t\t\t\t\tmessage: `Request method ${jsonBody.method} not supported`,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t\tres.end(JSON.stringify(error))\n\t\t\t\t\treturn\n\t\t\t\t})\n\t\t})\n\t}\n}\n","import { Trie } from '@ethereumjs/trie'\nimport { Account } from '@ethereumjs/util'\nimport { debug as createDebugLogger } from 'debug'\nimport { keccak256 } from 'ethereum-cryptography/keccak.js'\n\nimport { AccountCache, CacheType, StorageCache } from '@ethereumjs/statemanager'\n\nimport { Cache } from './Cache.js'\nimport type {\n\tAccountFields,\n\tEVMStateManagerInterface,\n\tStorageDump,\n} from '@ethereumjs/common'\nimport type { StorageRange } from '@ethereumjs/common'\nimport type { Proof } from '@ethereumjs/statemanager'\nimport type { Address as EthjsAddress } from '@ethereumjs/util'\nimport type { Address } from 'abitype'\nimport type { Debugger } from 'debug'\nimport {\n\ttype BlockTag,\n\ttype PublicClient,\n\tbytesToHex,\n\thexToBytes,\n\ttoBytes,\n\ttoHex,\n} from 'viem'\n\nexport interface ViemStateManagerOpts {\n\tclient: PublicClient\n\tblockTag: bigint | 'earliest'\n}\n\n/**\n * A state manager that will fetch state from rpc using a viem public client and cache it for\n *f future requests\n */\nexport class ViemStateManager implements EVMStateManagerInterface {\n\tprotected _contractCache: Map<string, Uint8Array>\n\tprotected _storageCache: StorageCache\n\tprotected _blockTag: { blockTag: BlockTag } | { blockNumber: bigint }\n\tprotected _accountCache: AccountCache\n\toriginalStorageCache: Cache\n\tprotected _debug: Debugger\n\tprotected DEBUG: boolean\n\tprotected client: PublicClient\n\tconstructor(opts: ViemStateManagerOpts) {\n\t\tthis.DEBUG = false\n\n\t\tthis.client = opts.client\n\t\tthis._debug = createDebugLogger('statemanager:viemStateManager')\n\t\tthis._blockTag =\n\t\t\topts.blockTag === 'earliest'\n\t\t\t\t? { blockTag: opts.blockTag }\n\t\t\t\t: { blockNumber: opts.blockTag }\n\n\t\tthis._contractCache = new Map()\n\t\tthis._storageCache = new StorageCache({\n\t\t\tsize: 100000,\n\t\t\ttype: CacheType.ORDERED_MAP,\n\t\t})\n\t\tthis._accountCache = new AccountCache({\n\t\t\tsize: 100000,\n\t\t\ttype: CacheType.ORDERED_MAP,\n\t\t})\n\n\t\tthis.originalStorageCache = new Cache(this.getContractStorage.bind(this))\n\t}\n\n\t/**\n\t * Returns a new instance of the ViemStateManager with the same opts\n\t */\n\tshallowCopy(): ViemStateManager {\n\t\tconst newState = new ViemStateManager({\n\t\t\tclient: this.client,\n\t\t\tblockTag: Object.values(this._blockTag)[0],\n\t\t})\n\t\tnewState._contractCache = new Map(this._contractCache)\n\t\tnewState._storageCache = new StorageCache({\n\t\t\tsize: 100000,\n\t\t\ttype: CacheType.ORDERED_MAP,\n\t\t})\n\t\tnewState._accountCache = new AccountCache({\n\t\t\tsize: 100000,\n\t\t\ttype: CacheType.ORDERED_MAP,\n\t\t})\n\t\treturn newState\n\t}\n\n\t/**\n\t * Sets the new block tag and clears the internal cache\n\t */\n\tsetBlockTag(blockTag: bigint | 'earliest'): void {\n\t\tthis._blockTag =\n\t\t\tblockTag === 'earliest' ? { blockTag } : { blockNumber: blockTag }\n\t\tthis.clearCaches()\n\t\tif (this.DEBUG) {\n\t\t\tthis._debug(`setting block tag to ${this._blockTag}`)\n\t\t}\n\t}\n\n\t/**\n\t * Resets all internal caches\n\t */\n\tclearCaches(): void {\n\t\tthis._contractCache.clear()\n\t\tthis._storageCache.clear()\n\t\tthis._accountCache.clear()\n\t}\n\n\t/**\n\t * Gets the code corresponding to the provided `address`.\n\t * @param address - Address to get the `code` for\n\t * @returns {Promise<Uint8Array>} - Resolves with the code corresponding to the provided address.\n\t * Returns an empty `Uint8Array` if the account has no associated code.\n\t */\n\tasync getContractCode(address: EthjsAddress): Promise<Uint8Array> {\n\t\tlet codeBytes = this._contractCache.get(address.toString())\n\t\tif (codeBytes !== undefined) return codeBytes\n\t\tconst code = await this.client.getBytecode({\n\t\t\taddress: address.toString() as Address,\n\t\t\t...this._blockTag,\n\t\t})\n\t\tcodeBytes = hexToBytes(code ?? '0x0')\n\t\tthis._contractCache.set(address.toString(), codeBytes)\n\t\treturn codeBytes\n\t}\n\n\t/**\n\t * Adds `value` to the state trie as code, and sets `codeHash` on the account\n\t * corresponding to `address` to reference this.\n\t * @param address - Address of the `account` to add the `code` for\n\t * @param value - The value of the `code`\n\t */\n\tasync putContractCode(\n\t\taddress: EthjsAddress,\n\t\tvalue: Uint8Array,\n\t): Promise<void> {\n\t\t// Store contract code in the cache\n\t\tthis._contractCache.set(address.toString(), value)\n\t}\n\n\t/**\n\t * Gets the storage value associated with the provided `address` and `key`. This method returns\n\t * the shortest representation of the stored value.\n\t * @param address - Address of the account to get the storage for\n\t * @param key - Key in the account's storage to get the value for. Must be 32 bytes long.\n\t * @returns {Uint8Array} - The storage value for the account\n\t * corresponding to the provided address at the provided key.\n\t * If this does not exist an empty `Uint8Array` is returned.\n\t */\n\tasync getContractStorage(\n\t\taddress: EthjsAddress,\n\t\tkey: Uint8Array,\n\t): Promise<Uint8Array> {\n\t\t// Check storage slot in cache\n\t\tif (key.length !== 32) {\n\t\t\tthrow new Error('Storage key must be 32 bytes long')\n\t\t}\n\n\t\tconst cachedValue = this._storageCache?.get(address, key)\n\t\tif (cachedValue !== undefined) {\n\t\t\treturn cachedValue\n\t\t}\n\n\t\tconst storage = await this.client.getStorageAt({\n\t\t\taddress: address.toString() as Address,\n\t\t\tslot: bytesToHex(key),\n\t\t\t...this._blockTag,\n\t\t})\n\t\tconst value = hexToBytes(storage ?? '0x0')\n\n\t\tawait this.putContractStorage(address, key, value)\n\n\t\treturn value\n\t}\n\n\t/**\n\t * Adds value to the cache for the `account`\n\t * corresponding to `address` at the provided `key`.\n\t * @param address - Address to set a storage value for\n\t * @param key - Key to set the value at. Must be 32 bytes long.\n\t * @param value - Value to set at `key` for account corresponding to `address`.\n\t * Cannot be more than 32 bytes. Leading zeros are stripped.\n\t * If it is empty or filled with zeros, deletes the value.\n\t */\n\tasync putContractStorage(\n\t\taddress: EthjsAddress,\n\t\tkey: Uint8Array,\n\t\tvalue: Uint8Array,\n\t): Promise<void> {\n\t\tthis._storageCache.put(address, key, value)\n\t}\n\n\t/**\n\t * Clears all storage entries for the account corresponding to `address`.\n\t * @param address - Address to clear the storage of\n\t */\n\tasync clearContractStorage(address: EthjsAddress): Promise<void> {\n\t\tthis._storageCache.clearContractStorage(address)\n\t}\n\n\t/**\n\t * Dumps the RLP-encoded storage values for an `account` specified by `address`.\n\t * @param address - The address of the `account` to return storage for\n\t * @returns {Promise<StorageDump>} - The state of the account as an `Object` map.\n\t * Keys are the storage keys, values are the storage values as strings.\n\t * Both are represented as `0x` prefixed hex strings.\n\t */\n\tdumpStorage(address: EthjsAddress): Promise<StorageDump> {\n\t\tconst storageMap = this._storageCache.dump(address)\n\t\tconst dump: StorageDump = {}\n\t\tif (storageMap !== undefined) {\n\t\t\tfor (const slot of storageMap) {\n\t\t\t\tdump[slot[0]] = bytesToHex(slot[1])\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(dump)\n\t}\n\n\tdumpStorageRange(\n\t\t_address: EthjsAddress,\n\t\t_startKey: bigint,\n\t\t_limit: number,\n\t): Promise<StorageRange> {\n\t\treturn Promise.reject()\n\t}\n\n\t/**\n\t * Checks if an `account` exists at `address`\n\t * @param address - Address of the `account` to check\n\t */\n\tasync accountExists(address: EthjsAddress): Promise<boolean> {\n\t\tif (this.DEBUG) this._debug?.(`verify if ${address.toString()} exists`)\n\t\tconst localAccount = this._accountCache.get(address)\n\t\tif (localAccount !== undefined) return true\n\t\tconst proof = await this.client.getProof({\n\t\t\taddress: address.toString() as Address,\n\t\t\tstorageKeys: [],\n\t\t\t...this._blockTag,\n\t\t})\n\t\tconst proofBuf = proof.accountProof.map((proofNode: string) =>\n\t\t\ttoBytes(proofNode),\n\t\t)\n\t\tconst trie = new Trie({ useKeyHashing: true })\n\t\tconst verified = await trie.verifyProof(\n\t\t\tkeccak256(proofBuf[0] as Uint8Array),\n\t\t\taddress.bytes,\n\t\t\tproofBuf,\n\t\t)\n\t\treturn verified !== null\n\t}\n\n\t/**\n\t * Gets the code corresponding to the provided `address`.\n\t */\n\tasync getAccount(address: EthjsAddress): Promise<Account | undefined> {\n\t\tconst elem = this._accountCache?.get(address)\n\t\tif (elem !== undefined) {\n\t\t\treturn elem.accountRLP !== undefined\n\t\t\t\t? Account.fromRlpSerializedAccount(elem.accountRLP)\n\t\t\t\t: undefined\n\t\t}\n\t\tconst rlp = (await this.getAccountFromProvider(address)).serialize()\n\t\tconst account =\n\t\t\trlp !== null ? Account.fromRlpSerializedAccount(rlp) : undefined\n\t\tthis._accountCache?.put(address, account)\n\t\treturn account\n\t}\n\n\t/**\n\t * Retrieves an account from the provider and stores in the local trie\n\t * @param address Address of account to be retrieved from provider\n\t * @private\n\t */\n\tasync getAccountFromProvider(address: EthjsAddress): Promise<Account> {\n\t\tif (this.DEBUG)\n\t\t\tthis._debug(\n\t\t\t\t`retrieving account data from ${address.toString()} from provider`,\n\t\t\t)\n\t\tconst accountData = await this.client.getProof({\n\t\t\taddress: address.toString() as Address,\n\t\t\tstorageKeys: [],\n\t\t\t...this._blockTag,\n\t\t})\n\t\tconst account = Account.fromAccountData({\n\t\t\tbalance: BigInt(accountData.balance),\n\t\t\tnonce: BigInt(accountData.nonce),\n\t\t\tcodeHash: toBytes(accountData.codeHash),\n\t\t\tstorageRoot: toBytes(accountData.storageHash),\n\t\t})\n\t\treturn account\n\t}\n\n\t/**\n\t * Saves an account into state under the provided `address`.\n\t */\n\tasync putAccount(\n\t\taddress: EthjsAddress,\n\t\taccount: Account | undefined,\n\t): Promise<void> {\n\t\tif (this.DEBUG) {\n\t\t\tthis._debug(\n\t\t\t\t`Save account address=${address} nonce=${account?.nonce} balance=${\n\t\t\t\t\taccount?.balance\n\t\t\t\t} contract=${account?.isContract() ? 'yes' : 'no'} empty=${\n\t\t\t\t\taccount?.isEmpty() ? 'yes' : 'no'\n\t\t\t\t}`,\n\t\t\t)\n\t\t}\n\t\tif (account !== undefined) {\n\t\t\tthis._accountCache?.put(address, account)\n\t\t} else {\n\t\t\tthis._accountCache?.del(address)\n\t\t}\n\t}\n\n\t/**\n\t * Gets the account associated with `address`, modifies the given account\n\t * fields, then saves the account into state. Account fields can include\n\t * `nonce`, `balance`, `storageRoot`, and `codeHash`.\n\t * @param address - Address of the account to modify\n\t * @param accountFields - Object containing account fields and values to modify\n\t */\n\tasync modifyAccountFields(\n\t\taddress: EthjsAddress,\n\t\taccountFields: AccountFields,\n\t): Promise<void> {\n\t\tif (this.DEBUG) {\n\t\t\tthis._debug(`modifying account fields for ${address.toString()}`)\n\t\t\tthis._debug(\n\t\t\t\tJSON.stringify(\n\t\t\t\t\taccountFields,\n\t\t\t\t\t(k, v) => {\n\t\t\t\t\t\tif (k === 'nonce') return v.toString()\n\t\t\t\t\t\treturn v\n\t\t\t\t\t},\n\t\t\t\t\t2,\n\t\t\t\t),\n\t\t\t)\n\t\t}\n\t\tlet account = await this.getAccount(address)\n\t\tif (!account) {\n\t\t\taccount = new Account()\n\t\t}\n\t\taccount.nonce = accountFields.nonce ?? account.nonce\n\t\taccount.balance = accountFields.balance ?? account.balance\n\t\taccount.storageRoot = accountFields.storageRoot ?? account.storageRoot\n\t\taccount.codeHash = accountFields.codeHash ?? account.codeHash\n\t\tawait this.putAccount(address, account)\n\t}\n\n\t/**\n\t * Deletes an account from state under the provided `address`.\n\t * @param address - Address of the account which should be deleted\n\t */\n\tasync deleteAccount(address: EthjsAddress) {\n\t\tif (this.DEBUG) {\n\t\t\tthis._debug(`deleting account corresponding to ${address.toString()}`)\n\t\t}\n\t\tthis._accountCache.del(address)\n\t}\n\n\t/**\n\t * Get an EIP-1186 proof from the provider\n\t * @param address address to get proof of\n\t * @param storageSlots storage slots to get proof of\n\t * @returns an EIP-1186 formatted proof\n\t */\n\tasync getProof(\n\t\taddress: EthjsAddress,\n\t\tstorageSlots: Uint8Array[] = [],\n\t): Promise<Proof> {\n\t\tif (this.DEBUG)\n\t\t\tthis._debug(`retrieving proof from provider for ${address.toString()}`)\n\t\tconst proof = await this.client.getProof({\n\t\t\taddress: address.toString() as Address,\n\t\t\tstorageKeys: storageSlots.map((slot) => bytesToHex(slot)),\n\t\t\t...this._blockTag,\n\t\t})\n\t\treturn {\n\t\t\taddress: proof.address,\n\t\t\taccountProof: proof.accountProof,\n\t\t\tbalance: toHex(proof.balance),\n\t\t\tcodeHash: proof.codeHash,\n\t\t\tnonce: toHex(proof.nonce),\n\t\t\tstorageHash: proof.storageHash,\n\t\t\tstorageProof: proof.storageProof.map((p) => ({\n\t\t\t\tproof: p.proof,\n\t\t\t\tvalue: toHex(p.value),\n\t\t\t\tkey: p.key,\n\t\t\t})),\n\t\t}\n\t}\n\n\t/**\n\t * Checkpoints the current state of the StateManager instance.\n\t * State changes that follow can then be committed by calling\n\t * `commit` or `reverted` by calling rollback.\n\t *\n\t * Partial implementation, called from the subclass.\n\t */\n\tasync checkpoint(): Promise<void> {\n\t\tthis._accountCache.checkpoint()\n\t\tthis._storageCache.checkpoint()\n\t}\n\n\t/**\n\t * Commits the current change-set to the instance since the\n\t * last call to checkpoint.\n\t *\n\t * Partial implementation, called from the subclass.\n\t */\n\tasync commit(): Promise<void> {\n\t\tthis._accountCache.commit()\n\t}\n\n\t/**\n\t * Reverts the current change-set to the instance since the\n\t * last call to checkpoint.\n\t *\n\t * Partial implementation , called from the subclass.\n\t */\n\tasync revert(): Promise<void> {\n\t\tthis._accountCache.revert()\n\t\tthis._storageCache.revert()\n\t\tthis._contractCache.clear()\n\t}\n\n\tasync flush(): Promise<void> {\n\t\tthis._accountCache.flush()\n\t}\n\n\t/**\n\t * @deprecated This method is not used by the Viem State Manager and is a stub required by the State Manager interface\n\t */\n\tgetStateRoot = async () => {\n\t\treturn new Uint8Array(32)\n\t}\n\n\t/**\n\t * @deprecated This method is not used by the Viem State Manager and is a stub required by the State Manager interface\n\t */\n\tsetStateRoot = async (_root: Uint8Array) => {}\n\n\t/**\n\t * @deprecated This method is not used by the Viem State Manager and is a stub required by the State Manager interface\n\t */\n\thasStateRoot = () => {\n\t\tthrow new Error('function not implemented')\n\t}\n\n\tgenerateCanonicalGenesis(_initState: any): Promise<void> {\n\t\treturn Promise.resolve()\n\t}\n}\n","import type { Address as EthjsAddress } from '@ethereumjs/util'\nimport { toHex } from 'viem'\n\ntype getContractStorage = (\n\taddress: EthjsAddress,\n\tkey: Uint8Array,\n) => Promise<Uint8Array>\n\nconst toUnprefixedHex = (...params: Parameters<typeof toHex>) => {\n\treturn toHex(...params).slice(2)\n}\n\nexport class Cache {\n\tprivate map: Map<string, Map<string, Uint8Array>>\n\tprivate getContractStorage: getContractStorage\n\tconstructor(getContractStorage: getContractStorage) {\n\t\tthis.map = new Map()\n\t\tthis.getContractStorage = getContractStorage\n\t}\n\n\tasync get(address: EthjsAddress, key: Uint8Array): Promise<Uint8Array> {\n\t\tconst cachedValue = this.map\n\t\t\t.get(toUnprefixedHex(address.bytes))\n\t\t\t?.get(toUnprefixedHex(key))\n\t\tif (cachedValue !== undefined) {\n\t\t\treturn cachedValue\n\t\t}\n\t\tconst value = await this.getContractStorage(address, key)\n\t\tthis.put(address, key, value)\n\t\treturn value\n\t}\n\n\tput(address: EthjsAddress, key: Uint8Array, value: Uint8Array) {\n\t\tconst addressHex = toUnprefixedHex(address.bytes)\n\t\tlet map = this.map.get(addressHex)\n\t\tif (map === undefined) {\n\t\t\tmap = new Map()\n\t\t\tthis.map.set(addressHex, map)\n\t\t}\n\t\tconst keyHex = toUnprefixedHex(key)\n\t\tif (map?.has(keyHex) === false) {\n\t\t\tmap?.set(keyHex, value)\n\t\t}\n\t}\n\n\tclear(): void {\n\t\tthis.map = new Map()\n\t}\n}\n","import { createHttpHandler as _createHttpHandler } from './jsonrpc/createHttpHandler.js'\nimport { createJsonRpcClient as _createJsonrpcClient } from './jsonrpc/createJsonRpcClient.js'\nimport {\n\tputAccountHandler,\n\tputContractCodeHandler,\n\trunCallHandler,\n\trunContractCallHandler,\n\trunScriptHandler,\n} from './jsonrpc/index.js'\nimport { ViemStateManager } from './stateManager/ViemStateManager.js'\nimport { Common, Hardfork } from '@ethereumjs/common'\nimport { DefaultStateManager } from '@ethereumjs/statemanager'\nimport { createPublicClient, http } from 'viem'\n\n/**\n * A local EVM instance running in JavaScript. Similar to Anvil in your browser\n * @param {import('./Tevm.js').CreateEVMOptions} [options]\n * @returns {Promise<import('./Tevm.js').Tevm>}\n * @example\n * ```ts\n * import { Tevm } from \"tevm\"\n * import { createPublicClient, http } from \"viem\"\n * import { MyERC721 } from './MyERC721.sol'\n *\n * const tevm = Tevm.create({\n * \tfork: {\n * \t  url: \"https://mainnet.optimism.io\",\n * \t},\n * })\n *\n * const address = '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045',\n\n * await tevm.runContractCall(\n *   MyERC721.write.mint({\n *     caller: address,\n *   }),\n * )\n *\n * const balance = await tevm.runContractCall(\n *  MyERC721.read.balanceOf({\n *  caller: address,\n *  }),\n *  )\n *  console.log(balance) // 1n\n *  ```\n */\nexport const createTevm = async (options = {}) => {\n\tconst { EVM: _EVM } = await import('@ethereumjs/evm')\n\n\t/**\n\t * @type {DefaultStateManager | ViemStateManager}\n\t */\n\tlet stateManager\n\t// ethereumjs throws an error for most chain ids\n\tif (options.fork?.url) {\n\t\tconst client = createPublicClient({\n\t\t\ttransport: http(options.fork.url),\n\t\t})\n\t\tconst blockTag = options.fork.blockTag ?? (await client.getBlockNumber())\n\t\tstateManager = new ViemStateManager({ client, blockTag })\n\t} else {\n\t\tstateManager = new DefaultStateManager()\n\t}\n\n\tconst chainId = 1\n\tconst hardfork = Hardfork.Shanghai\n\tconst common = new Common({ chain: chainId, hardfork })\n\n\tconst evm = new _EVM({\n\t\tcommon,\n\t\tstateManager,\n\t\t// blockchain, // Always running the EVM statelessly so not including blockchain\n\t\tallowUnlimitedContractSize: options.allowUnlimitedContractSize ?? false,\n\t\tallowUnlimitedInitCodeSize: false,\n\t\tcustomOpcodes: [],\n\t\t// TODO uncomment the mapping once we make the api correct\n\t\tcustomPrecompiles: options.customPrecompiles ?? [], // : customPrecompiles.map(p => ({ ...p, address: new EthjsAddress(hexToBytes(p.address)) })),\n\t\tprofiler: {\n\t\t\tenabled: false,\n\t\t},\n\t})\n\n\t/**\n\t * @type {import('./Tevm.js').Tevm['request']}\n\t */\n\tconst request = (request) => {\n\t\treturn createJsonRpcClient()(request)\n\t}\n\n\t/**\n\t * @type {import('./Tevm.js').Tevm['createJsonRpcClient']}\n\t */\n\tconst createJsonRpcClient = () => {\n\t\treturn _createJsonrpcClient(tevm)\n\t}\n\n\t/**\n\t * @type {import('./Tevm.js').Tevm['createHttpHandler']}\n\t */\n\tconst createHttpHandler = () => {\n\t\treturn _createHttpHandler(tevm)\n\t}\n\n\t/**\n\t * Runs a script or contract that is not deployed to the chain\n\t * The recomended way to use a script is with an Tevm import\n\t * @type {import('./Tevm.js').Tevm['runScript']}\n\t * @example\n\t * ```ts\n\t * // Scripts require bytecode\n\t * import { MyContractOrScript } from './MyContractOrScript.sol' with {\n\t *   tevm: 'bytecode'\n\t * }\n\t * tevm.runScript(\n\t *   MyContractOrScript.script.run()\n\t * )\n\t * ```\n\t * Scripts can also be called directly via passing in args\n\t * @example\n\t * ```ts\n\t * tevm.runScript({\n\t *   bytecode,\n\t *   abi,\n\t *   functionName: 'run',\n\t * })\n\t * ```\n\t */\n\tconst runScript = async (action) => {\n\t\treturn runScriptHandler(tevm, action)\n\t}\n\n\t/**\n\t * Puts an account with ether balance into the state\n\t * @type {import('./Tevm.js').Tevm['putAccount']}\n\t * @example\n\t * ```ts\n\t * tevm.putAccount({\n\t * \taddress: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045',\n\t * \tbalance: 100n,\n\t * })\n\t * ```\n\t */\n\tconst putAccount = async (action) => {\n\t\treturn putAccountHandler(tevm, action)\n\t}\n\n\t/**\n\t * Puts a contract into the state\n\t * @type {import('./Tevm.js').Tevm['putContractCode']}\n\t * @example\n\t * ```ts\n\t * tevm.putContract({\n\t *  bytecode,\n\t *  contractAddress,\n\t * })\n\t * ```\n\t */\n\tconst putContractCode = async (action) => {\n\t\treturn putContractCodeHandler(tevm, action)\n\t}\n\n\t/**\n\t * Executes a call on the EVM\n\t * @type {import('./Tevm.js').Tevm['runCall']}\n\t * @example\n\t * ```ts\n\t * const result = await tevm.runCall({\n\t *   data: '0x...',\n\t *   caller: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045',\n\t *   gasLimit: 1000000n,\n\t *   value: 10000000000000000n,\n\t * })\n\t * ```\n\t */\n\tconst runCall = async (action) => {\n\t\treturn runCallHandler(tevm, action)\n\t}\n\n\t/**\n\t * Calls contract code using an ABI and returns the decoded result\n\t * @type {import('./Tevm.js').Tevm['runContractCall']}\n\t * @example\n\t * ```ts\n\t * const result = await tevm.runContractCall({\n\t *  abi: MyContract.abi,\n\t *  contractAddress: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045',\n\t *  functionName: 'balanceOf',\n\t *  args: ['0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'],\n\t * })\n\t * ```\n\t */\n\tconst runContractCall = async (action) => {\n\t\treturn runContractCallHandler(tevm, action)\n\t}\n\n\t/**\n\t * @type {import('./Tevm.js').Tevm}\n\t */\n\tconst tevm = {\n\t\t_evm: evm,\n\t\trequest,\n\t\tcreateJsonRpcClient,\n\t\tcreateHttpHandler,\n\t\trunScript,\n\t\tputAccount,\n\t\tputContractCode,\n\t\trunCall,\n\t\trunContractCall,\n\t\t...(options.fork?.url\n\t\t\t? { forkUrl: options.fork.url }\n\t\t\t: { forkUrl: options.fork?.url }),\n\t}\n\n\treturn tevm\n}\n"]}