import type { OptimisticResult } from './types.js';
import type { Abi } from 'abitype';
import type { Account, Chain, Transport, WriteContractParameters } from 'viem';
export declare const tevmViemExtensionOptimistic: () => <TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends Account | undefined = Account | undefined>(client: Pick<{
    account: TAccount;
    batch?: {
        multicall?: boolean | {
            batchSize?: number | undefined;
            wait?: number | undefined;
        } | undefined;
    } | undefined;
    cacheTime: number;
    chain: TChain;
    key: string;
    name: string;
    pollingInterval: number;
    request: import("viem").EIP1193RequestFn<import("viem").WalletRpcSchema>;
    transport: ReturnType<TTransport>["config"] & ReturnType<TTransport>["value"];
    type: string;
    uid: string;
    addChain: (args: import("viem").AddChainParameters) => Promise<void>;
    deployContract: <const TAbi extends readonly unknown[] | import("viem").Abi, TChainOverride extends Chain | undefined = undefined>(args: import("viem").DeployContractParameters<TAbi, TChain, TAccount, TChainOverride>) => Promise<`0x${string}`>;
    getAddresses: () => Promise<import("viem").GetAddressesReturnType>;
    getChainId: () => Promise<number>;
    getPermissions: () => Promise<import("viem").GetPermissionsReturnType>;
    prepareTransactionRequest: <TChainOverride_1 extends Chain | undefined = undefined>(args: import("viem").PrepareTransactionRequestParameters<TChain, TAccount, TChainOverride_1>) => Promise<import("viem").PrepareTransactionRequestReturnType>;
    requestAddresses: () => Promise<import("viem").RequestAddressesReturnType>;
    requestPermissions: (args: {
        [x: string]: Record<string, any>;
        eth_accounts: Record<string, any>;
    }) => Promise<import("viem").RequestPermissionsReturnType>;
    sendRawTransaction: (args: import("viem/actions").SendRawTransactionParameters) => Promise<`0x${string}`>;
    sendTransaction: <TChainOverride_2 extends Chain | undefined = undefined>(args: import("viem").SendTransactionParameters<TChain, TAccount, TChainOverride_2>) => Promise<`0x${string}`>;
    signMessage: (args: import("viem").SignMessageParameters<TAccount>) => Promise<`0x${string}`>;
    signTransaction: <TChainOverride_3 extends Chain | undefined = undefined>(args: import("viem/actions").SignTransactionParameters<TChain, TAccount, TChainOverride_3>) => Promise<`0x${string}`>;
    signTypedData: <const TTypedData extends {
        [x: string]: readonly import("viem").TypedDataParameter[];
        [x: `string[${string}]`]: undefined;
        [x: `function[${string}]`]: undefined;
        [x: `address[${string}]`]: undefined;
        [x: `bool[${string}]`]: undefined;
        [x: `bytes[${string}]`]: undefined;
        [x: `bytes3[${string}]`]: undefined;
        [x: `bytes1[${string}]`]: undefined;
        [x: `bytes2[${string}]`]: undefined;
        [x: `bytes4[${string}]`]: undefined;
        [x: `bytes5[${string}]`]: undefined;
        [x: `bytes6[${string}]`]: undefined;
        [x: `bytes7[${string}]`]: undefined;
        [x: `bytes8[${string}]`]: undefined;
        [x: `bytes9[${string}]`]: undefined;
        [x: `bytes10[${string}]`]: undefined;
        [x: `bytes11[${string}]`]: undefined;
        [x: `bytes12[${string}]`]: undefined;
        [x: `bytes13[${string}]`]: undefined;
        [x: `bytes14[${string}]`]: undefined;
        [x: `bytes15[${string}]`]: undefined;
        [x: `bytes16[${string}]`]: undefined;
        [x: `bytes17[${string}]`]: undefined;
        [x: `bytes18[${string}]`]: undefined;
        [x: `bytes19[${string}]`]: undefined;
        [x: `bytes20[${string}]`]: undefined;
        [x: `bytes21[${string}]`]: undefined;
        [x: `bytes22[${string}]`]: undefined;
        [x: `bytes23[${string}]`]: undefined;
        [x: `bytes24[${string}]`]: undefined;
        [x: `bytes25[${string}]`]: undefined;
        [x: `bytes26[${string}]`]: undefined;
        [x: `bytes27[${string}]`]: undefined;
        [x: `bytes28[${string}]`]: undefined;
        [x: `bytes29[${string}]`]: undefined;
        [x: `bytes30[${string}]`]: undefined;
        [x: `bytes31[${string}]`]: undefined;
        [x: `bytes32[${string}]`]: undefined;
        [x: `int[${string}]`]: undefined;
        [x: `int8[${string}]`]: undefined;
        [x: `int16[${string}]`]: undefined;
        [x: `int24[${string}]`]: undefined;
        [x: `int32[${string}]`]: undefined;
        [x: `int40[${string}]`]: undefined;
        [x: `int48[${string}]`]: undefined;
        [x: `int56[${string}]`]: undefined;
        [x: `int64[${string}]`]: undefined;
        [x: `int72[${string}]`]: undefined;
        [x: `int80[${string}]`]: undefined;
        [x: `int88[${string}]`]: undefined;
        [x: `int96[${string}]`]: undefined;
        [x: `int104[${string}]`]: undefined;
        [x: `int112[${string}]`]: undefined;
        [x: `int120[${string}]`]: undefined;
        [x: `int128[${string}]`]: undefined;
        [x: `int136[${string}]`]: undefined;
        [x: `int144[${string}]`]: undefined;
        [x: `int152[${string}]`]: undefined;
        [x: `int160[${string}]`]: undefined;
        [x: `int168[${string}]`]: undefined;
        [x: `int176[${string}]`]: undefined;
        [x: `int184[${string}]`]: undefined;
        [x: `int192[${string}]`]: undefined;
        [x: `int200[${string}]`]: undefined;
        [x: `int208[${string}]`]: undefined;
        [x: `int216[${string}]`]: undefined;
        [x: `int224[${string}]`]: undefined;
        [x: `int232[${string}]`]: undefined;
        [x: `int240[${string}]`]: undefined;
        [x: `int248[${string}]`]: undefined;
        [x: `int256[${string}]`]: undefined;
        [x: `uint[${string}]`]: undefined;
        [x: `uint8[${string}]`]: undefined;
        [x: `uint16[${string}]`]: undefined;
        [x: `uint24[${string}]`]: undefined;
        [x: `uint32[${string}]`]: undefined;
        [x: `uint40[${string}]`]: undefined;
        [x: `uint48[${string}]`]: undefined;
        [x: `uint56[${string}]`]: undefined;
        [x: `uint64[${string}]`]: undefined;
        [x: `uint72[${string}]`]: undefined;
        [x: `uint80[${string}]`]: undefined;
        [x: `uint88[${string}]`]: undefined;
        [x: `uint96[${string}]`]: undefined;
        [x: `uint104[${string}]`]: undefined;
        [x: `uint112[${string}]`]: undefined;
        [x: `uint120[${string}]`]: undefined;
        [x: `uint128[${string}]`]: undefined;
        [x: `uint136[${string}]`]: undefined;
        [x: `uint144[${string}]`]: undefined;
        [x: `uint152[${string}]`]: undefined;
        [x: `uint160[${string}]`]: undefined;
        [x: `uint168[${string}]`]: undefined;
        [x: `uint176[${string}]`]: undefined;
        [x: `uint184[${string}]`]: undefined;
        [x: `uint192[${string}]`]: undefined;
        [x: `uint200[${string}]`]: undefined;
        [x: `uint208[${string}]`]: undefined;
        [x: `uint216[${string}]`]: undefined;
        [x: `uint224[${string}]`]: undefined;
        [x: `uint232[${string}]`]: undefined;
        [x: `uint240[${string}]`]: undefined;
        [x: `uint248[${string}]`]: undefined;
        [x: `uint256[${string}]`]: undefined;
        string?: never;
        address?: never;
        bool?: never;
        bytes?: never;
        bytes3?: never;
        bytes1?: never;
        bytes2?: never;
        bytes4?: never;
        bytes5?: never;
        bytes6?: never;
        bytes7?: never;
        bytes8?: never;
        bytes9?: never;
        bytes10?: never;
        bytes11?: never;
        bytes12?: never;
        bytes13?: never;
        bytes14?: never;
        bytes15?: never;
        bytes16?: never;
        bytes17?: never;
        bytes18?: never;
        bytes19?: never;
        bytes20?: never;
        bytes21?: never;
        bytes22?: never;
        bytes23?: never;
        bytes24?: never;
        bytes25?: never;
        bytes26?: never;
        bytes27?: never;
        bytes28?: never;
        bytes29?: never;
        bytes30?: never;
        bytes31?: never;
        bytes32?: never;
        int8?: never;
        int16?: never;
        int24?: never;
        int32?: never;
        int40?: never;
        int48?: never;
        int56?: never;
        int64?: never;
        int72?: never;
        int80?: never;
        int88?: never;
        int96?: never;
        int104?: never;
        int112?: never;
        int120?: never;
        int128?: never;
        int136?: never;
        int144?: never;
        int152?: never;
        int160?: never;
        int168?: never;
        int176?: never;
        int184?: never;
        int192?: never;
        int200?: never;
        int208?: never;
        int216?: never;
        int224?: never;
        int232?: never;
        int240?: never;
        int248?: never;
        int256?: never;
        uint8?: never;
        uint16?: never;
        uint24?: never;
        uint32?: never;
        uint40?: never;
        uint48?: never;
        uint56?: never;
        uint64?: never;
        uint72?: never;
        uint80?: never;
        uint88?: never;
        uint96?: never;
        uint104?: never;
        uint112?: never;
        uint120?: never;
        uint128?: never;
        uint136?: never;
        uint144?: never;
        uint152?: never;
        uint160?: never;
        uint168?: never;
        uint176?: never;
        uint184?: never;
        uint192?: never;
        uint200?: never;
        uint208?: never;
        uint216?: never;
        uint224?: never;
        uint232?: never;
        uint240?: never;
        uint248?: never;
        uint256?: never;
    } | {
        [key: string]: unknown;
    }, TPrimaryType extends string>(args: import("viem").SignTypedDataParameters<TTypedData, TPrimaryType, TAccount>) => Promise<`0x${string}`>;
    switchChain: (args: import("viem").SwitchChainParameters) => Promise<void>;
    watchAsset: (args: import("viem").WatchAssetParams) => Promise<boolean>;
    writeContract: <const TAbi_1 extends readonly unknown[] | import("viem").Abi, TFunctionName extends string, TChainOverride_4 extends Chain | undefined = undefined>(args: WriteContractParameters<TAbi_1, TFunctionName, TChain, TAccount, TChainOverride_4>) => Promise<`0x${string}`>;
    extend: <const client extends {
        [x: string]: unknown;
        account?: undefined;
        batch?: undefined;
        cacheTime?: undefined;
        chain?: undefined;
        key?: undefined;
        name?: undefined;
        pollingInterval?: undefined;
        request?: undefined;
        transport?: undefined;
        type?: undefined;
        uid?: undefined;
    } & Partial<Pick<import("viem").PublicActions, "call" | "createContractEventFilter" | "createEventFilter" | "estimateContractGas" | "estimateGas" | "getBlock" | "getBlockNumber" | "getChainId" | "getContractEvents" | "getEnsText" | "getFilterChanges" | "getGasPrice" | "getLogs" | "getTransaction" | "getTransactionCount" | "getTransactionReceipt" | "prepareTransactionRequest" | "readContract" | "sendRawTransaction" | "simulateContract" | "uninstallFilter" | "watchBlockNumber" | "watchContractEvent"> & Pick<import("viem").WalletActions, "sendTransaction" | "writeContract">>>(fn: (client: import("viem").Client<TTransport, TChain, TAccount, import("viem").WalletRpcSchema, import("viem").WalletActions<TChain, TAccount>>) => client) => import("viem").Client<TTransport, TChain, TAccount, import("viem").WalletRpcSchema, { [K in keyof client]: client[K]; } & import("viem").WalletActions<TChain, TAccount>>;
}, "request" | "writeContract">) => {
    writeContractOptimistic: <TAbi_2 extends Abi | readonly unknown[] = Abi, TFunctionName_1 extends string = string, TChainOverride_5 extends Chain | undefined = Chain | undefined>(action: WriteContractParameters<TAbi_2, TFunctionName_1, TChain, TAccount, TChainOverride_5>) => AsyncGenerator<OptimisticResult<TAbi_2, TFunctionName_1, TChain>, any, unknown>;
};
//# sourceMappingURL=tevmViemExtensionOptimistic.d.ts.map