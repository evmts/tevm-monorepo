name: CI Checks
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  TEVM_TEST_ALCHEMY_KEY: ${{ secrets.TEVM_TEST_ALCHEMY_KEY }}
  TEVM_RPC_URLS_MAINNET: ${{ secrets.TEVM_RPC_URLS_MAINNET }}
  TEVM_RPC_URLS_OPTIMISM: ${{ secrets.TEVM_RPC_URLS_OPTIMISM }}

jobs:
  ci-checks:
    name: CI Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - uses: actions/checkout@v4
        name: Checkout [Default Branch]
        if: ${{ github.event_name != 'pull_request' }}
        with:
          fetch-depth: 0

      - name: "Setup"
        id: setup
        uses: ./.github/actions/setup

      - name: Build dist
        id: build-dist
        run: pnpm build:dist

      - name: Build types
        id: build-types
        if: success()
        run: pnpm build:types

      - name: Tests
        id: tests
        if: always() && steps.setup.conclusion == 'success' && steps.build-dist.conclusion == 'success'
        run: pnpm test:coverage

      - name: Fixtures
        id: fixtures
        if: always() && steps.setup.conclusion == 'success' && steps.build-dist.conclusion == 'success'
        run: pnpm -r dev:run

      - name: Tests Rust
        id: tests-rust
        if: always() && steps.setup.conclusion == 'success' && steps.build-dist.conclusion == 'success'
        run: pnpm -r test:rust

      - name: Typecheck
        id: typecheck
        if: always() && steps.setup.conclusion == 'success' && steps.build-dist.conclusion == 'success'
        run: pnpm -r typecheck

      - name: Lint
        id: lint
        if: always() && steps.setup.conclusion == 'success' && steps.build-dist.conclusion == 'success'
        run: pnpm lint:check

      - name: Lint deps
        id: lint-deps
        if: always() && steps.setup.conclusion == 'success' && steps.build-dist.conclusion == 'success'
        run: pnpm lint:deps

      - name: Lint packages
        id: lint-packages
        if: always() && steps.setup.conclusion == 'success' && steps.build-dist.conclusion == 'success'
        run: pnpm lint:package

      - name: Build app
        id: build-app
        if: always() && steps.setup.conclusion == 'success' && steps.build-dist.conclusion == 'success'
        run: pnpm build:app

      - name: Generate docs
        id: generate-docs
        if: always() && steps.setup.conclusion == 'success' && steps.build-dist.conclusion == 'success'
        run: pnpm generate:docs

      - name: Build rust
        id: build-rust
        if: always() && steps.setup.conclusion == 'success' && steps.build-dist.conclusion == 'success'
        run: pnpm build:rust:app

      - name: Generate Summary and Check Results
        if: always()
        run: |
          # Generate job summary table
          echo "# CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Task | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY

          # Function to get emoji
          get_emoji() {
            if [ "$1" = "success" ]; then echo "✅"
            elif [ "$1" = "skipped" ]; then echo "⏭️"
            else echo "❌"
            fi
          }

          # Add each step result to summary
          echo "| Setup | $(get_emoji '${{ steps.setup.outcome }}') ${{ steps.setup.outcome }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build dist | $(get_emoji '${{ steps.build-dist.outcome }}') ${{ steps.build-dist.outcome }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build types | $(get_emoji '${{ steps.build-types.outcome }}') ${{ steps.build-types.outcome }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | $(get_emoji '${{ steps.tests.outcome }}') ${{ steps.tests.outcome }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Fixtures | $(get_emoji '${{ steps.fixtures.outcome }}') ${{ steps.fixtures.outcome }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests Rust | $(get_emoji '${{ steps.tests-rust.outcome }}') ${{ steps.tests-rust.outcome }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Typecheck | $(get_emoji '${{ steps.typecheck.outcome }}') ${{ steps.typecheck.outcome }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | $(get_emoji '${{ steps.lint.outcome }}') ${{ steps.lint.outcome }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint deps | $(get_emoji '${{ steps.lint-deps.outcome }}') ${{ steps.lint-deps.outcome }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint packages | $(get_emoji '${{ steps.lint-packages.outcome }}') ${{ steps.lint-packages.outcome }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build app | $(get_emoji '${{ steps.build-app.outcome }}') ${{ steps.build-app.outcome }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Generate docs | $(get_emoji '${{ steps.generate-docs.outcome }}') ${{ steps.generate-docs.outcome }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build rust | $(get_emoji '${{ steps.build-rust.outcome }}') ${{ steps.build-rust.outcome }} |" >> $GITHUB_STEP_SUMMARY

          # Check for failures
          failed=""
          [[ "${{ steps.build-types.outcome }}" = "failure" ]] && failed="$failed build-types"
          [[ "${{ steps.tests.outcome }}" = "failure" ]] && failed="$failed tests"
          [[ "${{ steps.fixtures.outcome }}" = "failure" ]] && failed="$failed fixtures"
          [[ "${{ steps.tests-rust.outcome }}" = "failure" ]] && failed="$failed tests-rust"
          [[ "${{ steps.typecheck.outcome }}" = "failure" ]] && failed="$failed typecheck"
          [[ "${{ steps.lint.outcome }}" = "failure" ]] && failed="$failed lint"
          [[ "${{ steps.lint-deps.outcome }}" = "failure" ]] && failed="$failed lint-deps"
          [[ "${{ steps.lint-packages.outcome }}" = "failure" ]] && failed="$failed lint-packages"
          [[ "${{ steps.build-app.outcome }}" = "failure" ]] && failed="$failed build-app"
          [[ "${{ steps.generate-docs.outcome }}" = "failure" ]] && failed="$failed generate-docs"
          [[ "${{ steps.build-rust.outcome }}" = "failure" ]] && failed="$failed build-rust"

          # Add overall status to summary and exit with proper code
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ -n "$failed" ]]; then
            echo "## ❌ CI Failed" >> $GITHUB_STEP_SUMMARY
            echo "Failed tasks:$failed" >> $GITHUB_STEP_SUMMARY
            echo "❌ Failed:$failed"
            exit 1
          else
            echo "## ✅ All CI Checks Passed" >> $GITHUB_STEP_SUMMARY
            echo "✅ All passed"
          fi
