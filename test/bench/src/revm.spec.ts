import { describe, it, expect, bench } from 'vitest'
import { createEvm } from '@tevm/evm'
import { createTevmEvm } from '@tevm/revm'
import { hexToBytes } from 'viem'

// Simple ERC20 bytecode for testing
const ERC20_BYTECODE = '0x60806040523480156200001157600080fd5b5060405162000c0738038062000c078339810160408190526200003491620001c5565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000292565b828054620000769062000255565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013757600080fd5b81516001600160401b038082111562000154576200015462000110565b604051601f8301601f19908116603f011681019082821181831017156200017f576200017f62000110565b816040528381526020925086838588010111156200019c57600080fd5b600091505b83821015620001c05785820183015181830184015290820190620001a1565b83821115620001d25760008385830101525b9695505050505050565b60008060408385031215620001d957600080fd5b82516001600160401b0380821115620001f157600080fd5b620001ff8683870162000125565b935060208501519150808211156200021657600080fd5b50620002258582860162000125565b9150509250929050565b600181811c908216806200026a57607f821691505b602082108114156200028c57634e487b7160e01b600052602260045260246000fd5b50919050565b61096580620002a26000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c39190610678565b60405180910390f35b6100df6100da3660046106e9565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610713565b61026e565b604051601281526020016100c3565b6100df6101313660046106e9565b610292565b6100f361014436600461074f565b6001600160a01b031660009081526020819052604090205490565b6100b66102c9565b6100df6101753660046106e9565b6102d8565b6100df6101883660046106e9565b610372565b6100f361019b36600461077a565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d5906107ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610201906107ad565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600061026533848461037f565b50600192915050565b600061027b8484846104a3565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156102655761026533858585610620565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916102659185906102c49086906107e7565b61037f565b6060600480546101d5906107ad565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561035f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61026533858585610620565b600061026533848461049b565b6001600160a01b0383166103e15760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610356565b6001600160a01b0382166104425760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610356565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b61026533848461037f565b6001600160a01b0383166105075760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610356565b6001600160a01b0382166105695760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610356565b6001600160a01b038316600090815260208190526040902054818110156105e15760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610356565b6001600160a01b03848116600081815260208190526040808220878503905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350505050565b6001600160a01b0384166106825760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610356565b61068c8484846104a3565b50505050565b6000815180845260005b818110156106b75760208185018101518683018201520161069b565b818111156106c9576000602083870101525b50601f01601f19169290920160200192915050565b60208152600082516020808401845260005b81811015610363576020818503810151858301820152016106dd565b80356001600160a01b038116811461070e57600080fd5b919050565b60008060006060848603121561072857600080fd5b610731846106f7565b925061073f602085016106f7565b9150604084013590509250925092565b60006020828403121561076157600080fd5b61076a826106f7565b9392505050565b6000806040838503121561078d57600080fd5b610796836106f7565b91506107a4602084016106f7565b90509250929050565b600181811c908216806107c157607f821691505b602082108114156107e257634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561080857634e487b7160e01b600052601160045260246000fd5b50019056fea264697066735822122068904a7e88b8be3aae7519a83d5e4c60ceeffdc2c8ad2e4e04a7e8e5c3d5de3864736f6c63430008090033'

// For testing with wasm
const SIMPLE_BYTECODE = '0x6080604052348015600f57600080fd5b5060948061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063771602f714602d575b600080fd5b603c6038366004605c565b604e565b60405190815260200160405180910390f35b6000818301905092915050565b80356001600160a01b0381168114607857600080fd5b919050565b600080604083850312156090576090565b604081013592509050939250505056fea26469706673582212209cef3dd33d8ddd3b560b511ae38bbe8e0a4de2a93b9b04bd4a2bdcf2cb4ca6f264736f6c634300080c0033'

// Simple add function call: function add(uint a, uint b) external pure returns (uint)
const ADD_CALLDATA = '0x771602f7000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000014'

describe('REVM vs JavaScript EVM Benchmark', () => {
  it('should compare REVM and JS EVM performance', async () => {
    // Create JavaScript EVM
    const jsEvm = createEvm()
    
    // Create WASM-based REVM
    const wasmEvm = createTevmEvm()
    await wasmEvm.init()
    
    // Deploy contract address for testing
    const contractAddress = '0x1000000000000000000000000000000000000000'
    
    // Set the code in both EVMs
    await jsEvm.setCode(hexToBytes(contractAddress), hexToBytes(SIMPLE_BYTECODE))
    await wasmEvm.setAccountCode(contractAddress, SIMPLE_BYTECODE)
    
    // Set account balances
    await wasmEvm.setAccountBalance(contractAddress, '100000000000000000000')
    
    // Run benchmark for JavaScript EVM
    bench('JavaScript EVM call', async () => {
      const result = await jsEvm.runCall({
        to: hexToBytes(contractAddress),
        data: hexToBytes(ADD_CALLDATA),
        gasLimit: 1000000n,
      })
      
      expect(result.execResult.returnValue).toBeDefined()
      return result
    })
    
    // Run benchmark for REVM WASM
    bench('REVM WASM call', async () => {
      const result = await wasmEvm.call({
        from: '0x0000000000000000000000000000000000000001',
        to: contractAddress,
        gasLimit: '1000000',
        value: '0',
        data: ADD_CALLDATA,
      })
      
      expect(result.returnValue).toBeDefined()
      return result
    })
    
    // Complex operation benchmark - ERC20 deployment
    bench('JavaScript EVM - ERC20 deployment', async () => {
      const erc20DeployResult = await jsEvm.runCall({
        data: hexToBytes(ERC20_BYTECODE + '00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a546573742054657374730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035454530000000000000000000000000000000000000000000000000000000000'),
        gasLimit: 10000000n,
      })
      
      expect(erc20DeployResult.execResult.returnValue).toBeDefined()
      return erc20DeployResult
    })
    
    bench('REVM WASM - ERC20 deployment', async () => {
      const erc20DeployResult = await wasmEvm.call({
        from: '0x0000000000000000000000000000000000000001',
        to: '0x0000000000000000000000000000000000000000', // For contract creation
        gasLimit: '10000000',
        value: '0',
        data: ERC20_BYTECODE + '00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a546573742054657374730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035454530000000000000000000000000000000000000000000000000000000000',
      })
      
      expect(result.returnValue).toBeDefined()
      return erc20DeployResult
    })
  })
})