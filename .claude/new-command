# .claude/new-command

This command helps you create effective, structured commands for your .claude folder by applying best practices from prompt engineering.

## Usage

```
claude < .claude/new-command
```

## Prompt Design Framework

### 1. CONTEXT GATHERING

Start by asking yourself:
- What problem is this command trying to solve?
- What domain knowledge is required?
- What are the expected inputs and outputs?
- What edge cases or failure modes should be handled?

### 2. CLEAR COMMUNICATION

Write your command like you're speaking to a capable colleague who's just joined the project:
- Avoid jargon unless you define it
- Provide complete context rather than assuming knowledge
- Be explicit about what you want, not just what you don't want
- Include examples that illustrate successful execution

### 3. STRUCTURED FORMAT

Use this structure for all commands:
- Title/purpose statement (what the command does)
- Usage instructions (how to run it)
- Input expectations (what you'll provide)
- Process description (what will happen)
- Output format (what you'll receive back)
- Examples (showing actual usage scenarios)

### 4. ITERATIVE REFINEMENT

After initial creation:
- Test the command on various inputs
- Identify where the AI misunderstands or produces incorrect outputs
- Update your command to address these issues
- Add edge cases and guardrails for unexpected inputs

### 5. FEEDBACK MECHANISM

Always include:
- Clear success/failure criteria
- How to evaluate the output
- Ways to refine the response if it's not adequate

## Command Template

```
# .claude/{command-name}

<!-- Purpose statement: 1-2 sentences explaining what this command does -->

## Usage

```bash
claude < .claude/{command-name}
<!-- OR -->
claude < .claude/{command-name} {arguments}
```

## Input Requirements
<!-- What you need to provide when running this command -->

## Process
<!-- Step-by-step description of what the command does -->

## Output Format
<!-- Describe the expected structure of the response -->

## Examples
<!-- Show 2-3 complete examples of inputs and expected outputs -->

## Evaluation Criteria
<!-- How to determine if the output meets your needs -->
```

Remember:
- Great commands balance specificity with flexibility
- Explicit > Implicit
- Show, don't just tell
- Include both what to do AND why to do it
- Think from the AI's perspective - what information would YOU need to complete this task well?