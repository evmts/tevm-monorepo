import { MUDTestSystem } from '@tevm/test-utils'
import { type EthjsLog, hexToBytes } from '@tevm/utils'
import { describe, expect, it } from 'vitest'
import { ethjsLogToAbiLog } from './ethjsLogToAbiLog.js'

describe('ethjsLogToAbiLog', () => {
	it('should convert EthjsLog to viem Log format', () => {
		const ethjsLog = [
			hexToBytes('0x1234567890123456789012345678901234567890'),
			[
				hexToBytes('0x8dbb3a9672eebfd3773e72dd9c102393436816d832c7ba9e1e1ac8fcadcac7a9'), // Store_SetRecord event signature
				hexToBytes('0x7462617070000000000000000000000054657374546162656c65000000000000'), // tableId
			],
			hexToBytes(
				'0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
			),
		] satisfies EthjsLog

		expect(ethjsLogToAbiLog(MUDTestSystem.abi, ethjsLog)).toMatchObject({
			eventName: 'Store_SetRecord',
			address: '0x1234567890123456789012345678901234567890',
			topics: [
				'0x8dbb3a9672eebfd3773e72dd9c102393436816d832c7ba9e1e1ac8fcadcac7a9',
				'0x7462617070000000000000000000000054657374546162656c65000000000000',
			],
			data: '0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
			args: {
				tableId: '0x7462617070000000000000000000000054657374546162656c65000000000000',
				keyTuple: [
					'0x0000000000000000000000000000000000000000000000000000000000000001',
					'0x0000000000000000000000000000000000000000000000000000000000000002',
				],
				staticData:
					'0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002',
				encodedLengths: '0x00000000000000000000000000000000000000000000000000000000000000c0',
				dynamicData: '0x',
			},
		})
	})

	it('should error when the log does not match an event', () => {
		const ethjsLog = [
			hexToBytes('0x1234567890123456789012345678901234567890'),
			[hexToBytes('0x1111111111111111111111111111111111111111111111111111111111111111')],
			hexToBytes('0x'),
		] satisfies EthjsLog

		expect(() => ethjsLogToAbiLog(MUDTestSystem.abi, ethjsLog)).toThrowErrorMatchingInlineSnapshot(
			`
			[AbiEventSignatureNotFoundError: Encoded event signature "0x1111111111111111111111111111111111111111111111111111111111111111" not found on ABI.
			Make sure you are using the correct ABI and that the event exists on it.
			You can look up the signature here: https://openchain.xyz/signatures?query=0x1111111111111111111111111111111111111111111111111111111111111111.

			Docs: https://viem.sh/docs/contract/decodeEventLog
			Version: viem@2.23.10]
			`,
		)
	})
})
