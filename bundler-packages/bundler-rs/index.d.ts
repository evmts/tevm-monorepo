/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface JsResolvedImport {
	original: string
	absolute: string
	updated: string
}
export interface JsModuleInfo {
	code: string
	importedIds: Array<string>
}
export interface JsModule {
	id: string
	code: string
	rawCode: string
	importedIds: Array<string>
}
export declare function resolveImportsJs(
	filePath: string,
	code: string,
	remappings?: Array<[string, string]> | undefined | null,
	libs?: Array<string> | undefined | null,
): Promise<Array<JsResolvedImport>>
export declare function moduleFactoryJs(
	filePath: string,
	code: string,
	remappings?: Array<[string, string]> | undefined | null,
	libs?: Array<string> | undefined | null,
): Promise<Record<string, JsModule>>
/** Generate the JavaScript runtime code for a Solidity contract */
export declare function generateRuntimeJs(solcOutputJson: string, moduleType: string, useScopedPackage: boolean): string
export interface JsBundlerConfig {
	remappingsFrom?: Array<string>
	remappingsTo?: Array<string>
	libs?: Array<string>
	solcPath?: string
	solcVersion?: string
	cacheDir?: string
	useCache?: boolean
	debug?: boolean
	contractPackage?: string
}
export interface JsSolcOptions {
	optimize?: boolean
	optimizerRuns?: number
	evmVersion?: string
	includeAst?: boolean
	includeBytecode?: boolean
	includeSourceMap?: boolean
	includeUserDocs?: boolean
	includeDevDocs?: boolean
}
export interface JsFileAccessObject {
	readFile: (...args: any[]) => any
	writeFile: (...args: any[]) => any
	exists: (...args: any[]) => any
}
export interface JsBundleResult {
	code: string
	sourceMap?: string
	modules: Record<string, string>
	solcInput: string
	solcOutput: string
	entryPoint: string
}
export enum JsModuleType {
	Ts = 0,
	Cjs = 1,
	Mjs = 2,
	Dts = 3,
}
export declare function createBundlerSync(config: JsBundlerConfig): JsBundler
export declare function createBundlerWithFileAccess(config: JsBundlerConfig, baseDir: string): JsBundler
export declare function bundleCodeJsSync(
	entryPoint: string,
	moduleType: JsModuleType,
	options?: JsBundlerConfig | undefined | null,
	solcOptions?: JsSolcOptions | undefined | null,
): JsBundleResult
export declare class JsBundler {
	resolveFileSync(
		filePath: string,
		baseDir: string,
		moduleType: JsModuleType,
		solcOptions?: JsSolcOptions | undefined | null,
	): JsBundleResult
	resolveTsModuleSync(filePath: string, baseDir: string, solcOptions?: JsSolcOptions | undefined | null): JsBundleResult
	resolveCjsModuleSync(
		filePath: string,
		baseDir: string,
		solcOptions?: JsSolcOptions | undefined | null,
	): JsBundleResult
	resolveEsmModuleSync(
		filePath: string,
		baseDir: string,
		solcOptions?: JsSolcOptions | undefined | null,
	): JsBundleResult
	resolveDtsSync(filePath: string, baseDir: string, solcOptions?: JsSolcOptions | undefined | null): JsBundleResult
	compileArtifactsSync(filePath: string, baseDir: string, solcOptions?: JsSolcOptions | undefined | null): string
}
