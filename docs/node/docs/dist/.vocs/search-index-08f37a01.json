{"documentCount":596,"nextId":596,"documentIds":{"0":"docs/pages/advanced/custom-precompiles.mdx#custom-precompiles","1":"docs/pages/advanced/custom-precompiles.mdx#using-tevmprecompiles","2":"docs/pages/advanced/custom-precompiles.mdx#basic-usage","3":"docs/pages/advanced/custom-precompiles.mdx#precompile-interface","4":"docs/pages/advanced/custom-precompiles.mdx#example-implementations","5":"docs/pages/advanced/custom-precompiles.mdx#1-state-access-precompile","6":"docs/pages/advanced/custom-precompiles.mdx#2-gas-calculation-precompile","7":"docs/pages/advanced/custom-precompiles.mdx#3-error-handling-precompile","8":"docs/pages/advanced/custom-precompiles.mdx#4-multiple-precompiles","9":"docs/pages/advanced/custom-precompiles.mdx#best-practices","10":"docs/pages/advanced/custom-precompiles.mdx#related-topics","11":"docs/pages/advanced/performance-profiler.mdx#performance--profiler","12":"docs/pages/advanced/performance-profiler.mdx#enabling-the-profiler","13":"docs/pages/advanced/performance-profiler.mdx#collecting-performance-data","14":"docs/pages/advanced/performance-profiler.mdx#log-types","15":"docs/pages/advanced/performance-profiler.mdx#analyzing-performance","16":"docs/pages/advanced/performance-profiler.mdx#1-opcode-analysis","17":"docs/pages/advanced/performance-profiler.mdx#2-call-tree-analysis","18":"docs/pages/advanced/performance-profiler.mdx#3-gas-usage-patterns","19":"docs/pages/advanced/performance-profiler.mdx#use-cases","20":"docs/pages/advanced/performance-profiler.mdx#1-contract-optimization","21":"docs/pages/advanced/performance-profiler.mdx#2-comparative-analysis","22":"docs/pages/advanced/performance-profiler.mdx#3-gas-optimization","23":"docs/pages/advanced/performance-profiler.mdx#best-practices","24":"docs/pages/advanced/performance-profiler.mdx#related-topics","25":"docs/pages/advanced/receipts-and-logs.mdx#receipts--logs","26":"docs/pages/advanced/receipts-and-logs.mdx#receipt-management","27":"docs/pages/advanced/receipts-and-logs.mdx#receipt-types","28":"docs/pages/advanced/receipts-and-logs.mdx#event-logs","29":"docs/pages/advanced/receipts-and-logs.mdx#contract-deployment-and-event-emission","30":"docs/pages/advanced/receipts-and-logs.mdx#querying-logs","31":"docs/pages/advanced/receipts-and-logs.mdx#error-handling","32":"docs/pages/advanced/receipts-and-logs.mdx#performance-considerations","33":"docs/pages/advanced/receipts-and-logs.mdx#best-practices","34":"docs/pages/advanced/receipts-and-logs.mdx#related-topics","35":"docs/pages/advanced/txpool.mdx#transaction-pool","36":"docs/pages/advanced/txpool.mdx#quick-start","37":"docs/pages/advanced/txpool.mdx#key-features","38":"docs/pages/advanced/txpool.mdx#core-concepts","39":"docs/pages/advanced/txpool.mdx#pool-limits","40":"docs/pages/advanced/txpool.mdx#transaction-lifecycle","41":"docs/pages/advanced/txpool.mdx#detailed-usage","42":"docs/pages/advanced/txpool.mdx#adding-transactions","43":"docs/pages/advanced/txpool.mdx#transaction-replacement","44":"docs/pages/advanced/txpool.mdx#querying-transactions","45":"docs/pages/advanced/txpool.mdx#block-processing","46":"docs/pages/advanced/txpool.mdx#advanced-features","47":"docs/pages/advanced/txpool.mdx#pool-management","48":"docs/pages/advanced/txpool.mdx#transaction-types","49":"docs/pages/advanced/txpool.mdx#best-practices","50":"docs/pages/advanced/txpool.mdx#1-transaction-creation","51":"docs/pages/advanced/txpool.mdx#2-error-handling","52":"docs/pages/advanced/txpool.mdx#3-performance-optimization","53":"docs/pages/advanced/txpool.mdx#4-memory-management","54":"docs/pages/advanced/txpool.mdx#api-reference","55":"docs/pages/advanced/txpool.mdx#txpool-class","56":"docs/pages/advanced/txpool.mdx#related-topics","57":"docs/pages/api/account-management.mdx#account-management","58":"docs/pages/api/account-management.mdx#getaccounthandler","59":"docs/pages/api/account-management.mdx#parameters","60":"docs/pages/api/account-management.mdx#return-type","61":"docs/pages/api/account-management.mdx#example","62":"docs/pages/api/account-management.mdx#setaccounthandler","63":"docs/pages/api/account-management.mdx#parameters-1","64":"docs/pages/api/account-management.mdx#return-type-1","65":"docs/pages/api/account-management.mdx#examples","66":"docs/pages/api/account-management.mdx#1-setting-account-balance","67":"docs/pages/api/account-management.mdx#2-deploying-contract-code","68":"docs/pages/api/account-management.mdx#3-modifying-multiple-properties","69":"docs/pages/api/account-management.mdx#best-practices","70":"docs/pages/api/account-management.mdx#related-topics","71":"docs/pages/api/decorators.mdx#see-also","72":"docs/pages/api/evm-events.mdx#evm-events","73":"docs/pages/api/evm-events.mdx#available-events","74":"docs/pages/api/evm-events.mdx#the-interpreterstep-object","75":"docs/pages/api/evm-events.mdx#the-newcontractevent-object","76":"docs/pages/api/evm-events.mdx#the-message-object","77":"docs/pages/api/evm-events.mdx#the-evmresult-object","78":"docs/pages/api/evm-events.mdx#advanced-examples","79":"docs/pages/api/evm-events.mdx#debugging","80":"docs/pages/api/evm-events.mdx#gas-profiling","81":"docs/pages/api/evm-events.mdx#error-handling","82":"docs/pages/api/evm-events.mdx#best-practices","83":"docs/pages/api/evm-events.mdx#related-topics","84":"docs/pages/api/json-rpc.mdx#json-rpc-support","85":"docs/pages/api/json-rpc.mdx#eip-1193-provider","86":"docs/pages/api/json-rpc.mdx#supported-methods","87":"docs/pages/api/json-rpc.mdx#core-ethereum-methods","88":"docs/pages/api/json-rpc.mdx#extended-methods","89":"docs/pages/api/json-rpc.mdx#client-integration","90":"docs/pages/api/json-rpc.mdx#using-with-viem","91":"docs/pages/api/json-rpc.mdx#using-with-ethers","92":"docs/pages/api/json-rpc.mdx#error-handling","93":"docs/pages/api/json-rpc.mdx#best-practices","94":"docs/pages/api/json-rpc.mdx#related-topics","95":"docs/pages/api/json-rpc.mdx#using-tevm-actions","96":"docs/pages/api/json-rpc.mdx#optimistic-updates-with-receipt-manager","97":"docs/pages/api/packages.mdx#package-reference","98":"docs/pages/api/packages.mdx#installation-options","99":"docs/pages/api/packages.mdx#complete-package","100":"docs/pages/api/packages.mdx#individual-packages","101":"docs/pages/api/packages.mdx#core-packages","102":"docs/pages/api/packages.mdx#node--client","103":"docs/pages/api/packages.mdx#evm--execution","104":"docs/pages/api/packages.mdx#state--storage","105":"docs/pages/api/packages.mdx#transaction-handling","106":"docs/pages/api/packages.mdx#transaction-processing","107":"docs/pages/api/packages.mdx#block--receipt-management","108":"docs/pages/api/packages.mdx#client-integration","109":"docs/pages/api/packages.mdx#communication","110":"docs/pages/api/packages.mdx#actions--procedures","111":"docs/pages/api/packages.mdx#smart-contract-tools","112":"docs/pages/api/packages.mdx#contract-interaction","113":"docs/pages/api/packages.mdx#contract-management","114":"docs/pages/api/packages.mdx#utilities--helpers","115":"docs/pages/api/packages.mdx#core-utilities","116":"docs/pages/api/packages.mdx#development-tools","117":"docs/pages/api/packages.mdx#data-structures","118":"docs/pages/api/packages.mdx#development--debugging","119":"docs/pages/api/packages.mdx#logging--debugging","120":"docs/pages/api/packages.mdx#storage--types","121":"docs/pages/api/packages.mdx#best-practices","122":"docs/pages/api/packages.mdx#related-topics","123":"docs/pages/api/vm-and-submodules.mdx#vm--submodules","124":"docs/pages/api/vm-and-submodules.mdx#overview","125":"docs/pages/api/vm-and-submodules.mdx#evm-module","126":"docs/pages/api/vm-and-submodules.mdx#key-features","127":"docs/pages/api/vm-and-submodules.mdx#common-operations","128":"docs/pages/api/vm-and-submodules.mdx#blockchain-module","129":"docs/pages/api/vm-and-submodules.mdx#fork-support","130":"docs/pages/api/vm-and-submodules.mdx#statemanager","131":"docs/pages/api/vm-and-submodules.mdx#working-with-accounts","132":"docs/pages/api/vm-and-submodules.mdx#transaction-pool","133":"docs/pages/api/vm-and-submodules.mdx#transaction-validation","134":"docs/pages/api/vm-and-submodules.mdx#receiptsmanager","135":"docs/pages/api/vm-and-submodules.mdx#working-with-logs","136":"docs/pages/api/vm-and-submodules.mdx#best-practices","137":"docs/pages/api/vm-and-submodules.mdx#related-topics","138":"docs/pages/examples/debugger-ui.mdx#building-a-debugger-ui","139":"docs/pages/examples/debugger-ui.mdx#project-setup","140":"docs/pages/examples/debugger-ui.mdx#components","141":"docs/pages/examples/debugger-ui.mdx#1-evmdebuggersvelte","142":"docs/pages/examples/debugger-ui.mdx#2-appsvelte","143":"docs/pages/examples/debugger-ui.mdx#advanced-features","144":"docs/pages/examples/debugger-ui.mdx#memory-viewer-component","145":"docs/pages/examples/debugger-ui.mdx#storage-viewer-component","146":"docs/pages/examples/debugger-ui.mdx#usage","147":"docs/pages/examples/debugger-ui.mdx#customization","148":"docs/pages/examples/debugger-ui.mdx#adding-transaction-history","149":"docs/pages/examples/debugger-ui.mdx#adding-gas-profiling","150":"docs/pages/examples/debugger-ui.mdx#related-topics","151":"docs/pages/examples/ethers.mdx#using-with-ethersjs","152":"docs/pages/examples/ethers.mdx#basic-setup","153":"docs/pages/examples/ethers.mdx#contract-interaction","154":"docs/pages/examples/ethers.mdx#1-reading-contract-state","155":"docs/pages/examples/ethers.mdx#2-writing-to-contracts","156":"docs/pages/examples/ethers.mdx#event-handling","157":"docs/pages/examples/ethers.mdx#1-listening-for-events","158":"docs/pages/examples/ethers.mdx#2-querying-past-events","159":"docs/pages/examples/ethers.mdx#advanced-usage","160":"docs/pages/examples/ethers.mdx#1-contract-deployment","161":"docs/pages/examples/ethers.mdx#2-low-level-transaction-handling","162":"docs/pages/examples/ethers.mdx#3-interface-encodingdecoding","163":"docs/pages/examples/ethers.mdx#testing-with-ethers","164":"docs/pages/examples/ethers.mdx#best-practices","165":"docs/pages/examples/ethers.mdx#related-topics","166":"docs/pages/examples/forking-mainnet.mdx#forking-mainnet-example","167":"docs/pages/examples/forking-mainnet.mdx#basic-fork-setup","168":"docs/pages/examples/forking-mainnet.mdx#account-impersonation","169":"docs/pages/examples/forking-mainnet.mdx#working-with-forked-contracts","170":"docs/pages/examples/forking-mainnet.mdx#fork-at-specific-block","171":"docs/pages/examples/forking-mainnet.mdx#multiple-network-support","172":"docs/pages/examples/local-testing.mdx#local-testing","173":"docs/pages/examples/local-testing.mdx#basic-test-setup","174":"docs/pages/examples/local-testing.mdx#contract-testing","175":"docs/pages/examples/local-testing.mdx#1-deployment--interaction","176":"docs/pages/examples/local-testing.mdx#2-event-testing","177":"docs/pages/examples/local-testing.mdx#complex-testing-scenarios","178":"docs/pages/examples/local-testing.mdx#1-state-management","179":"docs/pages/examples/local-testing.mdx#2-fork-testing","180":"docs/pages/examples/local-testing.mdx#3-time-based-testing","181":"docs/pages/examples/local-testing.mdx#testing-utilities","182":"docs/pages/examples/local-testing.mdx#1-account-management","183":"docs/pages/examples/local-testing.mdx#2-transaction-helpers","184":"docs/pages/examples/local-testing.mdx#related-topics","185":"docs/pages/examples/local-testing.mdx#replaying-contracts-with-shadow-events","186":"docs/pages/examples/local-testing.mdx#estimating-gas-for-token-approval","187":"docs/pages/examples/viem.mdx#using-with-viem","188":"docs/pages/examples/viem.mdx#basic-setup","189":"docs/pages/examples/viem.mdx#using-viem","190":"docs/pages/examples/viem.mdx#1-public-actions","191":"docs/pages/examples/viem.mdx#2-wallet-actions","192":"docs/pages/examples/viem.mdx#3-test-actions","193":"docs/pages/examples/viem.mdx#tevm-actions","194":"docs/pages/examples/viem.mdx#1-contract-interactions","195":"docs/pages/examples/viem.mdx#2-account-management","196":"docs/pages/examples/viem.mdx#3-other-tevm-actions","197":"docs/pages/examples/viem.mdx#complete-action-reference","198":"docs/pages/examples/viem.mdx#public-actions","199":"docs/pages/examples/viem.mdx#contract-interactions","200":"docs/pages/examples/viem.mdx#block--transaction","201":"docs/pages/examples/viem.mdx#account--chain","202":"docs/pages/examples/viem.mdx#test-actions","203":"docs/pages/examples/viem.mdx#block--mining","204":"docs/pages/examples/viem.mdx#account--state","205":"docs/pages/examples/viem.mdx#state-management","206":"docs/pages/examples/viem.mdx#wallet-actions","207":"docs/pages/examples/viem.mdx#account-management","208":"docs/pages/examples/viem.mdx#transaction-operations","209":"docs/pages/examples/viem.mdx#signing-operations","210":"docs/pages/examples/viem.mdx#chain-management","211":"docs/pages/examples/viem.mdx#permissions--assets","212":"docs/pages/core/mining-modes.mdx#mining-modes","213":"docs/pages/core/mining-modes.mdx#available-mining-modes","214":"docs/pages/core/mining-modes.mdx#auto-mining-auto","215":"docs/pages/core/mining-modes.mdx#interval-mining-interval","216":"docs/pages/core/mining-modes.mdx#manual-mining-manual","217":"docs/pages/core/mining-modes.mdx#gas-based-mining-gas","218":"docs/pages/core/mining-modes.mdx#changing-mining-modes","219":"docs/pages/core/mining-modes.mdx#best-practices","220":"docs/pages/core/mining-modes.mdx#example-testing-different-mining-modes","221":"docs/pages/core/mining-modes.mdx#related-topics","222":"docs/pages/introduction/architecture-overview.mdx#architecture-overview","223":"docs/pages/introduction/architecture-overview.mdx#actions-api","224":"docs/pages/introduction/architecture-overview.mdx#objects","225":"docs/pages/introduction/architecture-overview.mdx#actions","226":"docs/pages/introduction/architecture-overview.mdx#memoryclient","227":"docs/pages/introduction/architecture-overview.mdx#what-is-tevm-node","228":"docs/pages/introduction/architecture-overview.mdx#what-can-you-do-with-tevm-node","229":"docs/pages/introduction/architecture-overview.mdx#core-architecture","230":"docs/pages/introduction/architecture-overview.mdx#1-virtual-machine-evm","231":"docs/pages/introduction/architecture-overview.mdx#2-state-manager","232":"docs/pages/introduction/architecture-overview.mdx#3-transaction-pool-mempool","233":"docs/pages/introduction/architecture-overview.mdx#4-blockchain","234":"docs/pages/introduction/architecture-overview.mdx#5-receipts-manager","235":"docs/pages/introduction/architecture-overview.mdx#available-apis","236":"docs/pages/introduction/architecture-overview.mdx#1-high-level-actions","237":"docs/pages/introduction/architecture-overview.mdx#2-json-rpc-interface","238":"docs/pages/introduction/architecture-overview.mdx#3-direct-vm-access","239":"docs/pages/introduction/architecture-overview.mdx#4-contract-utilities","240":"docs/pages/introduction/architecture-overview.mdx#key-features","241":"docs/pages/introduction/architecture-overview.mdx#1-forking","242":"docs/pages/introduction/architecture-overview.mdx#2-mining-modes","243":"docs/pages/introduction/architecture-overview.mdx#3-custom-precompiles","244":"docs/pages/introduction/architecture-overview.mdx#4-state-management","245":"docs/pages/introduction/architecture-overview.mdx#common-use-cases","246":"docs/pages/introduction/architecture-overview.mdx#integration-examples","247":"docs/pages/introduction/architecture-overview.mdx#with-viem","248":"docs/pages/introduction/architecture-overview.mdx#with-ethersjs","249":"docs/pages/introduction/architecture-overview.mdx#next-steps","250":"docs/pages/introduction/installation.mdx#installation--quickstart","251":"docs/pages/introduction/installation.mdx#1-install","252":"docs/pages/introduction/installation.mdx#2-quick-start","253":"docs/pages/introduction/installation.mdx#3-next-steps","254":"docs/pages/introduction/what-is-tevm-node.mdx#what-is-tevm-node","255":"docs/pages/introduction/what-is-tevm-node.mdx#key-features","256":"docs/pages/introduction/what-is-tevm-node.mdx#quick-example","257":"docs/pages/introduction/what-is-tevm-node.mdx#why-tevm-node","258":"docs/pages/introduction/what-is-tevm-node.mdx#important-note","259":"docs/pages/introduction/what-is-tevm-node.mdx#next-steps","260":"docs/pages/introduction/why-run-ethereum-in-js.mdx#why-run-ethereum-in-javascript","261":"docs/pages/introduction/why-run-ethereum-in-js.mdx#1-advanced-gas-estimation--local-execution","262":"docs/pages/introduction/why-run-ethereum-in-js.mdx#2-user-experience-enhancements","263":"docs/pages/introduction/why-run-ethereum-in-js.mdx#3-testing--debugging","264":"docs/pages/introduction/why-run-ethereum-in-js.mdx#4-ecosystem--portability","265":"docs/pages/reference/actions.mdx#tevmactions","266":"docs/pages/reference/actions.mdx#installation","267":"docs/pages/reference/actions.mdx#overview","268":"docs/pages/reference/actions.mdx#api-reference","269":"docs/pages/reference/actions.mdx#error-classes","270":"docs/pages/reference/actions.mdx#core-types","271":"docs/pages/reference/actions.mdx#base-actions","272":"docs/pages/reference/actions.mdx#call-actions","273":"docs/pages/reference/actions.mdx#contract-actions","274":"docs/pages/reference/actions.mdx#deploy-actions","275":"docs/pages/reference/actions.mdx#validation-functions","276":"docs/pages/reference/actions.mdx#json-rpc-procedures","277":"docs/pages/reference/actions.mdx#internal-utilities","278":"docs/pages/reference/actions.mdx#ethereum-json-rpc-actions","279":"docs/pages/reference/actions.mdx#account--network","280":"docs/pages/reference/actions.mdx#state-reading","281":"docs/pages/reference/actions.mdx#block-operations","282":"docs/pages/reference/actions.mdx#anvil-testing--development-actions","283":"docs/pages/reference/actions.mdx#state-manipulation","284":"docs/pages/reference/actions.mdx#mining--chain-control","285":"docs/pages/reference/actions.mdx#debug-actions","286":"docs/pages/reference/actions.mdx#usage-examples","287":"docs/pages/reference/actions.mdx#basic-call-example","288":"docs/pages/reference/actions.mdx#contract-interaction-example","289":"docs/pages/reference/actions.mdx#deployment-example","290":"docs/pages/reference/actions.mdx#json-rpc-example","291":"docs/pages/reference/actions.mdx#error-handling","292":"docs/pages/reference/actions.mdx#see-also","293":"docs/pages/reference/address.mdx#tevmaddress","294":"docs/pages/reference/address.mdx#installation","295":"docs/pages/reference/address.mdx#overview","296":"docs/pages/reference/address.mdx#api-reference","297":"docs/pages/reference/address.mdx#classes","298":"docs/pages/reference/address.mdx#address","299":"docs/pages/reference/address.mdx#functions","300":"docs/pages/reference/address.mdx#createaddressaddress-string--number--bigint--address--uint8array-address","301":"docs/pages/reference/address.mdx#createcontractaddressfrom-address-nonce-bigint-address","302":"docs/pages/reference/address.mdx#create2contractaddressfrom-address-salt-string-code-string-address","303":"docs/pages/reference/address.mdx#error-handling","304":"docs/pages/reference/address.mdx#examples","305":"docs/pages/reference/address.mdx#basic-address-creation-and-validation","306":"docs/pages/reference/address.mdx#contract-address-generation","307":"docs/pages/reference/address.mdx#see-also","308":"docs/pages/reference/block.mdx#tevmblock","309":"docs/pages/reference/block.mdx#installation","310":"docs/pages/reference/block.mdx#overview","311":"docs/pages/reference/block.mdx#api-reference","312":"docs/pages/reference/block.mdx#core-classes","313":"docs/pages/reference/block.mdx#interfaces","314":"docs/pages/reference/block.mdx#verkle-tree-types","315":"docs/pages/reference/block.mdx#block-types","316":"docs/pages/reference/block.mdx#utility-functions","317":"docs/pages/reference/block.mdx#usage-examples","318":"docs/pages/reference/block.mdx#creating-a-new-block","319":"docs/pages/reference/block.mdx#creating-a-block-from-data","320":"docs/pages/reference/block.mdx#working-with-block-headers","321":"docs/pages/reference/block.mdx#creating-from-rlp-data","322":"docs/pages/reference/block.mdx#see-also","323":"docs/pages/reference/blockchain.mdx#tevmblockchain","324":"docs/pages/reference/blockchain.mdx#installation","325":"docs/pages/reference/blockchain.mdx#overview","326":"docs/pages/reference/blockchain.mdx#api-reference","327":"docs/pages/reference/blockchain.mdx#core-types","328":"docs/pages/reference/blockchain.mdx#chain","329":"docs/pages/reference/blockchain.mdx#chainoptions","330":"docs/pages/reference/blockchain.mdx#functions","331":"docs/pages/reference/blockchain.mdx#createchainoptions-chainoptions-promisechain","332":"docs/pages/reference/blockchain.mdx#createbasechainoptions-chainoptions-basechain","333":"docs/pages/reference/blockchain.mdx#block-operations","334":"docs/pages/reference/blockchain.mdx#getting-blocks","335":"docs/pages/reference/blockchain.mdx#adding--removing-blocks","336":"docs/pages/reference/blockchain.mdx#block-validation","337":"docs/pages/reference/blockchain.mdx#chain-traversal","338":"docs/pages/reference/blockchain.mdx#block-iterator","339":"docs/pages/reference/blockchain.mdx#iterator-head-management","340":"docs/pages/reference/blockchain.mdx#forking","341":"docs/pages/reference/blockchain.mdx#error-handling","342":"docs/pages/reference/blockchain.mdx#examples","343":"docs/pages/reference/blockchain.mdx#basic-chain-management","344":"docs/pages/reference/blockchain.mdx#chain-forking","345":"docs/pages/reference/blockchain.mdx#chain-iteration","346":"docs/pages/reference/blockchain.mdx#see-also","347":"docs/pages/reference/common.mdx#tevmcommon","348":"docs/pages/reference/common.mdx#installation","349":"docs/pages/reference/common.mdx#overview","350":"docs/pages/reference/common.mdx#api-reference","351":"docs/pages/reference/common.mdx#enumerations","352":"docs/pages/reference/common.mdx#interfaces","353":"docs/pages/reference/common.mdx#type-aliases","354":"docs/pages/reference/common.mdx#functions","355":"docs/pages/reference/common.mdx#supported-networks","356":"docs/pages/reference/common.mdx#layer-1-networks","357":"docs/pages/reference/common.mdx#layer-2-networks","358":"docs/pages/reference/common.mdx#alternative-networks","359":"docs/pages/reference/common.mdx#development-networks","360":"docs/pages/reference/common.mdx#usage-examples","361":"docs/pages/reference/common.mdx#basic-configuration","362":"docs/pages/reference/common.mdx#custom-chain-configuration","363":"docs/pages/reference/common.mdx#using-with-custom-crypto","364":"docs/pages/reference/common.mdx#network-specific-configuration","365":"docs/pages/reference/common.mdx#error-handling","366":"docs/pages/reference/common.mdx#see-also","367":"docs/pages/reference/contract.mdx#tevmcontract","368":"docs/pages/reference/contract.mdx#installation","369":"docs/pages/reference/contract.mdx#overview","370":"docs/pages/reference/contract.mdx#api-reference","371":"docs/pages/reference/contract.mdx#type-aliases","372":"docs/pages/reference/contract.mdx#functions","373":"docs/pages/reference/contract.mdx#pre-built-contracts","374":"docs/pages/reference/contract.mdx#usage-examples","375":"docs/pages/reference/contract.mdx#creating-a-contract-instance","376":"docs/pages/reference/contract.mdx#contract-with-address","377":"docs/pages/reference/contract.mdx#using-standard-contracts","378":"docs/pages/reference/contract.mdx#deployless-scripts","379":"docs/pages/reference/contract.mdx#event-handling","380":"docs/pages/reference/contract.mdx#best-practices","381":"docs/pages/reference/contract.mdx#1-type-safety","382":"docs/pages/reference/contract.mdx#2-error-handling","383":"docs/pages/reference/contract.mdx#3-gas-management","384":"docs/pages/reference/contract.mdx#contract-types","385":"docs/pages/reference/contract.mdx#see-also","386":"docs/pages/reference/decorators.mdx#tevmdecorators","387":"docs/pages/reference/decorators.mdx#installation","388":"docs/pages/reference/decorators.mdx#overview","389":"docs/pages/reference/decorators.mdx#api-reference","390":"docs/pages/reference/decorators.mdx#core-functions","391":"docs/pages/reference/decorators.mdx#core-types","392":"docs/pages/reference/decorators.mdx#provider-types","393":"docs/pages/reference/decorators.mdx#action-types","394":"docs/pages/reference/decorators.mdx#rpc-schema-types","395":"docs/pages/reference/decorators.mdx#ethereum-types","396":"docs/pages/reference/decorators.mdx#utility-types","397":"docs/pages/reference/decorators.mdx#usage-examples","398":"docs/pages/reference/decorators.mdx#creating-an-eip-1193-provider","399":"docs/pages/reference/decorators.mdx#using-ethereum-actions","400":"docs/pages/reference/decorators.mdx#using-tevm-actions","401":"docs/pages/reference/decorators.mdx#error-handling","402":"docs/pages/reference/decorators.mdx#best-practices","403":"docs/pages/reference/decorators.mdx#1-type-safety","404":"docs/pages/reference/decorators.mdx#2-error-handling","405":"docs/pages/reference/decorators.mdx#3-chain-management","406":"docs/pages/reference/decorators.mdx#see-also","407":"docs/pages/reference/evm.mdx#tevmevm","408":"docs/pages/reference/evm.mdx#installation","409":"docs/pages/reference/evm.mdx#api-reference","410":"docs/pages/reference/evm.mdx#enumerations","411":"docs/pages/reference/evm.mdx#core-classes","412":"docs/pages/reference/evm.mdx#interfaces","413":"docs/pages/reference/evm.mdx#type-aliases","414":"docs/pages/reference/evm.mdx#variables","415":"docs/pages/reference/evm.mdx#functions","416":"docs/pages/reference/evm.mdx#usage-examples","417":"docs/pages/reference/evm.mdx#creating-an-evm-instance","418":"docs/pages/reference/evm.mdx#running-evm-calls","419":"docs/pages/reference/evm.mdx#custom-precompiles","420":"docs/pages/reference/evm.mdx#error-handling","421":"docs/pages/reference/evm.mdx#debugging-and-performance","422":"docs/pages/reference/evm.mdx#see-also","423":"docs/pages/reference/#package-reference-documentation","424":"docs/pages/reference/memory-client.mdx#tevmmemory-client","425":"docs/pages/reference/memory-client.mdx#installation","426":"docs/pages/reference/memory-client.mdx#api-reference","427":"docs/pages/reference/memory-client.mdx#type-aliases","428":"docs/pages/reference/memory-client.mdx#actions","429":"docs/pages/reference/memory-client.mdx#overview","430":"docs/pages/reference/memory-client.mdx#core-components","431":"docs/pages/reference/memory-client.mdx#memoryclient","432":"docs/pages/reference/memory-client.mdx#client-options","433":"docs/pages/reference/memory-client.mdx#features","434":"docs/pages/reference/memory-client.mdx#mining-modes","435":"docs/pages/reference/memory-client.mdx#network-forking","436":"docs/pages/reference/memory-client.mdx#state-management","437":"docs/pages/reference/memory-client.mdx#contract-interactions","438":"docs/pages/reference/memory-client.mdx#transaction-management","439":"docs/pages/reference/memory-client.mdx#actions-api","440":"docs/pages/reference/memory-client.mdx#tevm-actions","441":"docs/pages/reference/memory-client.mdx#viem-actions","442":"docs/pages/reference/memory-client.mdx#advanced-features","443":"docs/pages/reference/memory-client.mdx#state-persistence","444":"docs/pages/reference/memory-client.mdx#http-server-integration","445":"docs/pages/reference/memory-client.mdx#network-support","446":"docs/pages/reference/memory-client.mdx#eip-support","447":"docs/pages/reference/memory-client.mdx#types","448":"docs/pages/reference/memory-client.mdx#license","449":"docs/pages/reference/memory-client.mdx#see-also","450":"docs/pages/reference/node.mdx#tevmnode-api-reference","451":"docs/pages/reference/node.mdx#quick-links","452":"docs/pages/reference/node.mdx#return-to-documentation","453":"docs/pages/reference/receipt-manager.mdx#tevmreceipt-manager","454":"docs/pages/reference/receipt-manager.mdx#installation","455":"docs/pages/reference/receipt-manager.mdx#overview","456":"docs/pages/reference/receipt-manager.mdx#core-components","457":"docs/pages/reference/receipt-manager.mdx#receiptsmanager","458":"docs/pages/reference/receipt-manager.mdx#key-methods","459":"docs/pages/reference/receipt-manager.mdx#receipt-types","460":"docs/pages/reference/receipt-manager.mdx#basetxreceipt","461":"docs/pages/reference/receipt-manager.mdx#prebyzantiumtxreceipt","462":"docs/pages/reference/receipt-manager.mdx#postbyzantiumtxreceipt","463":"docs/pages/reference/receipt-manager.mdx#eip4844blobtxreceipt","464":"docs/pages/reference/receipt-manager.mdx#database-management","465":"docs/pages/reference/receipt-manager.mdx#mapdb","466":"docs/pages/reference/receipt-manager.mdx#configuration-options","467":"docs/pages/reference/receipt-manager.mdx#usage-examples","468":"docs/pages/reference/receipt-manager.mdx#saving-and-retrieving-receipts","469":"docs/pages/reference/receipt-manager.mdx#working-with-logs","470":"docs/pages/reference/receipt-manager.mdx#constants-and-limits","471":"docs/pages/reference/receipt-manager.mdx#error-handling","472":"docs/pages/reference/receipt-manager.mdx#types","473":"docs/pages/reference/receipt-manager.mdx#license","474":"docs/pages/reference/rlp.mdx#tevmrlp-api-reference","475":"docs/pages/reference/rlp.mdx#quick-links","476":"docs/pages/reference/rlp.mdx#return-to-documentation","477":"docs/pages/reference/state.mdx#tevmstate","478":"docs/pages/reference/state.mdx#installation","479":"docs/pages/reference/state.mdx#overview","480":"docs/pages/reference/state.mdx#api-reference","481":"docs/pages/reference/state.mdx#enumerations","482":"docs/pages/reference/state.mdx#core-types","483":"docs/pages/reference/state.mdx#state-management","484":"docs/pages/reference/state.mdx#storage-types","485":"docs/pages/reference/state.mdx#caching","486":"docs/pages/reference/state.mdx#core-functions","487":"docs/pages/reference/state.mdx#state-creation-and-management","488":"docs/pages/reference/state.mdx#state-operations","489":"docs/pages/reference/state.mdx#state-root-management","490":"docs/pages/reference/state.mdx#checkpointing-and-committing","491":"docs/pages/reference/state.mdx#cache-management","492":"docs/pages/reference/state.mdx#genesis-and-forking","493":"docs/pages/reference/state.mdx#storage-operations","494":"docs/pages/reference/state.mdx#usage-examples","495":"docs/pages/reference/state.mdx#creating-a-state-manager","496":"docs/pages/reference/trie.mdx#tevmtrie-api-reference","497":"docs/pages/reference/trie.mdx#quick-links","498":"docs/pages/reference/trie.mdx#return-to-documentation","499":"docs/pages/reference/tx.mdx#tevmtx","500":"docs/pages/reference/tx.mdx#installation","501":"docs/pages/reference/tx.mdx#api-reference","502":"docs/pages/reference/tx.mdx#enumerations","503":"docs/pages/reference/tx.mdx#classes","504":"docs/pages/reference/tx.mdx#interfaces","505":"docs/pages/reference/tx.mdx#type-aliases","506":"docs/pages/reference/tx.mdx#functions","507":"docs/pages/reference/tx.mdx#main-components","508":"docs/pages/reference/tx.mdx#transaction-types","509":"docs/pages/reference/tx.mdx#transactionfactory","510":"docs/pages/reference/tx.mdx#impersonated-transactions","511":"docs/pages/reference/tx.mdx#transaction-types-1","512":"docs/pages/reference/tx.mdx#legacy-transactions","513":"docs/pages/reference/tx.mdx#eip-2930-transactions","514":"docs/pages/reference/tx.mdx#eip-1559-transactions","515":"docs/pages/reference/tx.mdx#eip-4844-transactions","516":"docs/pages/reference/tx.mdx#common-operations","517":"docs/pages/reference/tx.mdx#creating-transactions","518":"docs/pages/reference/tx.mdx#signing-transactions","519":"docs/pages/reference/tx.mdx#transaction-methods","520":"docs/pages/reference/tx.mdx#error-handling","521":"docs/pages/reference/tx.mdx#see-also","522":"docs/pages/reference/txpool.mdx#tevmtxpool","523":"docs/pages/reference/txpool.mdx#installation","524":"docs/pages/reference/txpool.mdx#overview","525":"docs/pages/reference/txpool.mdx#api-reference","526":"docs/pages/reference/txpool.mdx#core-class","527":"docs/pages/reference/txpool.mdx#txpool","528":"docs/pages/reference/txpool.mdx#constructor","529":"docs/pages/reference/txpool.mdx#properties","530":"docs/pages/reference/txpool.mdx#methods","531":"docs/pages/reference/txpool.mdx#usage-examples","532":"docs/pages/reference/txpool.mdx#creating-and-managing-a-transaction-pool","533":"docs/pages/reference/txpool.mdx#adding-transactions","534":"docs/pages/reference/txpool.mdx#retrieving-transactions","535":"docs/pages/reference/txpool.mdx#managing-transaction-lifecycle","536":"docs/pages/reference/txpool.mdx#pool-lifecycle-management","537":"docs/pages/reference/txpool.mdx#configuration","538":"docs/pages/reference/txpool.mdx#configuration-options","539":"docs/pages/reference/txpool.mdx#error-handling","540":"docs/pages/reference/txpool.mdx#best-practices","541":"docs/pages/reference/txpool.mdx#related-packages","542":"docs/pages/reference/txpool.mdx#license","543":"docs/pages/reference/utils.mdx#utilities--addresses","544":"docs/pages/reference/utils.mdx#createaddress","545":"docs/pages/reference/utils.mdx#signature","546":"docs/pages/reference/utils.mdx#behavior--notes","547":"docs/pages/reference/utils.mdx#address-class","548":"docs/pages/reference/utils.mdx#createcontractaddress","549":"docs/pages/reference/utils.mdx#usage","550":"docs/pages/reference/utils.mdx#error-handling","551":"docs/pages/reference/utils.mdx#common-errors","552":"docs/pages/reference/utils.mdx#other-handy-utilities","553":"docs/pages/reference/utils.mdx#tevmutils","554":"docs/pages/reference/utils.mdx#installation","555":"docs/pages/reference/utils.mdx#main-components","556":"docs/pages/reference/utils.mdx#data-types-and-encoding","557":"docs/pages/reference/utils.mdx#hex-and-bytes-conversion","558":"docs/pages/reference/utils.mdx#type-checking","559":"docs/pages/reference/utils.mdx#ethereum-specific","560":"docs/pages/reference/utils.mdx#unit-conversion","561":"docs/pages/reference/utils.mdx#cryptographic-functions","562":"docs/pages/reference/utils.mdx#abi-encodingdecoding","563":"docs/pages/reference/utils.mdx#rlp-encodingdecoding","564":"docs/pages/reference/utils.mdx#memory-database","565":"docs/pages/reference/utils.mdx#event-emitter","566":"docs/pages/reference/utils.mdx#types","567":"docs/pages/reference/utils.mdx#basic-types","568":"docs/pages/reference/utils.mdx#abi-types","569":"docs/pages/reference/utils.mdx#contract-types","570":"docs/pages/reference/utils.mdx#constants","571":"docs/pages/reference/utils.mdx#error-handling-1","572":"docs/pages/reference/utils.mdx#see-also","573":"docs/pages/reference/vm.mdx#tevmvm","574":"docs/pages/reference/vm.mdx#installation","575":"docs/pages/reference/vm.mdx#overview","576":"docs/pages/reference/vm.mdx#api-reference","577":"docs/pages/reference/vm.mdx#core-types","578":"docs/pages/reference/vm.mdx#vm","579":"docs/pages/reference/vm.mdx#block-building","580":"docs/pages/reference/vm.mdx#transaction-processing","581":"docs/pages/reference/vm.mdx#block-processing","582":"docs/pages/reference/vm.mdx#events","583":"docs/pages/reference/vm.mdx#core-functions","584":"docs/pages/reference/vm.mdx#vm-creation-and-management","585":"docs/pages/reference/vm.mdx#block-operations","586":"docs/pages/reference/vm.mdx#transaction-operations","587":"docs/pages/reference/vm.mdx#state-management","588":"docs/pages/reference/vm.mdx#usage-examples","589":"docs/pages/reference/vm.mdx#creating-a-vm-instance","590":"docs/pages/reference/vm.mdx#building-and-executing-a-block","591":"docs/pages/reference/vm.mdx#executing-a-transaction","592":"docs/pages/reference/vm.mdx#error-handling","593":"docs/pages/reference/vm.mdx#configuration","594":"docs/pages/reference/vm.mdx#related-packages","595":"docs/pages/reference/vm.mdx#license"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[2,1,30],"1":[3,2,79],"2":[2,2,59],"3":[2,2,19],"4":[2,2,1],"5":[4,4,47],"6":[4,4,38],"7":[4,4,34],"8":[3,4,33],"9":[2,2,101],"10":[2,2,16],"11":[3,1,22],"12":[3,3,22],"13":[3,3,20],"14":[2,3,34],"15":[2,3,1],"16":[3,4,41],"17":[4,4,25],"18":[4,4,32],"19":[2,3,1],"20":[3,5,36],"21":[3,5,27],"22":[3,5,39],"23":[2,3,68],"24":[2,3,8],"25":[3,1,19],"26":[2,3,62],"27":[2,5,31],"28":[2,3,1],"29":[5,4,54],"30":[2,4,45],"31":[2,4,43],"32":[2,3,33],"33":[2,5,59],"34":[2,3,9],"35":[2,1,29],"36":[2,2,40],"37":[2,2,47],"38":[2,2,1],"39":[2,4,42],"40":[2,4,36],"41":[2,2,1],"42":[2,4,36],"43":[2,4,49],"44":[2,4,30],"45":[2,4,24],"46":[2,2,1],"47":[2,4,18],"48":[2,4,21],"49":[2,2,1],"50":[3,4,33],"51":[3,4,29],"52":[3,4,16],"53":[3,4,31],"54":[2,2,1],"55":[2,4,34],"56":[2,2,9],"57":[2,1,13],"58":[1,2,14],"59":[1,3,32],"60":[2,3,44],"61":[1,3,31],"62":[1,2,11],"63":[1,3,24],"64":[2,3,9],"65":[1,3,1],"66":[4,4,14],"67":[4,4,14],"68":[4,4,17],"69":[2,2,43],"70":[2,2,8],"71":[2,1,12],"72":[2,1,20],"73":[2,2,38],"74":[3,3,107],"75":[3,3,26],"76":[3,3,71],"77":[3,3,143],"78":[2,2,1],"79":[1,4,73],"80":[2,4,63],"81":[2,4,48],"82":[2,2,49],"83":[2,2,9],"84":[3,1,24],"85":[3,3,35],"86":[2,3,1],"87":[3,5,62],"88":[2,5,44],"89":[2,3,1],"90":[3,5,27],"91":[3,5,23],"92":[2,3,63],"93":[2,3,90],"94":[2,3,21],"95":[3,3,104],"96":[5,3,79],"97":[2,1,26],"98":[2,2,1],"99":[2,4,16],"100":[2,4,14],"101":[2,2,1],"102":[3,4,30],"103":[3,4,22],"104":[3,4,18],"105":[2,2,1],"106":[2,4,19],"107":[4,4,20],"108":[2,2,1],"109":[1,4,21],"110":[3,4,18],"111":[3,2,1],"112":[2,5,19],"113":[2,5,11],"114":[3,2,1],"115":[2,5,19],"116":[2,5,17],"117":[2,5,21],"118":[3,2,1],"119":[3,5,19],"120":[3,5,20],"121":[2,2,60],"122":[2,2,7],"123":[3,1,24],"124":[1,3,32],"125":[2,3,39],"126":[2,5,28],"127":[2,5,30],"128":[2,3,41],"129":[2,5,21],"130":[1,3,41],"131":[3,4,22],"132":[2,3,32],"133":[2,5,15],"134":[1,3,37],"135":[3,4,15],"136":[2,3,53],"137":[2,3,24],"138":[4,1,31],"139":[2,4,20],"140":[1,4,1],"141":[3,5,169],"142":[3,5,29],"143":[2,4,1],"144":[3,6,74],"145":[3,6,79],"146":[1,4,49],"147":[1,4,1],"148":[3,5,53],"149":[3,5,56],"150":[2,4,5],"151":[4,1,20],"152":[2,4,32],"153":[2,4,1],"154":[4,6,43],"155":[4,6,45],"156":[2,4,1],"157":[4,6,41],"158":[4,6,38],"159":[2,4,1],"160":[3,6,34],"161":[5,6,32],"162":[4,6,42],"163":[3,4,64],"164":[2,4,90],"165":[2,4,8],"166":[3,1,1],"167":[3,3,48],"168":[2,3,37],"169":[4,3,40],"170":[4,3,33],"171":[3,3,29],"172":[2,1,29],"173":[3,2,70],"174":[2,2,1],"175":[4,3,69],"176":[3,3,58],"177":[3,2,1],"178":[3,4,49],"179":[3,4,62],"180":[4,4,72],"181":[2,2,1],"182":[3,3,37],"183":[3,3,41],"184":[2,2,13],"185":[5,2,89],"186":[5,2,51],"187":[3,1,30],"188":[2,3,63],"189":[2,3,13],"190":[3,4,30],"191":[3,4,50],"192":[3,4,58],"193":[2,3,15],"194":[3,5,34],"195":[3,5,30],"196":[4,5,66],"197":[3,3,1],"198":[2,6,9],"199":[2,8,7],"200":[3,8,8],"201":[3,8,6],"202":[2,6,9],"203":[3,8,8],"204":[3,8,7],"205":[2,8,6],"206":[2,6,9],"207":[2,8,3],"208":[2,8,5],"209":[2,8,3],"210":[2,8,3],"211":[3,8,4],"212":[2,1,26],"213":[3,2,1],"214":[4,3,28],"215":[4,3,38],"216":[4,3,36],"217":[5,3,39],"218":[3,2,21],"219":[2,2,54],"220":[5,2,43],"221":[2,2,20],"222":[2,1,20],"223":[2,2,26],"224":[1,4,27],"225":[1,4,93],"226":[1,2,69],"227":[5,2,73],"228":[8,2,70],"229":[2,2,11],"230":[5,3,33],"231":[3,3,22],"232":[5,3,17],"233":[2,3,17],"234":[3,3,19],"235":[2,2,12],"236":[4,4,53],"237":[4,4,26],"238":[4,4,22],"239":[3,4,54],"240":[2,2,1],"241":[2,4,27],"242":[3,4,21],"243":[3,4,25],"244":[3,4,27],"245":[3,2,51],"246":[2,2,1],"247":[2,4,37],"248":[3,4,22],"249":[2,2,13],"250":[3,1,1],"251":[2,3,9],"252":[3,3,37],"253":[3,3,8],"254":[5,1,48],"255":[2,5,52],"256":[2,5,29],"257":[4,5,36],"258":[2,5,29],"259":[2,5,9],"260":[6,1,1],"261":[7,6,32],"262":[4,6,17],"263":[4,6,13],"264":[4,6,19],"265":[3,1,39],"266":[1,3,5],"267":[1,3,31],"268":[2,3,1],"269":[2,5,24],"270":[2,5,16],"271":[2,5,1],"272":[2,7,19],"273":[2,7,13],"274":[2,7,11],"275":[2,5,19],"276":[3,5,16],"277":[2,5,19],"278":[4,5,1],"279":[3,9,19],"280":[2,9,18],"281":[2,9,8],"282":[5,5,1],"283":[2,10,14],"284":[4,10,13],"285":[2,5,8],"286":[2,3,1],"287":[3,5,21],"288":[3,5,21],"289":[2,5,19],"290":[3,5,17],"291":[2,3,25],"292":[2,3,10],"293":[3,1,23],"294":[1,3,5],"295":[1,3,29],"296":[2,3,1],"297":[1,5,1],"298":[1,6,68],"299":[1,5,1],"300":[8,6,44],"301":[5,6,40],"302":[6,6,54],"303":[2,3,28],"304":[1,3,1],"305":[5,4,32],"306":[3,4,30],"307":[2,3,12],"308":[3,1,35],"309":[1,3,5],"310":[1,3,21],"311":[2,3,1],"312":[2,5,15],"313":[1,5,21],"314":[3,5,11],"315":[2,5,19],"316":[2,5,20],"317":[2,3,1],"318":[4,5,17],"319":[5,5,52],"320":[4,5,14],"321":[4,5,18],"322":[2,3,10],"323":[3,1,40],"324":[1,3,5],"325":[1,3,21],"326":[2,3,1],"327":[2,5,1],"328":[1,7,79],"329":[1,7,38],"330":[1,5,1],"331":[8,6,28],"332":[4,6,9],"333":[2,5,1],"334":[2,7,18],"335":[4,7,13],"336":[2,7,8],"337":[2,5,1],"338":[2,7,21],"339":[3,7,14],"340":[1,5,40],"341":[2,5,29],"342":[1,3,1],"343":[3,4,31],"344":[2,4,35],"345":[2,4,35],"346":[2,3,10],"347":[3,1,38],"348":[1,3,5],"349":[1,3,21],"350":[2,3,1],"351":[1,5,9],"352":[1,5,17],"353":[2,5,23],"354":[1,5,11],"355":[2,5,9],"356":[3,7,11],"357":[3,7,16],"358":[2,7,13],"359":[2,7,10],"360":[2,3,1],"361":[2,5,12],"362":[3,5,26],"363":[4,5,13],"364":[3,5,19],"365":[2,3,29],"366":[2,3,9],"367":[3,1,35],"368":[1,3,5],"369":[1,3,30],"370":[2,3,1],"371":[2,5,27],"372":[1,5,7],"373":[3,5,12],"374":[2,3,1],"375":[4,5,44],"376":[3,5,23],"377":[3,5,37],"378":[2,5,34],"379":[2,5,22],"380":[2,3,1],"381":[3,5,31],"382":[3,5,27],"383":[3,5,21],"384":[2,3,31],"385":[2,3,14],"386":[3,1,41],"387":[1,3,5],"388":[1,3,27],"389":[2,3,1],"390":[2,5,1],"391":[2,5,1],"392":[2,7,17],"393":[2,7,15],"394":[3,7,21],"395":[2,7,16],"396":[2,7,14],"397":[2,3,1],"398":[5,5,27],"399":[3,5,24],"400":[3,5,24],"401":[2,5,25],"402":[2,3,1],"403":[3,5,26],"404":[3,5,25],"405":[3,5,28],"406":[2,3,10],"407":[3,1,41],"408":[1,3,5],"409":[2,3,1],"410":[1,5,6],"411":[2,5,11],"412":[1,5,22],"413":[2,5,14],"414":[1,5,5],"415":[1,5,11],"416":[2,3,1],"417":[4,5,31],"418":[3,5,25],"419":[2,5,38],"420":[2,5,30],"421":[3,5,24],"422":[2,3,10],"423":[3,1,84],"424":[4,1,32],"425":[1,4,6],"426":[2,4,1],"427":[2,6,31],"428":[1,6,48],"429":[1,4,33],"430":[2,4,1],"431":[1,6,29],"432":[2,6,24],"433":[1,4,1],"434":[2,5,21],"435":[2,5,26],"436":[2,5,21],"437":[2,5,37],"438":[2,5,23],"439":[2,4,8],"440":[2,6,29],"441":[2,6,13],"442":[2,4,1],"443":[2,6,14],"444":[3,6,15],"445":[2,4,19],"446":[2,4,13],"447":[1,4,20],"448":[1,4,9],"449":[2,4,9],"450":[5,1,17],"451":[2,5,6],"452":[3,5,7],"453":[4,1,26],"454":[1,4,6],"455":[1,4,29],"456":[2,4,1],"457":[1,6,21],"458":[2,7,33],"459":[2,6,13],"460":[1,8,9],"461":[1,8,7],"462":[1,8,9],"463":[1,8,8],"464":[2,4,1],"465":[1,6,23],"466":[2,6,11],"467":[2,4,1],"468":[4,6,19],"469":[3,6,14],"470":[3,4,30],"471":[2,4,23],"472":[1,4,26],"473":[1,4,20],"474":[5,1,17],"475":[2,5,6],"476":[3,5,7],"477":[3,1,29],"478":[1,3,5],"479":[1,3,29],"480":[2,3,1],"481":[1,5,6],"482":[2,5,1],"483":[2,7,29],"484":[2,7,17],"485":[1,7,13],"486":[2,5,1],"487":[4,7,19],"488":[2,7,28],"489":[3,7,13],"490":[3,7,12],"491":[2,7,11],"492":[3,7,15],"493":[2,7,10],"494":[2,3,1],"495":[4,5,1],"496":[5,1,17],"497":[2,5,6],"498":[3,5,7],"499":[3,1,41],"500":[1,3,5],"501":[2,3,1],"502":[1,5,8],"503":[1,5,17],"504":[1,5,20],"505":[2,5,14],"506":[1,5,19],"507":[2,3,1],"508":[2,5,36],"509":[1,5,30],"510":[2,5,35],"511":[2,3,1],"512":[2,5,22],"513":[3,5,15],"514":[3,5,14],"515":[3,5,18],"516":[2,3,1],"517":[2,5,29],"518":[2,5,7],"519":[2,5,31],"520":[2,3,26],"521":[2,3,18],"522":[3,1,24],"523":[1,3,5],"524":[1,3,25],"525":[2,3,1],"526":[2,5,1],"527":[1,7,12],"528":[1,8,5],"529":[1,8,44],"530":[1,8,43],"531":[2,3,1],"532":[6,5,28],"533":[2,5,15],"534":[2,5,26],"535":[3,5,18],"536":[3,5,19],"537":[1,3,25],"538":[2,4,34],"539":[2,3,36],"540":[2,3,50],"541":[2,3,12],"542":[1,3,2],"543":[3,1,33],"544":[1,3,36],"545":[1,4,12],"546":[3,4,30],"547":[2,3,39],"548":[1,3,28],"549":[1,4,21],"550":[2,4,9],"551":[2,3,30],"552":[3,3,69],"553":[3,1,47],"554":[1,3,5],"555":[2,3,1],"556":[4,5,1],"557":[4,9,36],"558":[2,9,13],"559":[2,5,1],"560":[2,7,21],"561":[2,7,28],"562":[3,5,34],"563":[3,5,18],"564":[2,5,23],"565":[2,5,22],"566":[1,3,1],"567":[2,4,22],"568":[2,4,24],"569":[2,4,24],"570":[1,3,20],"571":[2,3,21],"572":[2,3,7],"573":[3,1,32],"574":[1,3,5],"575":[1,3,42],"576":[2,3,1],"577":[2,5,1],"578":[1,7,24],"579":[2,7,19],"580":[2,7,12],"581":[2,7,12],"582":[1,7,15],"583":[2,5,1],"584":[4,7,11],"585":[2,7,19],"586":[2,7,7],"587":[2,7,12],"588":[2,3,1],"589":[4,5,14],"590":[5,5,29],"591":[3,5,24],"592":[2,3,53],"593":[1,3,31],"594":[2,3,15],"595":[1,3,2]},"averageFieldLength":[2.397651006711412,4.1409395973154375,23.406040268456383],"storedFields":{"0":{"href":"/advanced/custom-precompiles#custom-precompiles","html":"</header>\n<p><a href=\"https://github.com/evmts/tevm-monorepo\">Tevm Node</a> allows you to extend the <a href=\"https://ethereum.org/en/developers/docs/evm/\">EVM</a> with custom <a href=\"https://ethereum.org/en/developers/docs/evm/precompiles/\">precompiled contracts</a> written in JavaScript. These precompiles can provide native functionality at specific addresses, similar to <a href=\"https://www.evm.codes/precompiled\">Ethereum&#x27;s built-in precompiles</a>.</p>\n","isPage":true,"text":"\nTevm Node allows you to extend the EVM with custom precompiled contracts written in JavaScript. These precompiles can provide native functionality at specific addresses, similar to Ethereum&#x27;s built-in precompiles.\n","title":"Custom Precompiles","titles":[]},"1":{"href":"/advanced/custom-precompiles#using-tevmprecompiles","html":"\n<p>The <code>tevm/precompiles</code> package provides utilities for creating type-safe precompiles from contract <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html\">ABIs</a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode, definePrecompile } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createContract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/utils&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createImpersonatedTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/tx&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { EvmError, EvmErrorMessage } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/evm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a basic precompile</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> customPrecompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function double(bytes) returns (bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000123&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Simple precompile that doubles each byte</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Array.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">byte</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(byte) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create node with precompile</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  customPrecompiles: [customPrecompile.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">precompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a transaction to interact with the precompile</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: customPrecompile.contract.address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x00&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute the transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span></code></pre>\n","isPage":false,"text":"\nThe tevm/precompiles package provides utilities for creating type-safe precompiles from contract ABIs:\nimport { createTevmNode, definePrecompile } from &#x27;tevm&#x27;\nimport { createAddress } from &#x27;tevm/address&#x27;\nimport { createContract } from &#x27;tevm/contract&#x27;\nimport { parseAbi } from &#x27;tevm/utils&#x27;\nimport { createImpersonatedTx } from &#x27;tevm/tx&#x27;\nimport { EvmError, EvmErrorMessage } from &#x27;tevm/evm&#x27;\n \n// Create a basic precompile\nconst customPrecompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function double(bytes) returns (bytes)&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000123&#x27;\n  }),\n  call: async ({ data }) =&gt; {\n    // Simple precompile that doubles each byte\n    const input = Array.from(data)\n    return {\n      returnValue: new Uint8Array(input.map(byte =&gt; Number(byte) * 2)),\n      executionGasUsed: 200n,\n    }\n  },\n})\n \n// Create node with precompile\nconst node = createTevmNode({\n  customPrecompiles: [customPrecompile.precompile()],\n})\n \n// Create a transaction to interact with the precompile\nconst tx = createImpersonatedTx({\n  impersonatedAddress: createAddress(&#x27;0x1234567890123456789012345678901234567890&#x27;),\n  to: customPrecompile.contract.address,\n  data: &#x27;0x00&#x27;,\n  gasLimit: 21000n,\n})\n \n// Execute the transaction\nconst vm = await node.getVm()\nconst result = await vm.runTx({ tx })\n","title":"Using tevm/precompiles","titles":["Custom Precompiles"]},"2":{"href":"/advanced/custom-precompiles#basic-usage","html":"\n<p>Here&#x27;s a simple example of creating and using a precompile:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode, definePrecompile } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createContract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/utils&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createImpersonatedTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/tx&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { EvmError, EvmErrorMessage } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/evm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> myPrecompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function process(bytes) returns (bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000123&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gasLimit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> executionGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (gasLimit </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> executionGasUsed) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        exceptionError: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> EvmError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(EvmErrorMessage.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">OUT_OF_GAS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        executionGasUsed: gasLimit,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process input data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> processedData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processedData]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  customPrecompiles: [myPrecompile.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">precompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nHere&#x27;s a simple example of creating and using a precompile:\nimport { createTevmNode, definePrecompile } from &#x27;tevm&#x27;\nimport { createAddress } from &#x27;tevm/address&#x27;\nimport { createContract } from &#x27;tevm/contract&#x27;\nimport { parseAbi } from &#x27;tevm/utils&#x27;\nimport { createImpersonatedTx } from &#x27;tevm/tx&#x27;\nimport { EvmError, EvmErrorMessage } from &#x27;tevm/evm&#x27;\n \nconst myPrecompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function process(bytes) returns (bytes)&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000123&#x27;\n  }),\n  call: async ({ data, gasLimit }) =&gt; {\n    const executionGasUsed = 200n\n    if (gasLimit &lt;= executionGasUsed) {\n      return {\n        returnValue: new Uint8Array(),\n        exceptionError: new EvmError(EvmErrorMessage.OUT_OF_GAS),\n        executionGasUsed: gasLimit,\n      }\n    }\n    // Process input data\n    const processedData = data\n    return {\n      returnValue: new Uint8Array([...processedData]),\n      executionGasUsed,\n    }\n  },\n})\n \nconst node = createTevmNode({\n  customPrecompiles: [myPrecompile.precompile()],\n})\n","title":"Basic Usage","titles":["Custom Precompiles"]},"3":{"href":"/advanced/custom-precompiles#precompile-interface","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PrecompileInput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasLimit</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PrecompileOutput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  returnValue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  executionGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PrecompileContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Contract</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PrecompileInput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PrecompileOutput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ninterface PrecompileInput {\n  data: Uint8Array\n  gasLimit: bigint\n}\n \ninterface PrecompileOutput {\n  returnValue: Uint8Array\n  executionGasUsed: bigint\n}\n \ninterface PrecompileContract {\n  contract: Contract\n  call: (input: PrecompileInput) =&gt; Promise&lt;PrecompileOutput&gt;\n}\n","title":"Precompile Interface","titles":["Custom Precompiles"]},"4":{"href":"/advanced/custom-precompiles#example-implementations","html":"\n","isPage":false,"text":"\n","title":"Example Implementations","titles":["Custom Precompiles"]},"5":{"href":"/advanced/custom-precompiles#1-state-access-precompile","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> statePrecompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function store(bytes32,bytes32)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000124&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gasLimit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">slice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">slice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putContractStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(statePrecompile.contract.address),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(value)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> executionGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (gasLimit </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> executionGasUsed) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        exceptionError: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> EvmError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(EvmErrorMessage.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">OUT_OF_GAS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        executionGasUsed: gasLimit,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nconst statePrecompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function store(bytes32,bytes32)&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000124&#x27;\n  }),\n  call: async ({ data, gasLimit }) =&gt; {\n    const key = data.slice(0, 32)\n    const value = data.slice(32)\n    const vm = await node.getVm()\n    await vm.stateManager.putContractStorage(\n      createAddress(statePrecompile.contract.address),\n      hexToBytes(key),\n      hexToBytes(value)\n    )\n    const executionGasUsed = 200n\n    if (gasLimit &lt;= executionGasUsed) {\n      return {\n        returnValue: new Uint8Array(),\n        exceptionError: new EvmError(EvmErrorMessage.OUT_OF_GAS),\n        executionGasUsed: gasLimit,\n      }\n    }\n    return {\n      returnValue: new Uint8Array(),\n      executionGasUsed,\n    }\n  },\n})\n","title":"1. State Access Precompile","titles":["Custom Precompiles","Example Implementations"]},"6":{"href":"/advanced/custom-precompiles#2-gas-calculation-precompile","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasPrecompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function processWithGas(bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000125&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gasLimit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Charge 100 gas per byte</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BigInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasLimit) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Out of gas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed: gasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nconst gasPrecompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function processWithGas(bytes)&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000125&#x27;\n  }),\n  call: async ({ data, gasLimit }) =&gt; {\n    // Charge 100 gas per byte\n    const gasUsed = BigInt(data.length * 100)\n    if (gasUsed &gt; gasLimit) {\n      throw new Error(&#x27;Out of gas&#x27;)\n    }\n    return {\n      returnValue: new Uint8Array(),\n      executionGasUsed: gasUsed,\n    }\n  },\n})\n","title":"2. Gas Calculation Precompile","titles":["Custom Precompiles","Example Implementations"]},"7":{"href":"/advanced/custom-precompiles#3-error-handling-precompile","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> errorPrecompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function process()&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000126&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (data.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Empty input not allowed&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nconst errorPrecompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function process()&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000126&#x27;\n  }),\n  call: async ({ data }) =&gt; {\n    if (data.length === 0) {\n      throw new Error(&#x27;Empty input not allowed&#x27;)\n    }\n    return {\n      returnValue: new Uint8Array(),\n      executionGasUsed: 200n,\n    }\n  },\n})\n","title":"3. Error Handling Precompile","titles":["Custom Precompiles","Example Implementations"]},"8":{"href":"/advanced/custom-precompiles#4-multiple-precompiles","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> precompileA</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function processA() returns (bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000127&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    executionGasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> precompileB</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function processB() returns (bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000128&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    executionGasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  customPrecompiles: [precompileA.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">precompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), precompileB.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">precompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nconst precompileA = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function processA() returns (bytes)&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000127&#x27;\n  }),\n  call: async () =&gt; ({\n    returnValue: new Uint8Array([1]),\n    executionGasUsed: 200n,\n  }),\n})\n \nconst precompileB = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function processB() returns (bytes)&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000128&#x27;\n  }),\n  call: async () =&gt; ({\n    returnValue: new Uint8Array([2]),\n    executionGasUsed: 200n,\n  }),\n})\n \nconst node = createTevmNode({\n  customPrecompiles: [precompileA.precompile(), precompileB.precompile()],\n})\n","title":"4. Multiple Precompiles","titles":["Custom Precompiles","Example Implementations"]},"9":{"href":"/advanced/custom-precompiles#best-practices","html":"\n<ol>\n<li><strong>Gas Calculation</strong>:\n<ul>\n<li>Always calculate gas based on input size or operations performed</li>\n<li>Check against provided gas limit</li>\n<li>Return accurate gas usage and proper error types</li>\n</ul>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> precompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function process(bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000123&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gasLimit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasPerByte</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BigInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasPerByte</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasLimit) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        exceptionError: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> EvmError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(EvmErrorMessage.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">OUT_OF_GAS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        executionGasUsed: gasLimit,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed: gasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<ol start=\"2\">\n<li><strong>Error Handling</strong>:\n<ul>\n<li>Use proper EvmError types for EVM-specific errors</li>\n<li>Check input validity</li>\n<li>Handle gas limits properly</li>\n</ul>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> precompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function process(bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000123&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gasLimit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (data.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Empty input not allowed&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> executionGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (gasLimit </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> executionGasUsed) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          exceptionError: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> EvmError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(EvmErrorMessage.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">OUT_OF_GAS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          executionGasUsed: gasLimit,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Process data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        returnValue: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        executionGasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Precompile error: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">error</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">message</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<ol start=\"3\">\n<li><strong>State Management</strong>:\n<ul>\n<li>Use VM state manager for persistent storage</li>\n<li>Handle state access errors</li>\n<li>Clean up resources when needed</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\nGas Calculation:\n\nAlways calculate gas based on input size or operations performed\nCheck against provided gas limit\nReturn accurate gas usage and proper error types\n\n\n\nconst precompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function process(bytes)&#x27;]),\n    address: createAddress(&#x27;0x0000000000000000000000000000000000000123&#x27;)\n  }),\n  call: async ({ data, gasLimit }) =&gt; {\n    const gasPerByte = 100n\n    const gasUsed = BigInt(data.length) * gasPerByte\n    if (gasUsed &gt; gasLimit) {\n      return {\n        returnValue: new Uint8Array(),\n        exceptionError: new EvmError(EvmErrorMessage.OUT_OF_GAS),\n        executionGasUsed: gasLimit,\n      }\n    }\n    return {\n      returnValue: processData(data),\n      executionGasUsed: gasUsed,\n    }\n  },\n})\n\nError Handling:\n\nUse proper EvmError types for EVM-specific errors\nCheck input validity\nHandle gas limits properly\n\n\n\nconst precompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function process(bytes)&#x27;]),\n    address: createAddress(&#x27;0x0000000000000000000000000000000000000123&#x27;)\n  }),\n  call: async ({ data, gasLimit }) =&gt; {\n    try {\n      if (data.length === 0) {\n        throw new Error(&#x27;Empty input not allowed&#x27;)\n      }\n      const executionGasUsed = 200n\n      if (gasLimit &lt;= executionGasUsed) {\n        return {\n          returnValue: new Uint8Array(),\n          exceptionError: new EvmError(EvmErrorMessage.OUT_OF_GAS),\n          executionGasUsed: gasLimit,\n        }\n      }\n      // Process data\n      return {\n        returnValue: processData(data),\n        executionGasUsed,\n      }\n    } catch (error) {\n      throw new Error(`Precompile error: ${error.message}`)\n    }\n  },\n})\n\nState Management:\n\nUse VM state manager for persistent storage\nHandle state access errors\nClean up resources when needed\n\n\n\n","title":"Best Practices","titles":["Custom Precompiles"]},"10":{"href":"/advanced/custom-precompiles#related-topics","html":"\n<ul>\n<li><a href=\"/reference/contract\">contract reference</a></li>\n<li><a href=\"../core/managing-state\">State Management</a></li>\n<li><a href=\"../api/json-rpc\">JSON-RPC Support</a></li>\n<li><a href=\"https://www.evm.codes/\">EVM Opcodes Reference</a></li>\n<li><a href=\"https://ethereum.github.io/yellowpaper/paper.pdf\">Ethereum Yellow Paper</a></li>\n<li><a href=\"https://github.com/ethereumjs/ethereumjs-monorepo\">ethereumjs/ethereumjs-monorepo</a></li>\n</ul>","isPage":false,"text":"\n\ncontract reference\nState Management\nJSON-RPC Support\nEVM Opcodes Reference\nEthereum Yellow Paper\nethereumjs/ethereumjs-monorepo\n","title":"Related Topics","titles":["Custom Precompiles"]},"11":{"href":"/advanced/performance-profiler#performance--profiler","html":"</header>\n<p>Tevm Node includes a built-in performance profiler that helps you analyze EVM execution, identify bottlenecks, and optimize your smart contracts.</p>\n","isPage":true,"text":"\nTevm Node includes a built-in performance profiler that helps you analyze EVM execution, identify bottlenecks, and optimize your smart contracts.\n","title":"Performance &amp; Profiler","titles":[]},"12":{"href":"/advanced/performance-profiler#enabling-the-profiler","html":"\n<p>Enable profiling when creating your node:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  profiler: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    enabled: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Optional: Configure profiling options</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    includeOpcodes: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    includePrecompiles: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nEnable profiling when creating your node:\nimport { createTevmNode } from &#x27;tevm&#x27;\n \nconst node = createTevmNode({\n  profiler: {\n    enabled: true,\n    // Optional: Configure profiling options\n    includeOpcodes: true,\n    includePrecompiles: true,\n  },\n})\n","title":"Enabling the Profiler","titles":["Performance &amp; Profiler"]},"13":{"href":"/advanced/performance-profiler#collecting-performance-data","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute some transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* ... */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get performance logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear logs when done</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">clearPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nconst vm = await node.getVm()\n \n// Execute some transactions\nawait vm.runTx({ /* ... */ })\n \n// Get performance logs\nconst logs = vm.evm.getPerformanceLogs()\n \n// Clear logs when done\nvm.evm.clearPerformanceLogs()\n","title":"Collecting Performance Data","titles":["Performance &amp; Profiler"]},"14":{"href":"/advanced/performance-profiler#log-types","html":"\n<p>The profiler collects various types of performance data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PerformanceLog</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  type</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;opcode&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;precompile&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;call&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;create&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  startTime</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  endTime</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  executionTime</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Additional data based on type</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> OpcodeLog</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> PerformanceLog</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  type</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;opcode&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  opcode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  pc</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PrecompileLog</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> PerformanceLog</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  type</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;precompile&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe profiler collects various types of performance data:\ninterface PerformanceLog {\n  type: &#x27;opcode&#x27; | &#x27;precompile&#x27; | &#x27;call&#x27; | &#x27;create&#x27;\n  startTime: number\n  endTime: number\n  executionTime: number\n  gasUsed?: bigint\n  // Additional data based on type\n}\n \ninterface OpcodeLog extends PerformanceLog {\n  type: &#x27;opcode&#x27;\n  opcode: string\n  pc: number\n}\n \ninterface PrecompileLog extends PerformanceLog {\n  type: &#x27;precompile&#x27;\n  address: string\n  name: string\n}\n","title":"Log Types","titles":["Performance &amp; Profiler"]},"15":{"href":"/advanced/performance-profiler#analyzing-performance","html":"\n","isPage":false,"text":"\n","title":"Analyzing Performance","titles":["Performance &amp; Profiler"]},"16":{"href":"/advanced/performance-profiler#1-opcode-analysis","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Group by opcode</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> opcodeStats</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.type </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;opcode&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reduce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">acc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.opcode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[key] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> acc[key] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { count: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, totalTime: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, totalGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[key].count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[key].totalTime </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.executionTime</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[key].totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> acc</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }, {})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Find expensive operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> expensiveOps</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Object.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">entries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(opcodeStats)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sort</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(([, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], [, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b.totalTime </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a.totalTime)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">slice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Most expensive operations:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, expensiveOps)</span></span></code></pre>\n","isPage":false,"text":"\n// Group by opcode\nconst opcodeStats = logs\n  .filter(log =&gt; log.type === &#x27;opcode&#x27;)\n  .reduce((acc, log) =&gt; {\n    const key = log.opcode\n    acc[key] = acc[key] || { count: 0, totalTime: 0, totalGas: 0n }\n    acc[key].count++\n    acc[key].totalTime += log.executionTime\n    acc[key].totalGas += log.gasUsed ?? 0n\n    return acc\n  }, {})\n \n// Find expensive operations\nconst expensiveOps = Object.entries(opcodeStats)\n  .sort(([, a], [, b]) =&gt; b.totalTime - a.totalTime)\n  .slice(0, 10)\n \nconsole.log(&#x27;Most expensive operations:&#x27;, expensiveOps)\n","title":"1. Opcode Analysis","titles":["Performance &amp; Profiler","Analyzing Performance"]},"17":{"href":"/advanced/performance-profiler#2-call-tree-analysis","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Analyze call depth and patterns</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> callTree</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.type </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;call&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    from: log.from,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: log.to,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: log.value,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    executionTime: log.executionTime,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasUsed: log.gasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Call tree:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, callTree)</span></span></code></pre>\n","isPage":false,"text":"\n// Analyze call depth and patterns\nconst callTree = logs\n  .filter(log =&gt; log.type === &#x27;call&#x27;)\n  .map(log =&gt; ({\n    from: log.from,\n    to: log.to,\n    value: log.value,\n    executionTime: log.executionTime,\n    gasUsed: log.gasUsed,\n  }))\n \nconsole.log(&#x27;Call tree:&#x27;, callTree)\n","title":"2. Call Tree Analysis","titles":["Performance &amp; Profiler","Analyzing Performance"]},"18":{"href":"/advanced/performance-profiler#3-gas-usage-patterns","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Track gas usage over time</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasTimeline</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    timestamp: log.startTime,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasUsed: log.gasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    type: log.type,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Calculate gas efficiency</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasEfficiency</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasTimeline.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reduce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">acc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  acc.totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  acc.totalTime </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.executionTime</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> acc</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, { totalGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, totalTime: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span></code></pre>\n","isPage":false,"text":"\n// Track gas usage over time\nconst gasTimeline = logs\n  .filter(log =&gt; log.gasUsed !== undefined)\n  .map(log =&gt; ({\n    timestamp: log.startTime,\n    gasUsed: log.gasUsed,\n    type: log.type,\n  }))\n \n// Calculate gas efficiency\nconst gasEfficiency = gasTimeline.reduce((acc, log) =&gt; {\n  acc.totalGas += log.gasUsed ?? 0n\n  acc.totalTime += log.executionTime\n  return acc\n}, { totalGas: 0n, totalTime: 0 })\n","title":"3. Gas Usage Patterns","titles":["Performance &amp; Profiler","Analyzing Performance"]},"19":{"href":"/advanced/performance-profiler#use-cases","html":"\n","isPage":false,"text":"\n","title":"Use Cases","titles":["Performance &amp; Profiler"]},"20":{"href":"/advanced/performance-profiler#1-contract-optimization","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy and profile contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx: deployTx })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear previous logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">clearPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Profile specific function</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx: functionCallTx })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Analyze performance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> functionProfile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> analyzeLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logs)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Function performance:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  totalTime: functionProfile.executionTime,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasUsed: functionProfile.gasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hotspots: functionProfile.hotspots,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Deploy and profile contract\nconst vm = await node.getVm()\nawait vm.runTx({ tx: deployTx })\n \n// Clear previous logs\nvm.evm.clearPerformanceLogs()\n \n// Profile specific function\nawait vm.runTx({ tx: functionCallTx })\nconst logs = vm.evm.getPerformanceLogs()\n \n// Analyze performance\nconst functionProfile = analyzeLogs(logs)\nconsole.log(&#x27;Function performance:&#x27;, {\n  totalTime: functionProfile.executionTime,\n  gasUsed: functionProfile.gasUsed,\n  hotspots: functionProfile.hotspots,\n})\n","title":"1. Contract Optimization","titles":["Performance &amp; Profiler","Use Cases"]},"21":{"href":"/advanced/performance-profiler#2-comparative-analysis","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> compareImplementations</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">implementations</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> results</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> impl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> implementations) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">clearPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCallTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(impl) })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">analyzePerformance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logs))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> compareResults</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(results)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nasync function compareImplementations(implementations: string[]) {\n  const results = []\n  const vm = await node.getVm()\n \n  for (const impl of implementations) {\n    vm.evm.clearPerformanceLogs()\n    await vm.runTx({ tx: createCallTx(impl) })\n    const logs = vm.evm.getPerformanceLogs()\n    results.push(analyzePerformance(logs))\n  }\n \n  return compareResults(results)\n}\n","title":"2. Comparative Analysis","titles":["Performance &amp; Profiler","Use Cases"]},"22":{"href":"/advanced/performance-profiler#3-gas-optimization","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Track gas usage by contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractGasUsage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.type </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;call&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reduce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">acc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.to</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[contract] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> acc[contract] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { calls: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, totalGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[contract].calls</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[contract].totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> acc</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }, {})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Identify gas-intensive contracts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasHotspots</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Object.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">entries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contractGasUsage)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sort</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(([, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], [, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b.totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a.totalGas))</span></span></code></pre>\n","isPage":false,"text":"\n// Track gas usage by contract\nconst contractGasUsage = logs\n  .filter(log =&gt; log.type === &#x27;call&#x27;)\n  .reduce((acc, log) =&gt; {\n    const contract = log.to\n    acc[contract] = acc[contract] || { calls: 0, totalGas: 0n }\n    acc[contract].calls++\n    acc[contract].totalGas += log.gasUsed ?? 0n\n    return acc\n  }, {})\n \n// Identify gas-intensive contracts\nconst gasHotspots = Object.entries(contractGasUsage)\n  .sort(([, a], [, b]) =&gt; Number(b.totalGas - a.totalGas))\n","title":"3. Gas Optimization","titles":["Performance &amp; Profiler","Use Cases"]},"23":{"href":"/advanced/performance-profiler#best-practices","html":"\n<ol>\n<li>\n<p><strong>Targeted Profiling</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear logs before specific operations</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">clearPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Run the operation you want to profile</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* ... */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Analyze just that operation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n</li>\n<li>\n<p><strong>Memory Management</strong>:</p>\n<ul>\n<li>Clear logs periodically</li>\n<li>Profile specific operations rather than entire sessions</li>\n<li>Export and analyze large datasets externally</li>\n</ul>\n</li>\n<li>\n<p><strong>Comparative Analysis</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Compare before/after optimization</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> beforeLogs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> profileOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(originalCode)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> afterLogs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> profileOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(optimizedCode)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> improvement</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> compareProfiles</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(beforeLogs, afterLogs)</span></span></code></pre>\n</li>\n<li>\n<p><strong>Production Considerations</strong>:</p>\n<ul>\n<li>Disable profiler in production</li>\n<li>Use sampling for long-running operations</li>\n<li>Consider the overhead of profiling itself</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nTargeted Profiling:\n// Clear logs before specific operations\nvm.evm.clearPerformanceLogs()\n// Run the operation you want to profile\nawait vm.runTx({ /* ... */ })\n// Analyze just that operation\nconst logs = vm.evm.getPerformanceLogs()\n\n\nMemory Management:\n\nClear logs periodically\nProfile specific operations rather than entire sessions\nExport and analyze large datasets externally\n\n\n\nComparative Analysis:\n// Compare before/after optimization\nconst beforeLogs = await profileOperation(originalCode)\nconst afterLogs = await profileOperation(optimizedCode)\nconst improvement = compareProfiles(beforeLogs, afterLogs)\n\n\nProduction Considerations:\n\nDisable profiler in production\nUse sampling for long-running operations\nConsider the overhead of profiling itself\n\n\n\n","title":"Best Practices","titles":["Performance &amp; Profiler"]},"24":{"href":"/advanced/performance-profiler#related-topics","html":"\n<ul>\n<li><a href=\"../api/vm-and-submodules\">VM &amp; Submodules</a></li>\n<li><a href=\"../api/methods\">Gas Estimation</a></li>\n<li><a href=\"./txpool\">Transaction Pool</a></li>\n</ul>","isPage":false,"text":"\n\nVM &amp; Submodules\nGas Estimation\nTransaction Pool\n","title":"Related Topics","titles":["Performance &amp; Profiler"]},"25":{"href":"/advanced/receipts-and-logs#receipts--logs","html":"</header>\n<p>Tevm Node provides robust support for managing transaction receipts and event logs through the ReceiptsManager module and filter system.</p>\n","isPage":true,"text":"\nTevm Node provides robust support for managing transaction receipts and event logs through the ReceiptsManager module and filter system.\n","title":"Receipts &amp; Logs","titles":[]},"26":{"href":"/advanced/receipts-and-logs#receipt-management","html":"\n<p>The ReceiptsManager maintains an index of all transaction receipts and their associated logs.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createImpersonatedTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/tx&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { runTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/vm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress, hexToBytes } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receiptsManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptsManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute a transaction and get receipt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x2345678901234567890123456789012345678901&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receiptResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptByTxHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (receiptResult) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">receipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">blockHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">txIndex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">logIndex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptResult</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Access receipt data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    status: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;status&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> in</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipt.status </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasUsed: receipt.cumulativeBlockGasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    logs: receipt.logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe ReceiptsManager maintains an index of all transaction receipts and their associated logs.\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { createImpersonatedTx } from &#x27;tevm/tx&#x27;\nimport { runTx } from &#x27;tevm/vm&#x27;\nimport { createAddress, hexToBytes } from &#x27;tevm/utils&#x27;\n \nconst node = createTevmNode()\nconst receiptsManager = await node.getReceiptsManager()\n \n// Execute a transaction and get receipt\nconst vm = await node.getVm()\nconst tx = createImpersonatedTx({\n  impersonatedAddress: createAddress(&#x27;0x1234567890123456789012345678901234567890&#x27;),\n  to: createAddress(&#x27;0x2345678901234567890123456789012345678901&#x27;),\n  value: 1000000000000000000n,\n  gasLimit: 21000n,\n})\n \nconst result = await runTx(vm)({ tx })\nconst receiptResult = await receiptsManager.getReceiptByTxHash(tx.hash())\n \nif (receiptResult) {\n  const [receipt, blockHash, txIndex, logIndex] = receiptResult\n  // Access receipt data\n  console.log({\n    status: &#x27;status&#x27; in receipt ? receipt.status : undefined,\n    gasUsed: receipt.cumulativeBlockGasUsed,\n    logs: receipt.logs\n  })\n}\n","title":"Receipt Management","titles":["Receipts &amp; Logs"]},"27":{"href":"/advanced/receipts-and-logs#receipt-types","html":"\n<p>Tevm supports different receipt types based on the Ethereum hardfork:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PreByzantiumReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  stateRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  cumulativeBlockGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PostByzantiumReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  status</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // 1 for success, 0 for failure</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  cumulativeBlockGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EIP4844Receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> PostByzantiumReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobGasPrice</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTevm supports different receipt types based on the Ethereum hardfork:\ninterface PreByzantiumReceipt {\n  stateRoot: Uint8Array\n  cumulativeBlockGasUsed: bigint\n  logs: Log[]\n}\n \ninterface PostByzantiumReceipt {\n  status: number // 1 for success, 0 for failure\n  cumulativeBlockGasUsed: bigint\n  logs: Log[]\n}\n \ninterface EIP4844Receipt extends PostByzantiumReceipt {\n  blobGasUsed: bigint\n  blobGasPrice: bigint\n}\n","title":"Receipt Types","titles":["Receipts &amp; Logs","Receipt Management"]},"28":{"href":"/advanced/receipts-and-logs#event-logs","html":"\n","isPage":false,"text":"\n","title":"Event Logs","titles":["Receipts &amp; Logs"]},"29":{"href":"/advanced/receipts-and-logs#contract-deployment-and-event-emission","html":"\n<p>Here&#x27;s how to deploy a contract and capture its events:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deployTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CONTRACT_BYTECODE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deployResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)({ tx: deployTx })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deployResult.createdAddress</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contractAddress) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Contract deployment failed&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Interact with contract to emit events</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> interactTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">EMIT_EVENT_SELECTOR</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Function selector that emits events</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)({ tx: interactTx })</span></span></code></pre>\n","isPage":false,"text":"\nHere&#x27;s how to deploy a contract and capture its events:\n// Deploy contract\nconst deployTx = createImpersonatedTx({\n  impersonatedAddress: createAddress(&#x27;0x1234567890123456789012345678901234567890&#x27;),\n  data: CONTRACT_BYTECODE,\n  gasLimit: 1000000n,\n})\n \nconst vm = await node.getVm()\nconst deployResult = await runTx(vm)({ tx: deployTx })\nconst contractAddress = deployResult.createdAddress\nif (!contractAddress) throw new Error(&#x27;Contract deployment failed&#x27;)\n \n// Interact with contract to emit events\nconst interactTx = createImpersonatedTx({\n  impersonatedAddress: createAddress(&#x27;0x1234567890123456789012345678901234567890&#x27;),\n  to: contractAddress,\n  data: EMIT_EVENT_SELECTOR, // Function selector that emits events\n  gasLimit: 100000n,\n})\n \nawait runTx(vm)({ tx: interactTx })\n","title":"Contract Deployment and Event Emission","titles":["Receipts &amp; Logs","Event Logs"]},"30":{"href":"/advanced/receipts-and-logs#querying-logs","html":"\n<p>The ReceiptsManager provides flexible log querying with multiple filter options:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get blocks for filtering</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> fromBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;earliest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> toBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Filter by contract address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> addressLogs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fromBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  toBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [contractAddress.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  undefined</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Filter by event topic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> eventTopic</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x000000000000000000000000000000000000000000000000000000000000abcd&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> topicLogs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fromBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  toBlock,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [eventTopic]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Filter by both address and topic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> combinedLogs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fromBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  toBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [contractAddress.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [eventTopic]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nThe ReceiptsManager provides flexible log querying with multiple filter options:\n// Get blocks for filtering\nconst fromBlock = await vm.blockchain.getBlockByTag(&#x27;earliest&#x27;)\nconst toBlock = await vm.blockchain.getBlockByTag(&#x27;latest&#x27;)\n \n// Filter by contract address\nconst addressLogs = await receiptsManager.getLogs(\n  fromBlock,\n  toBlock,\n  [contractAddress.toBytes()],\n  undefined\n)\n \n// Filter by event topic\nconst eventTopic = hexToBytes(&#x27;0x000000000000000000000000000000000000000000000000000000000000abcd&#x27;)\nconst topicLogs = await receiptsManager.getLogs(\n  fromBlock,\n  toBlock,\n  undefined,\n  [eventTopic]\n)\n \n// Filter by both address and topic\nconst combinedLogs = await receiptsManager.getLogs(\n  fromBlock,\n  toBlock,\n  [contractAddress.toBytes()],\n  [eventTopic]\n)\n","title":"Querying Logs","titles":["Receipts &amp; Logs","Event Logs"]},"31":{"href":"/advanced/receipts-and-logs#error-handling","html":"\n<p>The ReceiptsManager includes robust error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Handle non-existent receipts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nonExistentHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890123456789012345678901234&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptByTxHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nonExistentHash)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (receipt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Receipt not found&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Handle invalid log filters</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> invalidAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fromBlock, toBlock, [invalidAddress], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (logs.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;No logs found for invalid address&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe ReceiptsManager includes robust error handling:\n// Handle non-existent receipts\nconst nonExistentHash = hexToBytes(&#x27;0x1234567890123456789012345678901234567890123456789012345678901234&#x27;)\nconst receipt = await receiptsManager.getReceiptByTxHash(nonExistentHash)\nif (receipt === null) {\n  console.log(&#x27;Receipt not found&#x27;)\n}\n \n// Handle invalid log filters\nconst invalidAddress = hexToBytes(&#x27;0x0000&#x27;)\nconst logs = await receiptsManager.getLogs(fromBlock, toBlock, [invalidAddress], undefined)\nif (logs.length === 0) {\n  console.log(&#x27;No logs found for invalid address&#x27;)\n}\n","title":"Error Handling","titles":["Receipts &amp; Logs","Event Logs"]},"32":{"href":"/advanced/receipts-and-logs#performance-considerations","html":"\n<p>The ReceiptsManager includes built-in limits to prevent excessive resource usage:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Log query limits</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> GET_LOGS_LIMIT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10000</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Maximum number of logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> GET_LOGS_LIMIT_MEGABYTES</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 150</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Maximum response size</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> GET_LOGS_BLOCK_RANGE_LIMIT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2500</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Maximum block range</span></span></code></pre>\n","isPage":false,"text":"\nThe ReceiptsManager includes built-in limits to prevent excessive resource usage:\n// Log query limits\nconst GET_LOGS_LIMIT = 10000 // Maximum number of logs\nconst GET_LOGS_LIMIT_MEGABYTES = 150 // Maximum response size\nconst GET_LOGS_BLOCK_RANGE_LIMIT = 2500 // Maximum block range\n","title":"Performance Considerations","titles":["Receipts &amp; Logs"]},"33":{"href":"/advanced/receipts-and-logs#best-practices","html":"\n<ol>\n<li>\n<p><strong>Efficient Log Queries</strong>:</p>\n<ul>\n<li>Use specific address and topic filters</li>\n<li>Limit block ranges for large queries</li>\n<li>Handle null results appropriately</li>\n</ul>\n</li>\n<li>\n<p><strong>Receipt Storage</strong>:</p>\n<ul>\n<li>Always check for null/undefined results</li>\n<li>Handle receipt pruning gracefully</li>\n<li>Verify contract deployment success</li>\n</ul>\n</li>\n<li>\n<p><strong>Type Safety</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Ensure contract deployment success</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deployResult.createdAddress</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contractAddress) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Contract deployment failed&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Handle receipt types</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (receiptResult) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">receipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptResult</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;status&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> in</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipt) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Transaction ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">receipt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">status</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ?</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;succeeded&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> :</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;failed&#x27;}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nEfficient Log Queries:\n\nUse specific address and topic filters\nLimit block ranges for large queries\nHandle null results appropriately\n\n\n\nReceipt Storage:\n\nAlways check for null/undefined results\nHandle receipt pruning gracefully\nVerify contract deployment success\n\n\n\nType Safety:\n// Ensure contract deployment success\nconst contractAddress = deployResult.createdAddress\nif (!contractAddress) throw new Error(&#x27;Contract deployment failed&#x27;)\n \n// Handle receipt types\nif (receiptResult) {\n  const [receipt] = receiptResult\n  if (&#x27;status&#x27; in receipt) {\n    console.log(`Transaction ${receipt.status === 1 ? &#x27;succeeded&#x27; : &#x27;failed&#x27;}`)\n  }\n}\n\n\n","title":"Best Practices","titles":["Receipts &amp; Logs","Performance Considerations"]},"34":{"href":"/advanced/receipts-and-logs#related-topics","html":"\n<ul>\n<li><a href=\"../api/json-rpc\">JSON-RPC Support</a></li>\n<li><a href=\"../api/vm-and-submodules\">VM &amp; Submodules</a></li>\n<li><a href=\"./txpool\">Transaction Pool</a></li>\n</ul>","isPage":false,"text":"\n\nJSON-RPC Support\nVM &amp; Submodules\nTransaction Pool\n","title":"Related Topics","titles":["Receipts &amp; Logs"]},"35":{"href":"/advanced/txpool#transaction-pool","html":"</header>\n<p>The Transaction Pool (TxPool) is a crucial component that manages pending transactions before they&#x27;re included in blocks. It handles transaction ordering, replacement, validation, and lifecycle management.</p>\n","isPage":true,"text":"\nThe Transaction Pool (TxPool) is a crucial component that manages pending transactions before they&#x27;re included in blocks. It handles transaction ordering, replacement, validation, and lifecycle management.\n","title":"Transaction Pool","titles":[]},"36":{"href":"/advanced/txpool#quick-start","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createImpersonatedTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/tx&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Initialize node and get txpool</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTxPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create and add a transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x2345...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1 ETH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxFeePerGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxPriorityFeePerGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addUnverified</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { createAddress } from &#x27;tevm/address&#x27;\nimport { createImpersonatedTx } from &#x27;tevm/tx&#x27;\n \n// Initialize node and get txpool\nconst node = createTevmNode()\nconst txPool = await node.getTxPool()\n \n// Create and add a transaction\nconst tx = createImpersonatedTx({\n  impersonatedAddress: createAddress(&#x27;0x1234...&#x27;),\n  to: createAddress(&#x27;0x2345...&#x27;),\n  value: 1000000000000000000n, // 1 ETH\n  gasLimit: 21000n,\n  maxFeePerGas: 20000000000n,\n  maxPriorityFeePerGas: 20000000000n,\n  nonce: 0n,\n})\n \nawait txPool.addUnverified(tx)\n","title":"Quick Start","titles":["Transaction Pool"]},"37":{"href":"/advanced/txpool#key-features","html":"\n<ul>\n<li>🔍 <strong>Transaction Validation</strong> - Comprehensive validation including nonce, balance, and gas checks</li>\n<li>🔄 <strong>Transaction Replacement</strong> - Replace pending transactions with higher gas price versions</li>\n<li>📊 <strong>Nonce Ordering</strong> - Maintains correct transaction sequence per account</li>\n<li>🧹 <strong>Automatic Pruning</strong> - Removes old transactions to prevent memory bloat</li>\n<li>⚡ <strong>Performance Optimized</strong> - Efficient handling of large transaction volumes</li>\n</ul>\n","isPage":false,"text":"\n\n🔍 Transaction Validation - Comprehensive validation including nonce, balance, and gas checks\n🔄 Transaction Replacement - Replace pending transactions with higher gas price versions\n📊 Nonce Ordering - Maintains correct transaction sequence per account\n🧹 Automatic Pruning - Removes old transactions to prevent memory bloat\n⚡ Performance Optimized - Efficient handling of large transaction volumes\n\n","title":"Key Features","titles":["Transaction Pool"]},"38":{"href":"/advanced/txpool#core-concepts","html":"\n","isPage":false,"text":"\n","title":"Core Concepts","titles":["Transaction Pool"]},"39":{"href":"/advanced/txpool#pool-limits","html":"\n<p>The TxPool enforces several limits to ensure stable operation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> LIMITS</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  MAX_POOL_SIZE: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,           </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Maximum total transactions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  MAX_TXS_PER_ACCOUNT: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,      </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Maximum per account</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  MIN_GAS_PRICE: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,     </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0.1 GWei minimum</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  TX_MAX_DATA_SIZE: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">128</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1024</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 128KB max transaction size</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe TxPool enforces several limits to ensure stable operation:\nconst LIMITS = {\n  MAX_POOL_SIZE: 5000,           // Maximum total transactions\n  MAX_TXS_PER_ACCOUNT: 100,      // Maximum per account\n  MIN_GAS_PRICE: 100000000n,     // 0.1 GWei minimum\n  TX_MAX_DATA_SIZE: 128 * 1024,  // 128KB max transaction size\n}\n","title":"Pool Limits","titles":["Transaction Pool","Core Concepts"]},"40":{"href":"/advanced/txpool#transaction-lifecycle","html":"\n<ol>\n<li><strong>Addition</strong> - Transactions enter the pool via <code>add()</code> or <code>addUnverified()</code></li>\n<li><strong>Validation</strong> - Optional checks for nonce, balance, and gas parameters</li>\n<li><strong>Storage</strong> - Valid transactions are stored and ordered by nonce</li>\n<li><strong>Pruning</strong> - Old transactions are removed after <code>POOLED_STORAGE_TIME_LIMIT</code> (20 minutes)</li>\n</ol>\n","isPage":false,"text":"\n\nAddition - Transactions enter the pool via add() or addUnverified()\nValidation - Optional checks for nonce, balance, and gas parameters\nStorage - Valid transactions are stored and ordered by nonce\nPruning - Old transactions are removed after POOLED_STORAGE_TIME_LIMIT (20 minutes)\n\n","title":"Transaction Lifecycle","titles":["Transaction Pool","Core Concepts"]},"41":{"href":"/advanced/txpool#detailed-usage","html":"\n","isPage":false,"text":"\n","title":"Detailed Usage","titles":["Transaction Pool"]},"42":{"href":"/advanced/txpool#adding-transactions","html":"\n<p>Two methods for adding transactions, each with different validation levels:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Method 1: With full validation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.message.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">includes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;insufficient balance&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Account has insufficient funds&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Method 2: Without validation (faster)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addUnverified</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span></code></pre>\n","isPage":false,"text":"\nTwo methods for adding transactions, each with different validation levels:\n// Method 1: With full validation\ntry {\n  await txPool.add(tx)\n} catch (error) {\n  if (error.message.includes(&#x27;insufficient balance&#x27;)) {\n    console.error(&#x27;Account has insufficient funds&#x27;)\n  }\n}\n \n// Method 2: Without validation (faster)\nawait txPool.addUnverified(tx)\n","title":"Adding Transactions","titles":["Transaction Pool","Detailed Usage"]},"43":{"href":"/advanced/txpool#transaction-replacement","html":"\n<p>Replace a pending transaction by submitting a new one with the same nonce and higher gas price:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> originalTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... base transaction params ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxFeePerGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> replacementTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... same params as original ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxFeePerGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// At least 10% higher</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Same nonce as original</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addUnverified</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(originalTx)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addUnverified</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(replacementTx) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Replaces originalTx</span></span></code></pre>\n<blockquote>\n<p><strong>Note</strong>: Replacement transactions must increase gas price by at least <code>MIN_GAS_PRICE_BUMP_PERCENT</code> (10%)</p>\n</blockquote>\n","isPage":false,"text":"\nReplace a pending transaction by submitting a new one with the same nonce and higher gas price:\nconst originalTx = createImpersonatedTx({\n  // ... base transaction params ...\n  maxFeePerGas: 20000000000n,\n  nonce: 0n,\n})\n \nconst replacementTx = createImpersonatedTx({\n  // ... same params as original ...\n  maxFeePerGas: 30000000000n, // At least 10% higher\n  nonce: 0n, // Same nonce as original\n})\n \nawait txPool.addUnverified(originalTx)\nawait txPool.addUnverified(replacementTx) // Replaces originalTx\n\nNote: Replacement transactions must increase gas price by at least MIN_GAS_PRICE_BUMP_PERCENT (10%)\n\n","title":"Transaction Replacement","titles":["Transaction Pool","Detailed Usage"]},"44":{"href":"/advanced/txpool#querying-transactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transactions by sender</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> senderTxs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBySenderAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(senderAddress)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transactions by hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txHashes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [hash1, hash2]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> specificTxs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getByHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHashes)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get ordered transactions for mining</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> orderedTxs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">txsByPriceAndNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  baseFee: currentBaseFee,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  allowedBlobs: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">6</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// For EIP-4844</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Get transactions by sender\nconst senderTxs = await txPool.getBySenderAddress(senderAddress)\n \n// Get transactions by hash\nconst txHashes = [hash1, hash2]\nconst specificTxs = txPool.getByHash(txHashes)\n \n// Get ordered transactions for mining\nconst orderedTxs = await txPool.txsByPriceAndNonce({\n  baseFee: currentBaseFee,\n  allowedBlobs: 6, // For EIP-4844\n})\n","title":"Querying Transactions","titles":["Transaction Pool","Detailed Usage"]},"45":{"href":"/advanced/txpool#block-processing","html":"\n<p>When new blocks are added, update the pool:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mineHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine new blocks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mineHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Remove included transactions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeNewBlockTxs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(newBlocks)</span></span></code></pre>\n","isPage":false,"text":"\nWhen new blocks are added, update the pool:\nimport { mineHandler } from &#x27;tevm/actions&#x27;\n \n// Mine new blocks\nawait mineHandler(node)()\n \n// Remove included transactions\ntxPool.removeNewBlockTxs(newBlocks)\n","title":"Block Processing","titles":["Transaction Pool","Detailed Usage"]},"46":{"href":"/advanced/txpool#advanced-features","html":"\n","isPage":false,"text":"\n","title":"Advanced Features","titles":["Transaction Pool"]},"47":{"href":"/advanced/txpool#pool-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Start transaction processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">start</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Stop processing (but keep transactions)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear all transactions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Manual cleanup of old transactions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cleanup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\n// Start transaction processing\ntxPool.start()\n \n// Stop processing (but keep transactions)\ntxPool.stop()\n \n// Clear all transactions\ntxPool.close()\n \n// Manual cleanup of old transactions\ntxPool.cleanup()\n","title":"Pool Management","titles":["Transaction Pool","Advanced Features"]},"48":{"href":"/advanced/txpool#transaction-types","html":"\n<p>The pool supports all Ethereum transaction types:</p>\n<ul>\n<li>Legacy Transactions</li>\n<li>EIP-2930 (Access Lists)</li>\n<li>EIP-1559 (Fee Market)</li>\n<li>EIP-4844 (Blob Transactions)</li>\n<li>Tevm Impersonated Transactions</li>\n</ul>\n","isPage":false,"text":"\nThe pool supports all Ethereum transaction types:\n\nLegacy Transactions\nEIP-2930 (Access Lists)\nEIP-1559 (Fee Market)\nEIP-4844 (Blob Transactions)\nTevm Impersonated Transactions\n\n","title":"Transaction Types","titles":["Transaction Pool","Advanced Features"]},"49":{"href":"/advanced/txpool#best-practices","html":"\n","isPage":false,"text":"\n","title":"Best Practices","titles":["Transaction Pool"]},"50":{"href":"/advanced/txpool#1-transaction-creation","html":"\n<p>Always use <code>createImpersonatedTx</code> with proper types:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(recipient),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use helper functions for values</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxFeePerGas: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">gweiToWei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;20&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxPriorityFeePerGas: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">gweiToWei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;2&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nAlways use createImpersonatedTx with proper types:\nconst tx = createImpersonatedTx({\n  impersonatedAddress: createAddress(address),\n  to: createAddress(recipient),\n  value: parseEther(&#x27;1&#x27;), // Use helper functions for values\n  gasLimit: 21000n,\n  maxFeePerGas: gweiToWei(&#x27;20&#x27;),\n  maxPriorityFeePerGas: gweiToWei(&#x27;2&#x27;),\n  nonce: 0n,\n})\n","title":"1. Transaction Creation","titles":["Transaction Pool","Best Practices"]},"51":{"href":"/advanced/txpool#2-error-handling","html":"\n<p>Implement comprehensive error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error.message.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">includes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;insufficient balance&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">):</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Handle balance error</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      break</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error.message.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">includes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;nonce too low&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">):</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Handle nonce error</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      break</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error.message.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">includes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;gas price too low&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">):</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Handle gas price error</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      break</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Handle unknown errors</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nImplement comprehensive error handling:\ntry {\n  await txPool.add(tx)\n} catch (error) {\n  switch (true) {\n    case error.message.includes(&#x27;insufficient balance&#x27;):\n      // Handle balance error\n      break\n    case error.message.includes(&#x27;nonce too low&#x27;):\n      // Handle nonce error\n      break\n    case error.message.includes(&#x27;gas price too low&#x27;):\n      // Handle gas price error\n      break\n    default:\n      // Handle unknown errors\n  }\n}\n","title":"2. Error Handling","titles":["Transaction Pool","Best Practices"]},"52":{"href":"/advanced/txpool#3-performance-optimization","html":"\n<ul>\n<li>Use <code>addUnverified</code> for bulk operations</li>\n<li>Implement proper cleanup cycles</li>\n<li>Monitor pool size and transaction age</li>\n</ul>\n","isPage":false,"text":"\n\nUse addUnverified for bulk operations\nImplement proper cleanup cycles\nMonitor pool size and transaction age\n\n","title":"3. Performance Optimization","titles":["Transaction Pool","Best Practices"]},"53":{"href":"/advanced/txpool#4-memory-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Regular cleanup cycle</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setInterval</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cleanup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 60</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Every 5 minutes</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Monitor pool size</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> poolSize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.txsInPool</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (poolSize </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> MAX_POOL_SIZE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Pool approaching capacity&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Regular cleanup cycle\nsetInterval(() =&gt; {\n  txPool.cleanup()\n}, 5 * 60 * 1000) // Every 5 minutes\n \n// Monitor pool size\nconst poolSize = txPool.txsInPool\nif (poolSize &gt; MAX_POOL_SIZE * 0.8) {\n  console.warn(&#x27;Pool approaching capacity&#x27;)\n}\n","title":"4. Memory Management","titles":["Transaction Pool","Best Practices"]},"54":{"href":"/advanced/txpool#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["Transaction Pool"]},"55":{"href":"/advanced/txpool#txpool-class","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">class</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  constructor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">options</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> addUnverified</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getBySenderAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TxPoolObject</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getByHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">hashes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[])</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  removeByHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  removeNewBlockTxs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blocks</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[])</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  start</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  stop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  cleanup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nclass TxPool {\n  constructor(options: { vm: Vm })\n  async add(tx: Transaction): Promise&lt;void&gt;\n  async addUnverified(tx: Transaction): Promise&lt;void&gt;\n  async getBySenderAddress(address: Address): Promise&lt;TxPoolObject[]&gt;\n  getByHash(hashes: Uint8Array[]): Transaction[]\n  removeByHash(hash: string): void\n  removeNewBlockTxs(blocks: Block[]): void\n  start(): boolean\n  stop(): boolean\n  cleanup(): void\n  close(): void\n}\n","title":"TxPool Class","titles":["Transaction Pool","API Reference"]},"56":{"href":"/advanced/txpool#related-topics","html":"\n<ul>\n<li><a href=\"../api/json-rpc\">JSON-RPC Support</a></li>\n<li><a href=\"../api/vm-and-submodules\">VM &amp; Submodules</a></li>\n<li><a href=\"./receipts-and-logs\">Receipts &amp; Logs</a></li>\n</ul>","isPage":false,"text":"\n\nJSON-RPC Support\nVM &amp; Submodules\nReceipts &amp; Logs\n","title":"Related Topics","titles":["Transaction Pool"]},"57":{"href":"/api/account-management#account-management","html":"</header>\n<p>Tevm provides two key actions for managing account state: <code>getAccountHandler</code> and <code>setAccountHandler</code>.</p>\n","isPage":true,"text":"\nTevm provides two key actions for managing account state: getAccountHandler and setAccountHandler.\n","title":"Account Management","titles":[]},"58":{"href":"/api/account-management#getaccounthandler","html":"\n<p>The <code>getAccountHandler</code> action allows you to retrieve the current state of an account.</p>\n","isPage":false,"text":"\nThe getAccountHandler action allows you to retrieve the current state of an account.\n","title":"getAccountHandler","titles":["Account Management"]},"59":{"href":"/api/account-management#parameters","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> GetAccountParams</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Required address of the account</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Optional block tag to query state from</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blockTag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;latest&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;pending&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;earliest&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Whether to return storage (can be expensive)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  returnStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype GetAccountParams = {\n  // Required address of the account\n  address: Address\n  // Optional block tag to query state from\n  blockTag?: &#x27;latest&#x27; | &#x27;pending&#x27; | &#x27;earliest&#x27; | number\n  // Whether to return storage (can be expensive)\n  returnStorage?: boolean\n}\n","title":"Parameters","titles":["Account Management","getAccountHandler"]},"60":{"href":"/api/account-management#return-type","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> GetAccountResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Address of the account</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Current nonce</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Balance in wei</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Deployed bytecode (if contract)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  deployedBytecode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Storage root</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  storageRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Code hash</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  codeHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Whether this is a contract</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  isContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Whether account is empty</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  isEmpty</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Storage (if returnStorage=true)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  storage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { [</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Any errors that occurred</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  errors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TevmGetAccountError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype GetAccountResult = {\n  // Address of the account\n  address: Address\n  // Current nonce\n  nonce: bigint\n  // Balance in wei\n  balance: bigint\n  // Deployed bytecode (if contract)\n  deployedBytecode: Hex\n  // Storage root\n  storageRoot: Hex\n  // Code hash\n  codeHash: Hex\n  // Whether this is a contract\n  isContract: boolean\n  // Whether account is empty\n  isEmpty: boolean\n  // Storage (if returnStorage=true)\n  storage?: { [key: Hex]: Hex }\n  // Any errors that occurred\n  errors?: TevmGetAccountError[]\n}\n","title":"Return Type","titles":["Account Management","getAccountHandler"]},"61":{"href":"/api/account-management#example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getAccountHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  returnStorage: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Balance:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, account.balance)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Nonce:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, account.nonce)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (account.isContract) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Code:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, account.deployedBytecode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Storage:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, account.storage)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { getAccountHandler } from &#x27;tevm/actions&#x27;\n \nconst node = createTevmNode()\n \nconst account = await getAccountHandler(node)({\n  address: &#x27;0x...&#x27;,\n  blockTag: &#x27;latest&#x27;,\n  returnStorage: true\n})\n \nconsole.log(&#x27;Balance:&#x27;, account.balance)\nconsole.log(&#x27;Nonce:&#x27;, account.nonce)\nif (account.isContract) {\n  console.log(&#x27;Code:&#x27;, account.deployedBytecode)\n  console.log(&#x27;Storage:&#x27;, account.storage)\n}\n","title":"Example","titles":["Account Management","getAccountHandler"]},"62":{"href":"/api/account-management#setaccounthandler","html":"\n<p>The <code>setAccountHandler</code> action allows you to modify account state directly.</p>\n","isPage":false,"text":"\nThe setAccountHandler action allows you to modify account state directly.\n","title":"setAccountHandler","titles":["Account Management"]},"63":{"href":"/api/account-management#parameters-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SetAccountParams</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Required address to modify</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // New nonce value</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // New balance in wei</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // New deployed bytecode</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  deployedBytecode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // New storage values</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  state</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { [</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype SetAccountParams = {\n  // Required address to modify\n  address: Address\n  // New nonce value\n  nonce?: bigint\n  // New balance in wei\n  balance?: bigint\n  // New deployed bytecode\n  deployedBytecode?: Hex\n  // New storage values\n  state?: { [key: Hex]: Hex }\n}\n","title":"Parameters","titles":["Account Management","setAccountHandler"]},"64":{"href":"/api/account-management#return-type-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SetAccountResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Any errors that occurred</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  errors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TevmSetAccountError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype SetAccountResult = {\n  // Any errors that occurred\n  errors?: TevmSetAccountError[]\n}\n","title":"Return Type","titles":["Account Management","setAccountHandler"]},"65":{"href":"/api/account-management#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":["Account Management","setAccountHandler"]},"66":{"href":"/api/account-management#1-setting-account-balance","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { setAccountHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { setAccountHandler } from &#x27;tevm/actions&#x27;\n \nawait setAccountHandler(node)({\n  address: &#x27;0x...&#x27;,\n  balance: parseEther(&#x27;100&#x27;)\n})\n","title":"1. Setting Account Balance","titles":["Account Management","setAccountHandler","Examples"]},"67":{"href":"/api/account-management#2-deploying-contract-code","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  deployedBytecode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  state: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Initial storage values</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x0000...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nawait setAccountHandler(node)({\n  address: contractAddress,\n  deployedBytecode: &#x27;0x...&#x27;,\n  state: {\n    // Initial storage values\n    &#x27;0x0000...&#x27;: &#x27;0x0000...&#x27;\n  }\n})\n","title":"2. Deploying Contract Code","titles":["Account Management","setAccountHandler","Examples"]},"68":{"href":"/api/account-management#3-modifying-multiple-properties","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;10&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  state: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [slot1]: value1,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [slot2]: value2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nawait setAccountHandler(node)({\n  address: &#x27;0x...&#x27;,\n  nonce: 5n,\n  balance: parseEther(&#x27;10&#x27;),\n  state: {\n    [slot1]: value1,\n    [slot2]: value2\n  }\n})\n","title":"3. Modifying Multiple Properties","titles":["Account Management","setAccountHandler","Examples"]},"69":{"href":"/api/account-management#best-practices","html":"\n<ol>\n<li>\n<p><strong>Storage Management</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Avoid fetching storage unless needed</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  returnStorage: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // default</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n</li>\n<li>\n<p><strong>State Consistency</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check account exists before modifying</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({ address })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">account.isEmpty) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    balance: account.balance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n<li>\n<p><strong>Error Handling</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: newBalance,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  throwOnFail: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (result.errors) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Failed to set account:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.errors)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nStorage Management:\n// Avoid fetching storage unless needed\nconst account = await getAccountHandler(node)({\n  address: &#x27;0x...&#x27;,\n  returnStorage: false // default\n})\n\n\nState Consistency:\n// Check account exists before modifying\nconst account = await getAccountHandler(node)({ address })\nif (!account.isEmpty) {\n  await setAccountHandler(node)({\n    address,\n    balance: account.balance + amount\n  })\n}\n\n\nError Handling:\nconst result = await setAccountHandler(node)({\n  address: &#x27;0x...&#x27;,\n  balance: newBalance,\n  throwOnFail: false\n})\n \nif (result.errors) {\n  console.error(&#x27;Failed to set account:&#x27;, result.errors)\n}\n\n\n","title":"Best Practices","titles":["Account Management"]},"70":{"href":"/api/account-management#related-topics","html":"\n<ul>\n<li><a href=\"../core/managing-state\">State Management</a></li>\n<li><a href=\"./tevm-call\">Call API</a></li>\n<li><a href=\"./json-rpc\">JSON-RPC Support</a></li>\n</ul>","isPage":false,"text":"\n\nState Management\nCall API\nJSON-RPC Support\n","title":"Related Topics","titles":["Account Management"]},"71":{"href":"/api/decorators#see-also","html":"\n<ul>\n<li><a href=\"/api/json-rpc\">JSON-RPC API</a></li>\n<li><a href=\"#TODO\">Client Types</a></li>\n<li><a href=\"/reference/actions\">Actions Reference</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-1193\">EIP-1193 Specification</a></li>\n<li><a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/\">Ethereum JSON-RPC</a></li>\n</ul>","isPage":true,"text":"\n\nJSON-RPC API\nClient Types\nActions Reference\nEIP-1193 Specification\nEthereum JSON-RPC\n","title":"See Also","titles":[null]},"72":{"href":"/api/evm-events#evm-events","html":"</header>\n<p>Tevm Node provides access to low-level EVM events, allowing you to monitor and debug contract execution at a granular level.</p>\n","isPage":true,"text":"\nTevm Node provides access to low-level EVM events, allowing you to monitor and debug contract execution at a granular level.\n","title":"EVM Events","titles":[]},"73":{"href":"/api/evm-events#available-events","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EVMEvent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Emitted when a new contract is created</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  newContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Contract address</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Contract bytecode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">next</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Emitted before a message (call) is processed</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  beforeMessage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Message</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">next</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Emitted after a message (call) is processed</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  afterMessage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EVMResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">next</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Emitted on each EVM step (instruction execution)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  step</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> InterpreterStep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">next</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype EVMEvent = {\n  // Emitted when a new contract is created\n  newContract: (data: {\n    address: Address, // Contract address\n    code: Uint8Array  // Contract bytecode\n  }, next?: () =&gt; void) =&gt; void\n \n  // Emitted before a message (call) is processed\n  beforeMessage: (data: Message, next?: () =&gt; void) =&gt; void\n \n  // Emitted after a message (call) is processed\n  afterMessage: (data: EVMResult, next?: () =&gt; void) =&gt; void\n \n  // Emitted on each EVM step (instruction execution)\n  step: (data: InterpreterStep, next?: () =&gt; void) =&gt; void\n}\n","title":"Available Events","titles":["EVM Events"]},"74":{"href":"/api/evm-events#the-interpreterstep-object","html":"\n<p>The <code>step</code> event handler receives a detailed <code>InterpreterStep</code> object with the following properties:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> InterpreterStep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Program counter - current position in the bytecode</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  pc</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Current opcode information</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  opcode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Opcode name (e.g., &#x27;SSTORE&#x27;, &#x27;CALL&#x27;)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    fee</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#6A737D;--shiki-dark:#768390\">         // Base gas fee of the opcode</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    dynamicFee</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Additional dynamic gas fee (if applicable)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    isAsync</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Whether opcode is asynchronous</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Gas information</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasLeft</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Remaining gas</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasRefund</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Gas refund accumulator</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // EVM state</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  stateManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> StateManager</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Reference to the StateManager instance</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  stack</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]         </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Current EVM stack contents</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  returnStack</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]       </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Return stack for RETURNSUB operations</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Account information</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Account</span><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Account which owns the code running</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Address of the current account</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Execution context</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  depth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#6A737D;--shiki-dark:#768390\">       // Current call depth (starts at 0 for top-level call)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  memory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Current EVM memory contents</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  memoryWordCount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Current size of memory in words (32 bytes)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  codeAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#6A737D;--shiki-dark:#768390\">     // Address of the code being executed</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">                          // (differs from address in DELEGATECALL/CALLCODE)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Where:</p>\n<ul>\n<li><a href=\"/reference/address\"><code>Address</code></a> is Tevm&#x27;s address type (from <code>tevm/address</code>)</li>\n<li><a href=\"/reference/state\"><code>StateManager</code></a> is the state manager interface (from <code>tevm/state</code>)</li>\n<li><a href=\"/reference/node\"><code>Account</code></a> is Tevm&#x27;s account representation</li>\n</ul>\n","isPage":false,"text":"\nThe step event handler receives a detailed InterpreterStep object with the following properties:\ninterface InterpreterStep {\n  // Program counter - current position in the bytecode\n  pc: number\n  \n  // Current opcode information\n  opcode: {\n    name: string        // Opcode name (e.g., &#x27;SSTORE&#x27;, &#x27;CALL&#x27;)\n    fee: number         // Base gas fee of the opcode\n    dynamicFee?: bigint // Additional dynamic gas fee (if applicable)\n    isAsync: boolean    // Whether opcode is asynchronous\n  }\n  \n  // Gas information\n  gasLeft: bigint    // Remaining gas\n  gasRefund: bigint  // Gas refund accumulator\n  \n  // EVM state\n  stateManager: StateManager  // Reference to the StateManager instance\n  stack: Uint8Array[]         // Current EVM stack contents\n  returnStack: bigint[]       // Return stack for RETURNSUB operations\n  \n  // Account information\n  account: Account    // Account which owns the code running\n  address: Address    // Address of the current account\n  \n  // Execution context\n  depth: number       // Current call depth (starts at 0 for top-level call)\n  memory: Uint8Array  // Current EVM memory contents\n  memoryWordCount: bigint  // Current size of memory in words (32 bytes)\n  codeAddress: Address     // Address of the code being executed\n                          // (differs from address in DELEGATECALL/CALLCODE)\n}\nWhere:\n\nAddress is Tevm&#x27;s address type (from tevm/address)\nStateManager is the state manager interface (from tevm/state)\nAccount is Tevm&#x27;s account representation\n\n","title":"The InterpreterStep Object","titles":["EVM Events","Available Events"]},"75":{"href":"/api/evm-events#the-newcontractevent-object","html":"\n<p>The <code>onNewContract</code> event handler receives a <code>NewContractEvent</code> object with the following properties:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> NewContractEvent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Contract information</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Address of the newly created contract</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Deployed contract bytecode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe onNewContract event handler receives a NewContractEvent object with the following properties:\ninterface NewContractEvent {\n  // Contract information\n  address: Address      // Address of the newly created contract\n  code: Uint8Array      // Deployed contract bytecode\n}\n","title":"The NewContractEvent Object","titles":["EVM Events","Available Events"]},"76":{"href":"/api/evm-events#the-message-object","html":"\n<p>The <code>beforeMessage</code> event handler receives a <code>Message</code> object with the following properties:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Message</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Call information</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#6A737D;--shiki-dark:#768390\">            // Target address (undefined for contract creation)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#6A737D;--shiki-dark:#768390\">           // Value sent with the call (in wei)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  caller</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#6A737D;--shiki-dark:#768390\">         // Address of the account that initiated this call</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Gas information</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasLimit</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Gas limit for this call</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Data and code</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Input data to the call</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#6A737D;--shiki-dark:#768390\">       // Contract code for the call</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  codeAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#6A737D;--shiki-dark:#768390\">   // Address of contract code</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Call type</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  depth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#6A737D;--shiki-dark:#768390\">           // Call depth</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  isStatic</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span><span style=\"color:#6A737D;--shiki-dark:#768390\">       // Whether the call is static (view)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  isCompiled</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span><span style=\"color:#6A737D;--shiki-dark:#768390\">     // Whether this is precompiled contract code</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  delegatecall</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span><span style=\"color:#6A737D;--shiki-dark:#768390\">   // Whether this is a DELEGATECALL</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  callcode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span><span style=\"color:#6A737D;--shiki-dark:#768390\">       // Whether this is a CALLCODE</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Other</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  salt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#6A737D;--shiki-dark:#768390\">       // Salt for CREATE2 calls</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  authcallOrigin</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Origin address for AUTH calls</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe beforeMessage event handler receives a Message object with the following properties:\ninterface Message {\n  // Call information\n  to?: Address            // Target address (undefined for contract creation)\n  value: bigint           // Value sent with the call (in wei)\n  caller: Address         // Address of the account that initiated this call\n  \n  // Gas information\n  gasLimit: bigint        // Gas limit for this call\n  \n  // Data and code\n  data: Uint8Array        // Input data to the call\n  code?: Uint8Array       // Contract code for the call\n  codeAddress?: Address   // Address of contract code\n  \n  // Call type\n  depth: number           // Call depth\n  isStatic: boolean       // Whether the call is static (view)\n  isCompiled: boolean     // Whether this is precompiled contract code\n  delegatecall: boolean   // Whether this is a DELEGATECALL\n  callcode: boolean       // Whether this is a CALLCODE\n  \n  // Other\n  salt?: Uint8Array       // Salt for CREATE2 calls\n  authcallOrigin?: Address // Origin address for AUTH calls\n}\n","title":"The Message Object","titles":["EVM Events","Available Events"]},"77":{"href":"/api/evm-events#the-evmresult-object","html":"\n<p>The <code>afterMessage</code> event handler receives an <code>EVMResult</code> object with the following properties:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EVMResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  execResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Return information</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    returnValue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#6A737D;--shiki-dark:#768390\">   // Return data from the call</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    executionGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Gas used in execution</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    gasRefund</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#6A737D;--shiki-dark:#768390\">        // Gas refunded</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Error information</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    exceptionError</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {        </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Error encountered during execution</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">      error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#6A737D;--shiki-dark:#768390\">           // Error type (e.g., &#x27;revert&#x27;, &#x27;out of gas&#x27;)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">      errorType</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Additional error type information</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // State</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]              </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Logs emitted during execution</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    selfdestruct</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Record</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Self-destructed addresses</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    gas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#6A737D;--shiki-dark:#768390\">              // Remaining gas</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  </span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Other information</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#6A737D;--shiki-dark:#768390\">             // Total gas used (including intrinsic costs)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  createdAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Address of created contract (if any)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasRefund</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#6A737D;--shiki-dark:#768390\">          // Total gas refunded</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">## Using </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">with</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tevmCall Family</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">The recommended way to access </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">EVM</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> events is through the tevmCall family </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">of</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> methods</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">```ts</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">import { createMemoryClient } from &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">import { tevmCall } from &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">import { encodeFunctionData } from &#x27;viem&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">const client = createMemoryClient()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">// Listen for EVM steps and other events during execution</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">const result = await tevmCall(client, {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  to: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  data: encodeFunctionData({</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    abi,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    functionName: &#x27;myFunction&#x27;,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    args: [arg1, arg2]</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  // Listen for EVM steps</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  onStep: (step, next) =&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    console.log(&#x27;EVM Step:&#x27;, {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      pc: step.pc,           // Program counter</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      opcode: step.opcode,   // Current opcode</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      gasLeft: step.gasLeft, // Remaining gas</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      stack: step.stack,     // Stack contents</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      depth: step.depth,     // Call depth</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    })</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    next?.()</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  },</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  // Listen for contract creation</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  onNewContract: (data, next) =&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    console.log(&#x27;New contract deployed:&#x27;, {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      address: data.address.toString(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      codeSize: data.code.length,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    })</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    next?.()</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  },</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  // Listen for message execution</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  onBeforeMessage: (message, next) =&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    console.log(&#x27;Executing message:&#x27;, {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      to: message.to?.toString(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      value: message.value.toString(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      delegatecall: message.delegatecall,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    })</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    next?.()</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  },</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  onAfterMessage: (result, next) =&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    console.log(&#x27;Message result:&#x27;, {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      gasUsed: result.execResult.executionGasUsed.toString(),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      returnValue: result.execResult.returnValue.toString(&#x27;hex&#x27;),</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      error: result.execResult.exceptionError?.error,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    })</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    next?.()</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  }</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe afterMessage event handler receives an EVMResult object with the following properties:\ninterface EVMResult {\n  execResult: {\n    // Return information\n    returnValue: Uint8Array   // Return data from the call\n    executionGasUsed: bigint  // Gas used in execution\n    gasRefund?: bigint        // Gas refunded\n    \n    // Error information\n    exceptionError?: {        // Error encountered during execution\n      error: string           // Error type (e.g., &#x27;revert&#x27;, &#x27;out of gas&#x27;)\n      errorType?: string      // Additional error type information\n    }\n    \n    // State\n    logs?: Log[]              // Logs emitted during execution\n    selfdestruct?: Record&lt;string, true&gt;  // Self-destructed addresses\n    gas?: bigint              // Remaining gas\n  }\n  \n  // Other information\n  gasUsed: bigint             // Total gas used (including intrinsic costs)\n  createdAddress?: Address    // Address of created contract (if any)\n  gasRefund?: bigint          // Total gas refunded\n}\n \n## Using with tevmCall Family\n \nThe recommended way to access EVM events is through the tevmCall family of methods:\n \n```ts\nimport { createMemoryClient } from &#x27;tevm&#x27;\nimport { tevmCall } from &#x27;tevm/actions&#x27;\nimport { encodeFunctionData } from &#x27;viem&#x27;\n \nconst client = createMemoryClient()\n \n// Listen for EVM steps and other events during execution\nconst result = await tevmCall(client, {\n  to: contractAddress,\n  data: encodeFunctionData({\n    abi,\n    functionName: &#x27;myFunction&#x27;,\n    args: [arg1, arg2]\n  }),\n  // Listen for EVM steps\n  onStep: (step, next) =&gt; {\n    console.log(&#x27;EVM Step:&#x27;, {\n      pc: step.pc,           // Program counter\n      opcode: step.opcode,   // Current opcode\n      gasLeft: step.gasLeft, // Remaining gas\n      stack: step.stack,     // Stack contents\n      depth: step.depth,     // Call depth\n    })\n    next?.()\n  },\n  // Listen for contract creation\n  onNewContract: (data, next) =&gt; {\n    console.log(&#x27;New contract deployed:&#x27;, {\n      address: data.address.toString(),\n      codeSize: data.code.length,\n    })\n    next?.()\n  },\n  // Listen for message execution\n  onBeforeMessage: (message, next) =&gt; {\n    console.log(&#x27;Executing message:&#x27;, {\n      to: message.to?.toString(),\n      value: message.value.toString(),\n      delegatecall: message.delegatecall,\n    })\n    next?.()\n  },\n  onAfterMessage: (result, next) =&gt; {\n    console.log(&#x27;Message result:&#x27;, {\n      gasUsed: result.execResult.executionGasUsed.toString(),\n      returnValue: result.execResult.returnValue.toString(&#x27;hex&#x27;),\n      error: result.execResult.exceptionError?.error,\n    })\n    next?.()\n  }\n})\n","title":"The EVMResult Object","titles":["EVM Events","Available Events"]},"78":{"href":"/api/evm-events#advanced-examples","html":"\n","isPage":false,"text":"\n","title":"Advanced Examples","titles":["EVM Events"]},"79":{"href":"/api/evm-events#debugging","html":"\n<p>You can create a debug tracer to collect comprehensive execution data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmCall } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a debug tracer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> trace</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  steps: [],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contracts: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  errors: [],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute with tracing</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Track each EVM step</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  onStep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    trace.steps.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      pc: step.pc,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      opcode: step.opcode.name,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      gasCost: step.opcode.fee,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      stack: step.stack.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Track contract creation</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  onNewContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    trace.contracts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data.address.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Track errors</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  onAfterMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (result.execResult.exceptionError) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      trace.errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        error: result.execResult.exceptionError.error,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        returnData: result.execResult.returnValue.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;hex&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Execution trace:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  stepCount: trace.steps.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contracts: Array.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(trace.contracts),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  errors: trace.errors,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nYou can create a debug tracer to collect comprehensive execution data:\nimport { createMemoryClient } from &#x27;tevm&#x27;\nimport { tevmCall } from &#x27;tevm/actions&#x27;\n \nconst client = createMemoryClient()\n \n// Create a debug tracer\nconst trace = {\n  steps: [],\n  contracts: new Set(),\n  errors: [],\n}\n \n// Execute with tracing\nconst result = await tevmCall(client, {\n  to: contractAddress,\n  data: &#x27;0x...&#x27;,\n  // Track each EVM step\n  onStep: (step, next) =&gt; {\n    trace.steps.push({\n      pc: step.pc,\n      opcode: step.opcode.name,\n      gasCost: step.opcode.fee,\n      stack: step.stack.map(item =&gt; item.toString(16)),\n    })\n    next?.()\n  },\n  // Track contract creation\n  onNewContract: (data, next) =&gt; {\n    trace.contracts.add(data.address.toString())\n    next?.()\n  },\n  // Track errors\n  onAfterMessage: (result, next) =&gt; {\n    if (result.execResult.exceptionError) {\n      trace.errors.push({\n        error: result.execResult.exceptionError.error,\n        returnData: result.execResult.returnValue.toString(&#x27;hex&#x27;),\n      })\n    }\n    next?.()\n  }\n})\n \nconsole.log(&#x27;Execution trace:&#x27;, {\n  stepCount: trace.steps.length,\n  contracts: Array.from(trace.contracts),\n  errors: trace.errors,\n})\n","title":"Debugging","titles":["EVM Events","Advanced Examples"]},"80":{"href":"/api/evm-events#gas-profiling","html":"\n<p>Create a gas profiler to analyze opcode costs:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmCall } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a gas profiler</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> profile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  opcodes: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  totalGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute with profiling</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  onStep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> opName</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> step.opcode.name</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasCost</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BigInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(step.opcode.fee)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> stats</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> profile.opcodes.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(opName) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      count: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      totalGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stats.count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stats.totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasCost</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    profile.totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasCost</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    profile.opcodes.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(opName, stats)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get gas usage by opcode</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">opcode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">stats</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> profile.opcodes) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">opcode</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}:`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count: stats.count,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    totalGas: stats.totalGas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    percentageOfTotal: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(stats.totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> /</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> profile.totalGas),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCreate a gas profiler to analyze opcode costs:\nimport { createMemoryClient } from &#x27;tevm&#x27;\nimport { tevmCall } from &#x27;tevm/actions&#x27;\n \nconst client = createMemoryClient()\n \n// Create a gas profiler\nconst profile = {\n  opcodes: new Map(),\n  totalGas: 0n,\n}\n \n// Execute with profiling\nconst result = await tevmCall(client, {\n  to: contractAddress,\n  data: &#x27;0x...&#x27;,\n  onStep: (step, next) =&gt; {\n    const opName = step.opcode.name\n    const gasCost = BigInt(step.opcode.fee)\n \n    const stats = profile.opcodes.get(opName) || {\n      count: 0,\n      totalGas: 0n\n    }\n \n    stats.count++\n    stats.totalGas += gasCost\n    profile.totalGas += gasCost\n    profile.opcodes.set(opName, stats)\n \n    next?.()\n  }\n})\n \n// Get gas usage by opcode\nfor (const [opcode, stats] of profile.opcodes) {\n  console.log(`${opcode}:`, {\n    count: stats.count,\n    totalGas: stats.totalGas.toString(),\n    percentageOfTotal: Number(stats.totalGas * 100n / profile.totalGas),\n  })\n}\n","title":"Gas Profiling","titles":["EVM Events","Advanced Examples"]},"81":{"href":"/api/evm-events#error-handling","html":"\n<p>Handle errors in execution:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmCall } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  onAfterMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (result.execResult.exceptionError) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.execResult.exceptionError</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;out of gas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction ran out of gas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">          break</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;revert&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction reverted:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">            result.execResult.returnValue.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;hex&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">          break</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;invalid opcode&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Invalid opcode encountered&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">          break</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Unknown error:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, error)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nHandle errors in execution:\nimport { createMemoryClient } from &#x27;tevm&#x27;\nimport { tevmCall } from &#x27;tevm/actions&#x27;\n \nconst client = createMemoryClient()\n \nconst result = await tevmCall(client, {\n  to: contractAddress,\n  data: &#x27;0x...&#x27;,\n  onAfterMessage: (result, next) =&gt; {\n    if (result.execResult.exceptionError) {\n      const error = result.execResult.exceptionError\n \n      switch (error.error) {\n        case &#x27;out of gas&#x27;:\n          console.error(&#x27;Transaction ran out of gas&#x27;)\n          break\n        case &#x27;revert&#x27;:\n          console.error(&#x27;Transaction reverted:&#x27;,\n            result.execResult.returnValue.toString(&#x27;hex&#x27;))\n          break\n        case &#x27;invalid opcode&#x27;:\n          console.error(&#x27;Invalid opcode encountered&#x27;)\n          break\n        default:\n          console.error(&#x27;Unknown error:&#x27;, error)\n      }\n    }\n    next?.()\n  }\n})\n","title":"Error Handling","titles":["EVM Events","Advanced Examples"]},"82":{"href":"/api/evm-events#best-practices","html":"\n<ol>\n<li>\n<strong>Always Call Next</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Important: Call next to continue execution</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">onStep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Process step...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.() </span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n<li>\n<strong>Handle Errors Gracefully</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">onStep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process step...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Error processing step:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, error)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n<li>\n<strong>Be Efficient</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Focus on information you need</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">onStep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Only log SSTORE operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (step.opcode.name </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;SSTORE&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Storage write:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      key: step.stack[step.stack.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> -</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      value: step.stack[step.stack.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> -</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nAlways Call Next\n// Important: Call next to continue execution\nonStep: (step, next) =&gt; {\n  // Process step...\n  next?.() \n}\n\n\nHandle Errors Gracefully\nonStep: (step, next) =&gt; {\n  try {\n    // Process step...\n  } catch (error) {\n    console.error(&#x27;Error processing step:&#x27;, error)\n  }\n  next?.()\n}\n\n\nBe Efficient\n// Focus on information you need\nonStep: (step, next) =&gt; {\n  // Only log SSTORE operations\n  if (step.opcode.name === &#x27;SSTORE&#x27;) {\n    console.log(&#x27;Storage write:&#x27;, {\n      key: step.stack[step.stack.length - 1].toString(16),\n      value: step.stack[step.stack.length - 2].toString(16)\n    })\n  }\n  next?.()\n}\n\n\n","title":"Best Practices","titles":["EVM Events"]},"83":{"href":"/api/evm-events#related-topics","html":"\n<ul>\n<li><a href=\"../api/tevm-call\">Tevm Call API</a></li>\n<li><a href=\"../api/methods\">Methods</a></li>\n<li><a href=\"../advanced/performance-profiler\">Performance Profiler</a></li>\n<li><a href=\"../api/methods\">Gas Estimation</a></li>\n</ul>","isPage":false,"text":"\n\nTevm Call API\nMethods\nPerformance Profiler\nGas Estimation\n","title":"Related Topics","titles":["EVM Events"]},"84":{"href":"/api/json-rpc#json-rpc-support","html":"</header>\n<p>Tevm Node provides comprehensive <a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/\">JSON-RPC</a> support through an <a href=\"https://eips.ethereum.org/EIPS/eip-1193\">EIP-1193</a> compatible interface. This allows seamless integration with popular Ethereum libraries and tools.</p>\n","isPage":true,"text":"\nTevm Node provides comprehensive JSON-RPC support through an EIP-1193 compatible interface. This allows seamless integration with popular Ethereum libraries and tools.\n","title":"JSON-RPC Support","titles":[]},"85":{"href":"/api/json-rpc#eip-1193-provider","html":"\n<p>The node can be extended to expose an <a href=\"https://eips.ethereum.org/EIPS/eip-1193\">EIP-1193</a> compatible request interface:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use standard JSON-RPC methods</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockNum</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_blockNumber&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe node can be extended to expose an EIP-1193 compatible request interface:\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\n \nconst node = createTevmNode().extend(requestEip1193())\n \n// Use standard JSON-RPC methods\nconst blockNum = await node.request({\n  method: &#x27;eth_blockNumber&#x27;,\n  params: [],\n})\n","title":"EIP-1193 Provider","titles":["JSON-RPC Support"]},"86":{"href":"/api/json-rpc#supported-methods","html":"\n","isPage":false,"text":"\n","title":"Supported Methods","titles":["JSON-RPC Support"]},"87":{"href":"/api/json-rpc#core-ethereum-methods","html":"\n<ul>\n<li>\n<strong>Block &amp; Chain</strong>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/blockNumberHandler.md\"><code>eth_blockNumber</code></a> - Get current block number</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetBlockByHashProcedure.md\"><code>eth_getBlockByHash</code></a> - Get block by hash</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetBlockByNumberProcedure.md\"><code>eth_getBlockByNumber</code></a> - Get block by number</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/chainIdHandler.md\"><code>eth_chainId</code></a> - Get current chain ID</li>\n</ul>\n</li>\n<li>\n<strong>State &amp; Account</strong>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/getBalanceHandler.md\"><code>eth_getBalance</code></a> - Get account balance</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/getCodeHandler.md\"><code>eth_getCode</code></a> - Get contract code</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/getStorageAtHandler.md\"><code>eth_getStorageAt</code></a> - Get storage value</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetTransactionCountProcedure.md\"><code>eth_getTransactionCount</code></a> - Get account nonce</li>\n</ul>\n</li>\n<li>\n<strong>Transaction</strong>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethCallHandler.md\"><code>eth_call</code></a> - Execute contract call</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethEstimateGasProcedure.md\"><code>eth_estimateGas</code></a> - Estimate gas usage</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethSendTransactionHandler.md\"><code>eth_sendTransaction</code></a> - Send transaction</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethSendRawTransaction.md\"><code>eth_sendRawTransaction</code></a> - Send signed transaction</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetTransactionByHashProcedure.md\"><code>eth_getTransactionByHash</code></a> - Get transaction details</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetTransactionReceipt.md\"><code>eth_getTransactionReceipt</code></a> - Get transaction receipt</li>\n</ul>\n</li>\n<li>\n<strong>Logs &amp; Events</strong>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetLogsHandler.md\"><code>eth_getLogs</code></a> - Get event logs</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethNewFilterProcedure.md\"><code>eth_newFilter</code></a> - Create new filter</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethNewBlockFilterProcedure.md\"><code>eth_newBlockFilter</code></a> - Create block filter</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetFilterChangesProcedure.md\"><code>eth_getFilterChanges</code></a> - Get filter updates</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetFilterLogsProcedure.md\"><code>eth_getFilterLogs</code></a> - Get all filter logs</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethUninstallFilterProcedure.md\"><code>eth_uninstallFilter</code></a> - Remove filter</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\nBlock &amp; Chain\n\neth_blockNumber - Get current block number\neth_getBlockByHash - Get block by hash\neth_getBlockByNumber - Get block by number\neth_chainId - Get current chain ID\n\n\n\nState &amp; Account\n\neth_getBalance - Get account balance\neth_getCode - Get contract code\neth_getStorageAt - Get storage value\neth_getTransactionCount - Get account nonce\n\n\n\nTransaction\n\neth_call - Execute contract call\neth_estimateGas - Estimate gas usage\neth_sendTransaction - Send transaction\neth_sendRawTransaction - Send signed transaction\neth_getTransactionByHash - Get transaction details\neth_getTransactionReceipt - Get transaction receipt\n\n\n\nLogs &amp; Events\n\neth_getLogs - Get event logs\neth_newFilter - Create new filter\neth_newBlockFilter - Create block filter\neth_getFilterChanges - Get filter updates\neth_getFilterLogs - Get all filter logs\neth_uninstallFilter - Remove filter\n\n\n\n","title":"Core Ethereum Methods","titles":["JSON-RPC Support","Supported Methods"]},"88":{"href":"/api/json-rpc#extended-methods","html":"\n<p>Tevm also supports additional methods commonly found in development environments:</p>\n<ul>\n<li>\n<strong>Debug Methods</strong>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/debugTraceTransactionProcedure.md\"><code>debug_traceTransaction</code></a> - Trace transaction execution</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/debugDumpStateProcedure.md\"><code>debug_dumpState</code></a> - Dump current state</li>\n</ul>\n</li>\n<li>\n<p><strong>Anvil Methods</strong> (For <a href=\"https://book.getfoundry.sh/reference/anvil/\">Foundry</a> compatibility)</p>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/anvilSetCodeProcedure.md\"><code>anvil_setCode</code></a> - Set contract code</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/anvilSetBalance.md\"><code>anvil_setBalance</code></a> - Set account balance</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/anvilSetNonceProcedure.md\"><code>anvil_setNonce</code></a> - Set account nonce</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/anvilSetStorageAtProcedure.md\"><code>anvil_setStorageAt</code></a> - Set storage value</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/anvilImpersonateAccount.md\"><code>anvil_impersonateAccount</code></a> - Impersonate account</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/anvilStopImpersonatingAccountProcedure.md\"><code>anvil_stopImpersonatingAccount</code></a> - Stop impersonating</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\nTevm also supports additional methods commonly found in development environments:\n\n\nDebug Methods\n\ndebug_traceTransaction - Trace transaction execution\ndebug_dumpState - Dump current state\n\n\n\nAnvil Methods (For Foundry compatibility)\n\nanvil_setCode - Set contract code\nanvil_setBalance - Set account balance\nanvil_setNonce - Set account nonce\nanvil_setStorageAt - Set storage value\nanvil_impersonateAccount - Impersonate account\nanvil_stopImpersonatingAccount - Stop impersonating\n\n\n\n","title":"Extended Methods","titles":["JSON-RPC Support","Supported Methods"]},"89":{"href":"/api/json-rpc#client-integration","html":"\n","isPage":false,"text":"\n","title":"Client Integration","titles":["JSON-RPC Support"]},"90":{"href":"/api/json-rpc#using-with-viem","html":"\n<p>For more information, see the <a href=\"https://viem.sh/docs/clients/custom.html\">Viem Documentation</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createPublicClient, custom } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createPublicClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chain: mainnet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">custom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node.request),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFor more information, see the Viem Documentation.\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { createPublicClient, custom } from &#x27;viem&#x27;\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\n \nconst node = createTevmNode().extend(requestEip1193())\n \nconst client = createPublicClient({\n  chain: mainnet,\n  transport: custom(node.request),\n})\n","title":"Using with Viem","titles":["JSON-RPC Support","Client Integration"]},"91":{"href":"/api/json-rpc#using-with-ethers","html":"\n<p>For more information, see the <a href=\"https://docs.ethers.org/v6/api/providers/#Provider\">Ethers Documentation</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { BrowserProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BrowserProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span></code></pre>\n","isPage":false,"text":"\nFor more information, see the Ethers Documentation.\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { BrowserProvider } from &#x27;ethers&#x27;\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\n \nconst node = createTevmNode().extend(requestEip1193())\nconst provider = new BrowserProvider(node)\n","title":"Using with Ethers","titles":["JSON-RPC Support","Client Integration"]},"92":{"href":"/api/json-rpc#error-handling","html":"\n<p>JSON-RPC errors follow the <a href=\"https://www.jsonrpc.org/specification#error_object\">standard format</a> and are fully typed. See the <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/JsonRpcError.md\">error types documentation</a> for more details:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> JsonRpcError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  message</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> unknown</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Common error codes (see <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/variables/ErrorCodes.md\">Error Types</a>):</p>\n<ul>\n<li><code>-32700</code>: Parse error (<a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/ParseError.md\"><code>ParseError</code></a>)</li>\n<li><code>-32600</code>: Invalid request (<a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/InvalidRequest.md\"><code>InvalidRequest</code></a>)</li>\n<li><code>-32601</code>: Method not found (<a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/MethodNotFound.md\"><code>MethodNotFound</code></a>)</li>\n<li><code>-32602</code>: Invalid params (<a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/InvalidParams.md\"><code>InvalidParams</code></a>)</li>\n<li><code>-32603</code>: Internal error (<a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/InternalError.md\"><code>InternalError</code></a>)</li>\n<li><code>-32000</code> to <code>-32099</code>: Server error (<a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/ServerError.md\"><code>ServerError</code></a>)</li>\n</ul>\n<p>For detailed error handling examples and best practices, see the <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/variables/ErrorHandling.md\">Error Handling Guide</a>.</p>\n","isPage":false,"text":"\nJSON-RPC errors follow the standard format and are fully typed. See the error types documentation for more details:\ninterface JsonRpcError {\n  code: number\n  message: string\n  data?: unknown\n}\nCommon error codes (see Error Types):\n\n-32700: Parse error (ParseError)\n-32600: Invalid request (InvalidRequest)\n-32601: Method not found (MethodNotFound)\n-32602: Invalid params (InvalidParams)\n-32603: Internal error (InternalError)\n-32000 to -32099: Server error (ServerError)\n\nFor detailed error handling examples and best practices, see the Error Handling Guide.\n","title":"Error Handling","titles":["JSON-RPC Support"]},"93":{"href":"/api/json-rpc#best-practices","html":"\n<ol>\n<li>\n<p><strong>Error Handling</strong>: Always wrap RPC calls in try-catch blocks to handle potential errors gracefully. See <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/variables/ErrorCodes.md\">Error Types</a> for all possible errors.</p>\n</li>\n<li>\n<p><strong>Gas Estimation</strong>: For transactions, use <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethEstimateGasProcedure.md\"><code>eth_estimateGas</code></a> before sending to ensure sufficient gas:</p>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasEstimate</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_estimateGas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [tx],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<ol start=\"3\">\n<li><strong>Receipt Confirmation</strong>: Wait for transaction receipts to confirm state changes using <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetTransactionReceipt.md\"><code>eth_getTransactionReceipt</code></a>:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_sendTransaction&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [tx],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_getTransactionReceipt&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [txHash],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<ol start=\"4\">\n<li><strong>Event Filtering</strong>: Use filters efficiently by:\n<ul>\n<li>Setting appropriate block ranges</li>\n<li>Using specific <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html#events\">topics</a></li>\n<li>Cleaning up unused filters with <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethUninstallFilterProcedure.md\"><code>eth_uninstallFilter</code></a></li>\n</ul>\n</li>\n</ol>\n<p>For more examples and detailed API documentation, see:</p>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs\">Complete Actions Documentation</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases\">Type Definitions</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions\">Function Reference</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/variables\">Variables and Constants</a></li>\n</ul>\n","isPage":false,"text":"\n\n\nError Handling: Always wrap RPC calls in try-catch blocks to handle potential errors gracefully. See Error Types for all possible errors.\n\n\nGas Estimation: For transactions, use eth_estimateGas before sending to ensure sufficient gas:\n\n\nconst gasEstimate = await node.request({\n  method: &#x27;eth_estimateGas&#x27;,\n  params: [tx],\n})\n\nReceipt Confirmation: Wait for transaction receipts to confirm state changes using eth_getTransactionReceipt:\n\nconst txHash = await node.request({\n  method: &#x27;eth_sendTransaction&#x27;,\n  params: [tx],\n})\n \nconst receipt = await node.request({\n  method: &#x27;eth_getTransactionReceipt&#x27;,\n  params: [txHash],\n})\n\nEvent Filtering: Use filters efficiently by:\n\nSetting appropriate block ranges\nUsing specific topics\nCleaning up unused filters with eth_uninstallFilter\n\n\n\nFor more examples and detailed API documentation, see:\n\nComplete Actions Documentation\nType Definitions\nFunction Reference\nVariables and Constants\n\n","title":"Best Practices","titles":["JSON-RPC Support"]},"94":{"href":"/api/json-rpc#related-topics","html":"\n<ul>\n<li><a href=\"../examples/viem\">Using with Viem</a></li>\n<li><a href=\"../examples/ethers\">Using with Ethers</a></li>\n<li><a href=\"../core/managing-state\">Managing State</a></li>\n<li><a href=\"../advanced/receipts-and-logs\">Receipts &amp; Logs</a></li>\n<li><a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/\">Ethereum JSON-RPC Specification</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-1193\">EIP-1193: Ethereum Provider JavaScript API</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs\">Tevm API Documentation</a></li>\n</ul>\n","isPage":false,"text":"\n\nUsing with Viem\nUsing with Ethers\nManaging State\nReceipts &amp; Logs\nEthereum JSON-RPC Specification\nEIP-1193: Ethereum Provider JavaScript API\nTevm API Documentation\n\n","title":"Related Topics","titles":["JSON-RPC Support"]},"95":{"href":"/api/json-rpc#using-tevm-actions","html":"\n<p>Tevm provides a set of high-level actions that can be imported from <code>tevm/actions</code>. See the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs\">complete actions documentation</a> for all available actions.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tevmCall, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/callHandler.md</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tevmMine, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/mineHandler.md</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tevmGetAccount, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/getAccountHandler.md</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tevmSetAccount </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/setAccountHandler.md</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Call a contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  createTransaction: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine pending transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmMine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmGetAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmSetAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  deployedBytecode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>For detailed type information, see:</p>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/CallParams.md\"><code>CallParams</code></a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/MineParams.md\"><code>MineParams</code></a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/GetAccountParams.md\"><code>GetAccountParams</code></a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/SetAccountParams.md\"><code>SetAccountParams</code></a></li>\n</ul>\n<p>Note: By default, tevm actions require manual mining via <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/mineHandler.md\"><code>tevmMine()</code></a>. If you want transactions to be automatically applied, you can either:</p>\n<ol>\n<li>Use the lower level API <code>vm.runCall</code></li>\n<li>Configure the client with <code>miningConfig: { type: &#x27;auto&#x27; }</code></li>\n</ol>\n","isPage":false,"text":"\nTevm provides a set of high-level actions that can be imported from tevm/actions. See the complete actions documentation for all available actions.\nimport {\n  tevmCall, // See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/callHandler.md\n  tevmMine, // See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/mineHandler.md\n  tevmGetAccount, // See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/getAccountHandler.md\n  tevmSetAccount // See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/setAccountHandler.md\n} from &#x27;tevm/actions&#x27;\nimport { createTevmNode } from &#x27;tevm&#x27;\n \nconst node = createTevmNode()\n \n// Call a contract\nconst result = await tevmCall(node, {\n  to: &#x27;0x...&#x27;,\n  data: &#x27;0x...&#x27;,\n  value: 0n,\n  createTransaction: true\n})\n \n// Mine pending transactions\nawait tevmMine(node)\n \n// Get account state\nconst account = await tevmGetAccount(node, {\n  address: &#x27;0x...&#x27;,\n  blockTag: &#x27;latest&#x27;\n})\n \n// Set account state\nawait tevmSetAccount(node, {\n  address: &#x27;0x...&#x27;,\n  balance: 100n,\n  nonce: 0n,\n  deployedBytecode: &#x27;0x...&#x27;\n})\nFor detailed type information, see:\n\nCallParams\nMineParams\nGetAccountParams\nSetAccountParams\n\nNote: By default, tevm actions require manual mining via tevmMine(). If you want transactions to be automatically applied, you can either:\n\nUse the lower level API vm.runCall\nConfigure the client with miningConfig: { type: &#x27;auto&#x27; }\n\n","title":"Using Tevm Actions","titles":["JSON-RPC Support"]},"96":{"href":"/api/json-rpc#optimistic-updates-with-receipt-manager","html":"\n<p>For more information on transaction receipts and logs, see the <a href=\"https://ethereum.org/en/developers/docs/transactions/transaction-receipts/\">Ethereum Receipts Documentation</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmCall, tevmMine } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receiptsManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptsManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Submit transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">txHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_sendTransaction&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [tx],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  createTransaction: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get optimistic receipt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> pendingReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptByTxHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Update UI optimistically</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">updateUI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(pendingReceipt)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait for real receipt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> realReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_getTransactionReceipt&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [txHash]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Eject optimistic tx if real receipt differs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">receiptsAreDifferent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(pendingReceipt, realReceipt)) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  updateUI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(realReceipt)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Advanced: Rebase on new blocks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;block&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Get new block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_getBlockByNumber&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    params: [blockNumber, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Get our pending transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> pendingTxs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPendingTransactions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Rebase our transactions on top of new block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pendingTxs) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node, {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      ...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;pending&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Update receipt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx.hash, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Mine rebased transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmMine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>","isPage":false,"text":"\nFor more information on transaction receipts and logs, see the Ethereum Receipts Documentation.\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { tevmCall, tevmMine } from &#x27;tevm/actions&#x27;\n \nconst node = createTevmNode()\nconst receiptsManager = await node.getReceiptsManager()\n \n// Submit transaction\nconst { txHash } = await tevmCall(node, {\n  method: &#x27;eth_sendTransaction&#x27;,\n  params: [tx],\n  createTransaction: true\n})\n \n// Get optimistic receipt\nconst pendingReceipt = await receiptsManager.getReceiptByTxHash(txHash)\n \n// Update UI optimistically\nupdateUI(pendingReceipt)\n \n// Wait for real receipt\nconst realReceipt = await node.request({\n  method: &#x27;eth_getTransactionReceipt&#x27;,\n  params: [txHash]\n})\n \n// Eject optimistic tx if real receipt differs\nif (receiptsAreDifferent(pendingReceipt, realReceipt)) {\n  await receiptsManager.removeReceipt(txHash)\n  updateUI(realReceipt)\n}\n \n// Advanced: Rebase on new blocks\nnode.on(&#x27;block&#x27;, async (blockNumber) =&gt; {\n  // Get new block\n  const block = await node.request({\n    method: &#x27;eth_getBlockByNumber&#x27;,\n    params: [blockNumber, true]\n  })\n \n  // Get our pending transactions\n  const pendingTxs = await receiptsManager.getPendingTransactions()\n \n  // Rebase our transactions on top of new block\n  for (const tx of pendingTxs) {\n    const result = await tevmCall(node, {\n      ...tx,\n      blockTag: &#x27;pending&#x27;\n    })\n \n    // Update receipt\n    await receiptsManager.putReceipt(tx.hash, result)\n  }\n \n  // Mine rebased transactions\n  await tevmMine(node)\n})","title":"Optimistic Updates with Receipt Manager","titles":["JSON-RPC Support"]},"97":{"href":"/api/packages#package-reference","html":"</header>\n<p>Tevm Node is built as a collection of modular packages. You can install the complete suite with <code>npm install tevm</code> or individual packages based on your needs.</p>\n","isPage":true,"text":"\nTevm Node is built as a collection of modular packages. You can install the complete suite with npm install tevm or individual packages based on your needs.\n","title":"Package Reference","titles":[]},"98":{"href":"/api/packages#installation-options","html":"\n","isPage":false,"text":"\n","title":"Installation Options","titles":["Package Reference"]},"99":{"href":"/api/packages#complete-package","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Import from the main package</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { callHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/transport&#x27;</span></span></code></pre>\n","isPage":false,"text":"\nnpm install tevm\n// Import from the main package\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { callHandler } from &#x27;tevm/actions&#x27;\nimport { http } from &#x27;tevm/transport&#x27;\n","title":"Complete Package","titles":["Package Reference","Installation Options"]},"100":{"href":"/api/packages#individual-packages","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/node</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/actions</span></span></code></pre>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Import directly from packages</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/node&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { callHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/actions&#x27;</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/node @tevm/actions\n// Import directly from packages\nimport { createTevmNode } from &#x27;@tevm/node&#x27;\nimport { callHandler } from &#x27;@tevm/actions&#x27;\n","title":"Individual Packages","titles":["Package Reference","Installation Options"]},"101":{"href":"/api/packages#core-packages","html":"\n","isPage":false,"text":"\n","title":"Core Packages","titles":["Package Reference"]},"102":{"href":"/api/packages#node--client","html":"\n<ul>\n<li>\n<p><strong>@tevm/node</strong> - Core node implementation and management</p>\n<ul>\n<li>Main entry point for creating and managing Tevm nodes</li>\n<li>Blockchain and state management</li>\n<li>Mining and block production</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/memory-client</strong> - In-memory Ethereum client</p>\n<ul>\n<li>Viem-compatible client interface</li>\n<li>Local state management</li>\n<li>Transaction handling</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/node - Core node implementation and management\n\nMain entry point for creating and managing Tevm nodes\nBlockchain and state management\nMining and block production\n\n\n\n@tevm/memory-client - In-memory Ethereum client\n\nViem-compatible client interface\nLocal state management\nTransaction handling\n\n\n\n","title":"Node &amp; Client","titles":["Package Reference","Core Packages"]},"103":{"href":"/api/packages#evm--execution","html":"\n<ul>\n<li>\n<p><strong>@tevm/vm</strong> - Virtual Machine implementation</p>\n<ul>\n<li>EVM execution environment</li>\n<li>Opcode handling</li>\n<li>State transitions</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/evm</strong> - Low-level EVM operations</p>\n<ul>\n<li>Bytecode execution</li>\n<li>Gas calculation</li>\n<li>Stack management</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/vm - Virtual Machine implementation\n\nEVM execution environment\nOpcode handling\nState transitions\n\n\n\n@tevm/evm - Low-level EVM operations\n\nBytecode execution\nGas calculation\nStack management\n\n\n\n","title":"EVM &amp; Execution","titles":["Package Reference","Core Packages"]},"104":{"href":"/api/packages#state--storage","html":"\n<ul>\n<li>\n<p><strong>@tevm/state</strong> - State management</p>\n<ul>\n<li>Account state handling</li>\n<li>Storage manipulation</li>\n<li>State transitions</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/blockchain</strong> - Blockchain implementation</p>\n<ul>\n<li>Block management</li>\n<li>Chain reorganization</li>\n<li>Header validation</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/state - State management\n\nAccount state handling\nStorage manipulation\nState transitions\n\n\n\n@tevm/blockchain - Blockchain implementation\n\nBlock management\nChain reorganization\nHeader validation\n\n\n\n","title":"State &amp; Storage","titles":["Package Reference","Core Packages"]},"105":{"href":"/api/packages#transaction-handling","html":"\n","isPage":false,"text":"\n","title":"Transaction Handling","titles":["Package Reference"]},"106":{"href":"/api/packages#transaction-processing","html":"\n<ul>\n<li>\n<p><strong>@tevm/tx</strong> - Transaction utilities</p>\n<ul>\n<li>Transaction signing</li>\n<li>Gas estimation</li>\n<li>Receipt generation</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/txpool</strong> - Transaction pool management</p>\n<ul>\n<li>Pending transaction queue</li>\n<li>Transaction ordering</li>\n<li>Replacement handling</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/tx - Transaction utilities\n\nTransaction signing\nGas estimation\nReceipt generation\n\n\n\n@tevm/txpool - Transaction pool management\n\nPending transaction queue\nTransaction ordering\nReplacement handling\n\n\n\n","title":"Transaction Processing","titles":["Package Reference","Transaction Handling"]},"107":{"href":"/api/packages#block--receipt-management","html":"\n<ul>\n<li>\n<p><strong>@tevm/block</strong> - Block utilities</p>\n<ul>\n<li>Block creation</li>\n<li>Block validation</li>\n<li>Chain management</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/receipt-manager</strong> - Transaction receipts</p>\n<ul>\n<li>Receipt storage</li>\n<li>Event logging</li>\n<li>Gas usage tracking</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/block - Block utilities\n\nBlock creation\nBlock validation\nChain management\n\n\n\n@tevm/receipt-manager - Transaction receipts\n\nReceipt storage\nEvent logging\nGas usage tracking\n\n\n\n","title":"Block &amp; Receipt Management","titles":["Package Reference","Transaction Handling"]},"108":{"href":"/api/packages#client-integration","html":"\n","isPage":false,"text":"\n","title":"Client Integration","titles":["Package Reference"]},"109":{"href":"/api/packages#communication","html":"\n<ul>\n<li>\n<p><strong>@tevm/jsonrpc</strong> - JSON-RPC implementation</p>\n<ul>\n<li>Standard Ethereum methods</li>\n<li>Custom Tevm methods</li>\n<li>Error handling</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/http-client</strong> - HTTP client</p>\n<ul>\n<li>Remote node communication</li>\n<li>Request batching</li>\n<li>Error handling</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/jsonrpc - JSON-RPC implementation\n\nStandard Ethereum methods\nCustom Tevm methods\nError handling\n\n\n\n@tevm/http-client - HTTP client\n\nRemote node communication\nRequest batching\nError handling\n\n\n\n","title":"Communication","titles":["Package Reference","Client Integration"]},"110":{"href":"/api/packages#actions--procedures","html":"\n<ul>\n<li>\n<p><strong>@tevm/actions</strong> - High-level actions</p>\n<ul>\n<li>Contract interaction</li>\n<li>Account management</li>\n<li>State queries</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/procedures</strong> - Common operations</p>\n<ul>\n<li>State manipulation</li>\n<li>Chain operations</li>\n<li>Utility functions</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/actions - High-level actions\n\nContract interaction\nAccount management\nState queries\n\n\n\n@tevm/procedures - Common operations\n\nState manipulation\nChain operations\nUtility functions\n\n\n\n","title":"Actions &amp; Procedures","titles":["Package Reference","Client Integration"]},"111":{"href":"/api/packages#smart-contract-tools","html":"\n","isPage":false,"text":"\n","title":"Smart Contract Tools","titles":["Package Reference"]},"112":{"href":"/api/packages#contract-interaction","html":"\n<ul>\n<li>\n<p><strong>@tevm/contract</strong> - Contract utilities</p>\n<ul>\n<li>ABI handling</li>\n<li>Function encoding</li>\n<li>Event parsing</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/precompiles</strong> - Precompiled contracts</p>\n<ul>\n<li>Standard precompiles</li>\n<li>Custom implementations</li>\n<li>Gas calculation</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/contract - Contract utilities\n\nABI handling\nFunction encoding\nEvent parsing\n\n\n\n@tevm/precompiles - Precompiled contracts\n\nStandard precompiles\nCustom implementations\nGas calculation\n\n\n\n","title":"Contract Interaction","titles":["Package Reference","Smart Contract Tools"]},"113":{"href":"/api/packages#contract-management","html":"\n<ul>\n<li><strong>@tevm/predeploys</strong> - Pre-deployed contracts\n<ul>\n<li>Standard contracts</li>\n<li>Network-specific contracts</li>\n<li>Contract deployment</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n@tevm/predeploys - Pre-deployed contracts\n\nStandard contracts\nNetwork-specific contracts\nContract deployment\n\n\n\n","title":"Contract Management","titles":["Package Reference","Smart Contract Tools"]},"114":{"href":"/api/packages#utilities--helpers","html":"\n","isPage":false,"text":"\n","title":"Utilities &amp; Helpers","titles":["Package Reference"]},"115":{"href":"/api/packages#core-utilities","html":"\n<ul>\n<li>\n<p><strong>@tevm/utils</strong> - Common utilities</p>\n<ul>\n<li>Address handling</li>\n<li>Data encoding</li>\n<li>Type conversion</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/common</strong> - Shared constants</p>\n<ul>\n<li>Chain configurations</li>\n<li>Network parameters</li>\n<li>Common types</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/utils - Common utilities\n\nAddress handling\nData encoding\nType conversion\n\n\n\n@tevm/common - Shared constants\n\nChain configurations\nNetwork parameters\nCommon types\n\n\n\n","title":"Core Utilities","titles":["Package Reference","Utilities &amp; Helpers"]},"116":{"href":"/api/packages#development-tools","html":"\n<ul>\n<li>\n<p><strong>@tevm/decorators</strong> - Function decorators</p>\n<ul>\n<li>Method extension</li>\n<li>Behavior modification</li>\n<li>Utility wrappers</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/errors</strong> - Error handling</p>\n<ul>\n<li>Error types</li>\n<li>Error messages</li>\n<li>Stack traces</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/decorators - Function decorators\n\nMethod extension\nBehavior modification\nUtility wrappers\n\n\n\n@tevm/errors - Error handling\n\nError types\nError messages\nStack traces\n\n\n\n","title":"Development Tools","titles":["Package Reference","Utilities &amp; Helpers"]},"117":{"href":"/api/packages#data-structures","html":"\n<ul>\n<li>\n<p><strong>@tevm/rlp</strong> - RLP encoding/decoding</p>\n<ul>\n<li>Data serialization</li>\n<li>Network protocol</li>\n<li>Storage format</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/trie</strong> - Merkle Patricia Tree</p>\n<ul>\n<li>State storage</li>\n<li>Proof verification</li>\n<li>Tree manipulation</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/rlp - RLP encoding/decoding\n\nData serialization\nNetwork protocol\nStorage format\n\n\n\n@tevm/trie - Merkle Patricia Tree\n\nState storage\nProof verification\nTree manipulation\n\n\n\n","title":"Data Structures","titles":["Package Reference","Utilities &amp; Helpers"]},"118":{"href":"/api/packages#development--debugging","html":"\n","isPage":false,"text":"\n","title":"Development &amp; Debugging","titles":["Package Reference"]},"119":{"href":"/api/packages#logging--debugging","html":"\n<ul>\n<li>\n<p><strong>@tevm/logger</strong> - Logging system</p>\n<ul>\n<li>Configurable levels</li>\n<li>Output formatting</li>\n<li>Debug information</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/effect</strong> - Effect system</p>\n<ul>\n<li>Side effect handling</li>\n<li>Async operations</li>\n<li>Error recovery</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/logger - Logging system\n\nConfigurable levels\nOutput formatting\nDebug information\n\n\n\n@tevm/effect - Effect system\n\nSide effect handling\nAsync operations\nError recovery\n\n\n\n","title":"Logging &amp; Debugging","titles":["Package Reference","Development &amp; Debugging"]},"120":{"href":"/api/packages#storage--types","html":"\n<ul>\n<li>\n<p><strong>@tevm/sync-storage-persister</strong> - Storage persistence</p>\n<ul>\n<li>State synchronization</li>\n<li>Data persistence</li>\n<li>Cache management</li>\n</ul>\n</li>\n<li>\n<p><strong>@tevm/client-types</strong> - Type definitions</p>\n<ul>\n<li>Interface definitions</li>\n<li>Type exports</li>\n<li>API documentation</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\n@tevm/sync-storage-persister - Storage persistence\n\nState synchronization\nData persistence\nCache management\n\n\n\n@tevm/client-types - Type definitions\n\nInterface definitions\nType exports\nAPI documentation\n\n\n\n","title":"Storage &amp; Types","titles":["Package Reference","Development &amp; Debugging"]},"121":{"href":"/api/packages#best-practices","html":"\n<ol>\n<li>\n<strong>Start Simple</strong>\n<ul>\n<li>Begin with the complete <code>tevm</code> package</li>\n<li>Only split into individual packages if you need to optimize bundle size</li>\n</ul>\n</li>\n<li>\n<strong>Bundle Optimization</strong>\n<ul>\n<li>Import from specific subpaths: <code>tevm/actions</code> instead of <code>@tevm/actions</code></li>\n<li>Use tree-shaking friendly imports</li>\n</ul>\n</li>\n<li>\n<strong>Version Management</strong>\n<ul>\n<li>Keep all @tevm/* packages on the same version</li>\n<li>Update packages together to avoid compatibility issues</li>\n</ul>\n</li>\n<li>\n<strong>Development Workflow</strong>\n<ul>\n<li>Use TypeScript for better type safety</li>\n<li>Leverage provided type definitions</li>\n<li>Follow the documentation for each package</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nStart Simple\n\nBegin with the complete tevm package\nOnly split into individual packages if you need to optimize bundle size\n\n\n\nBundle Optimization\n\nImport from specific subpaths: tevm/actions instead of @tevm/actions\nUse tree-shaking friendly imports\n\n\n\nVersion Management\n\nKeep all @tevm/* packages on the same version\nUpdate packages together to avoid compatibility issues\n\n\n\nDevelopment Workflow\n\nUse TypeScript for better type safety\nLeverage provided type definitions\nFollow the documentation for each package\n\n\n\n","title":"Best Practices","titles":["Package Reference"]},"122":{"href":"/api/packages#related-topics","html":"\n<ul>\n<li><a href=\"../introduction/architecture-overview\">Architecture Overview</a></li>\n<li><a href=\"./methods\">API Reference</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo\">GitHub Repository</a></li>\n</ul>","isPage":false,"text":"\n\nArchitecture Overview\nAPI Reference\nGitHub Repository\n","title":"Related Topics","titles":["Package Reference"]},"123":{"href":"/api/vm-and-submodules#vm--submodules","html":"</header>\n<p><a href=\"https://github.com/evmts/tevm-monorepo\">Tevm Node</a> is built on a modular architecture that separates concerns into distinct submodules. This guide covers the internal components and their APIs.</p>\n","isPage":true,"text":"\nTevm Node is built on a modular architecture that separates concerns into distinct submodules. This guide covers the internal components and their APIs.\n","title":"VM &amp; Submodules","titles":[]},"124":{"href":"/api/vm-and-submodules#overview","html":"\n<p>The main submodules are:</p>\n<p>1. <strong>EVM (Ethereum Virtual Machine)</strong> - Core <a href=\"https://ethereum.org/en/developers/docs/evm/\">execution engine</a>\n2. <strong>Blockchain</strong> - <a href=\"https://ethereum.org/en/developers/docs/blocks/\">Block and chain state</a> management\n3. <strong>StateManager</strong> - <a href=\"https://ethereum.org/en/developers/docs/accounts/\">Account and storage state</a> management\n4. <strong>TxPool</strong> - <a href=\"https://ethereum.org/en/developers/docs/transactions/\">Transaction mempool</a>\n5. <strong>ReceiptsManager</strong> - <a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt\">Transaction receipts and logs</a></p>\n","isPage":false,"text":"\nThe main submodules are:\n1. EVM (Ethereum Virtual Machine) - Core execution engine\n2. Blockchain - Block and chain state management\n3. StateManager - Account and storage state management\n4. TxPool - Transaction mempool\n5. ReceiptsManager - Transaction receipts and logs\n","title":"Overview","titles":["VM &amp; Submodules"]},"125":{"href":"/api/vm-and-submodules#evm-module","html":"\n<p>The EVM module handles bytecode execution and state transitions. It is based on <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/evm\"><code>@ethereumjs/evm</code></a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> evm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.evm</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Direct EVM execution</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  caller: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Full transaction execution (recommended)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx: transaction,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  block: block,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe EVM module handles bytecode execution and state transitions. It is based on @ethereumjs/evm.\nconst vm = await node.getVm()\nconst evm = await vm.evm\n \n// Direct EVM execution\nconst result = await evm.runCall({\n  to: &#x27;0x...&#x27;,\n  data: &#x27;0x...&#x27;,\n  value: 0n,\n  caller: &#x27;0x...&#x27;,\n})\n \n// Full transaction execution (recommended)\nconst txResult = await vm.runTx({\n  tx: transaction,\n  block: block,\n})\n","title":"EVM Module","titles":["VM &amp; Submodules"]},"126":{"href":"/api/vm-and-submodules#key-features","html":"\n<p>- <strong>State Management</strong>: Handles <a href=\"https://ethereum.org/en/developers/docs/accounts/\">account state</a>, storage, and code execution\n- <strong>Gas Metering</strong>: Tracks <a href=\"https://ethereum.org/en/developers/docs/gas/\">gas consumption</a> during execution\n- <strong>Precompiles</strong>: <a href=\"https://www.evm.codes/precompiled\">Built-in contract implementations</a>\n- <strong>EIP Support</strong>: Implements various <a href=\"https://eips.ethereum.org/\">Ethereum Improvement Proposals</a></p>\n","isPage":false,"text":"\n- State Management: Handles account state, storage, and code execution\n- Gas Metering: Tracks gas consumption during execution\n- Precompiles: Built-in contract implementations\n- EIP Support: Implements various Ethereum Improvement Proposals\n","title":"Key Features","titles":["VM &amp; Submodules","EVM Module"]},"127":{"href":"/api/vm-and-submodules#common-operations","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check execution result</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (result.execResult.exceptionError) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Execution failed:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.execResult.exceptionError)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Return value:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.execResult.returnValue)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Gas used:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.execResult.executionGasUsed)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Access logs from execution</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.execResult.logs) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Event:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: log.address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    topics: log.topics,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: log.data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Check execution result\nif (result.execResult.exceptionError) {\n  console.error(&#x27;Execution failed:&#x27;, result.execResult.exceptionError)\n} else {\n  console.log(&#x27;Return value:&#x27;, result.execResult.returnValue)\n  console.log(&#x27;Gas used:&#x27;, result.execResult.executionGasUsed)\n}\n \n// Access logs from execution\nfor (const log of result.execResult.logs) {\n  console.log(&#x27;Event:&#x27;, {\n    address: log.address,\n    topics: log.topics,\n    data: log.data\n  })\n}\n","title":"Common Operations","titles":["VM &amp; Submodules","EVM Module"]},"128":{"href":"/api/vm-and-submodules#blockchain-module","html":"\n<p>The blockchain module manages blocks and chain state. It is based on <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/blockchain\"><code>@ethereumjs/blockchain</code></a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()).blockchain</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get block by number or hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockByHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add new block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(block)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Delete block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">delBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get block details</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  number: block.header.number,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hash: block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  parentHash: block.header.parentHash,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  stateRoot: block.header.stateRoot</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe blockchain module manages blocks and chain state. It is based on @ethereumjs/blockchain.\nconst chain = (await node.getVm()).blockchain\n \n// Get block by number or hash\nconst block = await chain.getBlock(&#x27;latest&#x27;)\nconst blockByHash = await chain.getBlock(blockHash)\n \n// Add new block\nawait chain.putBlock(block)\n \n// Delete block\nawait chain.delBlock(blockHash)\n \n// Get block details\nconsole.log({\n  number: block.header.number,\n  hash: block.hash(),\n  parentHash: block.header.parentHash,\n  stateRoot: block.header.stateRoot\n})\n","title":"Blockchain Module","titles":["VM &amp; Submodules"]},"129":{"href":"/api/vm-and-submodules#fork-support","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// When forking, blocks are fetched from the parent chain</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> forkedBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockNumber)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Local blocks override forked blocks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(localBlock)</span></span></code></pre>\n","isPage":false,"text":"\n// When forking, blocks are fetched from the parent chain\nconst forkedBlock = await chain.getBlock(blockNumber)\n \n// Local blocks override forked blocks\nawait chain.putBlock(localBlock)\n","title":"Fork Support","titles":["VM &amp; Submodules","Blockchain Module"]},"130":{"href":"/api/vm-and-submodules#statemanager","html":"\n<p>The StateManager handles account state and storage. It is based on <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/statemanager\"><code>@ethereumjs/statemanager</code></a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> state</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()).stateManager</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Account operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, account)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Contract operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putContractCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, bytecode)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getContractCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Storage operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putContractStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, key, value)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getContractStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, key)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// State snapshots</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> snapshot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dumpCanonicalGenesis</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">commit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">revert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nThe StateManager handles account state and storage. It is based on @ethereumjs/statemanager.\nconst state = (await node.getVm()).stateManager\n \n// Account operations\nconst account = await state.getAccount(address)\nawait state.putAccount(address, account)\n \n// Contract operations\nawait state.putContractCode(address, bytecode)\nconst code = await state.getContractCode(address)\n \n// Storage operations\nawait state.putContractStorage(address, key, value)\nconst value = await state.getContractStorage(address, key)\n \n// State snapshots\nconst snapshot = await state.dumpCanonicalGenesis()\nawait state.commit()\nawait state.revert()\n","title":"StateManager","titles":["VM &amp; Submodules"]},"131":{"href":"/api/vm-and-submodules#working-with-accounts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create or update account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  storageRoot: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">EMPTY_ROOT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  codeHash: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">EMPTY_HASH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, account)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Delete account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deleteAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span></code></pre>\n","isPage":false,"text":"\n// Create or update account\nconst account = {\n  nonce: 1n,\n  balance: 100n,\n  storageRoot: EMPTY_ROOT,\n  codeHash: EMPTY_HASH\n}\nawait state.putAccount(address, account)\n \n// Delete account\nawait state.deleteAccount(address)\n","title":"Working with Accounts","titles":["VM &amp; Submodules","StateManager"]},"132":{"href":"/api/vm-and-submodules#transaction-pool","html":"\n<p>The TxPool manages pending transactions. It is based on <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/tx-pool\"><code>@ethereumjs/tx-pool</code></a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> pool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTxPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get pending transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> pending</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPendingTransactions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Remove transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeByHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transactions ordered by price</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ordered</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">txsByPriceAndNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  baseFee: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe TxPool manages pending transactions. It is based on @ethereumjs/tx-pool.\nconst pool = await node.getTxPool()\n \n// Add transaction\nawait pool.add(transaction)\n \n// Get pending transactions\nconst pending = await pool.getPendingTransactions()\n \n// Remove transaction\nawait pool.removeByHash(txHash)\n \n// Get transactions ordered by price\nconst ordered = await pool.txsByPriceAndNonce({\n  baseFee: 10n\n})\n","title":"Transaction Pool","titles":["VM &amp; Submodules"]},"133":{"href":"/api/vm-and-submodules#transaction-validation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Validate transaction before adding</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">validateTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Invalid transaction:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, error)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Validate transaction before adding\ntry {\n  await pool.validateTx(transaction)\n  await pool.add(transaction)\n} catch (error) {\n  console.error(&#x27;Invalid transaction:&#x27;, error)\n}\n","title":"Transaction Validation","titles":["VM &amp; Submodules","Transaction Pool"]},"134":{"href":"/api/vm-and-submodules#receiptsmanager","html":"\n<p>The ReceiptsManager handles <a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt\">transaction receipts</a> and event logs.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptsManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get receipts for block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockReceipts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceipts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get receipt by transaction hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptByTxHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Query logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fromBlock: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  toBlock: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  topics: [eventSignature]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe ReceiptsManager handles transaction receipts and event logs.\nconst receipts = await node.getReceiptsManager()\n \n// Get receipts for block\nconst blockReceipts = await receipts.getReceipts(blockHash)\n \n// Get receipt by transaction hash\nconst txReceipt = await receipts.getReceiptByTxHash(txHash)\n \n// Query logs\nconst logs = await receipts.getLogs({\n  fromBlock: 0n,\n  toBlock: &#x27;latest&#x27;,\n  address: contractAddress,\n  topics: [eventSignature]\n})\n","title":"ReceiptsManager","titles":["VM &amp; Submodules"]},"135":{"href":"/api/vm-and-submodules#working-with-logs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process event logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> logs) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: log.address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    topics: log.topics,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: log.data,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockNumber: log.blockNumber,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transactionHash: log.transactionHash,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    logIndex: log.logIndex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Process event logs\nfor (const log of logs) {\n  console.log({\n    address: log.address,\n    topics: log.topics,\n    data: log.data,\n    blockNumber: log.blockNumber,\n    transactionHash: log.transactionHash,\n    logIndex: log.logIndex\n  })\n}\n","title":"Working with Logs","titles":["VM &amp; Submodules","ReceiptsManager"]},"136":{"href":"/api/vm-and-submodules#best-practices","html":"\n<p>1. <strong>Use High-Level APIs</strong>: Prefer <code>vm.runTx()</code> over direct EVM execution for full transaction support.</p>\n<p>2. <strong>State Management</strong>:\n- Use checkpoints for atomic operations\n- Clean up state after tests\n- Handle reverts properly</p>\n<p>3. <strong>Gas Optimization</strong>:\n- <a href=\"https://ethereum.org/en/developers/docs/gas/#why-are-gas-fees-necessary\">Estimate gas</a> before execution\n- Monitor gas usage in hot paths\n- Use appropriate gas limits</p>\n<p>4. <strong>Error Handling</strong>:\n- Check execution results\n- Handle exceptions gracefully\n- Validate inputs</p>\n","isPage":false,"text":"\n1. Use High-Level APIs: Prefer vm.runTx() over direct EVM execution for full transaction support.\n2. State Management:\n- Use checkpoints for atomic operations\n- Clean up state after tests\n- Handle reverts properly\n3. Gas Optimization:\n- Estimate gas before execution\n- Monitor gas usage in hot paths\n- Use appropriate gas limits\n4. Error Handling:\n- Check execution results\n- Handle exceptions gracefully\n- Validate inputs\n","title":"Best Practices","titles":["VM &amp; Submodules"]},"137":{"href":"/api/vm-and-submodules#related-topics","html":"\n<p>- <a href=\"./json-rpc\">JSON-RPC Support</a>\n- <a href=\"../core/managing-state\">Managing State</a>\n- <a href=\"../advanced/txpool\">Transaction Pool</a>\n- <a href=\"../advanced/receipts-and-logs\">Receipts &amp; Logs</a>\n- <a href=\"https://www.evm.codes/\">EVM Opcodes Reference</a>\n- <a href=\"https://ethereum.github.io/yellowpaper/paper.pdf\">Ethereum Yellow Paper</a>\n- <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo\">ethereumjs/ethereumjs-monorepo</a></p>\n<p><strong>Up Next</strong><br/>\n- <a href=\"./json-rpc\">JSON-RPC Guide</a>\n- <a href=\"../advanced/txpool\">Advanced Usage</a></p>","isPage":false,"text":"\n- JSON-RPC Support\n- Managing State\n- Transaction Pool\n- Receipts &amp; Logs\n- EVM Opcodes Reference\n- Ethereum Yellow Paper\n- ethereumjs/ethereumjs-monorepo\nUp Next\n- JSON-RPC Guide\n- Advanced Usage","title":"Related Topics","titles":["VM &amp; Submodules"]},"138":{"href":"/examples/debugger-ui#building-a-debugger-ui","html":"</header>\n<p>This example demonstrates how to create a minimal EVM debugger interface using <a href=\"https://svelte.dev\">Svelte</a> and Tevm Node. The debugger will show:</p>\n<ul>\n<li>Live opcode execution</li>\n<li>Stack contents</li>\n<li>Memory state</li>\n<li>Error messages</li>\n<li>Gas usage</li>\n</ul>\n","isPage":true,"text":"\nThis example demonstrates how to create a minimal EVM debugger interface using Svelte and Tevm Node. The debugger will show:\n\nLive opcode execution\nStack contents\nMemory state\nError messages\nGas usage\n\n","title":"Building a Debugger UI","titles":[]},"139":{"href":"/examples/debugger-ui#project-setup","html":"\n<p>First, create a new Svelte project and install dependencies:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> create</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> vite@latest</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm-debugger</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --template</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> svelte-ts</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm-debugger</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm/contract</span></span></code></pre>\n","isPage":false,"text":"\nFirst, create a new Svelte project and install dependencies:\nnpm create vite@latest tevm-debugger -- --template svelte-ts\ncd tevm-debugger\nnpm install tevm tevm/contract\n","title":"Project Setup","titles":["Building a Debugger UI"]},"140":{"href":"/examples/debugger-ui#components","html":"\n","isPage":false,"text":"\n","title":"Components","titles":["Building a Debugger UI"]},"141":{"href":"/examples/debugger-ui#1-evmdebuggersvelte","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> lang</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { onMount, onDestroy } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;svelte&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/node&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { InterpreterStep } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/evm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Store execution state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> steps</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> InterpreterStep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentStep</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> InterpreterStep</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> null</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> null</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> isRunning </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> false</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create Tevm Node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Awaited</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ReturnType</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.getVm&gt;&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  onMount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    setupEventListeners</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setupEventListeners</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Track execution steps</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;step&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      currentStep </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> step</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      steps </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">steps, step]</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Track errors</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;afterMessage&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (result.execResult.exceptionError) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">errors, result.execResult.exceptionError.error]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.execResult.executionGasUsed</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Clean up</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  onDestroy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm?.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeAllListeners</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Execute sample transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> runSampleTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    isRunning </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    steps </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        tx: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Your transaction data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">errors, error.message]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    isRunning </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;debugger&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;controls&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">click</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">runSampleTx</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> disabled</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">isRunning</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">      {</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">isRunning </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Running...&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> :</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Run Transaction&#x27;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;gas&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Gas Used: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gasUsed.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;execution&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Current Step&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentStep}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;step&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;PC: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">currentStep.pc</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Opcode: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">currentStep.opcode.name</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Gas Left: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">currentStep.gasLeft.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Depth: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">currentStep.depth</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;stack&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Stack&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentStep?.stack}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;stack-items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentStep.stack </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;stack-item&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;errors&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Errors&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">error</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;history&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Execution History (</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">steps.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> steps)&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;steps&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> steps </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> step}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;history-step&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">          {</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">step.opcode.name</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (Gas: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">step.gasLeft.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .debugger</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    display</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">grid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    gap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    grid-template-columns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">repeat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">fr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .controls</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    grid-column</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> / </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">-1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    display</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">flex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    justify-content</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">space-between</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    align-items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">center</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  button</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#4a5568</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">white</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    border</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">none</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    border-radius</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    cursor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">pointer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  button</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">:disabled</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    opacity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    cursor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">not-allowed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .execution</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">.stack</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">.errors</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">.history</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#2d3748</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    border-radius</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#e2e8f0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .stack-items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    display</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">flex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    flex-direction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">column</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    gap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .stack-item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    font-family</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">monospace</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#4a5568</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    border-radius</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#fc8181</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    margin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#742a2a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    border-radius</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .steps</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    height</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">px</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    overflow-y</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">auto</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .history-step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    border-bottom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">px</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> solid</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> #4a5568</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    font-family</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">monospace</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\n&lt;script lang=&quot;ts&quot;&gt;\n  import { onMount, onDestroy } from &#x27;svelte&#x27;\n  import { createTevmNode } from &#x27;tevm/node&#x27;\n  import type { InterpreterStep } from &#x27;tevm/evm&#x27;\n \n  // Store execution state\n  let steps: InterpreterStep[] = []\n  let currentStep: InterpreterStep | null = null\n  let errors: string[] = []\n  let gasUsed = 0n\n  let isRunning = false\n \n  // Create Tevm Node\n  const node = createTevmNode()\n  let vm: Awaited&lt;ReturnType&lt;typeof node.getVm&gt;&gt;\n \n  onMount(async () =&gt; {\n    vm = await node.getVm()\n    setupEventListeners()\n  })\n \n  function setupEventListeners() {\n    // Track execution steps\n    vm.evm.events?.on(&#x27;step&#x27;, (step, next) =&gt; {\n      currentStep = step\n      steps = [...steps, step]\n      next?.()\n    })\n \n    // Track errors\n    vm.evm.events?.on(&#x27;afterMessage&#x27;, (result, next) =&gt; {\n      if (result.execResult.exceptionError) {\n        errors = [...errors, result.execResult.exceptionError.error]\n      }\n      gasUsed = result.execResult.executionGasUsed\n      next?.()\n    })\n  }\n \n  // Clean up\n  onDestroy(() =&gt; {\n    vm?.evm.events?.removeAllListeners()\n  })\n \n  // Execute sample transaction\n  async function runSampleTx() {\n    isRunning = true\n    steps = []\n    errors = []\n \n    try {\n      await vm.runTx({\n        tx: {\n          to: &#x27;0x1234...&#x27;,\n          data: &#x27;0x...&#x27;,  // Your transaction data\n        }\n      })\n    } catch (error) {\n      errors = [...errors, error.message]\n    }\n \n    isRunning = false\n  }\n&lt;/script&gt;\n \n&lt;div class=&quot;debugger&quot;&gt;\n  &lt;div class=&quot;controls&quot;&gt;\n    &lt;button on:click={runSampleTx} disabled={isRunning}&gt;\n      {isRunning ? &#x27;Running...&#x27; : &#x27;Run Transaction&#x27;}\n    &lt;/button&gt;\n    &lt;div class=&quot;gas&quot;&gt;Gas Used: {gasUsed.toString()}&lt;/div&gt;\n  &lt;/div&gt;\n \n  &lt;div class=&quot;execution&quot;&gt;\n    &lt;h3&gt;Current Step&lt;/h3&gt;\n    {#if currentStep}\n      &lt;div class=&quot;step&quot;&gt;\n        &lt;div&gt;PC: {currentStep.pc}&lt;/div&gt;\n        &lt;div&gt;Opcode: {currentStep.opcode.name}&lt;/div&gt;\n        &lt;div&gt;Gas Left: {currentStep.gasLeft.toString()}&lt;/div&gt;\n        &lt;div&gt;Depth: {currentStep.depth}&lt;/div&gt;\n      &lt;/div&gt;\n    {/if}\n  &lt;/div&gt;\n \n  &lt;div class=&quot;stack&quot;&gt;\n    &lt;h3&gt;Stack&lt;/h3&gt;\n    {#if currentStep?.stack}\n      &lt;div class=&quot;stack-items&quot;&gt;\n        {#each currentStep.stack as item}\n          &lt;div class=&quot;stack-item&quot;&gt;{item.toString(16)}&lt;/div&gt;\n        {/each}\n      &lt;/div&gt;\n    {/if}\n  &lt;/div&gt;\n \n  &lt;div class=&quot;errors&quot;&gt;\n    &lt;h3&gt;Errors&lt;/h3&gt;\n    {#each errors as error}\n      &lt;div class=&quot;error&quot;&gt;{error}&lt;/div&gt;\n    {/each}\n  &lt;/div&gt;\n \n  &lt;div class=&quot;history&quot;&gt;\n    &lt;h3&gt;Execution History ({steps.length} steps)&lt;/h3&gt;\n    &lt;div class=&quot;steps&quot;&gt;\n      {#each steps as step}\n        &lt;div class=&quot;history-step&quot;&gt;\n          {step.opcode.name} (Gas: {step.gasLeft.toString()})\n        &lt;/div&gt;\n      {/each}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n \n&lt;style&gt;\n  .debugger {\n    padding: 1rem;\n    display: grid;\n    gap: 1rem;\n    grid-template-columns: repeat(2, 1fr);\n  }\n \n  .controls {\n    grid-column: 1 / -1;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n \n  button {\n    padding: 0.5rem 1rem;\n    background: #4a5568;\n    color: white;\n    border: none;\n    border-radius: 0.25rem;\n    cursor: pointer;\n  }\n \n  button:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n \n  .execution, .stack, .errors, .history {\n    background: #2d3748;\n    padding: 1rem;\n    border-radius: 0.5rem;\n    color: #e2e8f0;\n  }\n \n  .stack-items {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n \n  .stack-item {\n    font-family: monospace;\n    padding: 0.25rem;\n    background: #4a5568;\n    border-radius: 0.25rem;\n  }\n \n  .error {\n    color: #fc8181;\n    padding: 0.5rem;\n    margin: 0.25rem 0;\n    background: #742a2a;\n    border-radius: 0.25rem;\n  }\n \n  .steps {\n    height: 200px;\n    overflow-y: auto;\n  }\n \n  .history-step {\n    padding: 0.25rem;\n    border-bottom: 1px solid #4a5568;\n    font-family: monospace;\n  }\n&lt;/style&gt;\n","title":"1. EVMDebugger.svelte","titles":["Building a Debugger UI","Components"]},"142":{"href":"/examples/debugger-ui#2-appsvelte","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> lang</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> EVMDebugger </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./lib/EVMDebugger.svelte&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Tevm Debugger&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">EVMDebugger</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    max-width</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">px</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    margin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> auto</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  h1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#2d3748</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    margin-bottom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\n&lt;script lang=&quot;ts&quot;&gt;\n  import EVMDebugger from &#x27;./lib/EVMDebugger.svelte&#x27;\n&lt;/script&gt;\n \n&lt;main&gt;\n  &lt;h1&gt;Tevm Debugger&lt;/h1&gt;\n  &lt;EVMDebugger /&gt;\n&lt;/main&gt;\n \n&lt;style&gt;\n  main {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 2rem;\n  }\n \n  h1 {\n    color: #2d3748;\n    margin-bottom: 2rem;\n  }\n&lt;/style&gt;\n","title":"2. App.svelte","titles":["Building a Debugger UI","Components"]},"143":{"href":"/examples/debugger-ui#advanced-features","html":"\n","isPage":false,"text":"\n","title":"Advanced Features","titles":["Building a Debugger UI"]},"144":{"href":"/examples/debugger-ui#memory-viewer-component","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> lang</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> memory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> startOffset </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bytesPerRow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 16</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  $</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: rows </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> chunk</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(memory, bytesPerRow)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> chunk</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">size</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chunks</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> array.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> size) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      chunks.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(array.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">slice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(i, i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> size))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> formatByte</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">byte</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> byte.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">padStart</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> formatAscii</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">byte</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> byte </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 32</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> byte </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 126</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> String.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromCharCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(byte) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;.&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;memory-viewer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rows </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> row, i}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;memory-row&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;offset&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">        {</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startOffset </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bytesPerRow).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">padStart</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;hex&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> row </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> byte}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">          {</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">formatByte</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(byte)</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ascii&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> row </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> byte}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">          {</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">formatAscii</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(byte)</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .memory-viewer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    font-family</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">monospace</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    white-space</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">pre</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .memory-row</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    display</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">flex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    gap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .offset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#718096</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .hex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    letter-spacing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">em</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .ascii</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#718096</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\n&lt;script lang=&quot;ts&quot;&gt;\n  export let memory: Uint8Array\n  export let startOffset = 0\n  export let bytesPerRow = 16\n \n  $: rows = chunk(memory, bytesPerRow)\n \n  function chunk(array: Uint8Array, size: number) {\n    const chunks = []\n    for (let i = 0; i &lt; array.length; i += size) {\n      chunks.push(array.slice(i, i + size))\n    }\n    return chunks\n  }\n \n  function formatByte(byte: number) {\n    return byte.toString(16).padStart(2, &#x27;0&#x27;)\n  }\n \n  function formatAscii(byte: number) {\n    return byte &gt;= 32 &amp;&amp; byte &lt;= 126 ? String.fromCharCode(byte) : &#x27;.&#x27;\n  }\n&lt;/script&gt;\n \n&lt;div class=&quot;memory-viewer&quot;&gt;\n  {#each rows as row, i}\n    &lt;div class=&quot;memory-row&quot;&gt;\n      &lt;span class=&quot;offset&quot;&gt;\n        {(startOffset + i * bytesPerRow).toString(16).padStart(8, &#x27;0&#x27;)}:\n      &lt;/span&gt;\n      &lt;span class=&quot;hex&quot;&gt;\n        {#each row as byte}\n          {formatByte(byte)}\n        {/each}\n      &lt;/span&gt;\n      &lt;span class=&quot;ascii&quot;&gt;\n        {#each row as byte}\n          {formatAscii(byte)}\n        {/each}\n      &lt;/span&gt;\n    &lt;/div&gt;\n  {/each}\n&lt;/div&gt;\n \n&lt;style&gt;\n  .memory-viewer {\n    font-family: monospace;\n    white-space: pre;\n  }\n \n  .memory-row {\n    display: flex;\n    gap: 1rem;\n    padding: 0.25rem 0;\n  }\n \n  .offset {\n    color: #718096;\n  }\n \n  .hex {\n    letter-spacing: 0.1em;\n  }\n \n  .ascii {\n    color: #718096;\n  }\n&lt;/style&gt;\n","title":"Memory Viewer Component","titles":["Building a Debugger UI","Advanced Features"]},"145":{"href":"/examples/debugger-ui#storage-viewer-component","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> lang</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Address } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/utils&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/node&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> storage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> loading </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> false</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> loadStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    loading </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> dump</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dumpStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      storage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Object.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">entries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(dump))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Failed to load storage:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, error)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    loading </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;storage&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">click</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">loadStorage</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> disabled</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">loading</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">    {</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">loading </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Loading...&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> :</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Load Storage&#x27;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> storage.size </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;storage-items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">storage] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [slot, value]}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;storage-item&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;slot&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">slot</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">value</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .storage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .storage-items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    margin-top</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .storage-item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    display</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">flex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    gap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    font-family</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">monospace</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .slot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#718096</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\n&lt;script lang=&quot;ts&quot;&gt;\n  import type { Address } from &#x27;tevm/utils&#x27;\n  import { createTevmNode } from &#x27;tevm/node&#x27;\n \n  export let address: Address\n \n  let storage = new Map&lt;string, string&gt;()\n  let loading = false\n \n  const node = createTevmNode()\n \n  async function loadStorage() {\n    loading = true\n    try {\n      const vm = await node.getVm()\n      const dump = await vm.stateManager.dumpStorage(address)\n      storage = new Map(Object.entries(dump))\n    } catch (error) {\n      console.error(&#x27;Failed to load storage:&#x27;, error)\n    }\n    loading = false\n  }\n&lt;/script&gt;\n \n&lt;div class=&quot;storage&quot;&gt;\n  &lt;button on:click={loadStorage} disabled={loading}&gt;\n    {loading ? &#x27;Loading...&#x27; : &#x27;Load Storage&#x27;}\n  &lt;/button&gt;\n \n  {#if storage.size &gt; 0}\n    &lt;div class=&quot;storage-items&quot;&gt;\n      {#each [...storage] as [slot, value]}\n        &lt;div class=&quot;storage-item&quot;&gt;\n          &lt;span class=&quot;slot&quot;&gt;{slot}:&lt;/span&gt;\n          &lt;span class=&quot;value&quot;&gt;{value}&lt;/span&gt;\n        &lt;/div&gt;\n      {/each}\n    &lt;/div&gt;\n  {/if}\n&lt;/div&gt;\n \n&lt;style&gt;\n  .storage {\n    padding: 1rem;\n  }\n \n  .storage-items {\n    margin-top: 1rem;\n  }\n \n  .storage-item {\n    display: flex;\n    gap: 1rem;\n    padding: 0.25rem 0;\n    font-family: monospace;\n  }\n \n  .slot {\n    color: #718096;\n  }\n&lt;/style&gt;\n","title":"Storage Viewer Component","titles":["Building a Debugger UI","Advanced Features"]},"146":{"href":"/examples/debugger-ui#usage","html":"\n<ol>\n<li>Create the project structure:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tevm-debugger/</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── src/</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── lib/</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   ├── EVMDebugger.svelte</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   ├── MemoryViewer.svelte</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   └── StorageViewer.svelte</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── App.svelte</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   └── main.ts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">└── package.json</span></span></code></pre>\n<ol start=\"2\">\n<li>Run the development server:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> dev</span></span></code></pre>\n<ol start=\"3\">\n<li>Use the debugger:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example contract deployment</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bytecode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x...&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Your contract bytecode</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: bytecode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example contract interaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,    </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Contract address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encoded function call</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n\nCreate the project structure:\n\ntevm-debugger/\n├── src/\n│   ├── lib/\n│   │   ├── EVMDebugger.svelte\n│   │   ├── MemoryViewer.svelte\n│   │   └── StorageViewer.svelte\n│   ├── App.svelte\n│   └── main.ts\n└── package.json\n\nRun the development server:\n\nnpm run dev\n\nUse the debugger:\n\n// Example contract deployment\nconst bytecode = &#x27;0x...&#x27; // Your contract bytecode\nawait vm.runTx({\n  tx: {\n    data: bytecode\n  }\n})\n \n// Example contract interaction\nawait vm.runTx({\n  tx: {\n    to: &#x27;0x...&#x27;,    // Contract address\n    data: &#x27;0x...&#x27;,  // Encoded function call\n  }\n})\n","title":"Usage","titles":["Building a Debugger UI"]},"147":{"href":"/examples/debugger-ui#customization","html":"\n","isPage":false,"text":"\n","title":"Customization","titles":["Building a Debugger UI"]},"148":{"href":"/examples/debugger-ui#adding-transaction-history","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> lang</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { writable } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;svelte/store&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> writable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    status</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;success&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;error&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }[]&gt;([])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;afterMessage&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transactions.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">update</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">txs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txs, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      hash: result.execResult.hash?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      to: result.execResult.to?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      data: result.execResult.data?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;hex&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      status: result.execResult.exceptionError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;error&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> :</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;success&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }])</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transactions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Transaction History&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $transactions </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transaction&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.status </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;error&#x27;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Hash: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.hash</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;To: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.to</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Data: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.data</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\n&lt;script lang=&quot;ts&quot;&gt;\n  import { writable } from &#x27;svelte/store&#x27;\n \n  const transactions = writable&lt;{\n    hash: string\n    to: string\n    data: string\n    status: &#x27;success&#x27; | &#x27;error&#x27;\n  }[]&gt;([])\n \n  vm.evm.events?.on(&#x27;afterMessage&#x27;, (result, next) =&gt; {\n    transactions.update(txs =&gt; [...txs, {\n      hash: result.execResult.hash?.toString() ?? &#x27;&#x27;,\n      to: result.execResult.to?.toString() ?? &#x27;&#x27;,\n      data: result.execResult.data?.toString(&#x27;hex&#x27;) ?? &#x27;&#x27;,\n      status: result.execResult.exceptionError ? &#x27;error&#x27; : &#x27;success&#x27;\n    }])\n    next?.()\n  })\n&lt;/script&gt;\n \n&lt;div class=&quot;transactions&quot;&gt;\n  &lt;h3&gt;Transaction History&lt;/h3&gt;\n  {#each $transactions as tx}\n    &lt;div class=&quot;transaction&quot; class:error={tx.status === &#x27;error&#x27;}&gt;\n      &lt;div&gt;Hash: {tx.hash}&lt;/div&gt;\n      &lt;div&gt;To: {tx.to}&lt;/div&gt;\n      &lt;div&gt;Data: {tx.data}&lt;/div&gt;\n    &lt;/div&gt;\n  {/each}\n&lt;/div&gt;\n","title":"Adding Transaction History","titles":["Building a Debugger UI","Customization"]},"149":{"href":"/examples/debugger-ui#adding-gas-profiling","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> lang</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasProfile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">totalGas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }&gt;()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;step&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> opName</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> step.opcode.name</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasCost</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BigInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(step.opcode.fee)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> stats</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasProfile.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(opName) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { count: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, totalGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stats.count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stats.totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasCost</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasProfile.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(opName, stats)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;gas-profile&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Gas Profile&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">table</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">thead</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">th</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Opcode&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">th</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">th</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Count&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">th</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">th</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Total Gas&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">th</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">thead</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tbody</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gasProfile] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [opcode, stats]}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">td</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">opcode</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">td</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">td</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stats.count</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">td</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">td</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stats.totalGas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">td</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tbody</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">table</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\n&lt;script lang=&quot;ts&quot;&gt;\n  const gasProfile = new Map&lt;string, { count: number, totalGas: bigint }&gt;()\n \n  vm.evm.events?.on(&#x27;step&#x27;, (step, next) =&gt; {\n    const opName = step.opcode.name\n    const gasCost = BigInt(step.opcode.fee)\n \n    const stats = gasProfile.get(opName) ?? { count: 0, totalGas: 0n }\n    stats.count++\n    stats.totalGas += gasCost\n    gasProfile.set(opName, stats)\n \n    next?.()\n  })\n&lt;/script&gt;\n \n&lt;div class=&quot;gas-profile&quot;&gt;\n  &lt;h3&gt;Gas Profile&lt;/h3&gt;\n  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Opcode&lt;/th&gt;\n        &lt;th&gt;Count&lt;/th&gt;\n        &lt;th&gt;Total Gas&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      {#each [...gasProfile] as [opcode, stats]}\n        &lt;tr&gt;\n          &lt;td&gt;{opcode}&lt;/td&gt;\n          &lt;td&gt;{stats.count}&lt;/td&gt;\n          &lt;td&gt;{stats.totalGas.toString()}&lt;/td&gt;\n        &lt;/tr&gt;\n      {/each}\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n","title":"Adding Gas Profiling","titles":["Building a Debugger UI","Customization"]},"150":{"href":"/examples/debugger-ui#related-topics","html":"\n<ul>\n<li><a href=\"../api/evm-events\">EVM Events</a></li>\n<li><a href=\"../advanced/performance-profiler\">Performance Profiler</a></li>\n</ul>","isPage":false,"text":"\n\nEVM Events\nPerformance Profiler\n","title":"Related Topics","titles":["Building a Debugger UI"]},"151":{"href":"/examples/ethers#using-with-ethersjs","html":"</header>\n<p>This guide demonstrates how to use Tevm Node with Ethers.js, enabling seamless integration with the popular Ethereum development library.</p>\n","isPage":true,"text":"\nThis guide demonstrates how to use Tevm Node with Ethers.js, enabling seamless integration with the popular Ethereum development library.\n","title":"Using with Ethers.js","titles":[]},"152":{"href":"/examples/ethers#basic-setup","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { BrowserProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create Tevm Node with EIP-1193 support</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create Ethers provider</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BrowserProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Basic provider usage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\nimport { BrowserProvider } from &#x27;ethers&#x27;\n \n// Create Tevm Node with EIP-1193 support\nconst node = createTevmNode().extend(requestEip1193())\n \n// Create Ethers provider\nconst provider = new BrowserProvider(node)\n \n// Basic provider usage\nconst block = await provider.getBlockNumber()\nconst balance = await provider.getBalance(&#x27;0x1234...&#x27;)\n","title":"Basic Setup","titles":["Using with Ethers.js"]},"153":{"href":"/examples/ethers#contract-interaction","html":"\n","isPage":false,"text":"\n","title":"Contract Interaction","titles":["Using with Ethers.js"]},"154":{"href":"/examples/ethers#1-reading-contract-state","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Contract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/ethers&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Contract setup</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function balanceOf(address) view returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function symbol() view returns (string)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function decimals() view returns (uint8)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tokenAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // USDC</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tokenAddress, abi, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Read multiple values</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">balance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">symbol</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">all</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">symbol</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">symbol</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">} Balance: ${</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">formatUnits</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">(</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">balance</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">, </span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">decimals</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nimport { Contract } from &#x27;@tevm/ethers&#x27;\nimport { parseAbi } from &#x27;tevm&#x27;\n \n// Contract setup\nconst abi = parseAbi([\n  &#x27;function balanceOf(address) view returns (uint256)&#x27;,\n  &#x27;function symbol() view returns (string)&#x27;,\n  &#x27;function decimals() view returns (uint8)&#x27;,\n])\n \nconst tokenAddress = &#x27;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#x27; // USDC\nconst contract = new Contract(tokenAddress, abi, provider)\n \n// Read multiple values\nconst [balance, symbol, decimals] = await Promise.all([\n  contract.balanceOf(&#x27;0x1234...&#x27;),\n  contract.symbol(),\n  contract.decimals(),\n])\n \nconsole.log(`${symbol} Balance: ${formatUnits(balance, decimals)}`)\n","title":"1. Reading Contract State","titles":["Using with Ethers.js","Contract Interaction"]},"155":{"href":"/examples/ethers#2-writing-to-contracts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ContractTransactionResponse } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get signer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tokenAddress, abi, signer)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;0x5678...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  parseUnits</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">6</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContractTransactionResponse</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait for confirmation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction confirmed:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, receipt.hash)</span></span></code></pre>\n","isPage":false,"text":"\nimport { ContractTransactionResponse } from &#x27;ethers&#x27;\n \n// Get signer\nconst signer = await provider.getSigner()\n \nconst abi = parseAbi([\n  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n])\n \nconst contract = new Contract(tokenAddress, abi, signer)\n \n// Send transaction\nconst tx = await contract.transfer(\n  &#x27;0x5678...&#x27;,\n  parseUnits(&#x27;100&#x27;, 6)\n) as ContractTransactionResponse\n \n// Wait for confirmation\nconst receipt = await tx.wait()\nconsole.log(&#x27;Transaction confirmed:&#x27;, receipt.hash)\n","title":"2. Writing to Contracts","titles":["Using with Ethers.js","Contract Interaction"]},"156":{"href":"/examples/ethers#event-handling","html":"\n","isPage":false,"text":"\n","title":"Event Handling","titles":["Using with Ethers.js"]},"157":{"href":"/examples/ethers#1-listening-for-events","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tokenAddress, abi, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Type-safe event handling</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransferEvent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  from</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  amount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  event</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> events</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransferEvent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">event</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  events.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ from, to, amount, event })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Remove listener when done</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">off</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nconst abi = parseAbi([\n  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;,\n  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n])\n \nconst contract = new Contract(tokenAddress, abi, provider)\n \n// Type-safe event handling\ntype TransferEvent = {\n  from: string\n  to: string\n  amount: bigint\n  event: any\n}\n \nconst events: TransferEvent[] = []\ncontract.on(&#x27;Transfer&#x27;, (from, to, amount, event) =&gt; {\n  events.push({ from, to, amount, event })\n})\n \n// Remove listener when done\ncontract.off(&#x27;Transfer&#x27;)\n","title":"1. Listening for Events","titles":["Using with Ethers.js","Event Handling"]},"158":{"href":"/examples/ethers#2-querying-past-events","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tokenAddress, abi, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create filter</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> filter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.filters.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get past events</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> events</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">queryFilter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(filter, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> event</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> events) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> event.args</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Historical transfer:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    from,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">formatUnits</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(value, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">6</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nconst abi = parseAbi([\n  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;,\n])\n \nconst contract = new Contract(tokenAddress, abi, provider)\n \n// Create filter\nconst filter = contract.filters.Transfer()\n \n// Get past events\nconst events = await contract.queryFilter(filter, -1000, &#x27;latest&#x27;)\n \nfor (const event of events) {\n  const { from, to, value } = event.args\n  console.log(&#x27;Historical transfer:&#x27;, {\n    from,\n    to,\n    value: formatUnits(value, 6),\n  })\n}\n","title":"2. Querying Past Events","titles":["Using with Ethers.js","Event Handling"]},"159":{"href":"/examples/ethers#advanced-usage","html":"\n","isPage":false,"text":"\n","title":"Advanced Usage","titles":["Using with Ethers.js"]},"160":{"href":"/examples/ethers#1-contract-deployment","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ContractFactory } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function getValue() view returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get signer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create factory</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> factory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ContractFactory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(abi, bytecode, signer)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> factory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deploy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">waitForDeployment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Contract deployed to:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nimport { ContractFactory } from &#x27;ethers&#x27;\n \nconst abi = parseAbi([\n  &#x27;function getValue() view returns (uint256)&#x27;,\n])\n \n// Get signer\nconst signer = await provider.getSigner()\n \n// Create factory\nconst factory = new ContractFactory(abi, bytecode, signer)\n \n// Deploy contract\nconst contract = await factory.deploy()\nawait contract.waitForDeployment()\n \nconsole.log(&#x27;Contract deployed to:&#x27;, await contract.getAddress())\n","title":"1. Contract Deployment","titles":["Using with Ethers.js","Advanced Usage"]},"161":{"href":"/examples/ethers#2-low-level-transaction-handling","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Sign transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signedTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send raw transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_sendRawTransaction&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [signedTx])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait for confirmation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">waitForTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(hash)</span></span></code></pre>\n","isPage":false,"text":"\n// Create transaction\nconst tx = {\n  to: &#x27;0x1234...&#x27;,\n  value: parseEther(&#x27;1&#x27;),\n  data: &#x27;0x&#x27;,\n}\n \n// Sign transaction\nconst signer = await provider.getSigner()\nconst signedTx = await signer.signTransaction(tx)\n \n// Send raw transaction\nconst hash = await provider.send(&#x27;eth_sendRawTransaction&#x27;, [signedTx])\n \n// Wait for confirmation\nconst receipt = await provider.waitForTransaction(hash)\n","title":"2. Low-level Transaction Handling","titles":["Using with Ethers.js","Advanced Usage"]},"162":{"href":"/examples/ethers#3-interface-encodingdecoding","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Interface } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create interface</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> iface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(abi)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode function data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> iface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  parseUnits</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">6</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Decode event logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipt.logs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> decodedLog</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> iface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseLog</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  topics: log.topics,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: log.data,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { Interface } from &#x27;ethers&#x27;\nimport { parseAbi } from &#x27;tevm&#x27;\n \n// Create interface\nconst abi = parseAbi([\n  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;,\n])\nconst iface = new Interface(abi)\n \n// Encode function data\nconst data = iface.encodeFunctionData(&#x27;transfer&#x27;, [\n  &#x27;0x1234...&#x27;,\n  parseUnits(&#x27;100&#x27;, 6),\n])\n \n// Decode event logs\nconst log = receipt.logs[0]\nconst decodedLog = iface.parseLog({\n  topics: log.topics,\n  data: log.data,\n})\n","title":"3. Interface Encoding/Decoding","titles":["Using with Ethers.js","Advanced Usage"]},"163":{"href":"/examples/ethers#testing-with-ethers","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { expect } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;chai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { loadFixture } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@nomicfoundation/hardhat-network-helpers&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">describe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Token Contract&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployTokenFixture</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Setup Tevm Node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BrowserProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;function balanceOf(address) view returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> factory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ContractFactory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(abi, bytecode, signer)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> factory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deploy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">waitForDeployment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { token, signer, provider }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  it</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Should handle basic operations&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">token</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">signer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> loadFixture</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(deployTokenFixture)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test initial state</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(signer.address)).to.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">equal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(initialSupply)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test transfer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)).to.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">equal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { expect } from &#x27;chai&#x27;\nimport { loadFixture } from &#x27;@nomicfoundation/hardhat-network-helpers&#x27;\nimport { parseAbi } from &#x27;tevm&#x27;\n \ndescribe(&#x27;Token Contract&#x27;, () =&gt; {\n  async function deployTokenFixture() {\n    // Setup Tevm Node\n    const node = createTevmNode()\n    const provider = new BrowserProvider(node)\n    const signer = await provider.getSigner()\n \n    const abi = parseAbi([\n      &#x27;function balanceOf(address) view returns (uint256)&#x27;,\n      &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n    ])\n \n    // Deploy contract\n    const factory = new ContractFactory(abi, bytecode, signer)\n    const token = await factory.deploy()\n    await token.waitForDeployment()\n \n    return { token, signer, provider }\n  }\n \n  it(&#x27;Should handle basic operations&#x27;, async () =&gt; {\n    const { token, signer } = await loadFixture(deployTokenFixture)\n \n    // Test initial state\n    expect(await token.balanceOf(signer.address)).to.equal(initialSupply)\n \n    // Test transfer\n    await token.transfer(&#x27;0x1234...&#x27;, 100)\n    expect(await token.balanceOf(&#x27;0x1234...&#x27;)).to.equal(100)\n  })\n})\n","title":"Testing with Ethers","titles":["Using with Ethers.js"]},"164":{"href":"/examples/ethers#best-practices","html":"\n<ol>\n<li>\n<p><strong>Contract Initialization</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Contract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Reuse contract instances</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contracts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contracts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;function balanceOf(address) view returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    contract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, abi, provider)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    contracts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, contract)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n<li>\n<p><strong>Error Handling</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function riskyFunction() returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, abi, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">riskyFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;CALL_EXCEPTION&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Contract call failed:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, error.reason)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;NETWORK_ERROR&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Network error:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, error.message)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  throw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n<li>\n<p><strong>Gas Management</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, abi, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Estimate gas with buffer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasEstimate</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.transfer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">estimateGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  recipient,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  amount</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  recipient,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  amount,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLimit: gasEstimate </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 120</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> /</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 20% buffer</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n</li>\n<li>\n<p><strong>Event Management</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, abi, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clean up listeners</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setupEventListeners</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> handler</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">args</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Handle event</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, handler)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">off</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, handler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> cleanup</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setupEventListeners</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contract)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Later...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cleanup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nContract Initialization:\nimport { parseAbi } from &#x27;tevm&#x27;\nimport { Contract } from &#x27;@tevm/ethers&#x27;\n \n// Reuse contract instances\nconst contracts = new Map&lt;string, Contract&gt;()\n \nfunction getContract(address: string): Contract {\n  let contract = contracts.get(address)\n  if (!contract) {\n    const abi = parseAbi([\n      &#x27;function balanceOf(address) view returns (uint256)&#x27;,\n      &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n    ])\n    contract = new Contract(address, abi, provider)\n    contracts.set(address, contract)\n  }\n  return contract\n}\n\n\nError Handling:\nconst abi = parseAbi([\n  &#x27;function riskyFunction() returns (uint256)&#x27;,\n])\nconst contract = new Contract(address, abi, provider)\n \ntry {\n  const tx = await contract.riskyFunction()\n  await tx.wait()\n} catch (error) {\n  if (error.code === &#x27;CALL_EXCEPTION&#x27;) {\n    console.error(&#x27;Contract call failed:&#x27;, error.reason)\n  } else if (error.code === &#x27;NETWORK_ERROR&#x27;) {\n    console.error(&#x27;Network error:&#x27;, error.message)\n  }\n  throw error\n}\n\n\nGas Management:\nconst abi = parseAbi([\n  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n])\nconst contract = new Contract(address, abi, provider)\n \n// Estimate gas with buffer\nconst gasEstimate = await contract.transfer.estimateGas(\n  recipient,\n  amount\n)\n \nconst tx = await contract.transfer(\n  recipient,\n  amount,\n  {\n    gasLimit: gasEstimate * 120n / 100n, // 20% buffer\n  }\n)\n\n\nEvent Management:\nconst abi = parseAbi([\n  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;,\n])\nconst contract = new Contract(address, abi, provider)\n \n// Clean up listeners\nfunction setupEventListeners(contract: Contract) {\n  const handler = (...args) =&gt; {\n    // Handle event\n  }\n \n  contract.on(&#x27;Transfer&#x27;, handler)\n \n  return () =&gt; {\n    contract.off(&#x27;Transfer&#x27;, handler)\n  }\n}\n \nconst cleanup = setupEventListeners(contract)\n// Later...\ncleanup()\n\n\n","title":"Best Practices","titles":["Using with Ethers.js"]},"165":{"href":"/examples/ethers#related-topics","html":"\n<ul>\n<li><a href=\"../api/json-rpc\">JSON-RPC Support</a></li>\n<li><a href=\"./local-testing\">Local Testing</a></li>\n<li><a href=\"./forking-mainnet\">Forking Mainnet</a></li>\n</ul>","isPage":false,"text":"\n\nJSON-RPC Support\nLocal Testing\nForking Mainnet\n","title":"Related Topics","titles":["Using with Ethers.js"]},"166":{"href":"/examples/forking-mainnet#forking-mainnet-example","html":"</header>\n","isPage":true,"text":"\n","title":"Forking Mainnet Example","titles":[]},"167":{"href":"/examples/forking-mainnet#basic-fork-setup","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/&lt;yourkey&gt;&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">17_000_000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  loggingLevel: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;debug&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now any calls to an unknown account or contract</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// will fetch the data from mainnet, but store the result locally for caching.</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { http } from &#x27;viem&#x27;\n \nconst node = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://mainnet.infura.io/v3/&lt;yourkey&gt;&#x27;),\n    blockTag: 17_000_000n,\n  },\n  loggingLevel: &#x27;debug&#x27;,\n})\n \nawait node.ready()\n \n// Now any calls to an unknown account or contract\n// will fetch the data from mainnet, but store the result locally for caching.\n","title":"Basic Fork Setup","titles":["Forking Mainnet Example"]},"168":{"href":"/examples/forking-mainnet#account-impersonation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Impersonate a whale account</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setImpersonatedAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x28C6c06298d514Db089934071355E5743bf21d60&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Binance 14</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now you can run transactions &quot;as&quot; that address, no signature needed</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1 ETH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span></code></pre>\n","isPage":false,"text":"\n// Impersonate a whale account\nnode.setImpersonatedAccount(&#x27;0x28C6c06298d514Db089934071355E5743bf21d60&#x27;) // Binance 14\n \n// Now you can run transactions &quot;as&quot; that address, no signature needed\nconst tx = createImpersonatedTx({\n  to: &#x27;0x1234...&#x27;,\n  value: 1000000000000000000n, // 1 ETH\n})\n \nconst vm = await node.getVm()\nawait vm.runTx({ tx })\n","title":"Account Impersonation","titles":["Forking Mainnet Example"]},"169":{"href":"/examples/forking-mainnet#working-with-forked-contracts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example: Interacting with USDC on mainnet</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> USDC_ADDRESS</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get the contract state from mainnet</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> usdcContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">USDC_ADDRESS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">USDC_ABI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> usdcContract.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Modify state locally</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> usdcContract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x5678...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1 USDC</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Changes only affect your local fork</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> newBalance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> usdcContract.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span></code></pre>\n","isPage":false,"text":"\n// Example: Interacting with USDC on mainnet\nconst USDC_ADDRESS = &#x27;0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48&#x27;\n \n// Get the contract state from mainnet\nconst usdcContract = new Contract(USDC_ADDRESS, USDC_ABI)\nconst balance = await usdcContract.read.balanceOf([&#x27;0x1234...&#x27;])\n \n// Modify state locally\nawait usdcContract.write.transfer([&#x27;0x5678...&#x27;, 1000000]) // 1 USDC\n \n// Changes only affect your local fork\nconst newBalance = await usdcContract.read.balanceOf([&#x27;0x1234...&#x27;])\n","title":"Working with Forked Contracts","titles":["Forking Mainnet Example"]},"170":{"href":"/examples/forking-mainnet#fork-at-specific-block","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/&lt;yourkey&gt;&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15_000_000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Fork from a specific block</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Test historical state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> historicalBalance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span></code></pre>\n","isPage":false,"text":"\nconst node = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://mainnet.infura.io/v3/&lt;yourkey&gt;&#x27;),\n    blockTag: 15_000_000n, // Fork from a specific block\n  },\n})\n \n// Test historical state\nconst historicalBalance = await getBalance(address)\n","title":"Fork at Specific Block","titles":["Forking Mainnet Example"]},"171":{"href":"/examples/forking-mainnet#multiple-network-support","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Fork from different networks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> optimismNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.optimism.io&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> arbitrumNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://arb1.arbitrum.io/rpc&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<strong>Related</strong>\n<ul>\n<li><a href=\"../core/forking\">Forking Guide</a></li>\n<li><a href=\"../core/managing-state\">State Management</a></li>\n<li><a href=\"../api/json-rpc\">JSON-RPC Support</a></li>\n</ul>","isPage":false,"text":"\n// Fork from different networks\nconst optimismNode = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://mainnet.optimism.io&#x27;),\n  },\n})\n \nconst arbitrumNode = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://arb1.arbitrum.io/rpc&#x27;),\n  },\n})\nRelated\n\nForking Guide\nState Management\nJSON-RPC Support\n","title":"Multiple Network Support","titles":["Forking Mainnet Example"]},"172":{"href":"/examples/local-testing#local-testing","html":"</header>\n<p>This guide demonstrates how to use Tevm Node for local testing of <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/\">smart contracts</a> and <a href=\"https://ethereum.org/en/developers/docs/transactions/\">transactions</a>. For more background on testing Ethereum applications, see the <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/testing/\">Smart Contract Testing Guide</a>.</p>\n","isPage":true,"text":"\nThis guide demonstrates how to use Tevm Node for local testing of smart contracts and transactions. For more background on testing Ethereum applications, see the Smart Contract Testing Guide.\n","title":"Local Testing","titles":[]},"173":{"href":"/examples/local-testing#basic-test-setup","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createImpersonatedTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/tx&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { expect, test } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;vitest&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // or jest, mocha, etc.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Basic ETH transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create a new node instance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    miningConfig: { type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;auto&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine blocks automatically</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create and run a transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    from: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x70997970C51812dc3A010C7d01b50e0d17dc79C8&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1 ETH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Assert transaction succeeded</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.exceptionError).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeUndefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Check recipient balance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx.to)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(account.balance).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>For more information on transaction execution, see the <a href=\"https://ethereum.org/en/developers/docs/evm/execution/\">EVM Execution Model</a>.</p>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { createImpersonatedTx } from &#x27;tevm/tx&#x27;\nimport { expect, test } from &#x27;vitest&#x27; // or jest, mocha, etc.\n \ntest(&#x27;Basic ETH transfer&#x27;, async () =&gt; {\n  // Create a new node instance\n  const node = createTevmNode({\n    miningConfig: { type: &#x27;auto&#x27; }, // Mine blocks automatically\n  })\n  await node.ready()\n \n  const vm = await node.getVm()\n \n  // Create and run a transaction\n  const tx = createImpersonatedTx({\n    from: &#x27;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266&#x27;,\n    to: &#x27;0x70997970C51812dc3A010C7d01b50e0d17dc79C8&#x27;,\n    value: 1000000000000000000n, // 1 ETH\n  })\n \n  const result = await vm.runTx({ tx })\n \n  // Assert transaction succeeded\n  expect(result.execResult.exceptionError).toBeUndefined()\n \n  // Check recipient balance\n  const account = await vm.stateManager.getAccount(tx.to)\n  expect(account.balance).toBe(1000000000000000000n)\n})\nFor more information on transaction execution, see the EVM Execution Model.\n","title":"Basic Test Setup","titles":["Local Testing"]},"174":{"href":"/examples/local-testing#contract-testing","html":"\n","isPage":false,"text":"\n","title":"Contract Testing","titles":["Local Testing"]},"175":{"href":"/examples/local-testing#1-deployment--interaction","html":"\n<p>For background on contract deployment and interaction, see the <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/deploying/\">Contract Deployment Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Contract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { bytecode, abi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./MyContract.json&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Deploy and interact with contract&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deployTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: bytecode,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx: deployTx })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.exceptionError).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeUndefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.createdAddress</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contractAddress).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeDefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create contract instance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contractAddress, abi)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Call contract method</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> callResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(callResult).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(expectedValue)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Send transaction to contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([newValue])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txResult.execResult.exceptionError).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeUndefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Verify state change</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> updatedValue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(updatedValue).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(newValue)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFor background on contract deployment and interaction, see the Contract Deployment Guide.\nimport { Contract } from &#x27;tevm/contract&#x27;\nimport { bytecode, abi } from &#x27;./MyContract.json&#x27;\n \ntest(&#x27;Deploy and interact with contract&#x27;, async () =&gt; {\n  const node = createTevmNode()\n  await node.ready()\n  const vm = await node.getVm()\n \n  // Deploy contract\n  const deployTx = createImpersonatedTx({\n    data: bytecode,\n  })\n \n  const result = await vm.runTx({ tx: deployTx })\n  expect(result.execResult.exceptionError).toBeUndefined()\n \n  const contractAddress = result.createdAddress\n  expect(contractAddress).toBeDefined()\n \n  // Create contract instance\n  const contract = new Contract(contractAddress, abi)\n \n  // Call contract method\n  const callResult = await contract.read.getValue()\n  expect(callResult).toBe(expectedValue)\n \n  // Send transaction to contract\n  const tx = await contract.write.setValue([newValue])\n  const txResult = await vm.runTx({ tx })\n  expect(txResult.execResult.exceptionError).toBeUndefined()\n \n  // Verify state change\n  const updatedValue = await contract.read.getValue()\n  expect(updatedValue).toBe(newValue)\n})\n","title":"1. Deployment &amp; Interaction","titles":["Local Testing","Contract Testing"]},"176":{"href":"/examples/local-testing#2-event-testing","html":"\n<p>For more information on events and logs, see the <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/anatomy/#events-and-logs\">Events and Logs Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Contract events&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create event filter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setFilter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    id: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: contract.address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    topics: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      contract.interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getEventTopic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;ValueChanged&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Trigger event</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Get event logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptsManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fromBlock: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    toBlock: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: contract.address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logs.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contract.interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getEventTopic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;ValueChanged&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFor more information on events and logs, see the Events and Logs Guide.\ntest(&#x27;Contract events&#x27;, async () =&gt; {\n  const node = createTevmNode()\n  await node.ready()\n \n  // Deploy contract\n  const contract = await deployContract(node)\n \n  // Create event filter\n  node.setFilter({\n    id: &#x27;0x1&#x27;,\n    address: contract.address,\n    topics: [\n      contract.interface.getEventTopic(&#x27;ValueChanged&#x27;),\n    ],\n  })\n \n  // Trigger event\n  const tx = await contract.write.setValue([123])\n  await vm.runTx({ tx })\n \n  // Get event logs\n  const receipts = await node.getReceiptsManager()\n  const logs = await receipts.getLogs({\n    fromBlock: 0n,\n    toBlock: &#x27;latest&#x27;,\n    address: contract.address,\n  })\n \n  expect(logs.length).toBe(1)\n  expect(logs[0].topics[0]).toBe(contract.interface.getEventTopic(&#x27;ValueChanged&#x27;))\n})\n","title":"2. Event Testing","titles":["Local Testing","Contract Testing"]},"177":{"href":"/examples/local-testing#complex-testing-scenarios","html":"\n","isPage":false,"text":"\n","title":"Complex Testing Scenarios","titles":["Local Testing"]},"178":{"href":"/examples/local-testing#1-state-management","html":"\n<p>For more information on state management, see the <a href=\"https://ethereum.org/en/developers/docs/evm/state-machine/\">Ethereum State Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Complex state changes&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create checkpoint</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">checkpoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Perform multiple state changes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> performStateChanges</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Verify intermediate state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> intermediateState</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(intermediateState).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toMatchSnapshot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // More changes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> performMoreChanges</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Commit changes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">commit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Revert on failure</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">revert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    throw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFor more information on state management, see the Ethereum State Guide.\ntest(&#x27;Complex state changes&#x27;, async () =&gt; {\n  const node = createTevmNode()\n  await node.ready()\n  const vm = await node.getVm()\n \n  // Create checkpoint\n  await vm.stateManager.checkpoint()\n \n  try {\n    // Perform multiple state changes\n    await performStateChanges(vm)\n \n    // Verify intermediate state\n    const intermediateState = await getState(vm)\n    expect(intermediateState).toMatchSnapshot()\n \n    // More changes\n    await performMoreChanges(vm)\n \n    // Commit changes\n    await vm.stateManager.commit()\n  } catch (error) {\n    // Revert on failure\n    await vm.stateManager.revert()\n    throw error\n  }\n})\n","title":"1. State Management","titles":["Local Testing","Complex Testing Scenarios"]},"179":{"href":"/examples/local-testing#2-fork-testing","html":"\n<p>For more information on network forking, see the <a href=\"../core/forking\">Forking Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Mainnet fork testing&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      blockTag: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">17_000_000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Impersonate a whale account</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setImpersonatedAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x28C6c06298d514Db089934071355E5743bf21d60&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Test DeFi interactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uniswap</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">UNISWAP_ADDRESS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">UNISWAP_ABI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> uniswap.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">swapExactTokensForTokens</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* ... */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.exceptionError).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeUndefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFor more information on network forking, see the Forking Guide.\ntest(&#x27;Mainnet fork testing&#x27;, async () =&gt; {\n  const node = createTevmNode({\n    fork: {\n      transport: http(&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;),\n      blockTag: 17_000_000n,\n    },\n  })\n  await node.ready()\n \n  // Impersonate a whale account\n  node.setImpersonatedAccount(&#x27;0x28C6c06298d514Db089934071355E5743bf21d60&#x27;)\n \n  // Test DeFi interactions\n  const uniswap = new Contract(UNISWAP_ADDRESS, UNISWAP_ABI)\n  const tx = await uniswap.write.swapExactTokensForTokens([/* ... */])\n \n  const result = await vm.runTx({ tx })\n  expect(result.execResult.exceptionError).toBeUndefined()\n})\n","title":"2. Fork Testing","titles":["Local Testing","Complex Testing Scenarios"]},"180":{"href":"/examples/local-testing#3-time-based-testing","html":"\n<p>For more information on block timestamps and time-based operations, see the <a href=\"https://ethereum.org/en/developers/docs/blocks/blocks-and-time/\">Block Time Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Time-dependent behavior&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    miningConfig: { type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;interval&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, interval: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Deploy time-locked contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployTimeLock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Try to withdraw (should fail)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.exceptionError).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeDefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Advance time by mining blocks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ timestamp: Date.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Try withdraw again (should succeed)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.exceptionError).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeUndefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFor more information on block timestamps and time-based operations, see the Block Time Guide.\ntest(&#x27;Time-dependent behavior&#x27;, async () =&gt; {\n  const node = createTevmNode({\n    miningConfig: { type: &#x27;interval&#x27;, interval: 1000 },\n  })\n  await node.ready()\n  const vm = await node.getVm()\n \n  // Deploy time-locked contract\n  const contract = await deployTimeLock(vm)\n \n  // Try to withdraw (should fail)\n  let tx = await contract.write.withdraw()\n  let result = await vm.runTx({ tx })\n  expect(result.execResult.exceptionError).toBeDefined()\n \n  // Advance time by mining blocks\n  for (let i = 0; i &lt; 100; i++) {\n    await vm.blockchain.putBlock(createBlock({ timestamp: Date.now() + i * 1000 }))\n  }\n \n  // Try withdraw again (should succeed)\n  tx = await contract.write.withdraw()\n  result = await vm.runTx({ tx })\n  expect(result.execResult.exceptionError).toBeUndefined()\n})\n","title":"3. Time-based Testing","titles":["Local Testing","Complex Testing Scenarios"]},"181":{"href":"/examples/local-testing#testing-utilities","html":"\n","isPage":false,"text":"\n","title":"Testing Utilities","titles":["Local Testing"]},"182":{"href":"/examples/local-testing#1-account-management","html":"\n<p>For more information on Ethereum accounts, see the <a href=\"https://ethereum.org/en/developers/docs/accounts/\">Accounts Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Helper to setup test accounts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setupAccounts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> accounts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x70997970C51812dc3A010C7d01b50e0d17dc79C8&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> accounts) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      balance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 10 ETH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> accounts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nFor more information on Ethereum accounts, see the Accounts Guide.\n// Helper to setup test accounts\nasync function setupAccounts(vm) {\n  const accounts = [\n    &#x27;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266&#x27;,\n    &#x27;0x70997970C51812dc3A010C7d01b50e0d17dc79C8&#x27;,\n  ]\n \n  for (const address of accounts) {\n    await vm.stateManager.putAccount(address, {\n      nonce: 0n,\n      balance: 10000000000000000000n, // 10 ETH\n    })\n  }\n \n  return accounts\n}\n","title":"1. Account Management","titles":["Local Testing","Testing Utilities"]},"183":{"href":"/examples/local-testing#2-transaction-helpers","html":"\n<p>For more information on transaction types and formats, see the <a href=\"https://ethereum.org/en/developers/docs/transactions/transaction-types/\">Transaction Types Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Helper to send ETH</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> sendEth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    from,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Helper to deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">bytecode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">args</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: bytecode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> encodeConstructor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(args),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.createdAddress</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nFor more information on transaction types and formats, see the Transaction Types Guide.\n// Helper to send ETH\nasync function sendEth(vm, from, to, value) {\n  const tx = createImpersonatedTx({\n    from,\n    to,\n    value,\n  })\n \n  return vm.runTx({ tx })\n}\n \n// Helper to deploy contract\nasync function deployContract(vm, bytecode, args = []) {\n  const tx = createImpersonatedTx({\n    data: bytecode + encodeConstructor(args),\n  })\n \n  const result = await vm.runTx({ tx })\n  return result.createdAddress\n}\n","title":"2. Transaction Helpers","titles":["Local Testing","Testing Utilities"]},"184":{"href":"/examples/local-testing#related-topics","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/testing/overview.html\">Viem Testing Guide</a></li>\n<li><a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/vm\">EthereumJS VM</a></li>\n<li><a href=\"../api/json-rpc\">JSON-RPC Methods</a></li>\n<li><a href=\"/reference/contract\">Contract reference</a></li>\n<li><a href=\"../core/managing-state\">State Management</a></li>\n</ul>\n","isPage":false,"text":"\n\nViem Testing Guide\nEthereumJS VM\nJSON-RPC Methods\nContract reference\nState Management\n\n","title":"Related Topics","titles":["Local Testing"]},"185":{"href":"/examples/local-testing#replaying-contracts-with-shadow-events","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a node that forks from mainnet</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get the transaction receipt to find its index</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_getTransactionReceipt&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Original tx hash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get the block and its transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_getBlockByNumber&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [(receipt.blockNumber </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Replay all transactions before our target tx</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipt.transactionIndex; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> block.transactions[i]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy modified contract with new event</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> modifiedBytecode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x...&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Contract bytecode with new event</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: receipt.contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  deployedBytecode: modifiedBytecode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now run the target transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx: block.transactions[receipt.transactionIndex]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// The result will include the new shadow event</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.logs)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { http } from &#x27;viem&#x27;\n \n// Create a node that forks from mainnet\nconst node = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;),\n  },\n})\n \n// Get the transaction receipt to find its index\nconst receipt = await node.request({\n  method: &#x27;eth_getTransactionReceipt&#x27;,\n  params: [&#x27;0x...&#x27;] // Original tx hash\n})\n \n// Get the block and its transactions\nconst block = await node.request({\n  method: &#x27;eth_getBlockByNumber&#x27;,\n  params: [(receipt.blockNumber - 1n).toString(16), true]\n})\n \n// Replay all transactions before our target tx\nfor (let i = 0; i &lt; receipt.transactionIndex; i++) {\n  const tx = block.transactions[i]\n  await node.getVm().runTx({ tx })\n}\n \n// Deploy modified contract with new event\nconst modifiedBytecode = &#x27;0x...&#x27; // Contract bytecode with new event\nawait node.setAccount({\n  address: receipt.contractAddress,\n  deployedBytecode: modifiedBytecode\n})\n \n// Now run the target transaction\nconst result = await node.getVm().runTx({\n  tx: block.transactions[receipt.transactionIndex]\n})\n \n// The result will include the new shadow event\nconsole.log(result.execResult.logs)\n","title":"Replaying Contracts with Shadow Events","titles":["Local Testing"]},"186":{"href":"/examples/local-testing#estimating-gas-for-token-approval","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/node&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { encodeFunctionData } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// First approve the token</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> approveTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: tokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: erc20ABI,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    functionName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;approve&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    args: [spenderAddress, amount]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Estimate gas by running the tx</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx: approveTx })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Gas used:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.execResult.executionGasUsed)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now we can estimate transferFrom</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transferFromTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: tokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: erc20ABI,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    functionName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;transferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    args: [ownerAddress, recipientAddress, amount]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transferResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx: transferFromTx })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;TransferFrom gas:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, transferResult.execResult.executionGasUsed)</span></span></code></pre>","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm/node&#x27;\nimport { encodeFunctionData } from &#x27;viem&#x27;\n \nconst node = createTevmNode()\nconst vm = await node.getVm()\n \n// First approve the token\nconst approveTx = {\n  to: tokenAddress,\n  data: encodeFunctionData({\n    abi: erc20ABI,\n    functionName: &#x27;approve&#x27;,\n    args: [spenderAddress, amount]\n  })\n}\n \n// Estimate gas by running the tx\nconst result = await vm.runTx({ tx: approveTx })\nconsole.log(&#x27;Gas used:&#x27;, result.execResult.executionGasUsed)\n \n// Now we can estimate transferFrom\nconst transferFromTx = {\n  to: tokenAddress,\n  data: encodeFunctionData({\n    abi: erc20ABI,\n    functionName: &#x27;transferFrom&#x27;,\n    args: [ownerAddress, recipientAddress, amount]\n  })\n}\n \nconst transferResult = await vm.runTx({ tx: transferFromTx })\nconsole.log(&#x27;TransferFrom gas:&#x27;, transferResult.execResult.executionGasUsed)","title":"Estimating Gas for Token Approval","titles":["Local Testing"]},"187":{"href":"/examples/viem#using-with-viem","html":"</header>\n<p>This guide demonstrates how to use Tevm Node with Viem, enabling seamless integration with Viem&#x27;s powerful Ethereum development tools.</p>\n<p>Note the package that owns the viem integration is the <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/memory-client/docs/globals.md\">tevm/memory-client</a> package.</p>\n","isPage":true,"text":"\nThis guide demonstrates how to use Tevm Node with Viem, enabling seamless integration with Viem&#x27;s powerful Ethereum development tools.\nNote the package that owns the viem integration is the tevm/memory-client package.\n","title":"Using with Viem","titles":[]},"188":{"href":"/examples/viem#basic-setup","html":"\n<p>The recomended API for interacting with viem is the tree-shakable API using <code>createClient</code> and importing actions from <code>viem/actions</code> and <code>tevm</code> packages.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/node&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createClient, custom } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create Tevm Node with EIP-1193 support</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create Viem client</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Use Tevm node as the viem transport</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">custom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// use viem actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {getBlockNumber} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/actions&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getBlockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// use custom tevm actions too</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {tevmDumpState} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmDumpState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span></code></pre>\n<p>For a more convenient API when tree shaking isn&#x27;t a concern use <code>createMemoryClient</code> which produces a batteries included client with every viem and tevm action attatched.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create Viem client</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// use viem actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">tevmDumpState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span></code></pre>\n","isPage":false,"text":"\nThe recomended API for interacting with viem is the tree-shakable API using createClient and importing actions from viem/actions and tevm packages.\nimport { createTevmNode } from &#x27;tevm/node&#x27;\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\nimport { createClient, custom } from &#x27;viem&#x27;\n \n// Create Tevm Node with EIP-1193 support\nconst node = createTevmNode().extend(requestEip1193())\n \n// Create Viem client\nconst client = createClient({\n  // Use Tevm node as the viem transport\n  transport: custom(node),\n})\n \n// use viem actions\nimport {getBlockNumber} from &#x27;viem/actions&#x27;\nawait getBlockNumber(client)\n \n// use custom tevm actions too\nimport {tevmDumpState} from &#x27;tevm&#x27;\nawait tevmDumpState(client)\nFor a more convenient API when tree shaking isn&#x27;t a concern use createMemoryClient which produces a batteries included client with every viem and tevm action attatched.\nimport { createMemoryClient } from &#x27;tevm&#x27;\n \n// Create Viem client\nconst client = createMemoryClient()\n \n// use viem actions\nawait client.getBlockNumber(client)\n \nawait client.tevmDumpState(client)\n","title":"Basic Setup","titles":["Using with Viem"]},"189":{"href":"/examples/viem#using-viem","html":"\n<p>Use <a href=\"/examples/viem\">viem</a> via actions. All viem and tevm actions are available as tree shakable actions.</p>\n","isPage":false,"text":"\nUse viem via actions. All viem and tevm actions are available as tree shakable actions.\n","title":"Using viem","titles":["Using with Viem"]},"190":{"href":"/examples/viem#1-public-actions","html":"\n<p>Use <a href=\"https://viem.sh/docs/actions/public/introduction\">viem&#x27;s public actions</a> to read from locally running evm node</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get latest block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get balance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transaction count</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTransactionCount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nUse viem&#x27;s public actions to read from locally running evm node\n// Get latest block\nconst block = await client.getBlock()\n \n// Get balance\nconst balance = await client.getBalance({\n  address: &#x27;0x1234...&#x27;,\n})\n \n// Get transaction count\nconst nonce = await client.getTransactionCount({\n  address: &#x27;0x1234...&#x27;,\n})\n","title":"1. Public actions","titles":["Using with Viem","Using viem"]},"191":{"href":"/examples/viem#2-wallet-actions","html":"\n<p>All of <a href=\"/examples/viem\">viem&#x27;s</a> <a href=\"https://viem.sh/docs/actions/wallet/introduction\"><code>Wallet actions</code></a> are available via passing in an <code>account</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Import PREFUNDED_ACCOUNTS from tevm</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { PREFUNDED_ACCOUNTS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create client with prefunded test account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  account: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PREFUNDED_ACCOUNTS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// First prefunded account with 10000 ETH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send transaction using prefunded account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy contract using prefunded account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">contractAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deployContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytecode,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  account: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PREFUNDED_ACCOUNTS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nAll of viem&#x27;s Wallet actions are available via passing in an account\n// Import PREFUNDED_ACCOUNTS from tevm\nimport { PREFUNDED_ACCOUNTS } from &#x27;tevm&#x27;\n \n// Create client with prefunded test account\nconst client = createMemoryClient({\n  account: PREFUNDED_ACCOUNTS[0], // First prefunded account with 10000 ETH\n})\n \n// Send transaction using prefunded account\nconst hash = await client.sendTransaction({\n  to: &#x27;0x1234567890123456789012345678901234567890&#x27;,\n  value: parseEther(&#x27;1&#x27;),\n})\n \n// Deploy contract using prefunded account\nconst { contractAddress } = await client.deployContract({\n  abi,\n  bytecode,\n  account: PREFUNDED_ACCOUNTS[0],\n})\n","title":"2. Wallet actions","titles":["Using with Viem","Using viem"]},"192":{"href":"/examples/viem#3-test-actions","html":"\n<p>All of viem&#x27;s <a href=\"https://viem.sh/docs/actions/test/introduction\"><code>Test actions</code></a> are available for testing and debugging</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Import test actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mine, setBalance, setNextBlockTimestamp, setBlockTimestamp } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/test&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine blocks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ blocks: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set account balance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Manipulate block timestamps</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setNextBlockTimestamp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1695311333</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setBlockTimestamp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1695311333</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Combine actions for test scenarios</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ blocks: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span></code></pre>\n<p>These test actions are particularly useful for:</p>\n<ul>\n<li>Setting up specific test scenarios</li>\n<li>Manipulating blockchain state for testing</li>\n<li>Time-traveling through blocks</li>\n<li>Debugging smart contract interactions</li>\n</ul>\n","isPage":false,"text":"\nAll of viem&#x27;s Test actions are available for testing and debugging\n// Import test actions\nimport { mine, setBalance, setNextBlockTimestamp, setBlockTimestamp } from &#x27;viem/test&#x27;\n \n// Mine blocks\nawait client.mine({ blocks: 1 })\n \n// Set account balance\nawait client.setBalance({\n  address: &#x27;0x1234567890123456789012345678901234567890&#x27;,\n  value: parseEther(&#x27;100&#x27;)\n})\n \n// Manipulate block timestamps\nawait client.setNextBlockTimestamp(1695311333n)\nawait client.setBlockTimestamp(1695311333n)\n \n// Combine actions for test scenarios\nawait client.setBalance({\n  address: &#x27;0x1234567890123456789012345678901234567890&#x27;,\n  value: parseEther(&#x27;100&#x27;)\n})\nawait client.mine({ blocks: 5 })\nThese test actions are particularly useful for:\n\nSetting up specific test scenarios\nManipulating blockchain state for testing\nTime-traveling through blocks\nDebugging smart contract interactions\n\n","title":"3. Test actions","titles":["Using with Viem","Using viem"]},"193":{"href":"/examples/viem#tevm-actions","html":"\n<p>Tevm provides additional actions beyond standard <a href=\"/examples/viem\">viem</a> functionality for enhanced testing and debugging capabilities.</p>\n","isPage":false,"text":"\nTevm provides additional actions beyond standard viem functionality for enhanced testing and debugging capabilities.\n","title":"Tevm Actions","titles":["Using with Viem"]},"194":{"href":"/examples/viem#1-contract-interactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmContract, tevmCall, tevmDeploy } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Call a contract method</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: myContractAbi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  functionName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;balanceOf&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Low-level contract call</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> callResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy a contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deployResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmDeploy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: myContractAbi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytecode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { tevmContract, tevmCall, tevmDeploy } from &#x27;tevm/actions&#x27;\n \n// Call a contract method\nconst result = await tevmContract(client, {\n  abi: myContractAbi,\n  functionName: &#x27;balanceOf&#x27;,\n  args: [&#x27;0x1234...&#x27;],\n})\n \n// Low-level contract call\nconst callResult = await tevmCall(client, {\n  to: &#x27;0x1234...&#x27;,\n  data: &#x27;0x...&#x27;,\n})\n \n// Deploy a contract\nconst deployResult = await tevmDeploy(client, {\n  abi: myContractAbi,\n  bytecode: &#x27;0x...&#x27;,\n})\n","title":"1. Contract Interactions","titles":["Using with Viem","Tevm Actions"]},"195":{"href":"/examples/viem#2-account-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmGetAccount, tevmSetAccount } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmGetAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Modify account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmSetAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  code: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Optional contract bytecode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  storage: {      </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Optional storage slots</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x0&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { tevmGetAccount, tevmSetAccount } from &#x27;tevm/actions&#x27;\n \n// Get account state\nconst account = await tevmGetAccount(client, {\n  address: &#x27;0x1234...&#x27;,\n})\n \n// Modify account state\nawait tevmSetAccount(client, {\n  address: &#x27;0x1234...&#x27;,\n  balance: parseEther(&#x27;100&#x27;),\n  code: &#x27;0x...&#x27;,  // Optional contract bytecode\n  storage: {      // Optional storage slots\n    &#x27;0x0&#x27;: &#x27;0x1&#x27;\n  }\n})\n","title":"2. Account Management","titles":["Using with Viem","Tevm Actions"]},"196":{"href":"/examples/viem#3-other-tevm-actions","html":"\n<p>You can use <code>tevmLoadState</code> and <code>tevmDumpState</code> to persist state to disk or local storage.</p>\n<p><code>tevmMine</code> is an important action for mining new blocks.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// the viem actions are prefixed with tevm and exported from tevm and tevm/memory-client</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmDumpState, tevmLoadState, tevmMine } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Save current state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> state</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmDumpState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Load previously saved state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmLoadState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  state: state</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine blocks with Tevm</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmMine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blocks: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>These Tevm-specific actions provide powerful capabilities for:</p>\n<ul>\n<li>Direct contract interactions and deployment</li>\n<li>Fine-grained account state manipulation</li>\n<li>Complete EVM state management</li>\n<li>Advanced testing scenarios</li>\n</ul>\n","isPage":false,"text":"\nYou can use tevmLoadState and tevmDumpState to persist state to disk or local storage.\ntevmMine is an important action for mining new blocks.\n// the viem actions are prefixed with tevm and exported from tevm and tevm/memory-client\nimport { tevmDumpState, tevmLoadState, tevmMine } from &#x27;tevm&#x27;\n \n// Save current state\nconst state = await tevmDumpState(client)\n \n// Load previously saved state\nawait tevmLoadState(client, {\n  state: state\n})\n \n// Mine blocks with Tevm\nawait tevmMine(client, {\n  blocks: 5\n})\nThese Tevm-specific actions provide powerful capabilities for:\n\nDirect contract interactions and deployment\nFine-grained account state manipulation\nComplete EVM state management\nAdvanced testing scenarios\n\n","title":"3. Other Tevm actions","titles":["Using with Viem","Tevm Actions"]},"197":{"href":"/examples/viem#complete-action-reference","html":"\n","isPage":false,"text":"\n","title":"Complete Action Reference","titles":["Using with Viem"]},"198":{"href":"/examples/viem#public-actions","html":"\n<p>All <a href=\"https://viem.sh/docs/actions/public/introduction\">viem&#x27;s public actions</a> are supported:</p>\n","isPage":false,"text":"\nAll viem&#x27;s public actions are supported:\n","title":"Public Actions","titles":["Using with Viem","Complete Action Reference"]},"199":{"href":"/examples/viem#contract-interactions","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/public/call\"><code>call</code></a></li>\n<li><a href=\"https://viem.sh/docs/contract/readContract\"><code>readContract</code></a></li>\n<li><a href=\"https://viem.sh/docs/contract/simulateContract\"><code>simulateContract</code></a></li>\n<li><a href=\"https://viem.sh/docs/contract/estimateContractGas\"><code>estimateContractGas</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/estimateGas\"><code>estimateGas</code></a></li>\n<li><a href=\"https://viem.sh/docs/contract/getBytecode\"><code>getBytecode</code></a></li>\n</ul>\n","isPage":false,"text":"\n\ncall\nreadContract\nsimulateContract\nestimateContractGas\nestimateGas\ngetBytecode\n\n","title":"Contract Interactions","titles":["Using with Viem","Complete Action Reference","Public Actions"]},"200":{"href":"/examples/viem#block--transaction","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/public/getBlock\"><code>getBlock</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getBlockNumber\"><code>getBlockNumber</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getBlockTransactionCount\"><code>getBlockTransactionCount</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getTransaction\"><code>getTransaction</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getTransactionCount\"><code>getTransactionCount</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getTransactionReceipt\"><code>getTransactionReceipt</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/waitForTransactionReceipt\"><code>waitForTransactionReceipt</code></a></li>\n</ul>\n","isPage":false,"text":"\n\ngetBlock\ngetBlockNumber\ngetBlockTransactionCount\ngetTransaction\ngetTransactionCount\ngetTransactionReceipt\nwaitForTransactionReceipt\n\n","title":"Block &amp; Transaction","titles":["Using with Viem","Complete Action Reference","Public Actions"]},"201":{"href":"/examples/viem#account--chain","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/public/getBalance\"><code>getBalance</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getChainId\"><code>getChainId</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getGasPrice\"><code>getGasPrice</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/estimateFeesPerGas\"><code>estimateFeesPerGas</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getStorageAt\"><code>getStorageAt</code></a></li>\n</ul>\n","isPage":false,"text":"\n\ngetBalance\ngetChainId\ngetGasPrice\nestimateFeesPerGas\ngetStorageAt\n\n","title":"Account &amp; Chain","titles":["Using with Viem","Complete Action Reference","Public Actions"]},"202":{"href":"/examples/viem#test-actions","html":"\n<p>All <a href=\"https://viem.sh/docs/actions/test/introduction\">viem&#x27;s test actions</a> are supported:</p>\n","isPage":false,"text":"\nAll viem&#x27;s test actions are supported:\n","title":"Test Actions","titles":["Using with Viem","Complete Action Reference"]},"203":{"href":"/examples/viem#block--mining","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/test/mine\"><code>mine</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setAutomine\"><code>setAutomine</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setIntervalMining\"><code>setIntervalMining</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setBlockGasLimit\"><code>setBlockGasLimit</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setBlockTimestampInterval\"><code>setBlockTimestampInterval</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setNextBlockBaseFeePerGas\"><code>setNextBlockBaseFeePerGas</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setNextBlockTimestamp\"><code>setNextBlockTimestamp</code></a></li>\n</ul>\n","isPage":false,"text":"\n\nmine\nsetAutomine\nsetIntervalMining\nsetBlockGasLimit\nsetBlockTimestampInterval\nsetNextBlockBaseFeePerGas\nsetNextBlockTimestamp\n\n","title":"Block &amp; Mining","titles":["Using with Viem","Complete Action Reference","Test Actions"]},"204":{"href":"/examples/viem#account--state","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/test/setBalance\"><code>setBalance</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setCode\"><code>setCode</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setNonce\"><code>setNonce</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setStorageAt\"><code>setStorageAt</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setCoinbase\"><code>setCoinbase</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setMinGasPrice\"><code>setMinGasPrice</code></a></li>\n</ul>\n","isPage":false,"text":"\n\nsetBalance\nsetCode\nsetNonce\nsetStorageAt\nsetCoinbase\nsetMinGasPrice\n\n","title":"Account &amp; State","titles":["Using with Viem","Complete Action Reference","Test Actions"]},"205":{"href":"/examples/viem#state-management","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/test/snapshot\"><code>snapshot</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/revert\"><code>revert</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/reset\"><code>reset</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/dumpState\"><code>dumpState</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/loadState\"><code>loadState</code></a></li>\n</ul>\n","isPage":false,"text":"\n\nsnapshot\nrevert\nreset\ndumpState\nloadState\n\n","title":"State Management","titles":["Using with Viem","Complete Action Reference","Test Actions"]},"206":{"href":"/examples/viem#wallet-actions","html":"\n<p>All <a href=\"https://viem.sh/docs/actions/wallet/introduction\">viem&#x27;s wallet actions</a> are supported:</p>\n","isPage":false,"text":"\nAll viem&#x27;s wallet actions are supported:\n","title":"Wallet Actions","titles":["Using with Viem","Complete Action Reference"]},"207":{"href":"/examples/viem#account-management","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/wallet/getAddresses\"><code>getAddresses</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/requestAddresses\"><code>requestAddresses</code></a></li>\n</ul>\n","isPage":false,"text":"\n\ngetAddresses\nrequestAddresses\n\n","title":"Account Management","titles":["Using with Viem","Complete Action Reference","Wallet Actions"]},"208":{"href":"/examples/viem#transaction-operations","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/wallet/prepareTransactionRequest\"><code>prepareTransactionRequest</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/sendTransaction\"><code>sendTransaction</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/sendRawTransaction\"><code>sendRawTransaction</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/signTransaction\"><code>signTransaction</code></a></li>\n</ul>\n","isPage":false,"text":"\n\nprepareTransactionRequest\nsendTransaction\nsendRawTransaction\nsignTransaction\n\n","title":"Transaction Operations","titles":["Using with Viem","Complete Action Reference","Wallet Actions"]},"209":{"href":"/examples/viem#signing-operations","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/wallet/signMessage\"><code>signMessage</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/signTypedData\"><code>signTypedData</code></a></li>\n</ul>\n","isPage":false,"text":"\n\nsignMessage\nsignTypedData\n\n","title":"Signing Operations","titles":["Using with Viem","Complete Action Reference","Wallet Actions"]},"210":{"href":"/examples/viem#chain-management","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/wallet/addChain\"><code>addChain</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/switchChain\"><code>switchChain</code></a></li>\n</ul>\n","isPage":false,"text":"\n\naddChain\nswitchChain\n\n","title":"Chain Management","titles":["Using with Viem","Complete Action Reference","Wallet Actions"]},"211":{"href":"/examples/viem#permissions--assets","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/wallet/getPermissions\"><code>getPermissions</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/requestPermissions\"><code>requestPermissions</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/watchAsset\"><code>watchAsset</code></a></li>\n</ul>","isPage":false,"text":"\n\ngetPermissions\nrequestPermissions\nwatchAsset\n","title":"Permissions &amp; Assets","titles":["Using with Viem","Complete Action Reference","Wallet Actions"]},"212":{"href":"/core/mining-modes#mining-modes","html":"</header>\n<p>Tevm Node provides several mining modes to control how and when blocks are produced. This flexibility allows you to simulate different network conditions and test various scenarios.</p>\n","isPage":true,"text":"\nTevm Node provides several mining modes to control how and when blocks are produced. This flexibility allows you to simulate different network conditions and test various scenarios.\n","title":"Mining Modes","titles":[]},"213":{"href":"/core/mining-modes#available-mining-modes","html":"\n","isPage":false,"text":"\n","title":"Available Mining Modes","titles":["Mining Modes"]},"214":{"href":"/core/mining-modes#auto-mining-auto","html":"\n<p>Automatically mines a new block after each transaction.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  miningConfig: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;auto&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>Best for:</p>\n<ul>\n<li>Quick testing and development</li>\n<li>Immediate transaction confirmation</li>\n<li>Simulating instant finality</li>\n</ul>\n","isPage":false,"text":"\nAutomatically mines a new block after each transaction.\nconst node = createTevmNode({\n  miningConfig: {\n    type: &#x27;auto&#x27;\n  }\n})\nBest for:\n\nQuick testing and development\nImmediate transaction confirmation\nSimulating instant finality\n\n","title":"Auto Mining (auto)","titles":["Mining Modes","Available Mining Modes"]},"215":{"href":"/core/mining-modes#interval-mining-interval","html":"\n<p>Mines blocks at fixed time intervals, simulating real network block times.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  miningConfig: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;interval&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    interval: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">12000</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // 12 seconds, similar to Ethereum</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>Best for:</p>\n<ul>\n<li>Testing time-dependent logic</li>\n<li>Simulating realistic network conditions</li>\n<li>Handling pending transaction queues</li>\n</ul>\n","isPage":false,"text":"\nMines blocks at fixed time intervals, simulating real network block times.\nconst node = createTevmNode({\n  miningConfig: {\n    type: &#x27;interval&#x27;,\n    interval: 12000 // 12 seconds, similar to Ethereum\n  }\n})\nBest for:\n\nTesting time-dependent logic\nSimulating realistic network conditions\nHandling pending transaction queues\n\n","title":"Interval Mining (interval)","titles":["Mining Modes","Available Mining Modes"]},"216":{"href":"/core/mining-modes#manual-mining-manual","html":"\n<p>Only mines blocks when explicitly requested, giving you complete control over block production.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  miningConfig: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;manual&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Later, mine blocks manually</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n<p>Best for:</p>\n<ul>\n<li>Complex test scenarios</li>\n<li>Precise control over block timing</li>\n<li>Testing mempool behavior</li>\n</ul>\n","isPage":false,"text":"\nOnly mines blocks when explicitly requested, giving you complete control over block production.\nconst node = createTevmNode({\n  miningConfig: {\n    type: &#x27;manual&#x27;\n  }\n})\n \n// Later, mine blocks manually\nawait node.mine()\nBest for:\n\nComplex test scenarios\nPrecise control over block timing\nTesting mempool behavior\n\n","title":"Manual Mining (manual)","titles":["Mining Modes","Available Mining Modes"]},"217":{"href":"/core/mining-modes#gas-based-mining-gas","html":"\n<p>Mines a new block when the accumulated gas usage reaches a specified threshold.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  miningConfig: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;gas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15000000</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Similar to Ethereum block gas limit</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>Best for:</p>\n<ul>\n<li>Testing gas-dependent behavior</li>\n<li>Simulating block fullness scenarios</li>\n<li>Performance testing with varying load</li>\n</ul>\n","isPage":false,"text":"\nMines a new block when the accumulated gas usage reaches a specified threshold.\nconst node = createTevmNode({\n  miningConfig: {\n    type: &#x27;gas&#x27;,\n    gasLimit: 15000000 // Similar to Ethereum block gas limit\n  }\n})\nBest for:\n\nTesting gas-dependent behavior\nSimulating block fullness scenarios\nPerformance testing with varying load\n\n","title":"Gas-Based Mining (gas)","titles":["Mining Modes","Available Mining Modes"]},"218":{"href":"/core/mining-modes#changing-mining-modes","html":"\n<p>You can change the mining mode after node creation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Switch to interval mining</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setMiningConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;interval&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  interval: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5000</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // 5 seconds</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Switch to manual mining</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setMiningConfig</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;manual&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nYou can change the mining mode after node creation:\n// Switch to interval mining\nawait node.setMiningConfig({\n  type: &#x27;interval&#x27;,\n  interval: 5000 // 5 seconds\n})\n \n// Switch to manual mining\nawait node.setMiningConfig({\n  type: &#x27;manual&#x27;\n})\n","title":"Changing Mining Modes","titles":["Mining Modes"]},"219":{"href":"/core/mining-modes#best-practices","html":"\n<ol>\n<li>\n<strong>Choose the Right Mode</strong>\n<ul>\n<li>Use <code>auto</code> for simple testing and development</li>\n<li>Use <code>interval</code> or <code>gas</code> for more realistic scenarios</li>\n<li>Use <code>manual</code> for precise control in tests</li>\n</ul>\n</li>\n<li>\n<strong>Consider Performance</strong>\n<ul>\n<li><code>auto</code> mining can be resource-intensive with many transactions</li>\n<li><code>interval</code> mining might delay transaction processing</li>\n<li><code>gas</code> mining helps simulate network congestion</li>\n</ul>\n</li>\n<li>\n<strong>Testing Considerations</strong>\n<ul>\n<li>Test time-sensitive logic with <code>interval</code> mining</li>\n<li>Use <code>manual</code> mining for deterministic test cases</li>\n<li>Simulate network conditions with appropriate intervals</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nChoose the Right Mode\n\nUse auto for simple testing and development\nUse interval or gas for more realistic scenarios\nUse manual for precise control in tests\n\n\n\nConsider Performance\n\nauto mining can be resource-intensive with many transactions\ninterval mining might delay transaction processing\ngas mining helps simulate network congestion\n\n\n\nTesting Considerations\n\nTest time-sensitive logic with interval mining\nUse manual mining for deterministic test cases\nSimulate network conditions with appropriate intervals\n\n\n\n","title":"Best Practices","titles":["Mining Modes"]},"220":{"href":"/core/mining-modes#example-testing-different-mining-modes","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Auto mining for quick tests</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> autoNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  miningConfig: { type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;auto&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Interval mining for realistic scenarios</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> intervalNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  miningConfig: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;interval&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    interval: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">12000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Manual mining for controlled tests</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> manualNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  miningConfig: { type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;manual&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Test transaction processing</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> autoNode.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mines immediately</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> intervalNode.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mines after interval</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> manualNode.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Stays pending until manual mine</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> manualNode.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now the transaction is mined</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\n \n// Auto mining for quick tests\nconst autoNode = createTevmNode({\n  miningConfig: { type: &#x27;auto&#x27; }\n})\n \n// Interval mining for realistic scenarios\nconst intervalNode = createTevmNode({\n  miningConfig: {\n    type: &#x27;interval&#x27;,\n    interval: 12000\n  }\n})\n \n// Manual mining for controlled tests\nconst manualNode = createTevmNode({\n  miningConfig: { type: &#x27;manual&#x27; }\n})\n \n// Test transaction processing\nawait autoNode.sendTransaction({...}) // Mines immediately\nawait intervalNode.sendTransaction({...}) // Mines after interval\nawait manualNode.sendTransaction({...}) // Stays pending until manual mine\nawait manualNode.mine() // Now the transaction is mined\n","title":"Example: Testing Different Mining Modes","titles":["Mining Modes"]},"221":{"href":"/core/mining-modes#related-topics","html":"\n<ul>\n<li><a href=\"../advanced/txpool\">Transaction Pool</a> - Understanding pending transaction handling</li>\n<li><a href=\"../advanced/performance-profiler\">Performance Optimization</a> - Tuning mining for better performance</li>\n<li><a href=\"../api/methods#block-methods\">Block Management</a> - Low-level block control</li>\n</ul>","isPage":false,"text":"\n\nTransaction Pool - Understanding pending transaction handling\nPerformance Optimization - Tuning mining for better performance\nBlock Management - Low-level block control\n","title":"Related Topics","titles":["Mining Modes"]},"222":{"href":"/introduction/architecture-overview#architecture-overview","html":"</header>\n<p>These docs will go into the low level architecture of <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/node/docs/type-aliases/TevmNode.md\">TevmNode</a>. To focus on the high level api go straight to the <a href=\"../examples/viem.mdx\">viem docs</a>.</p>\n","isPage":true,"text":"\nThese docs will go into the low level architecture of TevmNode. To focus on the high level api go straight to the viem docs.\n","title":"Architecture Overview","titles":[]},"223":{"href":"/introduction/architecture-overview#actions-api","html":"\n<p>To focus on being tree shakable, Tevm is broken up into Objects and Actions. This pattern will be familiar to those who have used <a href=\"https://viem.sh/\">viem</a>.</p>\n","isPage":false,"text":"\nTo focus on being tree shakable, Tevm is broken up into Objects and Actions. This pattern will be familiar to those who have used viem.\n","title":"Actions api","titles":["Architecture Overview"]},"224":{"href":"/introduction/architecture-overview#objects","html":"\n<p>Objects in Tevm are:</p>\n<ul>\n<li>Stateful components that maintain data and state</li>\n<li>Come in tree shakable forms or with actions on the object</li>\n<li>Similar to structs in other languages</li>\n</ul>\n","isPage":false,"text":"\nObjects in Tevm are:\n\nStateful components that maintain data and state\nCome in tree shakable forms or with actions on the object\nSimilar to structs in other languages\n\n","title":"Objects","titles":["Architecture Overview","Actions api"]},"225":{"href":"/introduction/architecture-overview#actions","html":"\n<p>Actions in Tevm are:</p>\n<ul>\n<li>Pure functions that take an object as their first parameter</li>\n<li>Tree-shakable operations that can be imported individually</li>\n<li>Can also optionally be on prototype</li>\n<li>Single-purpose utilities that perform specific tasks</li>\n<li>Composable pieces that can be combined for complex operations</li>\n</ul>\n<p>For example, an action like <code>getAccountHandler</code> takes a <code>TevmNode</code> object and returns a function for getting account details:</p>\n<p>Objects in Tevm include:</p>\n<ul>\n<li><a href=\"/reference/node\"><code>TevmNode</code></a></li>\n<li>Low level Node components such as <a href=\"/reference/evm\"><code>Evm</code></a> and <a href=\"/reference/blockchain\"><code>Blockchain</code></a></li>\n<li>Tevm shares objects with viem such as the <a href=\"https://viem.sh/docs/clients/public.html\">ViemClient</a></li>\n</ul>\n<p>These objects have tree shakable actions that can be imported from their respective actions. Here&#x27;s an example:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getAccountHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> getAccount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use the action</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>The most important actions are the <code>TevmNode</code> actions from <a href=\"/reference/actions\"><code>tevm/actions</code></a>. There are also viem actions in <a href=\"/reference/memory-client\">tevm/memory-client</a>.</p>\n","isPage":false,"text":"\nActions in Tevm are:\n\nPure functions that take an object as their first parameter\nTree-shakable operations that can be imported individually\nCan also optionally be on prototype\nSingle-purpose utilities that perform specific tasks\nComposable pieces that can be combined for complex operations\n\nFor example, an action like getAccountHandler takes a TevmNode object and returns a function for getting account details:\nObjects in Tevm include:\n\nTevmNode\nLow level Node components such as Evm and Blockchain\nTevm shares objects with viem such as the ViemClient\n\nThese objects have tree shakable actions that can be imported from their respective actions. Here&#x27;s an example:\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { getAccountHandler } from &#x27;tevm/actions&#x27;\n \nconst node = createTevmNode()\nconst getAccount = getAccountHandler(node)\n \n// Use the action\nconst account = await getAccount({\n  address: &#x27;0x...&#x27;\n})\nThe most important actions are the TevmNode actions from tevm/actions. There are also viem actions in tevm/memory-client.\n","title":"Actions","titles":["Architecture Overview","Actions api"]},"226":{"href":"/introduction/architecture-overview#memoryclient","html":"\n<p>MemoryClient is a viem client with every viem and tevm action included on prototype so you don&#x27;t need to import them as actions. This is more convenient but less tree shakable.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/memory-client&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// All viem actions are available directly on memory client</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getContractCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// custom tevm actions corresponding to the most popular TevmNode actions</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// are available prefixed with tevm</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> state</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">tevmDumpState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n<p>See <a href=\"https://wagmi.sh/react/guides/viem\">viem guide on tree shakable actions</a> for more.</p>\n<p>To use in tree shakable way you must create a TevmTransport and pass that into <code>createClient</code>. See <a href=\"../examples/viem.mdx\">viem tevm docs</a></p>\n","isPage":false,"text":"\nMemoryClient is a viem client with every viem and tevm action included on prototype so you don&#x27;t need to import them as actions. This is more convenient but less tree shakable.\nimport { createMemoryClient } from &#x27;tevm/memory-client&#x27;\n \nconst client = createMemoryClient()\n \n// All viem actions are available directly on memory client\nawait client.getContractCode({\n  address: &#x27;0x...&#x27;\n})\n \n// custom tevm actions corresponding to the most popular TevmNode actions\n// are available prefixed with tevm\nconst state = await client.tevmDumpState()\nSee viem guide on tree shakable actions for more.\nTo use in tree shakable way you must create a TevmTransport and pass that into createClient. See viem tevm docs\n","title":"MemoryClient","titles":["Architecture Overview"]},"227":{"href":"/introduction/architecture-overview#what-is-tevm-node","html":"\n<p><a href=\"https://github.com/evmts/tevm-monorepo\">Tevm Node</a> is a JavaScript implementation of an Ethereum node that can run in any JavaScript environment - browsers, Node.js, or other runtimes. It provides a complete <a href=\"https://ethereum.org/en/developers/docs/evm/\">Ethereum Virtual Machine (EVM)</a> with state management, transaction processing, and JSON-RPC support.</p>\n<p>To use in tree shakable way simply import actions to use with tevm node</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// create a tevm node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {createTevmNode} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// import actions from tevm/actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {getAccountHandler} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> getAccount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`0x...`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>You can also interact with lower level components like evm, statemanager, blockchain and more via <a href=\"../reference/index.mdx\">advanced apis</a>.</p>\n","isPage":false,"text":"\nTevm Node is a JavaScript implementation of an Ethereum node that can run in any JavaScript environment - browsers, Node.js, or other runtimes. It provides a complete Ethereum Virtual Machine (EVM) with state management, transaction processing, and JSON-RPC support.\nTo use in tree shakable way simply import actions to use with tevm node\n// create a tevm node\nimport {createTevmNode} from &#x27;tevm&#x27;\n// import actions from tevm/actions\nimport {getAccountHandler} from &#x27;tevm/actions&#x27;\n \nconst node = createTevmNode()\n \nconst getAccount = getAccountHandler(node)\n \nconst account = getAccount({address: `0x...`})\nYou can also interact with lower level components like evm, statemanager, blockchain and more via advanced apis.\n","title":"What is Tevm Node?","titles":["Architecture Overview"]},"228":{"href":"/introduction/architecture-overview#what-can-you-do-with-tevm-node","html":"\n<p>Tevm has a lot of use cases many which are covered in the examples section</p>\n<ol>\n<li>Anything viem can do as tevm is an extension of viem&#x27;s capabilities</li>\n<li>Simulate blocks and transactions locally. Hook directly into evm execution</li>\n<li>Estimate gas with no network requests and no loading setupEventListeners</li>\n<li>Build an EVM simulator like <a href=\"https://svvy.sh\">svvy.sh</a></li>\n<li>Test your JavaScript against an anvil compatible fork in JavaScript</li>\n<li>Debug evm tx step by step</li>\n<li>Optimistic ui updates when tx are sent</li>\n<li>And more!</li>\n</ol>\n","isPage":false,"text":"\nTevm has a lot of use cases many which are covered in the examples section\n\nAnything viem can do as tevm is an extension of viem&#x27;s capabilities\nSimulate blocks and transactions locally. Hook directly into evm execution\nEstimate gas with no network requests and no loading setupEventListeners\nBuild an EVM simulator like svvy.sh\nTest your JavaScript against an anvil compatible fork in JavaScript\nDebug evm tx step by step\nOptimistic ui updates when tx are sent\nAnd more!\n\n","title":"What can you do with Tevm Node?","titles":["Architecture Overview"]},"229":{"href":"/introduction/architecture-overview#core-architecture","html":"\n<p><a href=\"/reference/node\">TevmNode</a> is built on several key components that work together:</p>\n","isPage":false,"text":"\nTevmNode is built on several key components that work together:\n","title":"Core Architecture","titles":["Architecture Overview"]},"230":{"href":"/introduction/architecture-overview#1-virtual-machine-evm","html":"\n<ul>\n<li>Core execution engine that runs <a href=\"https://ethereum.org/en/developers/docs/evm/opcodes/\">EVM bytecode</a></li>\n<li>Handles state transitions and gas metering</li>\n<li>Based on <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/evm\"><code>@ethereumjs/evm</code></a></li>\n</ul>\n<p>Example usage:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  code: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x60806040...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n\nCore execution engine that runs EVM bytecode\nHandles state transitions and gas metering\nBased on @ethereumjs/evm\n\nExample usage:\nconst vm = await node.getVm()\nconst result = await vm.runCode({\n  code: &#x27;0x60806040...&#x27;,\n  gasLimit: 21000n\n})\n","title":"1. Virtual Machine (EVM)","titles":["Architecture Overview","Core Architecture"]},"231":{"href":"/introduction/architecture-overview#2-state-manager","html":"\n<ul>\n<li>Manages account balances, contract code, and storage</li>\n<li>Supports forking from live networks</li>\n<li>Implements caching and lazy loading</li>\n</ul>\n<p>See <a href=\"/reference/state\">State</a> for api info</p>\n","isPage":false,"text":"\n\nManages account balances, contract code, and storage\nSupports forking from live networks\nImplements caching and lazy loading\n\nSee State for api info\n","title":"2. State Manager","titles":["Architecture Overview","Core Architecture"]},"232":{"href":"/introduction/architecture-overview#3-transaction-pool-mempool","html":"\n<ul>\n<li>Manages pending transactions</li>\n<li>Orders transactions by gas price</li>\n<li>Validates transaction requirements</li>\n</ul>\n<p>See <a href=\"/reference/txpool\">Transaction Pool</a> for api info</p>\n","isPage":false,"text":"\n\nManages pending transactions\nOrders transactions by gas price\nValidates transaction requirements\n\nSee Transaction Pool for api info\n","title":"3. Transaction Pool (Mempool)","titles":["Architecture Overview","Core Architecture"]},"233":{"href":"/introduction/architecture-overview#4-blockchain","html":"\n<ul>\n<li>Maintains block history and chain state</li>\n<li>Handles block production (mining)</li>\n<li>Manages chain reorganizations</li>\n</ul>\n<p>See <a href=\"/reference/blockchain\">Blockchain</a> for api info</p>\n","isPage":false,"text":"\n\nMaintains block history and chain state\nHandles block production (mining)\nManages chain reorganizations\n\nSee Blockchain for api info\n","title":"4. Blockchain","titles":["Architecture Overview","Core Architecture"]},"234":{"href":"/introduction/architecture-overview#5-receipts-manager","html":"\n<ul>\n<li>Caches transaction outcomes</li>\n<li>Manages event logs and filters</li>\n<li>Useful for implementing optimistic updates</li>\n</ul>\n<p>See <a href=\"/reference/receipt-manager\">Receipt Manager</a> for api info</p>\n","isPage":false,"text":"\n\nCaches transaction outcomes\nManages event logs and filters\nUseful for implementing optimistic updates\n\nSee Receipt Manager for api info\n","title":"5. Receipts Manager","titles":["Architecture Overview","Core Architecture"]},"235":{"href":"/introduction/architecture-overview#available-apis","html":"\n<p>Tevm Node provides several layers of APIs for different use cases:</p>\n","isPage":false,"text":"\nTevm Node provides several layers of APIs for different use cases:\n","title":"Available APIs","titles":["Architecture Overview"]},"236":{"href":"/introduction/architecture-overview#1-high-level-actions","html":"\n<p>Most functionality in Tevm is done via tree shakable actions including JSON-RPC compatabile actions.</p>\n<p>The most commonly used actions are provided as handlers:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { callHandler, mineHandler, getAccountHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a Tevm node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute contract calls</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: calldata</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine pending transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mineHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Read account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: accountAddress</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nMost functionality in Tevm is done via tree shakable actions including JSON-RPC compatabile actions.\nThe most commonly used actions are provided as handlers:\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { callHandler, mineHandler, getAccountHandler } from &#x27;tevm/actions&#x27;\n \n// Create a Tevm node\nconst node = createTevmNode()\n \n// Execute contract calls\nconst result = await callHandler(node)({\n  to: contractAddress,\n  data: calldata\n})\n \n// Mine pending transactions\nawait mineHandler(node)()\n \n// Read account state\nconst account = await getAccountHandler(node)({\n  address: accountAddress\n})\n","title":"1. High-Level Actions","titles":["Architecture Overview","Available APIs"]},"237":{"href":"/introduction/architecture-overview#2-json-rpc-interface","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Standard Ethereum JSON-RPC calls</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_getBalance&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [address, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\n \nconst node = createTevmNode().extend(requestEip1193())\n \n// Standard Ethereum JSON-RPC calls\nconst balance = await node.request({\n  method: &#x27;eth_getBalance&#x27;,\n  params: [address, &#x27;latest&#x27;]\n})\n","title":"2. JSON-RPC Interface","titles":["Architecture Overview","Available APIs"]},"238":{"href":"/introduction/architecture-overview#3-direct-vm-access","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Low-level EVM execution</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx: transaction,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  block: block</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// State management</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, account)</span></span></code></pre>\n","isPage":false,"text":"\nconst vm = await node.getVm()\n \n// Low-level EVM execution\nconst result = await vm.runTx({\n  tx: transaction,\n  block: block\n})\n \n// State management\nawait vm.stateManager.putAccount(address, account)\n","title":"3. Direct VM Access","titles":["Architecture Overview","Available APIs"]},"239":{"href":"/introduction/architecture-overview#4-contract-utilities","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createContract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Type-safe contract interactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  humanReadableAbi: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function transfer(address to, uint256 amount)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Write operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> action</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x456...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Read operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x789...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>You can also use the tevm bundler for automatic contract compilation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Import Solidity contracts directly</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ERC20 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./ERC20.sol&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Contract type information is automatically generated</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">ERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.abi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createContract } from &#x27;tevm/contract&#x27;\n \n// Type-safe contract interactions\nconst contract = createContract({\n  humanReadableAbi: [&#x27;function transfer(address to, uint256 amount)&#x27;],\n  address: &#x27;0x123...&#x27;\n})\n \n// Write operations\nconst action = contract.write.transfer(&#x27;0x456...&#x27;, 100n)\n \n// Read operations\nconst balance = await contract.read.balanceOf(&#x27;0x789...&#x27;)\nYou can also use the tevm bundler for automatic contract compilation:\n// Import Solidity contracts directly\nimport { ERC20 } from &#x27;./ERC20.sol&#x27;\n \n// Contract type information is automatically generated\nconst contract = createContract({\n  abi: ERC20.abi,\n  address: &#x27;0x123...&#x27;\n})\n","title":"4. Contract Utilities","titles":["Architecture Overview","Available APIs"]},"240":{"href":"/introduction/architecture-overview#key-features","html":"\n","isPage":false,"text":"\n","title":"Key Features","titles":["Architecture Overview"]},"241":{"href":"/introduction/architecture-overview#1-forking","html":"\n<p>Fork from any live network or another Tevm instance:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFork from any live network or another Tevm instance:\nconst node = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;),\n    blockTag: &#x27;latest&#x27;\n  }\n})\n","title":"1. Forking","titles":["Architecture Overview","Key Features"]},"242":{"href":"/introduction/architecture-overview#2-mining-modes","html":"\n<p>Configure how transactions are processed:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  miningConfig: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;auto&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Mine every transaction</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Or &#x27;interval&#x27;, &#x27;manual&#x27;, &#x27;gas&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nConfigure how transactions are processed:\nconst node = createTevmNode({\n  miningConfig: {\n    type: &#x27;auto&#x27; // Mine every transaction\n    // Or &#x27;interval&#x27;, &#x27;manual&#x27;, &#x27;gas&#x27;\n  }\n})\n","title":"2. Mining Modes","titles":["Architecture Overview","Key Features"]},"243":{"href":"/introduction/architecture-overview#3-custom-precompiles","html":"\n<p>Extend the EVM with JavaScript functions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> precompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">input</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Custom logic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: result,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nExtend the EVM with JavaScript functions:\nconst precompile = definePrecompile({\n  address: &#x27;0x123...&#x27;,\n  call: async (input) =&gt; {\n    // Custom logic\n    return {\n      returnValue: result,\n      executionGasUsed: 100n\n    }\n  }\n})\n","title":"3. Custom Precompiles","titles":["Architecture Overview","Key Features"]},"244":{"href":"/introduction/architecture-overview#4-state-management","html":"\n<p>Direct control over blockchain state:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Modify account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  code: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  storage: { </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* ... */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create checkpoints</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">checkpoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">commit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// or .revert()</span></span></code></pre>\n","isPage":false,"text":"\nDirect control over blockchain state:\n// Modify account state\nawait node.setAccount({\n  address: &#x27;0x123...&#x27;,\n  balance: 100n,\n  code: &#x27;0x...&#x27;,\n  storage: { /* ... */ }\n})\n \n// Create checkpoints\nawait vm.stateManager.checkpoint()\nawait vm.stateManager.commit() // or .revert()\n","title":"4. State Management","titles":["Architecture Overview","Key Features"]},"245":{"href":"/introduction/architecture-overview#common-use-cases","html":"\n<ol>\n<li>\n<strong>Local Development</strong>\n<ul>\n<li>Run a complete Ethereum environment locally</li>\n<li>Test contracts without external networks</li>\n<li>Simulate complex scenarios</li>\n</ul>\n</li>\n<li>\n<strong>Testing</strong>\n<ul>\n<li>Unit test smart contracts</li>\n<li>Integration test DApp interactions</li>\n<li>Fork mainnet for realistic tests</li>\n</ul>\n</li>\n<li>\n<strong>Transaction Simulation</strong>\n<ul>\n<li>Preview transaction outcomes</li>\n<li>Estimate gas costs accurately</li>\n<li>Debug failed transactions</li>\n</ul>\n</li>\n<li>\n<strong>State Manipulation</strong>\n<ul>\n<li>Modify account balances</li>\n<li>Override contract state</li>\n<li>Test edge cases</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nLocal Development\n\nRun a complete Ethereum environment locally\nTest contracts without external networks\nSimulate complex scenarios\n\n\n\nTesting\n\nUnit test smart contracts\nIntegration test DApp interactions\nFork mainnet for realistic tests\n\n\n\nTransaction Simulation\n\nPreview transaction outcomes\nEstimate gas costs accurately\nDebug failed transactions\n\n\n\nState Manipulation\n\nModify account balances\nOverride contract state\nTest edge cases\n\n\n\n","title":"Common Use Cases","titles":["Architecture Overview"]},"246":{"href":"/introduction/architecture-overview#integration-examples","html":"\n","isPage":false,"text":"\n","title":"Integration Examples","titles":["Architecture Overview"]},"247":{"href":"/introduction/architecture-overview#with-viem","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createPublicClient, custom, http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a Tevm node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    url: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a viem client using Tevm</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createPublicClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">custom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node.request),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chain: mainnet</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use viem actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createPublicClient, custom, http } from &#x27;viem&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\n \n// Create a Tevm node\nconst node = createTevmNode({\n  fork: {\n    url: &#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;\n  }\n})\n \n// Create a viem client using Tevm\nconst client = createPublicClient({\n  transport: custom(node.request),\n  chain: mainnet\n})\n \n// Use viem actions\nconst balance = await client.getBalance({\n  address: &#x27;0x...&#x27;\n})\n","title":"With Viem","titles":["Architecture Overview","Integration Examples"]},"248":{"href":"/introduction/architecture-overview#with-ethersjs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { BrowserProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BrowserProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use ethers.js functionality</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nimport { BrowserProvider } from &#x27;ethers&#x27;\n \nconst node = createTevmNode()\nconst provider = new BrowserProvider(node)\n \n// Use ethers.js functionality\nconst balance = await provider.getBalance(&#x27;0x...&#x27;)\nconst block = await provider.getBlock(&#x27;latest&#x27;)\n","title":"With Ethers.js","titles":["Architecture Overview","Integration Examples"]},"249":{"href":"/introduction/architecture-overview#next-steps","html":"\n<ul>\n<li><a href=\"../introduction/installation\">Installation &amp; Quickstart</a></li>\n<li><a href=\"../core/create-tevm-node\">Core Concepts</a></li>\n<li><a href=\"../examples/viem.mdx\">Viem docs</a></li>\n<li><a href=\"../api/methods\">API Reference</a></li>\n<li><a href=\"../examples/local-testing\">Examples</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo\">GitHub Repository</a></li>\n</ul>","isPage":false,"text":"\n\nInstallation &amp; Quickstart\nCore Concepts\nViem docs\nAPI Reference\nExamples\nGitHub Repository\n","title":"Next Steps","titles":["Architecture Overview"]},"250":{"href":"/introduction/installation#installation--quickstart","html":"</header>\n","isPage":true,"text":"\n","title":"Installation &amp; Quickstart","titles":[]},"251":{"href":"/introduction/installation#1-install","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">bun</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span></span></code></pre>\n","isPage":false,"text":"\nnpm install tevm\n \n# or\nyarn add tevm\n \n# or\npnpm add tevm\n \n# or\nbun add tevm\n","title":"1. Install","titles":["Installation &amp; Quickstart"]},"252":{"href":"/introduction/installation#2-quick-start","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create an instance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Access the internal VM once it is ready</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Perform an method on the vm or one of it&#x27;s subcomponents like blockchain</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\n \n// Create an instance\nconst node = createTevmNode()\n \n// Access the internal VM once it is ready\nconst vm = await node.getVm()\n \n// Perform an method on the vm or one of it&#x27;s subcomponents like blockchain\nconsole.log(await vm.blockchain.getBlockByTag(&#x27;latest&#x27;))\n","title":"2. Quick Start","titles":["Installation &amp; Quickstart"]},"253":{"href":"/introduction/installation#3-next-steps","html":"\n<ul>\n<li>Explore the <a href=\"../core/create-tevm-node\">Core Concepts</a></li>\n<li>Check out <a href=\"../examples/local-testing\">Examples</a></li>\n</ul>","isPage":false,"text":"\n\nExplore the Core Concepts\nCheck out Examples\n","title":"3. Next Steps","titles":["Installation &amp; Quickstart"]},"254":{"href":"/introduction/what-is-tevm-node#what-is-tevm-node","html":"</header>\n<p>Tevm Node is an in-browser &amp; Node.js-compatible Ethereum Virtual Machine (EVM) environment. It provides a complete Ethereum execution environment, powered by JavaScript, that you can run:</p>\n<ul>\n<li><strong>In Node.js</strong> for local development and testing</li>\n<li><strong>In the Browser</strong> for advanced user experiences (offline simulation, real-time testing)</li>\n<li><strong>In Deno, Bun</strong>, or any modern JavaScript runtime</li>\n</ul>\n","isPage":true,"text":"\nTevm Node is an in-browser &amp; Node.js-compatible Ethereum Virtual Machine (EVM) environment. It provides a complete Ethereum execution environment, powered by JavaScript, that you can run:\n\nIn Node.js for local development and testing\nIn the Browser for advanced user experiences (offline simulation, real-time testing)\nIn Deno, Bun, or any modern JavaScript runtime\n\n","title":"What is Tevm Node?","titles":[]},"255":{"href":"/introduction/what-is-tevm-node#key-features","html":"\n<ul>\n<li><strong>Forking:</strong> Fork from any EVM-compatible network (mainnet, testnet) with efficient caching</li>\n<li><strong>Transaction Pool:</strong> Track and manage pending transactions locally</li>\n<li><strong>Flexible Mining:</strong> Choose between automatic, interval-based, manual, or gas-limit-based mining</li>\n<li><strong>Zero Native Dependencies:</strong> Works seamlessly in browsers and JavaScript runtimes</li>\n<li><strong>Highly Extensible:</strong> Customize the VM, add precompiles, handle receipts, and more</li>\n</ul>\n","isPage":false,"text":"\n\nForking: Fork from any EVM-compatible network (mainnet, testnet) with efficient caching\nTransaction Pool: Track and manage pending transactions locally\nFlexible Mining: Choose between automatic, interval-based, manual, or gas-limit-based mining\nZero Native Dependencies: Works seamlessly in browsers and JavaScript runtimes\nHighly Extensible: Customize the VM, add precompiles, handle receipts, and more\n\n","title":"Key Features","titles":["What is Tevm Node?"]},"256":{"href":"/introduction/what-is-tevm-node#quick-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode, http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a node that forks from Optimism</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.optimism.io&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode, http } from &#x27;tevm&#x27;\n \n// Create a node that forks from Optimism\nconst node = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://mainnet.optimism.io&#x27;)\n  }\n})\n \nconst vm = await node.getVm()\nconsole.log(await vm.blockchain.getBlockByTag(&#x27;latest&#x27;))\n","title":"Quick Example","titles":["What is Tevm Node?"]},"257":{"href":"/introduction/what-is-tevm-node#why-tevm-node","html":"\n<ul>\n<li><strong>Browser &amp; Local Execution:</strong> Improved latency and advanced debugging capabilities</li>\n<li><strong>Optimistic Updates:</strong> Preview transaction effects before on-chain confirmation</li>\n<li><strong>Lightweight:</strong> Minimal overhead compared to full Ethereum nodes</li>\n<li><strong>Network Independent:</strong> Test and develop without real network constraints</li>\n</ul>\n","isPage":false,"text":"\n\nBrowser &amp; Local Execution: Improved latency and advanced debugging capabilities\nOptimistic Updates: Preview transaction effects before on-chain confirmation\nLightweight: Minimal overhead compared to full Ethereum nodes\nNetwork Independent: Test and develop without real network constraints\n\n","title":"Why Tevm Node?","titles":["What is Tevm Node?"]},"258":{"href":"/introduction/what-is-tevm-node#important-note","html":"\n<p>Tevm Node is designed primarily for development, testing, and simulation. While it implements the full EVM specification, it is not recommended for production mainnet validation or as a replacement for full consensus nodes.</p>\n","isPage":false,"text":"\nTevm Node is designed primarily for development, testing, and simulation. While it implements the full EVM specification, it is not recommended for production mainnet validation or as a replacement for full consensus nodes.\n","title":"Important Note","titles":["What is Tevm Node?"]},"259":{"href":"/introduction/what-is-tevm-node#next-steps","html":"\n<ul>\n<li><a href=\"./why-run-ethereum-in-js\">Why JavaScript for Ethereum?</a></li>\n<li><a href=\"./installation\">Installation Guide</a></li>\n<li><a href=\"./architecture-overview\">Architecture Overview</a></li>\n</ul>","isPage":false,"text":"\n\nWhy JavaScript for Ethereum?\nInstallation Guide\nArchitecture Overview\n","title":"Next Steps","titles":["What is Tevm Node?"]},"260":{"href":"/introduction/why-run-ethereum-in-js#why-run-ethereum-in-javascript","html":"</header>\n","isPage":true,"text":"\n","title":"Why run Ethereum in JavaScript?","titles":[]},"261":{"href":"/introduction/why-run-ethereum-in-js#1-advanced-gas-estimation--local-execution","html":"\n<p>Running the EVM locally removes round-trip latency to a remote node. You can do:</p>\n<ul>\n<li>Bulk simulation or multi-tx simulation</li>\n<li>Real-time &quot;dry run&quot; of transactions</li>\n<li>Faster dev/test cycles</li>\n</ul>\n","isPage":false,"text":"\nRunning the EVM locally removes round-trip latency to a remote node. You can do:\n\nBulk simulation or multi-tx simulation\nReal-time &quot;dry run&quot; of transactions\nFaster dev/test cycles\n\n","title":"1. Advanced Gas Estimation &amp; Local Execution","titles":["Why run Ethereum in JavaScript?"]},"262":{"href":"/introduction/why-run-ethereum-in-js#2-user-experience-enhancements","html":"\n<ul>\n<li><strong>Offline</strong> or <em>local-first</em> capabilities</li>\n<li><strong>Optimistic UI</strong> updates with local simulation</li>\n<li>No reliance on ephemeral test networks</li>\n</ul>\n","isPage":false,"text":"\n\nOffline or local-first capabilities\nOptimistic UI updates with local simulation\nNo reliance on ephemeral test networks\n\n","title":"2. User Experience Enhancements","titles":["Why run Ethereum in JavaScript?"]},"263":{"href":"/introduction/why-run-ethereum-in-js#3-testing--debugging","html":"\n<ul>\n<li>Fine-grained EVM introspection</li>\n<li>Deterministic environment</li>\n<li>Light footprint – no external server needed</li>\n</ul>\n","isPage":false,"text":"\n\nFine-grained EVM introspection\nDeterministic environment\nLight footprint – no external server needed\n\n","title":"3. Testing &amp; Debugging","titles":["Why run Ethereum in JavaScript?"]},"264":{"href":"/introduction/why-run-ethereum-in-js#4-ecosystem--portability","html":"\n<ul>\n<li>Portable across Node.js, browsers, and serverless</li>\n<li>Works with standard EVM interfaces</li>\n<li>Integrates well with modern JS/TS tooling</li>\n</ul>","isPage":false,"text":"\n\nPortable across Node.js, browsers, and serverless\nWorks with standard EVM interfaces\nIntegrates well with modern JS/TS tooling\n","title":"4. Ecosystem &amp; Portability","titles":["Why run Ethereum in JavaScript?"]},"265":{"href":"/reference/actions#tevmactions","html":"</header>\n<p>The <code>@tevm/actions</code> package provides a comprehensive set of actions for interacting with the Tevm client. It includes both standard Ethereum JSON-RPC methods and Tevm-specific functionality.</p>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs\">evmts/tevm-monorepo/packages/actions/docs</a> folder.</p>\n</blockquote>\n","isPage":true,"text":"\nThe @tevm/actions package provides a comprehensive set of actions for interacting with the Tevm client. It includes both standard Ethereum JSON-RPC methods and Tevm-specific functionality.\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/actions/docs folder.\n\n","title":"@tevm/actions","titles":[]},"266":{"href":"/reference/actions#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/actions</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/actions\n","title":"Installation","titles":["@tevm/actions"]},"267":{"href":"/reference/actions#overview","html":"\n<p>The <code>@tevm/actions</code> package provides handlers for:</p>\n<ul>\n<li>Executing EVM calls and contract interactions</li>\n<li>Managing blockchain state and accounts</li>\n<li>Standard Ethereum JSON-RPC methods</li>\n<li>Testing and development utilities (Anvil-compatible)</li>\n<li>Debugging and tracing functionality</li>\n</ul>\n","isPage":false,"text":"\nThe @tevm/actions package provides handlers for:\n\nExecuting EVM calls and contract interactions\nManaging blockchain state and accounts\nStandard Ethereum JSON-RPC methods\nTesting and development utilities (Anvil-compatible)\nDebugging and tracing functionality\n\n","title":"Overview","titles":["@tevm/actions"]},"268":{"href":"/reference/actions#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/actions"]},"269":{"href":"/reference/actions#error-classes","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/classes/BlobGasLimitExceededError.md\">BlobGasLimitExceededError</a> - Error thrown when blob gas limit is exceeded</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/classes/MissingAccountError.md\">MissingAccountError</a> - Error thrown when an account doesn&#x27;t exist</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/classes/NoForkUrlSetError.md\">NoForkUrlSetError</a> - Error thrown when fork URL is required but not set</li>\n</ul>\n","isPage":false,"text":"\n\nBlobGasLimitExceededError - Error thrown when blob gas limit is exceeded\nMissingAccountError - Error thrown when an account doesn&#x27;t exist\nNoForkUrlSetError - Error thrown when fork URL is required but not set\n\n","title":"Error Classes","titles":["@tevm/actions","API Reference"]},"270":{"href":"/reference/actions#core-types","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/Address.md\">Address</a> - Ethereum address type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/Abi.md\">Abi</a> - Contract ABI type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/Block.md\">Block</a> - Ethereum block type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/BlockTag.md\">BlockTag</a> - Block reference tag (latest, earliest, etc)</li>\n</ul>\n","isPage":false,"text":"\n\nAddress - Ethereum address type\nAbi - Contract ABI type\nBlock - Ethereum block type\nBlockTag - Block reference tag (latest, earliest, etc)\n\n","title":"Core Types","titles":["@tevm/actions","API Reference"]},"271":{"href":"/reference/actions#base-actions","html":"\n","isPage":false,"text":"\n","title":"Base Actions","titles":["@tevm/actions","API Reference"]},"272":{"href":"/reference/actions#call-actions","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/CallHandler.md\">CallHandler</a> - Handler for executing EVM calls</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/CallParams.md\">CallParams</a> - Parameters for call operations</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/CallResult.md\">CallResult</a> - Result of call execution</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/BaseCallParams.md\">BaseCallParams</a> - Common parameters for all call operations</li>\n</ul>\n","isPage":false,"text":"\n\nCallHandler - Handler for executing EVM calls\nCallParams - Parameters for call operations\nCallResult - Result of call execution\nBaseCallParams - Common parameters for all call operations\n\n","title":"Call Actions","titles":["@tevm/actions","API Reference","Base Actions"]},"273":{"href":"/reference/actions#contract-actions","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/ContractHandler.md\">ContractHandler</a> - Handler for contract interactions</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/ContractParams.md\">ContractParams</a> - Parameters for contract calls</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/ContractResult.md\">ContractResult</a> - Result of contract execution</li>\n</ul>\n","isPage":false,"text":"\n\nContractHandler - Handler for contract interactions\nContractParams - Parameters for contract calls\nContractResult - Result of contract execution\n\n","title":"Contract Actions","titles":["@tevm/actions","API Reference","Base Actions"]},"274":{"href":"/reference/actions#deploy-actions","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/DeployHandler.md\">DeployHandler</a> - Handler for contract deployment</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/DeployParams.md\">DeployParams</a> - Parameters for deployment</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/DeployResult.md\">DeployResult</a> - Result of deployment</li>\n</ul>\n","isPage":false,"text":"\n\nDeployHandler - Handler for contract deployment\nDeployParams - Parameters for deployment\nDeployResult - Result of deployment\n\n","title":"Deploy Actions","titles":["@tevm/actions","API Reference","Base Actions"]},"275":{"href":"/reference/actions#validation-functions","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/validateBaseCallParams.md\">validateBaseCallParams</a> - Validate base call parameters</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/validateCallParams.md\">validateCallParams</a> - Validate call parameters</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/validateContractParams.md\">validateContractParams</a> - Validate contract parameters</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/validateGetAccountParams.md\">validateGetAccountParams</a> - Validate get account parameters</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/validateLoadStateParams.md\">validateLoadStateParams</a> - Validate load state parameters</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/validateMineParams.md\">validateMineParams</a> - Validate mine parameters</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/validateSetAccountParams.md\">validateSetAccountParams</a> - Validate set account parameters</li>\n</ul>\n","isPage":false,"text":"\n\nvalidateBaseCallParams - Validate base call parameters\nvalidateCallParams - Validate call parameters\nvalidateContractParams - Validate contract parameters\nvalidateGetAccountParams - Validate get account parameters\nvalidateLoadStateParams - Validate load state parameters\nvalidateMineParams - Validate mine parameters\nvalidateSetAccountParams - Validate set account parameters\n\n","title":"Validation Functions","titles":["@tevm/actions","API Reference"]},"276":{"href":"/reference/actions#json-rpc-procedures","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/anvilImpersonateAccountJsonRpcProcedure.md\">anvilImpersonateAccountJsonRpcProcedure</a> - Impersonate account procedure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/callProcedure.md\">callProcedure</a> - Call procedure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/getAccountProcedure.md\">getAccountProcedure</a> - Get account procedure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/mineProcedure.md\">mineProcedure</a> - Mine procedure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/requestProcedure.md\">requestProcedure</a> - Request procedure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/requestBulkProcedure.md\">requestBulkProcedure</a> - Bulk request procedure</li>\n</ul>\n","isPage":false,"text":"\n\nanvilImpersonateAccountJsonRpcProcedure - Impersonate account procedure\ncallProcedure - Call procedure\ngetAccountProcedure - Get account procedure\nmineProcedure - Mine procedure\nrequestProcedure - Request procedure\nrequestBulkProcedure - Bulk request procedure\n\n","title":"JSON-RPC Procedures","titles":["@tevm/actions","API Reference"]},"277":{"href":"/reference/actions#internal-utilities","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/forkAndCacheBlock.md\">forkAndCacheBlock</a> - Fork and cache block utility</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/handlePendingTransactionsWarning.md\">handlePendingTransactionsWarning</a> - Handle pending transactions warning</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/functions/shouldCreateTransaction.md\">shouldCreateTransaction</a> - Check if transaction should be created</li>\n</ul>\n","isPage":false,"text":"\n\nforkAndCacheBlock - Fork and cache block utility\nhandlePendingTransactionsWarning - Handle pending transactions warning\nshouldCreateTransaction - Check if transaction should be created\n\n","title":"Internal Utilities","titles":["@tevm/actions","API Reference"]},"278":{"href":"/reference/actions#ethereum-json-rpc-actions","html":"\n","isPage":false,"text":"\n","title":"Ethereum JSON-RPC Actions","titles":["@tevm/actions","API Reference"]},"279":{"href":"/reference/actions#account--network","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/EthAccountsHandler.md\">EthAccountsHandler</a> - List available accounts</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/EthChainIdHandler.md\">EthChainIdHandler</a> - Get current chain ID</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/EthCoinbaseHandler.md\">EthCoinbaseHandler</a> - Get coinbase address</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/EthGasPriceHandler.md\">EthGasPriceHandler</a> - Get current gas price</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/EthBlockNumberHandler.md\">EthBlockNumberHandler</a> - Get current block number</li>\n</ul>\n","isPage":false,"text":"\n\nEthAccountsHandler - List available accounts\nEthChainIdHandler - Get current chain ID\nEthCoinbaseHandler - Get coinbase address\nEthGasPriceHandler - Get current gas price\nEthBlockNumberHandler - Get current block number\n\n","title":"Account &amp; Network","titles":["@tevm/actions","API Reference","Ethereum JSON-RPC Actions"]},"280":{"href":"/reference/actions#state-reading","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/EthGetBalanceHandler.md\">EthGetBalanceHandler</a> - Get account balance</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/EthGetCodeHandler.md\">EthGetCodeHandler</a> - Get contract code</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/EthGetStorageAtHandler.md\">EthGetStorageAtHandler</a> - Get storage at position</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/EthCallHandler.md\">EthCallHandler</a> - Execute call without state changes</li>\n</ul>\n","isPage":false,"text":"\n\nEthGetBalanceHandler - Get account balance\nEthGetCodeHandler - Get contract code\nEthGetStorageAtHandler - Get storage at position\nEthCallHandler - Execute call without state changes\n\n","title":"State Reading","titles":["@tevm/actions","API Reference","Ethereum JSON-RPC Actions"]},"281":{"href":"/reference/actions#block-operations","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/EthGetBlockByHashHandler.md\">EthGetBlockByHashHandler</a> - Get block by hash</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/EthGetBlockByNumberHandler.md\">EthGetBlockByNumberHandler</a> - Get block by number</li>\n</ul>\n","isPage":false,"text":"\n\nEthGetBlockByHashHandler - Get block by hash\nEthGetBlockByNumberHandler - Get block by number\n\n","title":"Block Operations","titles":["@tevm/actions","API Reference","Ethereum JSON-RPC Actions"]},"282":{"href":"/reference/actions#anvil-testing--development-actions","html":"\n","isPage":false,"text":"\n","title":"Anvil (Testing &amp; Development) Actions","titles":["@tevm/actions","API Reference"]},"283":{"href":"/reference/actions#state-manipulation","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/AnvilSetBalanceHandler.md\">AnvilSetBalanceHandler</a> - Set account balance</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/AnvilSetCodeHandler.md\">AnvilSetCodeHandler</a> - Set contract code</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/AnvilSetNonceHandler.md\">AnvilSetNonceHandler</a> - Set account nonce</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/AnvilSetStorageAtHandler.md\">AnvilSetStorageAtHandler</a> - Set storage at position</li>\n</ul>\n","isPage":false,"text":"\n\nAnvilSetBalanceHandler - Set account balance\nAnvilSetCodeHandler - Set contract code\nAnvilSetNonceHandler - Set account nonce\nAnvilSetStorageAtHandler - Set storage at position\n\n","title":"State Manipulation","titles":["@tevm/actions","API Reference","Anvil (Testing &amp; Development) Actions"]},"284":{"href":"/reference/actions#mining--chain-control","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/AnvilMineHandler.md\">AnvilMineHandler</a> - Mine blocks</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/AnvilSetChainIdHandler.md\">AnvilSetChainIdHandler</a> - Set chain ID</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/AnvilResetHandler.md\">AnvilResetHandler</a> - Reset to initial state</li>\n</ul>\n","isPage":false,"text":"\n\nAnvilMineHandler - Mine blocks\nAnvilSetChainIdHandler - Set chain ID\nAnvilResetHandler - Reset to initial state\n\n","title":"Mining &amp; Chain Control","titles":["@tevm/actions","API Reference","Anvil (Testing &amp; Development) Actions"]},"285":{"href":"/reference/actions#debug-actions","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/DebugTraceCallHandler.md\">DebugTraceCallHandler</a> - Trace a call execution</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/type-aliases/DebugTraceTransactionHandler.md\">DebugTraceTransactionHandler</a> - Trace a transaction execution</li>\n</ul>\n","isPage":false,"text":"\n\nDebugTraceCallHandler - Trace a call execution\nDebugTraceTransactionHandler - Trace a transaction execution\n\n","title":"Debug Actions","titles":["@tevm/actions","API Reference"]},"286":{"href":"/reference/actions#usage-examples","html":"\n","isPage":false,"text":"\n","title":"Usage Examples","titles":["@tevm/actions"]},"287":{"href":"/reference/actions#basic-call-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/node&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { callHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> call</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x456...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm/node&#x27;\nimport { callHandler } from &#x27;@tevm/actions&#x27;\n \nconst client = createTevmNode()\nconst call = callHandler(client)\n \nconst result = await call({\n  to: &#x27;0x123...&#x27;,\n  data: &#x27;0x456...&#x27;,\n  value: 1000n\n})\n","title":"Basic Call Example","titles":["@tevm/actions","Usage Examples"]},"288":{"href":"/reference/actions#contract-interaction-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { contractHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> contractHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  function: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x456...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { contractHandler } from &#x27;@tevm/actions&#x27;\n \nconst contract = contractHandler(client)\nconst result = await contract({\n  to: &#x27;0x123...&#x27;,\n  abi: [...],\n  function: &#x27;transfer&#x27;,\n  args: [&#x27;0x456...&#x27;, 1000n]\n})\n","title":"Contract Interaction Example","titles":["@tevm/actions","Usage Examples"]},"289":{"href":"/reference/actions#deployment-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { deployHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deploy</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deploy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytecode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;constructor arg&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { deployHandler } from &#x27;@tevm/actions&#x27;\n \nconst deploy = deployHandler(client)\nconst result = await deploy({\n  bytecode: &#x27;0x...&#x27;,\n  abi: [...],\n  args: [&#x27;constructor arg&#x27;]\n})\n","title":"Deployment Example","titles":["@tevm/actions","Usage Examples"]},"290":{"href":"/reference/actions#json-rpc-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ethCallHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ethCall</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ethCallHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ethCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x456...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { ethCallHandler } from &#x27;@tevm/actions&#x27;\n \nconst ethCall = ethCallHandler(client)\nconst result = await ethCall({\n  to: &#x27;0x123...&#x27;,\n  data: &#x27;0x456...&#x27;\n})\n","title":"JSON-RPC Example","titles":["@tevm/actions","Usage Examples"]},"291":{"href":"/reference/actions#error-handling","html":"\n<p>All actions support a <code>throwOnFail</code> parameter to control error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  throwOnFail: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Return errors in result instead of throwing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nAll actions support a throwOnFail parameter to control error handling:\nconst result = await call({\n  to: &#x27;0x123...&#x27;,\n  throwOnFail: false // Return errors in result instead of throwing\n})\n","title":"Error Handling","titles":["@tevm/actions"]},"292":{"href":"/reference/actions#see-also","html":"\n<ul>\n<li><a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/\">Ethereum JSON-RPC Specification</a></li>\n<li><a href=\"https://book.getfoundry.sh/reference/anvil/\">Anvil Documentation</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs/globals.md\">Full API Reference</a></li>\n</ul>","isPage":false,"text":"\n\nEthereum JSON-RPC Specification\nAnvil Documentation\nFull API Reference\n","title":"See Also","titles":["@tevm/actions"]},"293":{"href":"/reference/address#tevmaddress","html":"</header>\n<p>The <code>@tevm/address</code> package provides utilities for handling Ethereum addresses. It wraps the functionality from <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/blob/master/packages/util/src/address.ts\"><code>@ethereumjs/utils</code> address</a> with a Tevm-style API.</p>\n","isPage":true,"text":"\nThe @tevm/address package provides utilities for handling Ethereum addresses. It wraps the functionality from @ethereumjs/utils address with a Tevm-style API.\n","title":"@tevm/address","titles":[]},"294":{"href":"/reference/address#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/address</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/address\n","title":"Installation","titles":["@tevm/address"]},"295":{"href":"/reference/address#overview","html":"\n<p>This package provides a set of utilities for working with Ethereum addresses, including:</p>\n<ul>\n<li>Creating and validating addresses</li>\n<li>Generating contract addresses (both regular and CREATE2)</li>\n<li>Converting between different address formats</li>\n<li>Handling checksummed addresses</li>\n</ul>\n","isPage":false,"text":"\nThis package provides a set of utilities for working with Ethereum addresses, including:\n\nCreating and validating addresses\nGenerating contract addresses (both regular and CREATE2)\nConverting between different address formats\nHandling checksummed addresses\n\n","title":"Overview","titles":["@tevm/address"]},"296":{"href":"/reference/address#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/address"]},"297":{"href":"/reference/address#classes","html":"\n","isPage":false,"text":"\n","title":"Classes","titles":["@tevm/address","API Reference"]},"298":{"href":"/reference/address#address","html":"\n<p>A utility class for Ethereum addresses that extends <code>EthjsAddress</code>. It provides a more user-friendly API and ensures checksummed address output.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create from hex string</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`0x${&#x27;00&#x27;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">repeat</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create from number or bigint</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create from bytes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address3</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create from non-hex string</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address4</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;55&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">repeat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span></code></pre>\n<strong>Methods:</strong>\n<ul>\n<li><code>toString()</code>: Returns the checksummed address as a string</li>\n<li><code>toBytes()</code>: Returns the address as a Uint8Array</li>\n<li><code>equals(address: Address)</code>: Checks if two addresses are equal</li>\n<li><code>isZero()</code>: Checks if the address is zero</li>\n<li><code>isPrecompileOrSystemAddress()</code>: Checks if the address is a precompile or system address</li>\n</ul>\n","isPage":false,"text":"\nA utility class for Ethereum addresses that extends EthjsAddress. It provides a more user-friendly API and ensures checksummed address output.\nimport { createAddress } from &#x27;@tevm/address&#x27;\n \n// Create from hex string\nconst address = createAddress(`0x${&#x27;00&#x27;.repeat(20)}`)\n \n// Create from number or bigint\nconst address2 = createAddress(0n)\n \n// Create from bytes\nconst address3 = createAddress(new Uint8Array(20))\n \n// Create from non-hex string\nconst address4 = createAddress(&#x27;55&#x27;.repeat(20))\nMethods:\n\ntoString(): Returns the checksummed address as a string\ntoBytes(): Returns the address as a Uint8Array\nequals(address: Address): Checks if two addresses are equal\nisZero(): Checks if the address is zero\nisPrecompileOrSystemAddress(): Checks if the address is a precompile or system address\n\n","title":"Address","titles":["@tevm/address","API Reference","Classes"]},"299":{"href":"/reference/address#functions","html":"\n","isPage":false,"text":"\n","title":"Functions","titles":["@tevm/address","API Reference"]},"300":{"href":"/reference/address#createaddressaddress-string--number--bigint--address--uint8array-address","html":"\n<p>Creates an <code>Address</code> instance from various input types.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// From hex string</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// From number</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// From bytes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address3</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span></code></pre>\n<strong>Parameters:</strong>\n<ul>\n<li><code>address</code>: The input to create an address from (hex string, number, bigint, Address instance, or Uint8Array)</li>\n</ul>\n<strong>Returns:</strong>\n<ul>\n<li>An <code>Address</code> instance</li>\n</ul>\n<strong>Throws:</strong>\n<ul>\n<li><code>InvalidAddressError</code> if the input is not a valid address</li>\n</ul>\n","isPage":false,"text":"\nCreates an Address instance from various input types.\nimport { createAddress } from &#x27;@tevm/address&#x27;\n \n// From hex string\nconst address = createAddress(&#x27;0x1234...&#x27;)\n \n// From number\nconst address2 = createAddress(123)\n \n// From bytes\nconst address3 = createAddress(new Uint8Array(20))\nParameters:\n\naddress: The input to create an address from (hex string, number, bigint, Address instance, or Uint8Array)\n\nReturns:\n\nAn Address instance\n\nThrows:\n\nInvalidAddressError if the input is not a valid address\n\n","title":"createAddress(address: string | number | bigint | Address | Uint8Array): Address","titles":["@tevm/address","API Reference","Functions"]},"301":{"href":"/reference/address#createcontractaddressfrom-address-nonce-bigint-address","html":"\n<p>Generates an address for a newly created contract using the standard CREATE operation.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress, createContractAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> from</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContractAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(from, nonce)</span></span></code></pre>\n<strong>Parameters:</strong>\n<ul>\n<li><code>from</code>: The address of the account creating the contract</li>\n<li><code>nonce</code>: The nonce of the account creating the contract</li>\n</ul>\n<strong>Returns:</strong>\n<ul>\n<li>The generated contract address</li>\n</ul>\n<strong>Throws:</strong>\n<ul>\n<li><code>InvalidAddressError</code> if the &#x27;from&#x27; parameter is not a valid address</li>\n</ul>\n","isPage":false,"text":"\nGenerates an address for a newly created contract using the standard CREATE operation.\nimport { createAddress, createContractAddress } from &#x27;@tevm/address&#x27;\n \nconst from = createAddress(&#x27;0x1234...&#x27;)\nconst nonce = 0n\nconst contractAddress = createContractAddress(from, nonce)\nParameters:\n\nfrom: The address of the account creating the contract\nnonce: The nonce of the account creating the contract\n\nReturns:\n\nThe generated contract address\n\nThrows:\n\nInvalidAddressError if the &#x27;from&#x27; parameter is not a valid address\n\n","title":"createContractAddress(from: Address, nonce: bigint): Address","titles":["@tevm/address","API Reference","Functions"]},"302":{"href":"/reference/address#create2contractaddressfrom-address-salt-string-code-string-address","html":"\n<p>Generates an address for a contract created using CREATE2 (EIP-1014).</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress, create2ContractAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> from</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> salt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `0x${&#x27;00&#x27;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">repeat</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x...&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Contract creation code</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> create2ContractAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(from, salt, code)</span></span></code></pre>\n<strong>Parameters:</strong>\n<ul>\n<li><code>from</code>: The address creating the contract</li>\n<li><code>salt</code>: A 32-byte salt value as a hex string</li>\n<li><code>code</code>: The contract creation code</li>\n</ul>\n<strong>Returns:</strong>\n<ul>\n<li>The generated contract address</li>\n</ul>\n<strong>Throws:</strong>\n<ul>\n<li><code>InvalidSaltError</code> if the salt is not 32 bytes</li>\n<li><code>InvalidAddressError</code> if inputs are invalid</li>\n</ul>\n","isPage":false,"text":"\nGenerates an address for a contract created using CREATE2 (EIP-1014).\nimport { createAddress, create2ContractAddress } from &#x27;@tevm/address&#x27;\n \nconst from = createAddress(&#x27;0x1234...&#x27;)\nconst salt = `0x${&#x27;00&#x27;.repeat(32)}`\nconst code = &#x27;0x...&#x27; // Contract creation code\nconst contractAddress = create2ContractAddress(from, salt, code)\nParameters:\n\nfrom: The address creating the contract\nsalt: A 32-byte salt value as a hex string\ncode: The contract creation code\n\nReturns:\n\nThe generated contract address\n\nThrows:\n\nInvalidSaltError if the salt is not 32 bytes\nInvalidAddressError if inputs are invalid\n\n","title":"create2ContractAddress(from: Address, salt: string, code: string): Address","titles":["@tevm/address","API Reference","Functions"]},"303":{"href":"/reference/address#error-handling","html":"\n<p>The package provides specific error types for different validation scenarios:</p>\n<ul>\n<li><code>InvalidAddressError</code>: Thrown when an invalid address is provided</li>\n<li><code>InvalidSaltError</code>: Thrown when an invalid salt is provided for CREATE2</li>\n<li><code>Create2ContractAddressError</code>: Union type of both error types above</li>\n</ul>\n","isPage":false,"text":"\nThe package provides specific error types for different validation scenarios:\n\nInvalidAddressError: Thrown when an invalid address is provided\nInvalidSaltError: Thrown when an invalid salt is provided for CREATE2\nCreate2ContractAddressError: Union type of both error types above\n\n","title":"Error Handling","titles":["@tevm/address"]},"304":{"href":"/reference/address#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":["@tevm/address"]},"305":{"href":"/reference/address#basic-address-creation-and-validation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create an address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x742d35Cc6634C0532925a3b844Bc454e4438f44e&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get checksummed string representation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;0x742d35Cc6634C0532925a3b844Bc454e4438f44e&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check if it&#x27;s a zero address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isZero</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// false</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Compare addresses</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x742d35Cc6634C0532925a3b844Bc454e4438f44e&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">equals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address2))</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// true</span></span></code></pre>\n","isPage":false,"text":"\nimport { createAddress } from &#x27;@tevm/address&#x27;\n \n// Create an address\nconst address = createAddress(&#x27;0x742d35Cc6634C0532925a3b844Bc454e4438f44e&#x27;)\n \n// Get checksummed string representation\nconsole.log(address.toString())\n// &#x27;0x742d35Cc6634C0532925a3b844Bc454e4438f44e&#x27;\n \n// Check if it&#x27;s a zero address\nconsole.log(address.isZero())\n// false\n \n// Compare addresses\nconst address2 = createAddress(&#x27;0x742d35Cc6634C0532925a3b844Bc454e4438f44e&#x27;)\nconsole.log(address.equals(address2))\n// true\n","title":"Basic Address Creation and Validation","titles":["@tevm/address","Examples"]},"306":{"href":"/reference/address#contract-address-generation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress, createContractAddress, create2ContractAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Generate regular contract address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> from</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x742d35Cc6634C0532925a3b844Bc454e4438f44e&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContractAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(from, nonce)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Generate CREATE2 contract address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> salt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `0x${&#x27;00&#x27;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">repeat</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x608060405234801561001057600080fd5b506101...&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Contract bytecode</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> create2Address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> create2ContractAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(from, salt, code)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createAddress, createContractAddress, create2ContractAddress } from &#x27;@tevm/address&#x27;\n \n// Generate regular contract address\nconst from = createAddress(&#x27;0x742d35Cc6634C0532925a3b844Bc454e4438f44e&#x27;)\nconst nonce = 1n\nconst contractAddress = createContractAddress(from, nonce)\n \n// Generate CREATE2 contract address\nconst salt = `0x${&#x27;00&#x27;.repeat(32)}`\nconst code = &#x27;0x608060405234801561001057600080fd5b506101...&#x27; // Contract bytecode\nconst create2Address = create2ContractAddress(from, salt, code)\n","title":"Contract Address Generation","titles":["@tevm/address","Examples"]},"307":{"href":"/reference/address#see-also","html":"\n<ul>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-55\">Ethereum Address Format (EIP-55)</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-1014\">CREATE2 Opcode (EIP-1014)</a></li>\n<li><a href=\"https://tevm.sh/reference/tevm/utils/\">@tevm/utils Documentation</a></li>\n</ul>","isPage":false,"text":"\n\nEthereum Address Format (EIP-55)\nCREATE2 Opcode (EIP-1014)\n@tevm/utils Documentation\n","title":"See Also","titles":["@tevm/address"]},"308":{"href":"/reference/block#tevmblock","html":"</header>\n<p>The <code>@tevm/block</code> package provides functionality for working with Ethereum blocks. It includes classes and utilities for handling block headers, block data, and block-related operations.</p>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs\">evmts/tevm-monorepo/packages/block/docs</a> folder.</p>\n</blockquote>\n","isPage":true,"text":"\nThe @tevm/block package provides functionality for working with Ethereum blocks. It includes classes and utilities for handling block headers, block data, and block-related operations.\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/block/docs folder.\n\n","title":"@tevm/block","titles":[]},"309":{"href":"/reference/block#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/block</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/block\n","title":"Installation","titles":["@tevm/block"]},"310":{"href":"/reference/block#overview","html":"\n<p>The <code>@tevm/block</code> package provides:</p>\n<ul>\n<li>Block creation and manipulation</li>\n<li>Block header management</li>\n<li>RLP serialization/deserialization</li>\n<li>JSON-RPC block formatting</li>\n<li>Verkle tree support</li>\n</ul>\n","isPage":false,"text":"\nThe @tevm/block package provides:\n\nBlock creation and manipulation\nBlock header management\nRLP serialization/deserialization\nJSON-RPC block formatting\nVerkle tree support\n\n","title":"Overview","titles":["@tevm/block"]},"311":{"href":"/reference/block#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/block"]},"312":{"href":"/reference/block#core-classes","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/classes/Block.md\">Block</a> - Main class for Ethereum block operations</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/classes/BlockHeader.md\">BlockHeader</a> - Class for managing block headers</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/classes/ClRequest.md\">ClRequest</a> - Class for client requests</li>\n</ul>\n","isPage":false,"text":"\n\nBlock - Main class for Ethereum block operations\nBlockHeader - Class for managing block headers\nClRequest - Class for client requests\n\n","title":"Core Classes","titles":["@tevm/block","API Reference"]},"313":{"href":"/reference/block#interfaces","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/interfaces/BlockData.md\">BlockData</a> - Block data structure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/interfaces/BlockOptions.md\">BlockOptions</a> - Options for block creation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/interfaces/HeaderData.md\">HeaderData</a> - Block header data structure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/interfaces/JsonBlock.md\">JsonBlock</a> - JSON representation of a block</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/interfaces/JsonHeader.md\">JsonHeader</a> - JSON representation of a header</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/interfaces/JsonRpcBlock.md\">JsonRpcBlock</a> - JSON-RPC block format</li>\n</ul>\n","isPage":false,"text":"\n\nBlockData - Block data structure\nBlockOptions - Options for block creation\nHeaderData - Block header data structure\nJsonBlock - JSON representation of a block\nJsonHeader - JSON representation of a header\nJsonRpcBlock - JSON-RPC block format\n\n","title":"Interfaces","titles":["@tevm/block","API Reference"]},"314":{"href":"/reference/block#verkle-tree-types","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/interfaces/VerkleExecutionWitness.md\">VerkleExecutionWitness</a> - Verkle execution witness</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/interfaces/VerkleProof.md\">VerkleProof</a> - Verkle proof structure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/interfaces/VerkleStateDiff.md\">VerkleStateDiff</a> - Verkle state difference</li>\n</ul>\n","isPage":false,"text":"\n\nVerkleExecutionWitness - Verkle execution witness\nVerkleProof - Verkle proof structure\nVerkleStateDiff - Verkle state difference\n\n","title":"Verkle Tree Types","titles":["@tevm/block","API Reference"]},"315":{"href":"/reference/block#block-types","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/type-aliases/BlockBodyBytes.md\">BlockBodyBytes</a> - Block body byte representation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/type-aliases/BlockBytes.md\">BlockBytes</a> - Full block byte representation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/type-aliases/BlockHeaderBytes.md\">BlockHeaderBytes</a> - Block header byte representation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/type-aliases/ExecutionPayload.md\">ExecutionPayload</a> - Execution payload structure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/type-aliases/BeaconPayloadJson.md\">BeaconPayloadJson</a> - Beacon chain payload JSON</li>\n</ul>\n","isPage":false,"text":"\n\nBlockBodyBytes - Block body byte representation\nBlockBytes - Full block byte representation\nBlockHeaderBytes - Block header byte representation\nExecutionPayload - Execution payload structure\nBeaconPayloadJson - Beacon chain payload JSON\n\n","title":"Block Types","titles":["@tevm/block","API Reference"]},"316":{"href":"/reference/block#utility-functions","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/functions/blockFromRpc.md\">blockFromRpc</a> - Create block from RPC response</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/functions/executionPayloadFromBeaconPayload.md\">executionPayloadFromBeaconPayload</a> - Convert beacon payload to execution payload</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/functions/getDifficulty.md\">getDifficulty</a> - Calculate block difficulty</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/functions/valuesArrayToHeaderData.md\">valuesArrayToHeaderData</a> - Convert array to header data</li>\n</ul>\n","isPage":false,"text":"\n\nblockFromRpc - Create block from RPC response\nexecutionPayloadFromBeaconPayload - Convert beacon payload to execution payload\ngetDifficulty - Calculate block difficulty\nvaluesArrayToHeaderData - Convert array to header data\n\n","title":"Utility Functions","titles":["@tevm/block","API Reference"]},"317":{"href":"/reference/block#usage-examples","html":"\n","isPage":false,"text":"\n","title":"Usage Examples","titles":["@tevm/block"]},"318":{"href":"/reference/block#creating-a-new-block","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Block } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/block&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a new block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { Block } from &#x27;@tevm/block&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\n \n// Create a new block\nconst block = new Block({\n  common: createCommon({ ...mainnet })\n})\n","title":"Creating a New Block","titles":["@tevm/block","Usage Examples"]},"319":{"href":"/reference/block#creating-a-block-from-data","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Block } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/block&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { EthjsAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  header: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    parentHash: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    uncleHash: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    coinbase: EthjsAddress.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stateRoot: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transactionsTrie: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    receiptTrie: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    logsBloom: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xx27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    difficulty: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    number: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    timestamp: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">BigInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Math.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">floor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Date.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    extraData: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mixHash: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    nonce: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    baseFeePerGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromBlockData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockData, { common })</span></span></code></pre>\n","isPage":false,"text":"\nimport { Block } from &#x27;@tevm/block&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\nimport { EthjsAddress } from &#x27;@tevm/utils&#x27;\n \nconst common = createCommon({ ...mainnet })\n \nconst blockData = {\n  header: {\n    parentHash: &#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;,\n    uncleHash: &#x27;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&#x27;,\n    coinbase: EthjsAddress.fromString(&#x27;0x0000000000000000000000000000000000000000&#x27;),\n    stateRoot: &#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;,\n    transactionsTrie: &#x27;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&#x27;,\n    receiptTrie: &#x27;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&#x27;,\n    logsBloom: &#x27;0xx27;,\n    difficulty: 0n,\n    number: 0n,\n    gasLimit: 30000000n,\n    gasUsed: 0n,\n    timestamp: BigInt(Math.floor(Date.now() / 1000)),\n    extraData: &#x27;0x&#x27;,\n    mixHash: &#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;,\n    nonce: &#x27;0x0000000000000000&#x27;,\n    baseFeePerGas: 1000000000n\n  }\n}\n \nconst block = Block.fromBlockData(blockData, { common })\n","title":"Creating a Block from Data","titles":["@tevm/block","Usage Examples"]},"320":{"href":"/reference/block#working-with-block-headers","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get block hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Serialize block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> serialized</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">serialize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert to JSON</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> json</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toJSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\n// Get block hash\nconst hash = block.hash()\n \n// Serialize block\nconst serialized = block.serialize()\n \n// Convert to JSON\nconst json = block.toJSON()\n","title":"Working with Block Headers","titles":["@tevm/block","Usage Examples"]},"321":{"href":"/reference/block#creating-from-rlp-data","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Block } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/block&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> serializedBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* ... */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromRLPSerializedBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(serializedBlock, { common })</span></span></code></pre>\n","isPage":false,"text":"\nimport { Block } from &#x27;@tevm/block&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\n \nconst common = createCommon({ ...mainnet })\nconst serializedBlock = new Uint8Array([/* ... */])\nconst block = Block.fromRLPSerializedBlock(serializedBlock, { common })\n","title":"Creating from RLP Data","titles":["@tevm/block","Usage Examples"]},"322":{"href":"/reference/block#see-also","html":"\n<ul>\n<li><a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/\">Ethereum JSON-RPC Specification</a></li>\n<li><a href=\"https://ethereum.org/en/developers/docs/blocks/\">Block Structure</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs/globals.md\">Full API Reference</a></li>\n</ul>","isPage":false,"text":"\n\nEthereum JSON-RPC Specification\nBlock Structure\nFull API Reference\n","title":"See Also","titles":["@tevm/block"]},"323":{"href":"/reference/blockchain#tevmblockchain","html":"</header>\n<p>The <code>@tevm/blockchain</code> package provides a custom implementation of the Ethereum blockchain, extending the functionality of <code>ethereumjs/blockchain</code>. It&#x27;s responsible for managing blocks, handling chain reorganizations, and maintaining the blockchain state.</p>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/blockchain/docs\">evmts/tevm-monorepo/packages/blockchain/docs</a> folder.</p>\n</blockquote>\n","isPage":true,"text":"\nThe @tevm/blockchain package provides a custom implementation of the Ethereum blockchain, extending the functionality of ethereumjs/blockchain. It&#x27;s responsible for managing blocks, handling chain reorganizations, and maintaining the blockchain state.\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/blockchain/docs folder.\n\n","title":"@tevm/blockchain","titles":[]},"324":{"href":"/reference/blockchain#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/blockchain</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/blockchain\n","title":"Installation","titles":["@tevm/blockchain"]},"325":{"href":"/reference/blockchain#overview","html":"\n<p>The blockchain package provides:</p>\n<ul>\n<li>Block management and validation</li>\n<li>Chain reorganization handling</li>\n<li>Support for forking from live networks</li>\n<li>Block iteration and traversal</li>\n<li>Chain state management</li>\n</ul>\n","isPage":false,"text":"\nThe blockchain package provides:\n\nBlock management and validation\nChain reorganization handling\nSupport for forking from live networks\nBlock iteration and traversal\nChain state management\n\n","title":"Overview","titles":["@tevm/blockchain"]},"326":{"href":"/reference/blockchain#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/blockchain"]},"327":{"href":"/reference/blockchain#core-types","html":"\n","isPage":false,"text":"\n","title":"Core Types","titles":["@tevm/blockchain","API Reference"]},"328":{"href":"/reference/blockchain#chain","html":"\n<p>The main blockchain interface that provides methods for interacting with the blockchain.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createChain } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/blockchain&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* chain config */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<strong>Methods:</strong>\n<ul>\n<li><code>putBlock(block: Block)</code>: Adds a block to the blockchain</li>\n<li><code>delBlock(blockHash: Uint8Array)</code>: Deletes a block and its children</li>\n<li><code>getBlock(blockId: number | bigint | Uint8Array)</code>: Gets a block by hash or number</li>\n<li><code>getBlockByTag(blockTag: BlockTag)</code>: Gets a block by tag (latest, earliest, etc.)</li>\n<li><code>getCanonicalHeadBlock()</code>: Gets the latest block in the canonical chain</li>\n<li><code>validateHeader(header: BlockHeader)</code>: Validates a block header</li>\n<li><code>iterator(name: string, onBlock: OnBlock)</code>: Iterates through blocks</li>\n<li><code>deepCopy()</code>: Creates a deep copy of the blockchain</li>\n<li><code>shallowCopy()</code>: Creates a shallow copy sharing state with original</li>\n</ul>\n","isPage":false,"text":"\nThe main blockchain interface that provides methods for interacting with the blockchain.\nimport { createChain } from &#x27;@tevm/blockchain&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\n \nconst chain = await createChain({\n  common: createCommon({ /* chain config */ }),\n})\nMethods:\n\nputBlock(block: Block): Adds a block to the blockchain\ndelBlock(blockHash: Uint8Array): Deletes a block and its children\ngetBlock(blockId: number | bigint | Uint8Array): Gets a block by hash or number\ngetBlockByTag(blockTag: BlockTag): Gets a block by tag (latest, earliest, etc.)\ngetCanonicalHeadBlock(): Gets the latest block in the canonical chain\nvalidateHeader(header: BlockHeader): Validates a block header\niterator(name: string, onBlock: OnBlock): Iterates through blocks\ndeepCopy(): Creates a deep copy of the blockchain\nshallowCopy(): Creates a shallow copy sharing state with original\n\n","title":"Chain","titles":["@tevm/blockchain","API Reference","Core Types"]},"329":{"href":"/reference/blockchain#chainoptions","html":"\n<p>Configuration options for creating a blockchain instance.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ChainOptions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Common</span><span style=\"color:#6A737D;--shiki-dark:#768390\">                    // Chain configuration</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  loggingLevel</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> LogLevel</span><span style=\"color:#6A737D;--shiki-dark:#768390\">          // Logging configuration</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  genesisBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Block</span><span style=\"color:#6A737D;--shiki-dark:#768390\">             // Custom genesis block</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  genesisStateRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Custom genesis state</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  fork</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {                         </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Fork configuration</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    transport</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">request</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EIP1193RequestFn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    blockTag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BlockTag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `0x${</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nConfiguration options for creating a blockchain instance.\ntype ChainOptions = {\n  common: Common                    // Chain configuration\n  loggingLevel?: LogLevel          // Logging configuration\n  genesisBlock?: Block             // Custom genesis block\n  genesisStateRoot?: Uint8Array    // Custom genesis state\n  fork?: {                         // Fork configuration\n    transport: { request: EIP1193RequestFn }\n    blockTag?: BlockTag | bigint | `0x${string}`\n  }\n}\n","title":"ChainOptions","titles":["@tevm/blockchain","API Reference","Core Types"]},"330":{"href":"/reference/blockchain#functions","html":"\n","isPage":false,"text":"\n","title":"Functions","titles":["@tevm/blockchain","API Reference"]},"331":{"href":"/reference/blockchain#createchainoptions-chainoptions-promisechain","html":"\n<p>Creates a new blockchain instance.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createChain } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/blockchain&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  loggingLevel: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;debug&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: { request: </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* EIP-1193 provider */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nCreates a new blockchain instance.\nimport { createChain } from &#x27;@tevm/blockchain&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;@tevm/common&#x27;\n \nconst chain = await createChain({\n  common: createCommon({ ...mainnet }),\n  loggingLevel: &#x27;debug&#x27;,\n  fork: {\n    transport: { request: /* EIP-1193 provider */ },\n    blockTag: &#x27;latest&#x27;\n  }\n})\n","title":"createChain(options: ChainOptions): Promise&lt;Chain&gt;","titles":["@tevm/blockchain","API Reference","Functions"]},"332":{"href":"/reference/blockchain#createbasechainoptions-chainoptions-basechain","html":"\n<p>Creates the internal blockchain implementation used by <code>createChain</code>.</p>\n","isPage":false,"text":"\nCreates the internal blockchain implementation used by createChain.\n","title":"createBaseChain(options: ChainOptions): BaseChain","titles":["@tevm/blockchain","API Reference","Functions"]},"333":{"href":"/reference/blockchain#block-operations","html":"\n","isPage":false,"text":"\n","title":"Block Operations","titles":["@tevm/blockchain","API Reference"]},"334":{"href":"/reference/blockchain#getting-blocks","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get by number</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1234</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get by hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get by tag</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> latest</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> pending</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;pending&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\n// Get by number\nconst block = await chain.getBlock(1234n)\n \n// Get by hash\nconst block = await chain.getBlock(blockHash)\n \n// Get by tag\nconst latest = await chain.getBlockByTag(&#x27;latest&#x27;)\nconst pending = await chain.getBlockByTag(&#x27;pending&#x27;)\n","title":"Getting Blocks","titles":["@tevm/blockchain","API Reference","Block Operations"]},"335":{"href":"/reference/blockchain#adding--removing-blocks","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add a block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(block)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Delete a block and its children</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">delBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash)</span></span></code></pre>\n","isPage":false,"text":"\n// Add a block\nawait chain.putBlock(block)\n \n// Delete a block and its children\nawait chain.delBlock(blockHash)\n","title":"Adding &amp; Removing Blocks","titles":["@tevm/blockchain","API Reference","Block Operations"]},"336":{"href":"/reference/blockchain#block-validation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Validate a block header</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">validateHeader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(header)</span></span></code></pre>\n","isPage":false,"text":"\n// Validate a block header\nawait chain.validateHeader(header)\n","title":"Block Validation","titles":["@tevm/blockchain","API Reference","Block Operations"]},"337":{"href":"/reference/blockchain#chain-traversal","html":"\n","isPage":false,"text":"\n","title":"Chain Traversal","titles":["@tevm/blockchain","API Reference"]},"338":{"href":"/reference/blockchain#block-iterator","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Iterate through blocks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">iterator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;vm&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">reorg</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Process each block</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(block.header.number)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, maxBlocks)</span></span></code></pre>\n","isPage":false,"text":"\n// Iterate through blocks\nawait chain.iterator(&#x27;vm&#x27;, async (block, reorg) =&gt; {\n  // Process each block\n  console.log(block.header.number)\n}, maxBlocks)\n","title":"Block Iterator","titles":["@tevm/blockchain","API Reference","Chain Traversal"]},"339":{"href":"/reference/blockchain#iterator-head-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get iterator head</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> head</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getIteratorHead</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;vm&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set iterator head</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setIteratorHead</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;vm&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, blockHash)</span></span></code></pre>\n","isPage":false,"text":"\n// Get iterator head\nconst head = await chain.getIteratorHead(&#x27;vm&#x27;)\n \n// Set iterator head\nawait chain.setIteratorHead(&#x27;vm&#x27;, blockHash)\n","title":"Iterator Head Management","titles":["@tevm/blockchain","API Reference","Chain Traversal"]},"340":{"href":"/reference/blockchain#forking","html":"\n<p>The blockchain can be forked from a live network:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createChain } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/blockchain&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* chain config */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      request: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // or specific block number/hash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe blockchain can be forked from a live network:\nimport { createChain } from &#x27;@tevm/blockchain&#x27;\nimport { http } from &#x27;viem&#x27;\n \nconst chain = await createChain({\n  common: createCommon({ /* chain config */ }),\n  fork: {\n    transport: {\n      request: http(&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;)\n    },\n    blockTag: &#x27;latest&#x27; // or specific block number/hash\n  }\n})\n","title":"Forking","titles":["@tevm/blockchain","API Reference"]},"341":{"href":"/reference/blockchain#error-handling","html":"\n<p>The package throws specific error types for different scenarios:</p>\n<ul>\n<li><code>BlockNotFoundError</code>: When a requested block doesn&#x27;t exist</li>\n<li><code>InvalidBlockError</code>: When block validation fails</li>\n<li><code>InvalidHeaderError</code>: When header validation fails</li>\n<li><code>InvalidChainError</code>: When chain configuration is invalid</li>\n</ul>\n","isPage":false,"text":"\nThe package throws specific error types for different scenarios:\n\nBlockNotFoundError: When a requested block doesn&#x27;t exist\nInvalidBlockError: When block validation fails\nInvalidHeaderError: When header validation fails\nInvalidChainError: When chain configuration is invalid\n\n","title":"Error Handling","titles":["@tevm/blockchain","API Reference"]},"342":{"href":"/reference/blockchain#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":["@tevm/blockchain"]},"343":{"href":"/reference/blockchain#basic-chain-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createChain } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/blockchain&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Block } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/block&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create chain</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* chain config */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add blocks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(block1)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(block2)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get latest block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> head</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCanonicalHeadBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Validate headers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">validateHeader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(newBlock.header)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createChain } from &#x27;@tevm/blockchain&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { Block } from &#x27;@tevm/block&#x27;\n \n// Create chain\nconst chain = await createChain({\n  common: createCommon({ /* chain config */ })\n})\n \n// Add blocks\nawait chain.putBlock(block1)\nawait chain.putBlock(block2)\n \n// Get latest block\nconst head = await chain.getCanonicalHeadBlock()\n \n// Validate headers\nawait chain.validateHeader(newBlock.header)\n","title":"Basic Chain Management","titles":["@tevm/blockchain","Examples"]},"344":{"href":"/reference/blockchain#chain-forking","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createChain } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/blockchain&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* chain config */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      request: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Fork from specific block</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Work with forked chain</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createChain } from &#x27;@tevm/blockchain&#x27;\nimport { http } from &#x27;viem&#x27;\n \nconst chain = await createChain({\n  common: createCommon({ /* chain config */ }),\n  fork: {\n    transport: {\n      request: http(&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;)\n    },\n    blockTag: 15000000n // Fork from specific block\n  }\n})\n \n// Work with forked chain\nconst block = await chain.getBlock(15000000n)\n","title":"Chain Forking","titles":["@tevm/blockchain","Examples"]},"345":{"href":"/reference/blockchain#chain-iteration","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createChain } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/blockchain&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* options */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process blocks sequentially</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">iterator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;vm&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">reorg</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (reorg) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Chain reorganization detected&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Process block</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Processing block ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">block</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">header</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">number</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process up to 1000 blocks</span></span></code></pre>\n","isPage":false,"text":"\nimport { createChain } from &#x27;@tevm/blockchain&#x27;\n \nconst chain = await createChain({ /* options */ })\n \n// Process blocks sequentially\nawait chain.iterator(&#x27;vm&#x27;, async (block, reorg) =&gt; {\n  if (reorg) {\n    console.log(&#x27;Chain reorganization detected&#x27;)\n  }\n \n  // Process block\n  console.log(`Processing block ${block.header.number}`)\n}, 1000) // Process up to 1000 blocks\n","title":"Chain Iteration","titles":["@tevm/blockchain","Examples"]},"346":{"href":"/reference/blockchain#see-also","html":"\n<ul>\n<li><a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/blockchain\">EthereumJS Blockchain Documentation</a></li>\n<li><a href=\"https://tevm.sh/reference/tevm/block/\">Block Package Documentation</a></li>\n<li><a href=\"https://tevm.sh/reference/tevm/common/\">Common Package Documentation</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/blockchain/docs/globals.md\">Full API Reference</a></li>\n</ul>","isPage":false,"text":"\n\nEthereumJS Blockchain Documentation\nBlock Package Documentation\nCommon Package Documentation\nFull API Reference\n","title":"See Also","titles":["@tevm/blockchain"]},"347":{"href":"/reference/common#tevmcommon","html":"</header>\n<p>The <code>@tevm/common</code> package provides chain-specific configuration and utilities for Tevm clients. It extends the functionality of <code>ethereumjs/common</code> and integrates with Viem&#x27;s chain definitions.</p>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs\">evmts/tevm-monorepo/packages/common/docs</a> folder.</p>\n</blockquote>\n","isPage":true,"text":"\nThe @tevm/common package provides chain-specific configuration and utilities for Tevm clients. It extends the functionality of ethereumjs/common and integrates with Viem&#x27;s chain definitions.\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/common/docs folder.\n\n","title":"@tevm/common","titles":[]},"348":{"href":"/reference/common#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/common</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/common\n","title":"Installation","titles":["@tevm/common"]},"349":{"href":"/reference/common#overview","html":"\n<p>The <code>@tevm/common</code> package provides:</p>\n<ul>\n<li>Chain configuration management</li>\n<li>Hardfork settings and EIP support</li>\n<li>Consensus algorithm configuration</li>\n<li>Network-specific settings</li>\n<li>Extensive chain definitions</li>\n</ul>\n","isPage":false,"text":"\nThe @tevm/common package provides:\n\nChain configuration management\nHardfork settings and EIP support\nConsensus algorithm configuration\nNetwork-specific settings\nExtensive chain definitions\n\n","title":"Overview","titles":["@tevm/common"]},"350":{"href":"/reference/common#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/common"]},"351":{"href":"/reference/common#enumerations","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/enumerations/ConsensusAlgorithm.md\">ConsensusAlgorithm</a> - Supported consensus algorithms</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/enumerations/ConsensusType.md\">ConsensusType</a> - Types of consensus mechanisms</li>\n</ul>\n","isPage":false,"text":"\n\nConsensusAlgorithm - Supported consensus algorithms\nConsensusType - Types of consensus mechanisms\n\n","title":"Enumerations","titles":["@tevm/common","API Reference"]},"352":{"href":"/reference/common#interfaces","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/interfaces/CustomCrypto.md\">CustomCrypto</a> - Custom cryptographic implementations</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/interfaces/EvmStateManagerInterface.md\">EvmStateManagerInterface</a> - EVM state manager interface</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/interfaces/StorageDump.md\">StorageDump</a> - Storage dump format</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/interfaces/StorageRange.md\">StorageRange</a> - Storage range specification</li>\n</ul>\n","isPage":false,"text":"\n\nCustomCrypto - Custom cryptographic implementations\nEvmStateManagerInterface - EVM state manager interface\nStorageDump - Storage dump format\nStorageRange - Storage range specification\n\n","title":"Interfaces","titles":["@tevm/common","API Reference"]},"353":{"href":"/reference/common#type-aliases","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/type-aliases/AccountFields.md\">AccountFields</a> - Account field definitions</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/type-aliases/CliqueConfig.md\">CliqueConfig</a> - Clique consensus configuration</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/type-aliases/Common.md\">Common</a> - Main chain configuration type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/type-aliases/CommonOptions.md\">CommonOptions</a> - Configuration options</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/type-aliases/Hardfork.md\">Hardfork</a> - Supported hardforks</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/type-aliases/MockKzg.md\">MockKzg</a> - Mock KZG implementation</li>\n</ul>\n","isPage":false,"text":"\n\nAccountFields - Account field definitions\nCliqueConfig - Clique consensus configuration\nCommon - Main chain configuration type\nCommonOptions - Configuration options\nHardfork - Supported hardforks\nMockKzg - Mock KZG implementation\n\n","title":"Type Aliases","titles":["@tevm/common","API Reference"]},"354":{"href":"/reference/common#functions","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/functions/createCommon.md\">createCommon</a> - Create a new Common instance</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/functions/createMockKzg.md\">createMockKzg</a> - Create a mock KZG implementation</li>\n</ul>\n","isPage":false,"text":"\n\ncreateCommon - Create a new Common instance\ncreateMockKzg - Create a mock KZG implementation\n\n","title":"Functions","titles":["@tevm/common","API Reference"]},"355":{"href":"/reference/common#supported-networks","html":"\n<p>The package includes configurations for numerous networks, including:</p>\n","isPage":false,"text":"\nThe package includes configurations for numerous networks, including:\n","title":"Supported Networks","titles":["@tevm/common","API Reference"]},"356":{"href":"/reference/common#layer-1-networks","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/mainnet.md\">mainnet</a> - Ethereum Mainnet</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/sepolia.md\">sepolia</a> - Sepolia Testnet</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/goerli.md\">goerli</a> - Goerli Testnet</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/holesky.md\">holesky</a> - Holesky Testnet</li>\n</ul>\n","isPage":false,"text":"\n\nmainnet - Ethereum Mainnet\nsepolia - Sepolia Testnet\ngoerli - Goerli Testnet\nholesky - Holesky Testnet\n\n","title":"Layer 1 Networks","titles":["@tevm/common","API Reference","Supported Networks"]},"357":{"href":"/reference/common#layer-2-networks","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/arbitrum.md\">arbitrum</a> - Arbitrum One</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/optimism.md\">optimism</a> - Optimism</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/base.md\">base</a> - Base</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/zksync.md\">zksync</a> - zkSync Era</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/polygon.md\">polygon</a> - Polygon PoS</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/polygonZkEvm.md\">polygonZkEvm</a> - Polygon zkEVM</li>\n</ul>\n","isPage":false,"text":"\n\narbitrum - Arbitrum One\noptimism - Optimism\nbase - Base\nzksync - zkSync Era\npolygon - Polygon PoS\npolygonZkEvm - Polygon zkEVM\n\n","title":"Layer 2 Networks","titles":["@tevm/common","API Reference","Supported Networks"]},"358":{"href":"/reference/common#alternative-networks","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/bsc.md\">bsc</a> - BNB Smart Chain</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/avalanche.md\">avalanche</a> - Avalanche C-Chain</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/fantom.md\">fantom</a> - Fantom Opera</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/gnosis.md\">gnosis</a> - Gnosis Chain</li>\n</ul>\n","isPage":false,"text":"\n\nbsc - BNB Smart Chain\navalanche - Avalanche C-Chain\nfantom - Fantom Opera\ngnosis - Gnosis Chain\n\n","title":"Alternative Networks","titles":["@tevm/common","API Reference","Supported Networks"]},"359":{"href":"/reference/common#development-networks","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/hardhat.md\">hardhat</a> - Hardhat Network</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/foundry.md\">foundry</a> - Foundry Network</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/anvil.md\">anvil</a> - Anvil Network</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/variables/localhost.md\">localhost</a> - Local Network</li>\n</ul>\n","isPage":false,"text":"\n\nhardhat - Hardhat Network\nfoundry - Foundry Network\nanvil - Anvil Network\nlocalhost - Local Network\n\n","title":"Development Networks","titles":["@tevm/common","API Reference","Supported Networks"]},"360":{"href":"/reference/common#usage-examples","html":"\n","isPage":false,"text":"\n","title":"Usage Examples","titles":["@tevm/common"]},"361":{"href":"/reference/common#basic-configuration","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  ...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hardfork: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;shanghai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;@tevm/common&#x27;\n \nconst common = createCommon({\n  ...mainnet,\n  hardfork: &#x27;shanghai&#x27;\n})\n","title":"Basic Configuration","titles":["@tevm/common","Usage Examples"]},"362":{"href":"/reference/common#custom-chain-configuration","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Custom Chain&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1337</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  networkId: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1337</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  defaultHardfork: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;shanghai&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  consensus: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;poa&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    algorithm: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;clique&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    clique: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      period: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      epoch: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30000</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createCommon } from &#x27;@tevm/common&#x27;\n \nconst common = createCommon({\n  name: &#x27;Custom Chain&#x27;,\n  chainId: 1337,\n  networkId: 1337,\n  defaultHardfork: &#x27;shanghai&#x27;,\n  consensus: {\n    type: &#x27;poa&#x27;,\n    algorithm: &#x27;clique&#x27;,\n    clique: {\n      period: 15,\n      epoch: 30000\n    }\n  }\n})\n","title":"Custom Chain Configuration","titles":["@tevm/common","Usage Examples"]},"363":{"href":"/reference/common#using-with-custom-crypto","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon, createMockKzg } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  ...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  customCrypto: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    kzg: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createMockKzg</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createCommon, createMockKzg } from &#x27;@tevm/common&#x27;\n \nconst common = createCommon({\n  ...mainnet,\n  customCrypto: {\n    kzg: createMockKzg()\n  }\n})\n","title":"Using with Custom Crypto","titles":["@tevm/common","Usage Examples"]},"364":{"href":"/reference/common#network-specific-configuration","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon, optimism, arbitrum } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Optimism configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> optimismCommon</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  ...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">optimism,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hardfork: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;bedrock&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Arbitrum configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> arbitrumCommon</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  ...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">arbitrum,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hardfork: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;nitro&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createCommon, optimism, arbitrum } from &#x27;@tevm/common&#x27;\n \n// Optimism configuration\nconst optimismCommon = createCommon({\n  ...optimism,\n  hardfork: &#x27;bedrock&#x27;\n})\n \n// Arbitrum configuration\nconst arbitrumCommon = createCommon({\n  ...arbitrum,\n  hardfork: &#x27;nitro&#x27;\n})\n","title":"Network-Specific Configuration","titles":["@tevm/common","Usage Examples"]},"365":{"href":"/reference/common#error-handling","html":"\n<p>The package throws specific errors for invalid configurations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    chainId: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Invalid chain ID</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;INVALID_CHAIN_ID&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Invalid chain ID provided&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe package throws specific errors for invalid configurations:\ntry {\n  const common = createCommon({\n    chainId: -1 // Invalid chain ID\n  })\n} catch (error) {\n  if (error.code === &#x27;INVALID_CHAIN_ID&#x27;) {\n    console.error(&#x27;Invalid chain ID provided&#x27;)\n  }\n}\n","title":"Error Handling","titles":["@tevm/common"]},"366":{"href":"/reference/common#see-also","html":"\n<ul>\n<li><a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/common\">EthereumJS Common Documentation</a></li>\n<li><a href=\"https://viem.sh/docs/chains/introduction.html\">Viem Chains Documentation</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs/globals.md\">Full API Reference</a></li>\n</ul>","isPage":false,"text":"\n\nEthereumJS Common Documentation\nViem Chains Documentation\nFull API Reference\n","title":"See Also","titles":["@tevm/common"]},"367":{"href":"/reference/contract#tevmcontract","html":"</header>\n<p>The <code>@tevm/contract</code> package provides powerful utilities for working with Ethereum smart contracts, offering type-safe contract interactions and simplified deployment workflows.</p>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs\">evmts/tevm-monorepo/packages/contract/docs</a> folder.</p>\n</blockquote>\n","isPage":true,"text":"\nThe @tevm/contract package provides powerful utilities for working with Ethereum smart contracts, offering type-safe contract interactions and simplified deployment workflows.\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/contract/docs folder.\n\n","title":"@tevm/contract","titles":[]},"368":{"href":"/reference/contract#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/contract</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/contract\n","title":"Installation","titles":["@tevm/contract"]},"369":{"href":"/reference/contract#overview","html":"\n<p>The contract package provides:</p>\n<ul>\n<li>Type-safe contract interactions</li>\n<li>Support for human-readable and JSON ABIs</li>\n<li>Contract deployment utilities</li>\n<li>Read and write method handling</li>\n<li>Event filtering and subscription</li>\n<li>Pre-built contract templates (ERC20, ERC721)</li>\n</ul>\n","isPage":false,"text":"\nThe contract package provides:\n\nType-safe contract interactions\nSupport for human-readable and JSON ABIs\nContract deployment utilities\nRead and write method handling\nEvent filtering and subscription\nPre-built contract templates (ERC20, ERC721)\n\n","title":"Overview","titles":["@tevm/contract"]},"370":{"href":"/reference/contract#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/contract"]},"371":{"href":"/reference/contract#type-aliases","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/type-aliases/Contract.md\">Contract</a> - Core contract type definition</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/type-aliases/CreateContractFn.md\">CreateContractFn</a> - Contract creation function type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/type-aliases/CreateContractParams.md\">CreateContractParams</a> - Parameters for contract creation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/type-aliases/EventActionCreator.md\">EventActionCreator</a> - Event action creator type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/type-aliases/MaybeExtractEventArgsFromAbi.md\">MaybeExtractEventArgsFromAbi</a> - Event args extraction utility</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/type-aliases/ReadActionCreator.md\">ReadActionCreator</a> - Read action creator type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/type-aliases/ValueOf.md\">ValueOf</a> - Utility type for value extraction</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/type-aliases/WriteActionCreator.md\">WriteActionCreator</a> - Write action creator type</li>\n</ul>\n","isPage":false,"text":"\n\nContract - Core contract type definition\nCreateContractFn - Contract creation function type\nCreateContractParams - Parameters for contract creation\nEventActionCreator - Event action creator type\nMaybeExtractEventArgsFromAbi - Event args extraction utility\nReadActionCreator - Read action creator type\nValueOf - Utility type for value extraction\nWriteActionCreator - Write action creator type\n\n","title":"Type Aliases","titles":["@tevm/contract","API Reference"]},"372":{"href":"/reference/contract#functions","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/functions/createContract.md\">createContract</a> - Create a new contract instance</li>\n</ul>\n","isPage":false,"text":"\n\ncreateContract - Create a new contract instance\n\n","title":"Functions","titles":["@tevm/contract","API Reference"]},"373":{"href":"/reference/contract#pre-built-contracts","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/variables/ERC20.md\">ERC20</a> - Standard ERC20 token implementation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/variables/ERC721.md\">ERC721</a> - Standard ERC721 NFT implementation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/variables/SimpleContract.md\">SimpleContract</a> - Basic contract for testing</li>\n</ul>\n","isPage":false,"text":"\n\nERC20 - Standard ERC20 token implementation\nERC721 - Standard ERC721 NFT implementation\nSimpleContract - Basic contract for testing\n\n","title":"Pre-built Contracts","titles":["@tevm/contract","API Reference"]},"374":{"href":"/reference/contract#usage-examples","html":"\n","isPage":false,"text":"\n","title":"Usage Examples","titles":["@tevm/contract"]},"375":{"href":"/reference/contract#creating-a-contract-instance","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createContract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/contract&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Using human-readable ABI</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Use as const for type safety</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  humanReadableAbi: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;function balanceOf(address) view returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;MyToken&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Type-safe read actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> readAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Type-safe write actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> writeAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createContract } from &#x27;@tevm/contract&#x27;\n \n// Using human-readable ABI\nconst contract = createContract({\n  // Use as const for type safety\n  humanReadableAbi: [\n    &#x27;function balanceOf(address) view returns (uint256)&#x27;,\n    &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n    &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;,\n  ] as const,\n  name: &#x27;MyToken&#x27;,\n})\n \n// Type-safe read actions\nconst readAction = contract.read.balanceOf(&#x27;0x...&#x27;)\n \n// Type-safe write actions\nconst writeAction = contract.write.transfer(&#x27;0x...&#x27;, 1000n)\n","title":"Creating a Contract Instance","titles":["@tevm/contract","Usage Examples"]},"376":{"href":"/reference/contract#contract-with-address","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now includes address in all actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balanceAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// balanceAction.to will be set to the token address</span></span></code></pre>\n","isPage":false,"text":"\nconst token = contract.withAddress(&#x27;0x1234...&#x27;)\n \n// Now includes address in all actions\nconst balanceAction = token.read.balanceOf(&#x27;0x...&#x27;)\n// balanceAction.to will be set to the token address\n","title":"Contract with Address","titles":["@tevm/contract","Usage Examples"]},"377":{"href":"/reference/contract#using-standard-contracts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ERC20, ERC721 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/contract&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ERC20 token with all standard methods</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Read token info</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nameAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> symbolAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">symbol</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> supplyAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">totalSupply</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Transfer tokens</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transferAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ERC721 NFT contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nft</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ERC721</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ownerAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nft.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ownerOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nimport { ERC20, ERC721 } from &#x27;@tevm/contract&#x27;\n \n// ERC20 token with all standard methods\nconst token = ERC20.withAddress(&#x27;0x...&#x27;)\n \n// Read token info\nconst nameAction = token.read.name()\nconst symbolAction = token.read.symbol()\nconst supplyAction = token.read.totalSupply()\n \n// Transfer tokens\nconst transferAction = token.write.transfer(&#x27;0x...&#x27;, 1000n)\n \n// ERC721 NFT contract\nconst nft = ERC721.withAddress(&#x27;0x...&#x27;)\nconst ownerAction = nft.read.ownerOf(1n)\n","title":"Using Standard Contracts","titles":["@tevm/contract","Usage Examples"]},"378":{"href":"/reference/contract#deployless-scripts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ERC20 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/contract&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a script that deploys and initializes a token</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> script</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytecode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Contract bytecode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;MyToken&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;MTK&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Constructor args</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use with any compatible client</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(script.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> symbol</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(script.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">symbol</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nimport { ERC20 } from &#x27;@tevm/contract&#x27;\n \n// Create a script that deploys and initializes a token\nconst script = ERC20.script({\n  bytecode: &#x27;0x...&#x27;,  // Contract bytecode\n  args: [&#x27;MyToken&#x27;, &#x27;MTK&#x27;, 1000000n], // Constructor args\n})\n \n// Use with any compatible client\nconst name = await client.contract(script.read.name())\nconst symbol = await client.contract(script.read.symbol())\n","title":"Deployless Scripts","titles":["@tevm/contract","Usage Examples"]},"379":{"href":"/reference/contract#event-handling","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create event filter</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> filter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.events.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fromBlock: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process events</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">watchEvent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(filter, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">event</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    from: event.args.from,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: event.args.to,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: event.args.value,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Create event filter\nconst filter = contract.events.Transfer({\n  fromBlock: &#x27;latest&#x27;,\n})\n \n// Process events\nclient.watchEvent(filter, (event) =&gt; {\n  console.log(&#x27;Transfer:&#x27;, {\n    from: event.args.from,\n    to: event.args.to,\n    value: event.args.value,\n  })\n})\n","title":"Event Handling","titles":["@tevm/contract","Usage Examples"]},"380":{"href":"/reference/contract#best-practices","html":"\n","isPage":false,"text":"\n","title":"Best Practices","titles":["@tevm/contract"]},"381":{"href":"/reference/contract#1-type-safety","html":"\n<p>Always use <code>as const</code> with ABIs to get full type inference:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function example(uint256 value) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  humanReadableAbi: abi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Example&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// contract.write.example will have proper types</span></span></code></pre>\n","isPage":false,"text":"\nAlways use as const with ABIs to get full type inference:\nconst abi = [\n  &#x27;function example(uint256 value) returns (bool)&#x27;,\n] as const\n \nconst contract = createContract({\n  humanReadableAbi: abi,\n  name: &#x27;Example&#x27;,\n})\n// contract.write.example will have proper types\n","title":"1. Type Safety","titles":["@tevm/contract","Best Practices"]},"382":{"href":"/reference/contract#2-error-handling","html":"\n<p>Handle contract errors appropriately:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (e) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (e.message.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">includes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;insufficient balance&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Handle specific error case</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  throw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> e</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle contract errors appropriately:\ntry {\n  const result = await client.contract(contract.write.transfer(&#x27;0x...&#x27;, 1000n))\n} catch (e) {\n  if (e.message.includes(&#x27;insufficient balance&#x27;)) {\n    // Handle specific error case\n  }\n  throw e\n}\n","title":"2. Error Handling","titles":["@tevm/contract","Best Practices"]},"383":{"href":"/reference/contract#3-gas-management","html":"\n<p>Consider gas costs in write operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">complexOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">500000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set gas limit</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxFeePerGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set max fee</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nConsider gas costs in write operations:\nconst tx = contract.write.complexOperation(&#x27;0x...&#x27;, {\n  gas: 500000n,  // Set gas limit\n  maxFeePerGas: 30000000000n,  // Set max fee\n})\n","title":"3. Gas Management","titles":["@tevm/contract","Best Practices"]},"384":{"href":"/reference/contract#contract-types","html":"\n<p>The package exports useful types for contract development:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Contract,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  CreateContractFn,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  CreateContractParams,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  EventActionCreator,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ReadActionCreator,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  WriteActionCreator,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/contract&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use with your own contracts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> myAbi&gt;</span></span></code></pre>\n","isPage":false,"text":"\nThe package exports useful types for contract development:\nimport type {\n  Contract,\n  CreateContractFn,\n  CreateContractParams,\n  EventActionCreator,\n  ReadActionCreator,\n  WriteActionCreator,\n} from &#x27;@tevm/contract&#x27;\n \n// Use with your own contracts\ntype MyContract = Contract&lt;typeof myAbi&gt;\n","title":"Contract Types","titles":["@tevm/contract"]},"385":{"href":"/reference/contract#see-also","html":"\n<ul>\n<li><a href=\"https://ethereum.org/en/developers/docs/standards/tokens/erc-20/\">ERC-20 Token Standard</a></li>\n<li><a href=\"https://ethereum.org/en/developers/docs/standards/tokens/erc-721/\">ERC-721 NFT Standard</a></li>\n<li><a href=\"https://docs.soliditylang.org/\">Solidity Documentation</a></li>\n<li><a href=\"https://docs.openzeppelin.com/contracts/\">OpenZeppelin Contracts</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs/globals.md\">Full API Reference</a></li>\n</ul>","isPage":false,"text":"\n\nERC-20 Token Standard\nERC-721 NFT Standard\nSolidity Documentation\nOpenZeppelin Contracts\nFull API Reference\n","title":"See Also","titles":["@tevm/contract"]},"386":{"href":"/reference/decorators#tevmdecorators","html":"</header>\n<p>The <code>@tevm/decorators</code> package provides action decorators and utilities for extending Tevm clients with additional functionality. It includes EIP-1193 compatible providers, Ethereum JSON-RPC methods, and Tevm-specific actions.</p>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/decorators/docs\">evmts/tevm-monorepo/packages/decorators/docs</a> folder.</p>\n</blockquote>\n","isPage":true,"text":"\nThe @tevm/decorators package provides action decorators and utilities for extending Tevm clients with additional functionality. It includes EIP-1193 compatible providers, Ethereum JSON-RPC methods, and Tevm-specific actions.\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/decorators/docs folder.\n\n","title":"@tevm/decorators","titles":[]},"387":{"href":"/reference/decorators#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/decorators</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/decorators\n","title":"Installation","titles":["@tevm/decorators"]},"388":{"href":"/reference/decorators#overview","html":"\n<p>The <code>@tevm/decorators</code> package provides:</p>\n<ul>\n<li>EIP-1193 compatible provider decorators</li>\n<li>Ethereum JSON-RPC method implementations</li>\n<li>Tevm-specific action decorators</li>\n<li>Type-safe request and response handling</li>\n<li>Chain and network utilities</li>\n</ul>\n","isPage":false,"text":"\nThe @tevm/decorators package provides:\n\nEIP-1193 compatible provider decorators\nEthereum JSON-RPC method implementations\nTevm-specific action decorators\nType-safe request and response handling\nChain and network utilities\n\n","title":"Overview","titles":["@tevm/decorators"]},"389":{"href":"/reference/decorators#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/decorators"]},"390":{"href":"/reference/decorators#core-functions","html":"\n","isPage":false,"text":"\n","title":"Core Functions","titles":["@tevm/decorators","API Reference"]},"391":{"href":"/reference/decorators#core-types","html":"\n","isPage":false,"text":"\n","title":"Core Types","titles":["@tevm/decorators","API Reference"]},"392":{"href":"/reference/decorators#provider-types","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/decorators/docs/type-aliases/Eip1193RequestProvider.md\"><code>Eip1193RequestProvider</code></a> - EIP-1193 compatible provider interface</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/decorators/docs/type-aliases/EIP1193Parameters.md\"><code>EIP1193Parameters</code></a> - Parameters for EIP-1193 requests</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/decorators/docs/type-aliases/EIP1193RequestFn.md\"><code>EIP1193RequestFn</code></a> - Request function type for EIP-1193</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/decorators/docs/type-aliases/EIP1193RequestOptions.md\"><code>EIP1193RequestOptions</code></a> - Options for EIP-1193 requests</li>\n</ul>\n","isPage":false,"text":"\n\nEip1193RequestProvider - EIP-1193 compatible provider interface\nEIP1193Parameters - Parameters for EIP-1193 requests\nEIP1193RequestFn - Request function type for EIP-1193\nEIP1193RequestOptions - Options for EIP-1193 requests\n\n","title":"Provider Types","titles":["@tevm/decorators","API Reference","Core Types"]},"393":{"href":"/reference/decorators#action-types","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/EthActionsApi.md\"><code>EthActionsApi</code></a> - Standard Ethereum JSON-RPC actions</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/TevmActionsApi.md\"><code>TevmActionsApi</code></a> - Tevm-specific actions</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/TevmSendApi.md\"><code>TevmSendApi</code></a> - API for sending Tevm requests</li>\n</ul>\n","isPage":false,"text":"\n\nEthActionsApi - Standard Ethereum JSON-RPC actions\nTevmActionsApi - Tevm-specific actions\nTevmSendApi - API for sending Tevm requests\n\n","title":"Action Types","titles":["@tevm/decorators","API Reference","Core Types"]},"394":{"href":"/reference/decorators#rpc-schema-types","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/RpcSchema.md\"><code>RpcSchema</code></a> - Base RPC schema type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/RpcSchemaOverride.md\"><code>RpcSchemaOverride</code></a> - Schema override type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/DerivedRpcSchema.md\"><code>DerivedRpcSchema</code></a> - Derived schema type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/JsonRpcSchemaPublic.md\"><code>JsonRpcSchemaPublic</code></a> - Public JSON-RPC schema</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/JsonRpcSchemaTevm.md\"><code>JsonRpcSchemaTevm</code></a> - Tevm-specific JSON-RPC schema</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/JsonRpcSchemaWallet.md\"><code>JsonRpcSchemaWallet</code></a> - Wallet JSON-RPC schema</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/TestRpcSchema.md\"><code>TestRpcSchema</code></a> - Test-specific RPC schema</li>\n</ul>\n","isPage":false,"text":"\n\nRpcSchema - Base RPC schema type\nRpcSchemaOverride - Schema override type\nDerivedRpcSchema - Derived schema type\nJsonRpcSchemaPublic - Public JSON-RPC schema\nJsonRpcSchemaTevm - Tevm-specific JSON-RPC schema\nJsonRpcSchemaWallet - Wallet JSON-RPC schema\nTestRpcSchema - Test-specific RPC schema\n\n","title":"RPC Schema Types","titles":["@tevm/decorators","API Reference","Core Types"]},"395":{"href":"/reference/decorators#ethereum-types","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/AddEthereumChainParameter.md\"><code>AddEthereumChainParameter</code></a> - Parameters for adding a chain</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/WatchAssetParams.md\"><code>WatchAssetParams</code></a> - Parameters for watching assets</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/WalletPermission.md\"><code>WalletPermission</code></a> - Wallet permission type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/WalletPermissionCaveat.md\"><code>WalletPermissionCaveat</code></a> - Wallet permission caveat type</li>\n</ul>\n","isPage":false,"text":"\n\nAddEthereumChainParameter - Parameters for adding a chain\nWatchAssetParams - Parameters for watching assets\nWalletPermission - Wallet permission type\nWalletPermissionCaveat - Wallet permission caveat type\n\n","title":"Ethereum Types","titles":["@tevm/decorators","API Reference","Core Types"]},"396":{"href":"/reference/decorators#utility-types","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/Hash.md\"><code>Hash</code></a> - Ethereum hash type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/LogTopic.md\"><code>LogTopic</code></a> - Log topic type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/NetworkSync.md\"><code>NetworkSync</code></a> - Network sync status type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/decorators/docs/type-aliases/Quantity.md\"><code>Quantity</code></a> - Ethereum quantity type</li>\n</ul>\n","isPage":false,"text":"\n\nHash - Ethereum hash type\nLogTopic - Log topic type\nNetworkSync - Network sync status type\nQuantity - Ethereum quantity type\n\n","title":"Utility Types","titles":["@tevm/decorators","API Reference","Core Types"]},"397":{"href":"/reference/decorators#usage-examples","html":"\n","isPage":false,"text":"\n","title":"Usage Examples","titles":["@tevm/decorators"]},"398":{"href":"/reference/decorators#creating-an-eip-1193-provider","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transport: provider</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Make EIP-1193 requests</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_call&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { requestEip1193 } from &#x27;@tevm/decorators&#x27;\n \nconst provider = requestEip1193()\nconst client = createClient({\n  transport: provider\n})\n \n// Make EIP-1193 requests\nconst result = await client.request({\n  method: &#x27;eth_call&#x27;,\n  params: [{\n    to: &#x27;0x...&#x27;,\n    data: &#x27;0x...&#x27;\n  }]\n})\n","title":"Creating an EIP-1193 Provider","titles":["@tevm/decorators","Usage Examples"]},"399":{"href":"/reference/decorators#using-ethereum-actions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ethActions } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> eth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ethActions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transport: eth</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use standard Ethereum methods</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.eth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.eth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { ethActions } from &#x27;@tevm/decorators&#x27;\n \nconst eth = ethActions()\nconst client = createClient({\n  transport: eth\n})\n \n// Use standard Ethereum methods\nconst balance = await client.eth.getBalance({\n  address: &#x27;0x...&#x27;\n})\n \nconst code = await client.eth.getCode({\n  address: &#x27;0x...&#x27;\n})\n","title":"Using Ethereum Actions","titles":["@tevm/decorators","Usage Examples"]},"400":{"href":"/reference/decorators#using-tevm-actions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmActions } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tevm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmActions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transport: tevm</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use Tevm-specific actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.tevm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> state</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.tevm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dumpState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nimport { tevmActions } from &#x27;@tevm/decorators&#x27;\n \nconst tevm = tevmActions()\nconst client = createClient({\n  transport: tevm\n})\n \n// Use Tevm-specific actions\nconst result = await client.tevm.call({\n  to: &#x27;0x...&#x27;,\n  data: &#x27;0x...&#x27;\n})\n \nconst state = await client.tevm.dumpState()\n","title":"Using Tevm Actions","titles":["@tevm/decorators","Usage Examples"]},"401":{"href":"/reference/decorators#error-handling","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_call&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    params: [{</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> -</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Handle execution error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  throw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntry {\n  const result = await client.request({\n    method: &#x27;eth_call&#x27;,\n    params: [{\n      to: &#x27;0x...&#x27;,\n      data: &#x27;0x...&#x27;\n    }]\n  })\n} catch (error) {\n  if (error.code === -32000) {\n    // Handle execution error\n  }\n  throw error\n}\n","title":"Error Handling","titles":["@tevm/decorators","Usage Examples"]},"402":{"href":"/reference/decorators#best-practices","html":"\n","isPage":false,"text":"\n","title":"Best Practices","titles":["@tevm/decorators"]},"403":{"href":"/reference/decorators#1-type-safety","html":"\n<p>Always leverage TypeScript types for request parameters and responses:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { EIP1193RequestFn } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> request</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EIP1193RequestFn</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">params</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Type-safe parameters and return value</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nAlways leverage TypeScript types for request parameters and responses:\nimport type { EIP1193RequestFn } from &#x27;@tevm/decorators&#x27;\n \nconst request: EIP1193RequestFn = async (params) =&gt; {\n  // Type-safe parameters and return value\n}\n","title":"1. Type Safety","titles":["@tevm/decorators","Best Practices"]},"404":{"href":"/reference/decorators#2-error-handling","html":"\n<p>Handle both standard JSON-RPC errors and Tevm-specific errors:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 4001</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // User rejected request</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> -</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Execution error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle both standard JSON-RPC errors and Tevm-specific errors:\ntry {\n  await client.request(...)\n} catch (error) {\n  if (error.code === 4001) {\n    // User rejected request\n  } else if (error.code === -32000) {\n    // Execution error\n  }\n}\n","title":"2. Error Handling","titles":["@tevm/decorators","Best Practices"]},"405":{"href":"/reference/decorators#3-chain-management","html":"\n<p>Use proper chain parameters when adding new chains:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chainParams</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AddEthereumChainParameter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainId: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chainName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Ethereum Mainnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nativeCurrency: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Ether&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    symbol: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;ETH&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    decimals: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">18</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  rpcUrls: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nUse proper chain parameters when adding new chains:\nconst chainParams: AddEthereumChainParameter = {\n  chainId: &#x27;0x1&#x27;,\n  chainName: &#x27;Ethereum Mainnet&#x27;,\n  nativeCurrency: {\n    name: &#x27;Ether&#x27;,\n    symbol: &#x27;ETH&#x27;,\n    decimals: 18\n  },\n  rpcUrls: [&#x27;https://...&#x27;]\n}\n","title":"3. Chain Management","titles":["@tevm/decorators","Best Practices"]},"406":{"href":"/reference/decorators#see-also","html":"\n<ul>\n<li><a href=\"/api/json-rpc\">JSON-RPC API</a></li>\n<li><a href=\"/reference/actions\">Actions Guide</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-1193\">EIP-1193 Specification</a></li>\n<li><a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/\">Ethereum JSON-RPC</a></li>\n</ul>","isPage":false,"text":"\n\nJSON-RPC API\nActions Guide\nEIP-1193 Specification\nEthereum JSON-RPC\n","title":"See Also","titles":["@tevm/decorators"]},"407":{"href":"/reference/evm#tevmevm","html":"</header>\n<p>The <code>@tevm/evm</code> package provides a custom implementation of the Ethereum Virtual Machine (EVM), extending the functionality of <code>ethereumjs/evm</code>. It&#x27;s responsible for executing Ethereum bytecode and managing the execution environment.</p>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs\">evmts/tevm-monorepo/packages/evm/docs</a> folder.</p>\n</blockquote>\n","isPage":true,"text":"\nThe @tevm/evm package provides a custom implementation of the Ethereum Virtual Machine (EVM), extending the functionality of ethereumjs/evm. It&#x27;s responsible for executing Ethereum bytecode and managing the execution environment.\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/evm/docs folder.\n\n","title":"@tevm/evm","titles":[]},"408":{"href":"/reference/evm#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/evm</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/evm\n","title":"Installation","titles":["@tevm/evm"]},"409":{"href":"/reference/evm#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/evm"]},"410":{"href":"/reference/evm#enumerations","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/enumerations/EvmErrorMessage.md\">EvmErrorMessage</a> - EVM error message types</li>\n</ul>\n","isPage":false,"text":"\n\nEvmErrorMessage - EVM error message types\n\n","title":"Enumerations","titles":["@tevm/evm","API Reference"]},"411":{"href":"/reference/evm#core-classes","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/classes/Evm.md\">Evm</a> - Main EVM implementation class</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/classes/EthjsMessage.md\">EthjsMessage</a> - EVM message handling</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/classes/EvmError.md\">EvmError</a> - EVM error handling</li>\n</ul>\n","isPage":false,"text":"\n\nEvm - Main EVM implementation class\nEthjsMessage - EVM message handling\nEvmError - EVM error handling\n\n","title":"Core Classes","titles":["@tevm/evm","API Reference"]},"412":{"href":"/reference/evm#interfaces","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/interfaces/EvmResult.md\">EvmResult</a> - Result of EVM execution</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/interfaces/EvmRunCallOpts.md\">EvmRunCallOpts</a> - Options for running calls</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/interfaces/ExecResult.md\">ExecResult</a> - Execution result details</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/interfaces/InterpreterStep.md\">InterpreterStep</a> - Interpreter step information</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/interfaces/PrecompileInput.md\">PrecompileInput</a> - Input for precompiles</li>\n</ul>\n","isPage":false,"text":"\n\nEvmResult - Result of EVM execution\nEvmRunCallOpts - Options for running calls\nExecResult - Execution result details\nInterpreterStep - Interpreter step information\nPrecompileInput - Input for precompiles\n\n","title":"Interfaces","titles":["@tevm/evm","API Reference"]},"413":{"href":"/reference/evm#type-aliases","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/type-aliases/CreateEvmOptions.md\">CreateEvmOptions</a> - Options for creating an EVM</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/type-aliases/CustomPrecompile.md\">CustomPrecompile</a> - Custom precompile definition</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/type-aliases/EVMOpts.md\">EVMOpts</a> - EVM configuration options</li>\n</ul>\n","isPage":false,"text":"\n\nCreateEvmOptions - Options for creating an EVM\nCustomPrecompile - Custom precompile definition\nEVMOpts - EVM configuration options\n\n","title":"Type Aliases","titles":["@tevm/evm","API Reference"]},"414":{"href":"/reference/evm#variables","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/variables/Eof.md\">Eof</a> - EOF-related constants</li>\n</ul>\n","isPage":false,"text":"\n\nEof - EOF-related constants\n\n","title":"Variables","titles":["@tevm/evm","API Reference"]},"415":{"href":"/reference/evm#functions","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/functions/createEvm.md\">createEvm</a> - Create a new EVM instance</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/functions/getActivePrecompiles.md\">getActivePrecompiles</a> - Get active precompiles</li>\n</ul>\n","isPage":false,"text":"\n\ncreateEvm - Create a new EVM instance\ngetActivePrecompiles - Get active precompiles\n\n","title":"Functions","titles":["@tevm/evm","API Reference"]},"416":{"href":"/reference/evm#usage-examples","html":"\n","isPage":false,"text":"\n","title":"Usage Examples","titles":["@tevm/evm"]},"417":{"href":"/reference/evm#creating-an-evm-instance","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createEvm } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/evm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createStateManager } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/state&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createChain } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/chain&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> evm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEvm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: mainnet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  stateManager: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createStateManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blockchain: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ common: mainnet }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  customPrecompiles: [], </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Optional custom precompiles</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  profiler: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Enable/disable profiling</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  loggingLevel: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;warn&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Logging configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createEvm } from &#x27;@tevm/evm&#x27;\nimport { mainnet } from &#x27;@tevm/common&#x27;\nimport { createStateManager } from &#x27;@tevm/state&#x27;\nimport { createChain } from &#x27;@tevm/chain&#x27;\n \nconst evm = await createEvm({\n  common: mainnet,\n  stateManager: createStateManager({}),\n  blockchain: await createChain({ common: mainnet }),\n  customPrecompiles: [], // Optional custom precompiles\n  profiler: false, // Enable/disable profiling\n  loggingLevel: &#x27;warn&#x27;, // Logging configuration\n})\n","title":"Creating an EVM Instance","titles":["@tevm/evm","Usage Examples"]},"418":{"href":"/reference/evm#running-evm-calls","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  caller: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x5678...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* bytecode */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.returnValue)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.executionGasUsed)</span></span></code></pre>\n","isPage":false,"text":"\nconst result = await evm.runCall({\n  to: &#x27;0x1234...&#x27;,\n  caller: &#x27;0x5678...&#x27;,\n  data: new Uint8Array([/* bytecode */]),\n  value: 1000n,\n  gasLimit: 100000n\n})\n \nconsole.log(result.execResult.returnValue)\nconsole.log(result.execResult.executionGasUsed)\n","title":"Running EVM Calls","titles":["@tevm/evm","Usage Examples"]},"419":{"href":"/reference/evm#custom-precompiles","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { definePrecompile, defineCall, createContract, parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/evm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> MyContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2424</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;function addTwo(uint256) returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> customPrecompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: MyContract,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  call: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">defineCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MyContract.abi, {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    addTwo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">args</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        returnValue: args[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        executionGasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addCustomPrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(customPrecompile.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">precompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nimport { definePrecompile, defineCall, createContract, parseAbi } from &#x27;@tevm/evm&#x27;\nimport { createAddress } from &#x27;@tevm/utils&#x27;\n \nconst MyContract = createContract({\n  address: createAddress(2424).toString(),\n  abi: parseAbi([\n    &#x27;function addTwo(uint256) returns (uint256)&#x27;,\n  ])\n})\n \nconst customPrecompile = definePrecompile({\n  contract: MyContract,\n  call: defineCall(MyContract.abi, {\n    addTwo: async ({ args }) =&gt; {\n      return {\n        returnValue: args[0] + 5n,\n        executionGasUsed: 0n\n      }\n    }\n  })\n})\n \nevm.addCustomPrecompile(customPrecompile.precompile())\n","title":"Custom Precompiles","titles":["@tevm/evm","Usage Examples"]},"420":{"href":"/reference/evm#error-handling","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Very low gas limit</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">instanceof</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EvmError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(error.error) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// e.g. EvmErrorMessage.OUT_OF_GAS</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntry {\n  const result = await evm.runCall({\n    to: &#x27;0x1234...&#x27;,\n    gasLimit: 100n // Very low gas limit\n  })\n} catch (error) {\n  if (error instanceof EvmError) {\n    console.log(error.error) // e.g. EvmErrorMessage.OUT_OF_GAS\n  }\n}\n","title":"Error Handling","titles":["@tevm/evm","Usage Examples"]},"421":{"href":"/reference/evm#debugging-and-performance","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Enable debug logging</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> evm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEvm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  loggingLevel: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;trace&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get performance logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logs.opcodes) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Opcode execution stats</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logs.precompiles) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Precompile execution stats</span></span></code></pre>\n","isPage":false,"text":"\n// Enable debug logging\nconst evm = await createEvm({\n  loggingLevel: &#x27;trace&#x27;\n})\n \n// Get performance logs\nconst logs = evm.getPerformanceLogs()\nconsole.log(logs.opcodes) // Opcode execution stats\nconsole.log(logs.precompiles) // Precompile execution stats\n","title":"Debugging and Performance","titles":["@tevm/evm","Usage Examples"]},"422":{"href":"/reference/evm#see-also","html":"\n<ul>\n<li><a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/evm\">EthereumJS EVM Documentation</a></li>\n<li><a href=\"https://tevm.sh/reference/tevm/state/\">Tevm State Documentation</a></li>\n<li><a href=\"https://tevm.sh/reference/tevm/precompiles/\">Tevm Precompiles Documentation</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs/globals.md\">Full API Reference</a></li>\n</ul>","isPage":false,"text":"\n\nEthereumJS EVM Documentation\nTevm State Documentation\nTevm Precompiles Documentation\nFull API Reference\n","title":"See Also","titles":["@tevm/evm"]},"423":{"href":"/reference#package-reference-documentation","html":"</header>\n<p>This section contains detailed API reference documentation for all Tevm packages.</p>\n<ul>\n<li><a href=\"/reference/actions\">@tevm/actions</a> - Core action handlers for interacting with the EVM</li>\n<li><a href=\"/reference/address\">@tevm/address</a> - Ethereum address utilities</li>\n<li><a href=\"/reference/block\">@tevm/block</a> - Block creation and manipulation</li>\n<li><a href=\"/reference/blockchain\">@tevm/blockchain</a> - Blockchain data structures and utilities</li>\n<li><a href=\"/reference/common\">@tevm/common</a> - Shared utilities and constants</li>\n<li><a href=\"/reference/contract\">@tevm/contract</a> - Library for using contracts in typesafe way</li>\n<li><a href=\"/reference/decorators\">@tevm/decorators</a> - Extension decorators</li>\n<li><a href=\"/reference/evm\">@tevm/evm</a> - Core EVM implementation</li>\n<li><a href=\"/reference/memory-client\">@tevm/memory-client</a> - Batteries included viem client along with tree shakable actions</li>\n<li><a href=\"/reference/receipt-manager\">@tevm/receipt-manager</a> - Transaction receipt handling</li>\n<li><a href=\"/reference/state\">@tevm/state</a> - State management utilities</li>\n<li><a href=\"/reference/tx\">@tevm/tx</a> - Transaction handling utilities</li>\n<li><a href=\"/reference/txpool\">@tevm/txpool</a> - Transaction pool management</li>\n<li><a href=\"/reference/utils\">@tevm/utils</a> - General utility functions</li>\n<li><a href=\"/reference/vm\">@tevm/vm</a> - Virtual Machine implementation</li>\n</ul>\n<p>Each package&#x27;s documentation includes:</p>\n<ul>\n<li>Complete API reference</li>\n<li>Type definitions</li>\n<li>Usage examples</li>\n<li>Configuration options</li>\n</ul>","isPage":true,"text":"\nThis section contains detailed API reference documentation for all Tevm packages.\n\n@tevm/actions - Core action handlers for interacting with the EVM\n@tevm/address - Ethereum address utilities\n@tevm/block - Block creation and manipulation\n@tevm/blockchain - Blockchain data structures and utilities\n@tevm/common - Shared utilities and constants\n@tevm/contract - Library for using contracts in typesafe way\n@tevm/decorators - Extension decorators\n@tevm/evm - Core EVM implementation\n@tevm/memory-client - Batteries included viem client along with tree shakable actions\n@tevm/receipt-manager - Transaction receipt handling\n@tevm/state - State management utilities\n@tevm/tx - Transaction handling utilities\n@tevm/txpool - Transaction pool management\n@tevm/utils - General utility functions\n@tevm/vm - Virtual Machine implementation\n\nEach package&#x27;s documentation includes:\n\nComplete API reference\nType definitions\nUsage examples\nConfiguration options\n","title":"Package Reference Documentation","titles":[]},"424":{"href":"/reference/memory-client#tevmmemory-client","html":"</header>\n<p>The <code>@tevm/memory-client</code> package provides a powerful in-memory Ethereum client implementation for Tevm. It combines the capabilities of viem with Tevm&#x27;s custom EVM implementation to offer a complete testing and development environment.</p>\n","isPage":true,"text":"\nThe @tevm/memory-client package provides a powerful in-memory Ethereum client implementation for Tevm. It combines the capabilities of viem with Tevm&#x27;s custom EVM implementation to offer a complete testing and development environment.\n","title":"@tevm/memory-client","titles":[]},"425":{"href":"/reference/memory-client#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/memory-client</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/memory-client\n","title":"Installation","titles":["@tevm/memory-client"]},"426":{"href":"/reference/memory-client#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/memory-client"]},"427":{"href":"/reference/memory-client#type-aliases","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/type-aliases/CreateMemoryClientFn.md\">CreateMemoryClientFn</a> - Function type for creating memory clients</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/type-aliases/MemoryClient.md\">MemoryClient</a> - Core memory client type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/type-aliases/MemoryClientOptions.md\">MemoryClientOptions</a> - Configuration options</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/type-aliases/TevmActions.md\">TevmActions</a> - Tevm-specific actions</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/type-aliases/TevmContract.md\">TevmContract</a> - Contract interaction type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/type-aliases/TevmRpcSchema.md\">TevmRpcSchema</a> - RPC schema definition</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/type-aliases/TevmTransport.md\">TevmTransport</a> - Transport layer type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/type-aliases/TevmViemActionsApi.md\">TevmViemActionsApi</a> - Viem actions API</li>\n</ul>\n","isPage":false,"text":"\n\nCreateMemoryClientFn - Function type for creating memory clients\nMemoryClient - Core memory client type\nMemoryClientOptions - Configuration options\nTevmActions - Tevm-specific actions\nTevmContract - Contract interaction type\nTevmRpcSchema - RPC schema definition\nTevmTransport - Transport layer type\nTevmViemActionsApi - Viem actions API\n\n","title":"Type Aliases","titles":["@tevm/memory-client","API Reference"]},"428":{"href":"/reference/memory-client#actions","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/createClient.md\">createClient</a> - Create a new client instance</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/createMemoryClient.md\">createMemoryClient</a> - Create a memory client</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/createTevmTransport.md\">createTevmTransport</a> - Create transport layer</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/publicActions.md\">publicActions</a> - Public action creators</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/testActions.md\">testActions</a> - Test action creators</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/tevmCall.md\">tevmCall</a> - Execute EVM call</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/tevmContract.md\">tevmContract</a> - Contract interaction</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/tevmDeploy.md\">tevmDeploy</a> - Deploy contract</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/tevmDumpState.md\">tevmDumpState</a> - Export state</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/tevmGetAccount.md\">tevmGetAccount</a> - Get account state</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/tevmLoadState.md\">tevmLoadState</a> - Import state</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/tevmMine.md\">tevmMine</a> - Mine blocks</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/tevmReady.md\">tevmReady</a> - Check client readiness</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/tevmSetAccount.md\">tevmSetAccount</a> - Set account state</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/tevmViemActions.md\">tevmViemActions</a> - Viem action creators</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs/functions/walletActions.md\">walletActions</a> - Wallet action creators</li>\n</ul>\n","isPage":false,"text":"\n\ncreateClient - Create a new client instance\ncreateMemoryClient - Create a memory client\ncreateTevmTransport - Create transport layer\npublicActions - Public action creators\ntestActions - Test action creators\ntevmCall - Execute EVM call\ntevmContract - Contract interaction\ntevmDeploy - Deploy contract\ntevmDumpState - Export state\ntevmGetAccount - Get account state\ntevmLoadState - Import state\ntevmMine - Mine blocks\ntevmReady - Check client readiness\ntevmSetAccount - Set account state\ntevmViemActions - Viem action creators\nwalletActions - Wallet action creators\n\n","title":"Actions","titles":["@tevm/memory-client","API Reference"]},"429":{"href":"/reference/memory-client#overview","html":"\n<p>The memory client package provides:</p>\n<ul>\n<li>A complete in-memory Ethereum client implementation</li>\n<li>Support for forking existing networks</li>\n<li>Automatic and manual mining modes</li>\n<li>Full compatibility with viem&#x27;s actions</li>\n<li>Extended functionality through Tevm-specific actions</li>\n</ul>\n","isPage":false,"text":"\nThe memory client package provides:\n\nA complete in-memory Ethereum client implementation\nSupport for forking existing networks\nAutomatic and manual mining modes\nFull compatibility with viem&#x27;s actions\nExtended functionality through Tevm-specific actions\n\n","title":"Overview","titles":["@tevm/memory-client"]},"430":{"href":"/reference/memory-client#core-components","html":"\n","isPage":false,"text":"\n","title":"Core Components","titles":["@tevm/memory-client"]},"431":{"href":"/reference/memory-client#memoryclient","html":"\n<p>The main client class that provides Ethereum client functionality with in-memory state management.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/memory-client&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://mainnet.optimism.io&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe main client class that provides Ethereum client functionality with in-memory state management.\nimport { createMemoryClient } from &#x27;@tevm/memory-client&#x27;\n \nconst client = createMemoryClient({\n  fork: {\n    transport: http(&quot;https://mainnet.optimism.io&quot;)\n  }\n})\n","title":"MemoryClient","titles":["@tevm/memory-client","Core Components"]},"432":{"href":"/reference/memory-client#client-options","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MemoryClientOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TAccountOrAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TRpcSchema</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt; {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Chain configuration</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TCommon</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Fork configuration</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  fork</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    transport</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Transport</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    blockTag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Client configuration</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TAccountOrAddress</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  pollingInterval</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  cacheTime</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ninterface MemoryClientOptions&lt;TCommon, TAccountOrAddress, TRpcSchema&gt; {\n  // Chain configuration\n  common?: TCommon\n  // Fork configuration\n  fork?: {\n    transport: Transport\n    blockTag?: string | number\n  }\n  // Client configuration\n  name?: string\n  account?: TAccountOrAddress\n  pollingInterval?: number\n  cacheTime?: number\n}\n","title":"Client Options","titles":["@tevm/memory-client","Core Components"]},"433":{"href":"/reference/memory-client#features","html":"\n","isPage":false,"text":"\n","title":"Features","titles":["@tevm/memory-client"]},"434":{"href":"/reference/memory-client#mining-modes","html":"\n<p>The client supports two mining modes:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Auto mining (default)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Manual mining</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  mining: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;manual&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine blocks manually</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nThe client supports two mining modes:\n// Auto mining (default)\nconst client = createMemoryClient()\n \n// Manual mining\nconst client = createMemoryClient({\n  mining: {\n    mode: &#x27;manual&#x27;\n  }\n})\n \n// Mine blocks manually\nawait client.mine()\n","title":"Mining Modes","titles":["@tevm/memory-client","Features"]},"435":{"href":"/reference/memory-client#network-forking","html":"\n<p>Fork any EVM-compatible network:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient, http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/memory-client&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { optimism } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;https://mainnet.optimism.io&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xa6a63cd70fbbe396321ca6fe79e1b6735760c03538208b50d7e3a5dac5226435&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: optimism</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFork any EVM-compatible network:\nimport { createMemoryClient, http } from &#x27;@tevm/memory-client&#x27;\nimport { optimism } from &#x27;@tevm/common&#x27;\n \nconst client = createMemoryClient({\n  fork: {\n    transport: http(&quot;https://mainnet.optimism.io&quot;),\n    blockTag: &#x27;0xa6a63cd70fbbe396321ca6fe79e1b6735760c03538208b50d7e3a5dac5226435&#x27;\n  },\n  common: optimism\n})\n","title":"Network Forking","titles":["@tevm/memory-client","Features"]},"436":{"href":"/reference/memory-client#state-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  deployedBytecode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  state: {</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  returnStorage: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Set account state\nawait client.setAccount({\n  address: &#x27;0x...&#x27;,\n  balance: 100n,\n  nonce: 1n,\n  deployedBytecode: &#x27;0x...&#x27;,\n  state: {\n    &#x27;0x...&#x27;: &#x27;0x...&#x27;\n  }\n})\n \n// Get account state\nconst account = await client.getAccount({\n  address: &#x27;0x...&#x27;,\n  returnStorage: true\n})\n","title":"State Management","titles":["@tevm/memory-client","Features"]},"437":{"href":"/reference/memory-client#contract-interactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deployResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">tevmDeploy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: contractAbi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytecode: contractBytecode,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Constructor&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Args&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Call contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">tevmCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Contract interaction with high-level API</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">tevmContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: myContract,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;myMethod&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [arg1, arg2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Deploy contract\nconst deployResult = await client.tevmDeploy({\n  abi: contractAbi,\n  bytecode: contractBytecode,\n  args: [&#x27;Constructor&#x27;, &#x27;Args&#x27;]\n})\n \n// Call contract\nconst result = await client.tevmCall({\n  to: contractAddress,\n  data: encodeFunctionData(...)\n})\n \n// Contract interaction with high-level API\nconst contractResult = await client.tevmContract({\n  contract: myContract,\n  method: &#x27;myMethod&#x27;,\n  args: [arg1, arg2]\n})\n","title":"Contract Interactions","titles":["@tevm/memory-client","Features"]},"438":{"href":"/reference/memory-client#transaction-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: contractAbi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  functionName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;myFunction&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [arg1, arg2]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait for receipt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">waitForTransactionReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ hash })</span></span></code></pre>\n","isPage":false,"text":"\n// Send transaction\nconst hash = await client.writeContract({\n  address: contractAddress,\n  abi: contractAbi,\n  functionName: &#x27;myFunction&#x27;,\n  args: [arg1, arg2]\n})\n \n// Wait for receipt\nconst receipt = await client.waitForTransactionReceipt({ hash })\n","title":"Transaction Management","titles":["@tevm/memory-client","Features"]},"439":{"href":"/reference/memory-client#actions-api","html":"\n<p>The client includes several sets of actions:</p>\n","isPage":false,"text":"\nThe client includes several sets of actions:\n","title":"Actions API","titles":["@tevm/memory-client"]},"440":{"href":"/reference/memory-client#tevm-actions","html":"\n<ul>\n<li><code>tevmCall</code>: Low-level EVM call execution</li>\n<li><code>tevmContract</code>: High-level contract interaction</li>\n<li><code>tevmDeploy</code>: Contract deployment</li>\n<li><code>tevmGetAccount</code>: Account state retrieval</li>\n<li><code>tevmSetAccount</code>: Account state modification</li>\n<li><code>tevmMine</code>: Manual block mining</li>\n<li><code>tevmDumpState</code>: State export</li>\n<li><code>tevmLoadState</code>: State import</li>\n</ul>\n","isPage":false,"text":"\n\ntevmCall: Low-level EVM call execution\ntevmContract: High-level contract interaction\ntevmDeploy: Contract deployment\ntevmGetAccount: Account state retrieval\ntevmSetAccount: Account state modification\ntevmMine: Manual block mining\ntevmDumpState: State export\ntevmLoadState: State import\n\n","title":"Tevm Actions","titles":["@tevm/memory-client","Actions API"]},"441":{"href":"/reference/memory-client#viem-actions","html":"\n<ul>\n<li>Public actions (e.g., <code>getBlockNumber</code>, <code>getBalance</code>)</li>\n<li>Wallet actions (e.g., <code>sendTransaction</code>, <code>signMessage</code>)</li>\n<li>Test actions (e.g., <code>setBalance</code>, <code>impersonateAccount</code>)</li>\n</ul>\n","isPage":false,"text":"\n\nPublic actions (e.g., getBlockNumber, getBalance)\nWallet actions (e.g., sendTransaction, signMessage)\nTest actions (e.g., setBalance, impersonateAccount)\n\n","title":"Viem Actions","titles":["@tevm/memory-client","Actions API"]},"442":{"href":"/reference/memory-client#advanced-features","html":"\n","isPage":false,"text":"\n","title":"Advanced Features","titles":["@tevm/memory-client"]},"443":{"href":"/reference/memory-client#state-persistence","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient, createSyncPersister } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/memory-client&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  persister: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createSyncPersister</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    storage: localStorage</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createMemoryClient, createSyncPersister } from &#x27;@tevm/memory-client&#x27;\n \nconst client = createMemoryClient({\n  persister: createSyncPersister({\n    storage: localStorage\n  })\n})\n","title":"State Persistence","titles":["@tevm/memory-client","Advanced Features"]},"444":{"href":"/reference/memory-client#http-server-integration","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createServer } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/server&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/memory-client&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> server</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createServer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  request: client.request</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">server.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">listen</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8545</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createServer } from &#x27;@tevm/server&#x27;\nimport { createMemoryClient } from &#x27;@tevm/memory-client&#x27;\n \nconst client = createMemoryClient()\nconst server = createServer({\n  request: client.request\n})\n \nserver.listen(8545)\n","title":"HTTP Server Integration","titles":["@tevm/memory-client","Advanced Features"]},"445":{"href":"/reference/memory-client#network-support","html":"\n<p>Officially supported networks:</p>\n<ul>\n<li>Ethereum mainnet</li>\n<li>Standard OP Stack chains</li>\n</ul>\n<p>Other EVM-compatible chains may work but are not officially supported.</p>\n","isPage":false,"text":"\nOfficially supported networks:\n\nEthereum mainnet\nStandard OP Stack chains\n\nOther EVM-compatible chains may work but are not officially supported.\n","title":"Network Support","titles":["@tevm/memory-client"]},"446":{"href":"/reference/memory-client#eip-support","html":"\n<p>Always-enabled EIPs:</p>\n<ul>\n<li>EIP-1559 (Fee Market)</li>\n<li>EIP-4895</li>\n<li>EIP-4844 (Blob Transactions)</li>\n<li>EIP-4788</li>\n</ul>\n","isPage":false,"text":"\nAlways-enabled EIPs:\n\nEIP-1559 (Fee Market)\nEIP-4895\nEIP-4844 (Blob Transactions)\nEIP-4788\n\n","title":"EIP Support","titles":["@tevm/memory-client"]},"447":{"href":"/reference/memory-client#types","html":"\n<p>The package exports several important types:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TAccountOrAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MemoryClientOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TAccountOrAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TRpcSchema</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TevmActions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TevmContract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TevmRpcSchema</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TevmTransport</span></span></code></pre>\n","isPage":false,"text":"\nThe package exports several important types:\ntype MemoryClient&lt;TChain, TAccountOrAddress&gt;\ntype MemoryClientOptions&lt;TCommon, TAccountOrAddress, TRpcSchema&gt;\ntype TevmActions\ntype TevmContract\ntype TevmRpcSchema\ntype TevmTransport\n","title":"Types","titles":["@tevm/memory-client"]},"448":{"href":"/reference/memory-client#license","html":"\n<p>This package is licensed under the MIT License.</p>\n","isPage":false,"text":"\nThis package is licensed under the MIT License.\n","title":"License","titles":["@tevm/memory-client"]},"449":{"href":"/reference/memory-client#see-also","html":"\n<ul>\n<li><a href=\"../introduction/what-is-tevm-node\">What is Tevm Node?</a></li>\n<li><a href=\"../core/create-tevm-node\">Creating a Node</a></li>\n<li><a href=\"https://viem.sh\">Viem Documentation</a></li>\n</ul>","isPage":false,"text":"\n\nWhat is Tevm Node?\nCreating a Node\nViem Documentation\n","title":"See Also","titles":["@tevm/memory-client"]},"450":{"href":"/reference/node#tevmnode-api-reference","html":"</header>\n<p>This documentation is generated from the source code. View the full API documentation on GitHub:</p>\n<p><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/node/docs/globals.md\">View @tevm/node API Reference on GitHub</a></p>\n","isPage":true,"text":"\nThis documentation is generated from the source code. View the full API documentation on GitHub:\nView @tevm/node API Reference on GitHub\n","title":"@tevm/node API Reference","titles":[]},"451":{"href":"/reference/node#quick-links","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/node/docs/type-aliases\">Type Aliases</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/node/docs/classes\">Classes</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/node/docs/functions\">Functions</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/node/docs/variables\">Variables</a></li>\n</ul>\n","isPage":false,"text":"\n\nType Aliases\nClasses\nFunctions\nVariables\n\n","title":"Quick Links","titles":["@tevm/node API Reference"]},"452":{"href":"/reference/node#return-to-documentation","html":"\n<ul>\n<li><a href=\"/getting-started\">Back to Getting Started</a></li>\n<li><a href=\"/reference\">Package Overview</a></li>\n</ul>","isPage":false,"text":"\n\nBack to Getting Started\nPackage Overview\n","title":"Return to Documentation","titles":["@tevm/node API Reference"]},"453":{"href":"/reference/receipt-manager#tevmreceipt-manager","html":"</header>\n<p>The <code>@tevm/receipt-manager</code> package provides a robust transaction receipt management system for the Tevm blockchain. It handles the storage, retrieval, and management of transaction receipts, logs, and related data.</p>\n","isPage":true,"text":"\nThe @tevm/receipt-manager package provides a robust transaction receipt management system for the Tevm blockchain. It handles the storage, retrieval, and management of transaction receipts, logs, and related data.\n","title":"@tevm/receipt-manager","titles":[]},"454":{"href":"/reference/receipt-manager#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/receipt-manager</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/receipt-manager\n","title":"Installation","titles":["@tevm/receipt-manager"]},"455":{"href":"/reference/receipt-manager#overview","html":"\n<p>The receipt manager package is responsible for:</p>\n<ul>\n<li>Managing transaction receipts and their storage</li>\n<li>Handling transaction logs and bloom filters</li>\n<li>Supporting different receipt types (Pre-Byzantium, Post-Byzantium, EIP4844)</li>\n<li>Providing efficient receipt lookup and retrieval</li>\n</ul>\n","isPage":false,"text":"\nThe receipt manager package is responsible for:\n\nManaging transaction receipts and their storage\nHandling transaction logs and bloom filters\nSupporting different receipt types (Pre-Byzantium, Post-Byzantium, EIP4844)\nProviding efficient receipt lookup and retrieval\n\n","title":"Overview","titles":["@tevm/receipt-manager"]},"456":{"href":"/reference/receipt-manager#core-components","html":"\n","isPage":false,"text":"\n","title":"Core Components","titles":["@tevm/receipt-manager"]},"457":{"href":"/reference/receipt-manager#receiptsmanager","html":"\n<p>The main class that handles receipt management operations.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ReceiptsManager } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/receipt-manager&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receiptsManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ReceiptsManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mapDb, chain)</span></span></code></pre>\n","isPage":false,"text":"\nThe main class that handles receipt management operations.\nimport { ReceiptsManager } from &#x27;@tevm/receipt-manager&#x27;\n \nconst receiptsManager = new ReceiptsManager(mapDb, chain)\n","title":"ReceiptsManager","titles":["@tevm/receipt-manager","Core Components"]},"458":{"href":"/reference/receipt-manager#key-methods","html":"\n<ul>\n<li><code>saveReceipts(block, receipts)</code>: Saves receipts to the database</li>\n<li><code>getReceipts(blockHash)</code>: Retrieves receipts for a given block hash</li>\n<li><code>getReceiptByTxHash(txHash)</code>: Gets a receipt by transaction hash</li>\n<li><code>getLogs(from, to, addresses?, topics?)</code>: Returns logs based on filter criteria</li>\n<li><code>deleteReceipts(block)</code>: Removes receipts for a given block</li>\n</ul>\n","isPage":false,"text":"\n\nsaveReceipts(block, receipts): Saves receipts to the database\ngetReceipts(blockHash): Retrieves receipts for a given block hash\ngetReceiptByTxHash(txHash): Gets a receipt by transaction hash\ngetLogs(from, to, addresses?, topics?): Returns logs based on filter criteria\ndeleteReceipts(block): Removes receipts for a given block\n\n","title":"Key Methods","titles":["@tevm/receipt-manager","Core Components","ReceiptsManager"]},"459":{"href":"/reference/receipt-manager#receipt-types","html":"\n<p>The package supports multiple receipt types to accommodate different Ethereum protocol versions:</p>\n","isPage":false,"text":"\nThe package supports multiple receipt types to accommodate different Ethereum protocol versions:\n","title":"Receipt Types","titles":["@tevm/receipt-manager","Core Components"]},"460":{"href":"/reference/receipt-manager#basetxreceipt","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BaseTxReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  cumulativeBlockGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  bitvector</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ninterface BaseTxReceipt {\n  cumulativeBlockGasUsed: bigint\n  bitvector: Uint8Array\n  logs: Log[]\n}\n","title":"BaseTxReceipt","titles":["@tevm/receipt-manager","Core Components","Receipt Types"]},"461":{"href":"/reference/receipt-manager#prebyzantiumtxreceipt","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PreByzantiumTxReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> BaseTxReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  stateRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ninterface PreByzantiumTxReceipt extends BaseTxReceipt {\n  stateRoot: Uint8Array\n}\n","title":"PreByzantiumTxReceipt","titles":["@tevm/receipt-manager","Core Components","Receipt Types"]},"462":{"href":"/reference/receipt-manager#postbyzantiumtxreceipt","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PostByzantiumTxReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> BaseTxReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  status</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ninterface PostByzantiumTxReceipt extends BaseTxReceipt {\n  status: 0 | 1\n}\n","title":"PostByzantiumTxReceipt","titles":["@tevm/receipt-manager","Core Components","Receipt Types"]},"463":{"href":"/reference/receipt-manager#eip4844blobtxreceipt","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EIP4844BlobTxReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> PostByzantiumTxReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobGasPrice</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ninterface EIP4844BlobTxReceipt extends PostByzantiumTxReceipt {\n  blobGasUsed: bigint\n  blobGasPrice: bigint\n}\n","title":"EIP4844BlobTxReceipt","titles":["@tevm/receipt-manager","Core Components","Receipt Types"]},"464":{"href":"/reference/receipt-manager#database-management","html":"\n","isPage":false,"text":"\n","title":"Database Management","titles":["@tevm/receipt-manager"]},"465":{"href":"/reference/receipt-manager#mapdb","html":"\n<p>The package includes a MapDb implementation for storing receipt data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMapDb } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/receipt-manager&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> mapDb</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMapDb</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  cache: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe package includes a MapDb implementation for storing receipt data:\nimport { createMapDb } from &#x27;@tevm/receipt-manager&#x27;\n \nconst mapDb = createMapDb({\n  cache: new Map()\n})\n","title":"MapDb","titles":["@tevm/receipt-manager","Database Management"]},"466":{"href":"/reference/receipt-manager#configuration-options","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MetaDBManagerOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  cache</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`0x${</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ninterface MetaDBManagerOptions {\n  cache: Map&lt;`0x${string}`, Uint8Array&gt;\n}\n","title":"Configuration Options","titles":["@tevm/receipt-manager","Database Management"]},"467":{"href":"/reference/receipt-manager#usage-examples","html":"\n","isPage":false,"text":"\n","title":"Usage Examples","titles":["@tevm/receipt-manager"]},"468":{"href":"/reference/receipt-manager#saving-and-retrieving-receipts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Save receipts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">saveReceipts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(block, receipts)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Retrieve receipts by block hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceipts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get receipt by transaction hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptByTxHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span></code></pre>\n","isPage":false,"text":"\n// Save receipts\nawait receiptsManager.saveReceipts(block, receipts)\n \n// Retrieve receipts by block hash\nconst receipts = await receiptsManager.getReceipts(blockHash)\n \n// Get receipt by transaction hash\nconst receipt = await receiptsManager.getReceiptByTxHash(txHash)\n","title":"Saving and Retrieving Receipts","titles":["@tevm/receipt-manager","Usage Examples"]},"469":{"href":"/reference/receipt-manager#working-with-logs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Query logs with filters</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fromBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  toBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  addresses,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  topics</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\n// Query logs with filters\nconst logs = await receiptsManager.getLogs(\n  fromBlock,\n  toBlock,\n  addresses,\n  topics\n)\n","title":"Working with Logs","titles":["@tevm/receipt-manager","Usage Examples"]},"470":{"href":"/reference/receipt-manager#constants-and-limits","html":"\n<p>The ReceiptsManager includes several important limits:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">GET_LOGS_LIMIT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10000</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Maximum number of logs to return</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">GET_LOGS_LIMIT_MEGABYTES</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 150</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Size limit for getLogs response</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">GET_LOGS_BLOCK_RANGE_LIMIT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2500</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Block range limit for getLogs</span></span></code></pre>\n","isPage":false,"text":"\nThe ReceiptsManager includes several important limits:\nGET_LOGS_LIMIT = 10000 // Maximum number of logs to return\nGET_LOGS_LIMIT_MEGABYTES = 150 // Size limit for getLogs response\nGET_LOGS_BLOCK_RANGE_LIMIT = 2500 // Block range limit for getLogs\n","title":"Constants and Limits","titles":["@tevm/receipt-manager"]},"471":{"href":"/reference/receipt-manager#error-handling","html":"\n<p>The package includes proper error handling for common scenarios:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptByTxHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">receipt) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Handle missing receipt</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Handle errors</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe package includes proper error handling for common scenarios:\ntry {\n  const receipt = await receiptsManager.getReceiptByTxHash(txHash)\n  if (!receipt) {\n    // Handle missing receipt\n  }\n} catch (error) {\n  // Handle errors\n}\n","title":"Error Handling","titles":["@tevm/receipt-manager"]},"472":{"href":"/reference/receipt-manager#types","html":"\n<p>The package exports several important types:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PreByzantiumTxReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PostByzantiumTxReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EIP4844BlobTxReceipt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxReceiptWithType</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PreByzantiumTxReceiptWithType</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PostByzantiumTxReceiptWithType</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DbType</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Receipts&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;TxHash&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;SkeletonBlock&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;SkeletonBlockHashToNumber&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &quot;SkeletonStatus&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;SkeletonUnfinalizedBlockByHash&quot;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &quot;Preimage&quot;</span></span></code></pre>\n","isPage":false,"text":"\nThe package exports several important types:\ntype TxReceipt = PreByzantiumTxReceipt | PostByzantiumTxReceipt | EIP4844BlobTxReceipt\ntype TxReceiptWithType = PreByzantiumTxReceiptWithType | PostByzantiumTxReceiptWithType\ntype DbType = &quot;Receipts&quot; | &quot;TxHash&quot; | &quot;SkeletonBlock&quot; | &quot;SkeletonBlockHashToNumber&quot; |\n  &quot;SkeletonStatus&quot; | &quot;SkeletonUnfinalizedBlockByHash&quot; | &quot;Preimage&quot;\n","title":"Types","titles":["@tevm/receipt-manager"]},"473":{"href":"/reference/receipt-manager#license","html":"\n<p>This package is licensed under the MIT License. Some files are adapted from <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo\">ethereumjs</a> and are licensed under the Mozilla Public License 2.0.</p>","isPage":false,"text":"\nThis package is licensed under the MIT License. Some files are adapted from ethereumjs and are licensed under the Mozilla Public License 2.0.","title":"License","titles":["@tevm/receipt-manager"]},"474":{"href":"/reference/rlp#tevmrlp-api-reference","html":"</header>\n<p>This documentation is generated from the source code. View the full API documentation on GitHub:</p>\n<p><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/rlp/docs/globals.md\">View @tevm/rlp API Reference on GitHub</a></p>\n","isPage":true,"text":"\nThis documentation is generated from the source code. View the full API documentation on GitHub:\nView @tevm/rlp API Reference on GitHub\n","title":"@tevm/rlp API Reference","titles":[]},"475":{"href":"/reference/rlp#quick-links","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/rlp/docs/type-aliases\">Type Aliases</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/rlp/docs/classes\">Classes</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/rlp/docs/functions\">Functions</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/rlp/docs/variables\">Variables</a></li>\n</ul>\n","isPage":false,"text":"\n\nType Aliases\nClasses\nFunctions\nVariables\n\n","title":"Quick Links","titles":["@tevm/rlp API Reference"]},"476":{"href":"/reference/rlp#return-to-documentation","html":"\n<ul>\n<li><a href=\"/getting-started\">Back to Getting Started</a></li>\n<li><a href=\"/reference\">Package Overview</a></li>\n</ul>","isPage":false,"text":"\n\nBack to Getting Started\nPackage Overview\n","title":"Return to Documentation","titles":["@tevm/rlp API Reference"]},"477":{"href":"/reference/state#tevmstate","html":"</header>\n<p>The <code>@tevm/state</code> package provides a robust state management system for Tevm, handling Ethereum account states, contract storage, and state transitions. It offers both synchronous and asynchronous APIs for managing the EVM state.</p>\n","isPage":true,"text":"\nThe @tevm/state package provides a robust state management system for Tevm, handling Ethereum account states, contract storage, and state transitions. It offers both synchronous and asynchronous APIs for managing the EVM state.\n","title":"@tevm/state","titles":[]},"478":{"href":"/reference/state#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/state</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/state\n","title":"Installation","titles":["@tevm/state"]},"479":{"href":"/reference/state#overview","html":"\n<p>The state package is responsible for:</p>\n<ul>\n<li>Managing account states (balance, nonce, code, storage)</li>\n<li>Handling state transitions and checkpoints</li>\n<li>Caching and persistence of state data</li>\n<li>Supporting forked chain states</li>\n<li>Providing efficient state access and modification</li>\n</ul>\n","isPage":false,"text":"\nThe state package is responsible for:\n\nManaging account states (balance, nonce, code, storage)\nHandling state transitions and checkpoints\nCaching and persistence of state data\nSupporting forked chain states\nProviding efficient state access and modification\n\n","title":"Overview","titles":["@tevm/state"]},"480":{"href":"/reference/state#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/state"]},"481":{"href":"/reference/state#enumerations","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/enumerations/CacheType.md\">CacheType</a> - Types of caching mechanisms</li>\n</ul>\n","isPage":false,"text":"\n\nCacheType - Types of caching mechanisms\n\n","title":"Enumerations","titles":["@tevm/state","API Reference"]},"482":{"href":"/reference/state#core-types","html":"\n","isPage":false,"text":"\n","title":"Core Types","titles":["@tevm/state","API Reference"]},"483":{"href":"/reference/state#state-management","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/interfaces/StateManager.md\">StateManager</a> - Main interface for state operations</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/type-aliases/BaseState.md\">BaseState</a> - Core state data structure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/type-aliases/TevmState.md\">TevmState</a> - Tevm-specific state representation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/type-aliases/StateAction.md\">StateAction</a> - Type for state modification actions</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/type-aliases/StateOptions.md\">StateOptions</a> - State configuration options</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/type-aliases/StateRoots.md\">StateRoots</a> - State roots mapping</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/type-aliases/ParameterizedTevmState.md\">ParameterizedTevmState</a> - Parameterized state type</li>\n</ul>\n","isPage":false,"text":"\n\nStateManager - Main interface for state operations\nBaseState - Core state data structure\nTevmState - Tevm-specific state representation\nStateAction - Type for state modification actions\nStateOptions - State configuration options\nStateRoots - State roots mapping\nParameterizedTevmState - Parameterized state type\n\n","title":"State Management","titles":["@tevm/state","API Reference","Core Types"]},"484":{"href":"/reference/state#storage-types","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/interfaces/AccountStorage.md\">AccountStorage</a> - Account storage structure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/interfaces/ParameterizedAccountStorage.md\">ParameterizedAccountStorage</a> - Parameterized account storage interface</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/type-aliases/SerializableTevmState.md\">SerializableTevmState</a> - Serializable state format</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/interfaces/ForkOptions.md\">ForkOptions</a> - Options for forking state</li>\n</ul>\n","isPage":false,"text":"\n\nAccountStorage - Account storage structure\nParameterizedAccountStorage - Parameterized account storage interface\nSerializableTevmState - Serializable state format\nForkOptions - Options for forking state\n\n","title":"Storage Types","titles":["@tevm/state","API Reference","Core Types"]},"485":{"href":"/reference/state#caching","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/type-aliases/StateCache.md\">StateCache</a> - State caching structure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/classes/AccountCache.md\">AccountCache</a> - Account-level cache</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/classes/ContractCache.md\">ContractCache</a> - Contract-level cache</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/classes/StorageCache.md\">StorageCache</a> - Storage-level cache</li>\n</ul>\n","isPage":false,"text":"\n\nStateCache - State caching structure\nAccountCache - Account-level cache\nContractCache - Contract-level cache\nStorageCache - Storage-level cache\n\n","title":"Caching","titles":["@tevm/state","API Reference","Core Types"]},"486":{"href":"/reference/state#core-functions","html":"\n","isPage":false,"text":"\n","title":"Core Functions","titles":["@tevm/state","API Reference"]},"487":{"href":"/reference/state#state-creation-and-management","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/createStateManager.md\">createStateManager</a> - Creates a new state manager instance</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/createBaseState.md\">createBaseState</a> - Creates the core state data structure</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/deepCopy.md\">deepCopy</a> - Creates deep copy of state</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/shallowCopy.md\">shallowCopy</a> - Creates shallow copy</li>\n</ul>\n","isPage":false,"text":"\n\ncreateStateManager - Creates a new state manager instance\ncreateBaseState - Creates the core state data structure\ndeepCopy - Creates deep copy of state\nshallowCopy - Creates shallow copy\n\n","title":"State Creation and Management","titles":["@tevm/state","API Reference","Core Functions"]},"488":{"href":"/reference/state#state-operations","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/getAccount.md\">getAccount</a> - Retrieves account state</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/putAccount.md\">putAccount</a> - Updates account state</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/deleteAccount.md\">deleteAccount</a> - Removes an account</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/getContractCode.md\">getContractCode</a> - Gets contract bytecode</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/putContractCode.md\">putContractCode</a> - Updates contract bytecode</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/getContractStorage.md\">getContractStorage</a> - Gets contract storage</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/putContractStorage.md\">putContractStorage</a> - Updates contract storage</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/clearContractStorage.md\">clearContractStorage</a> - Clears contract storage</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/getAccountAddresses.md\">getAccountAddresses</a> - Gets account addresses</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/getAppliedKey.md\">getAppliedKey</a> - Gets applied storage key</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/modifyAccountFields.md\">modifyAccountFields</a> - Modifies account fields</li>\n</ul>\n","isPage":false,"text":"\n\ngetAccount - Retrieves account state\nputAccount - Updates account state\ndeleteAccount - Removes an account\ngetContractCode - Gets contract bytecode\nputContractCode - Updates contract bytecode\ngetContractStorage - Gets contract storage\nputContractStorage - Updates contract storage\nclearContractStorage - Clears contract storage\ngetAccountAddresses - Gets account addresses\ngetAppliedKey - Gets applied storage key\nmodifyAccountFields - Modifies account fields\n\n","title":"State Operations","titles":["@tevm/state","API Reference","Core Functions"]},"489":{"href":"/reference/state#state-root-management","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/getStateRoot.md\">getStateRoot</a> - Gets current state root</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/setStateRoot.md\">setStateRoot</a> - Sets new state root</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/hasStateRoot.md\">hasStateRoot</a> - Checks if state root exists</li>\n</ul>\n","isPage":false,"text":"\n\ngetStateRoot - Gets current state root\nsetStateRoot - Sets new state root\nhasStateRoot - Checks if state root exists\n\n","title":"State Root Management","titles":["@tevm/state","API Reference","Core Functions"]},"490":{"href":"/reference/state#checkpointing-and-committing","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/checkpoint.md\">checkpoint</a> - Creates a state checkpoint</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/commit.md\">commit</a> - Commits state changes</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/revert.md\">revert</a> - Reverts to previous checkpoint</li>\n</ul>\n","isPage":false,"text":"\n\ncheckpoint - Creates a state checkpoint\ncommit - Commits state changes\nrevert - Reverts to previous checkpoint\n\n","title":"Checkpointing and Committing","titles":["@tevm/state","API Reference","Core Functions"]},"491":{"href":"/reference/state#cache-management","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/clearCaches.md\">clearCaches</a> - Clears all state caches</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/originalStorageCache.md\">originalStorageCache</a> - Manages original storage cache</li>\n</ul>\n","isPage":false,"text":"\n\nclearCaches - Clears all state caches\noriginalStorageCache - Manages original storage cache\n\n","title":"Cache Management","titles":["@tevm/state","API Reference","Core Functions"]},"492":{"href":"/reference/state#genesis-and-forking","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/dumpCanonicalGenesis.md\">dumpCanonicalGenesis</a> - Dumps canonical genesis state</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/generateCanonicalGenesis.md\">generateCanonicalGenesis</a> - Generates canonical genesis</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/getForkBlockTag.md\">getForkBlockTag</a> - Gets fork block tag</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/getForkClient.md\">getForkClient</a> - Gets fork client</li>\n</ul>\n","isPage":false,"text":"\n\ndumpCanonicalGenesis - Dumps canonical genesis state\ngenerateCanonicalGenesis - Generates canonical genesis\ngetForkBlockTag - Gets fork block tag\ngetForkClient - Gets fork client\n\n","title":"Genesis and Forking","titles":["@tevm/state","API Reference","Core Functions"]},"493":{"href":"/reference/state#storage-operations","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/dumpStorage.md\">dumpStorage</a> - Dumps storage state</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/dumpStorageRange.md\">dumpStorageRange</a> - Dumps storage range</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs/functions/getProof.md\">getProof</a> - Gets state proof</li>\n</ul>\n","isPage":false,"text":"\n\ndumpStorage - Dumps storage state\ndumpStorageRange - Dumps storage range\ngetProof - Gets state proof\n\n","title":"Storage Operations","titles":["@tevm/state","API Reference","Core Functions"]},"494":{"href":"/reference/state#usage-examples","html":"\n","isPage":false,"text":"\n","title":"Usage Examples","titles":["@tevm/state"]},"495":{"href":"/reference/state#creating-a-state-manager","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\" data-empty-line=\"true\"> </span></code></pre>","isPage":false,"text":"\n ","title":"Creating a State Manager","titles":["@tevm/state","Usage Examples"]},"496":{"href":"/reference/trie#tevmtrie-api-reference","html":"</header>\n<p>This documentation is generated from the source code. View the full API documentation on GitHub:</p>\n<p><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/trie/docs/globals.md\">View @tevm/trie API Reference on GitHub</a></p>\n","isPage":true,"text":"\nThis documentation is generated from the source code. View the full API documentation on GitHub:\nView @tevm/trie API Reference on GitHub\n","title":"@tevm/trie API Reference","titles":[]},"497":{"href":"/reference/trie#quick-links","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/trie/docs/type-aliases\">Type Aliases</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/trie/docs/classes\">Classes</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/trie/docs/functions\">Functions</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/trie/docs/variables\">Variables</a></li>\n</ul>\n","isPage":false,"text":"\n\nType Aliases\nClasses\nFunctions\nVariables\n\n","title":"Quick Links","titles":["@tevm/trie API Reference"]},"498":{"href":"/reference/trie#return-to-documentation","html":"\n<ul>\n<li><a href=\"/getting-started\">Back to Getting Started</a></li>\n<li><a href=\"/reference\">Package Overview</a></li>\n</ul>","isPage":false,"text":"\n\nBack to Getting Started\nPackage Overview\n","title":"Return to Documentation","titles":["@tevm/trie API Reference"]},"499":{"href":"/reference/tx#tevmtx","html":"</header>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs\">evmts/tevm-monorepo/packages/tx/docs</a> folder.</p>\n</blockquote>\n<p>The <code>@tevm/tx</code> package provides a custom implementation of Ethereum transactions, extending the functionality of <code>@ethereumjs/tx</code>. It includes support for various transaction types and introduces impersonated transactions unique to Tevm.</p>\n","isPage":true,"text":"\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/tx/docs folder.\n\nThe @tevm/tx package provides a custom implementation of Ethereum transactions, extending the functionality of @ethereumjs/tx. It includes support for various transaction types and introduces impersonated transactions unique to Tevm.\n","title":"@tevm/tx","titles":[]},"500":{"href":"/reference/tx#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/tx</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/tx\n","title":"Installation","titles":["@tevm/tx"]},"501":{"href":"/reference/tx#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/tx"]},"502":{"href":"/reference/tx#enumerations","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/enumerations/Capability.md\">Capability</a> - Transaction capabilities</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/enumerations/TransactionType.md\">TransactionType</a> - Supported transaction types</li>\n</ul>\n","isPage":false,"text":"\n\nCapability - Transaction capabilities\nTransactionType - Supported transaction types\n\n","title":"Enumerations","titles":["@tevm/tx","API Reference"]},"503":{"href":"/reference/tx#classes","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/classes/AccessListEIP2930Transaction.md\">AccessListEIP2930Transaction</a> - Type 1 transaction implementation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/classes/BlobEIP4844Transaction.md\">BlobEIP4844Transaction</a> - Type 3 transaction implementation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/classes/FeeMarketEIP1559Transaction.md\">FeeMarketEIP1559Transaction</a> - Type 2 transaction implementation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/classes/LegacyTransaction.md\">LegacyTransaction</a> - Legacy transaction implementation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/classes/TransactionFactory.md\">TransactionFactory</a> - Factory for creating transactions</li>\n</ul>\n","isPage":false,"text":"\n\nAccessListEIP2930Transaction - Type 1 transaction implementation\nBlobEIP4844Transaction - Type 3 transaction implementation\nFeeMarketEIP1559Transaction - Type 2 transaction implementation\nLegacyTransaction - Legacy transaction implementation\nTransactionFactory - Factory for creating transactions\n\n","title":"Classes","titles":["@tevm/tx","API Reference"]},"504":{"href":"/reference/tx#interfaces","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/interfaces/EIP1559CompatibleTx.md\">EIP1559CompatibleTx</a> - EIP-1559 transaction interface</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/interfaces/EIP4844CompatibleTx.md\">EIP4844CompatibleTx</a> - EIP-4844 transaction interface</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/interfaces/ImpersonatedTx.md\">ImpersonatedTx</a> - Impersonated transaction interface</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/interfaces/JsonRpcTx.md\">JsonRpcTx</a> - JSON-RPC transaction format</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/interfaces/JsonTx.md\">JsonTx</a> - JSON transaction format</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/interfaces/TxData.md\">TxData</a> - Transaction data interface</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/interfaces/TxOptions.md\">TxOptions</a> - Transaction options interface</li>\n</ul>\n","isPage":false,"text":"\n\nEIP1559CompatibleTx - EIP-1559 transaction interface\nEIP4844CompatibleTx - EIP-4844 transaction interface\nImpersonatedTx - Impersonated transaction interface\nJsonRpcTx - JSON-RPC transaction format\nJsonTx - JSON transaction format\nTxData - Transaction data interface\nTxOptions - Transaction options interface\n\n","title":"Interfaces","titles":["@tevm/tx","API Reference"]},"505":{"href":"/reference/tx#type-aliases","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/type-aliases/AccessList.md\">AccessList</a> - Access list type definition</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/type-aliases/AccessListItem.md\">AccessListItem</a> - Access list item type</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/type-aliases/TypedTransaction.md\">TypedTransaction</a> - Union type of all transaction types</li>\n</ul>\n","isPage":false,"text":"\n\nAccessList - Access list type definition\nAccessListItem - Access list item type\nTypedTransaction - Union type of all transaction types\n\n","title":"Type Aliases","titles":["@tevm/tx","API Reference"]},"506":{"href":"/reference/tx#functions","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/functions/createImpersonatedTx.md\">createImpersonatedTx</a> - Create an impersonated transaction</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/functions/isAccessListEIP2930Tx.md\">isAccessListEIP2930Tx</a> - Type guard for EIP-2930 transactions</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/functions/isBlobEIP4844Tx.md\">isBlobEIP4844Tx</a> - Type guard for EIP-4844 transactions</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/functions/isFeeMarketEIP1559Tx.md\">isFeeMarketEIP1559Tx</a> - Type guard for EIP-1559 transactions</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs/functions/isLegacyTx.md\">isLegacyTx</a> - Type guard for legacy transactions</li>\n</ul>\n","isPage":false,"text":"\n\ncreateImpersonatedTx - Create an impersonated transaction\nisAccessListEIP2930Tx - Type guard for EIP-2930 transactions\nisBlobEIP4844Tx - Type guard for EIP-4844 transactions\nisFeeMarketEIP1559Tx - Type guard for EIP-1559 transactions\nisLegacyTx - Type guard for legacy transactions\n\n","title":"Functions","titles":["@tevm/tx","API Reference"]},"507":{"href":"/reference/tx#main-components","html":"\n","isPage":false,"text":"\n","title":"Main Components","titles":["@tevm/tx"]},"508":{"href":"/reference/tx#transaction-types","html":"\n<p>The package supports multiple transaction types:</p>\n<ul>\n<li><strong>LegacyTransaction</strong>: Pre-EIP-2718 transactions</li>\n<li><strong>AccessListEIP2930Transaction</strong>: Type 1 transactions with access lists (EIP-2930)</li>\n<li><strong>FeeMarketEIP1559Transaction</strong>: Type 2 transactions with fee market (EIP-1559)</li>\n<li><strong>BlobEIP4844Transaction</strong>: Type 3 transactions with blob data (EIP-4844)</li>\n<li><strong>ImpersonatedTx</strong>: Tevm-specific transaction type for impersonating accounts</li>\n</ul>\n","isPage":false,"text":"\nThe package supports multiple transaction types:\n\nLegacyTransaction: Pre-EIP-2718 transactions\nAccessListEIP2930Transaction: Type 1 transactions with access lists (EIP-2930)\nFeeMarketEIP1559Transaction: Type 2 transactions with fee market (EIP-1559)\nBlobEIP4844Transaction: Type 3 transactions with blob data (EIP-4844)\nImpersonatedTx: Tevm-specific transaction type for impersonating accounts\n\n","title":"Transaction Types","titles":["@tevm/tx","Main Components"]},"509":{"href":"/reference/tx#transactionfactory","html":"\n<p>A utility class for creating transactions from various data formats:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { TransactionFactory } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/tx&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create from serialized data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TransactionFactory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromSerializedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(serializedData)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create from RPC data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TransactionFactory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromRPC</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcTxData)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create from block body data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TransactionFactory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromBlockBodyData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockData)</span></span></code></pre>\n","isPage":false,"text":"\nA utility class for creating transactions from various data formats:\nimport { TransactionFactory } from &#x27;@tevm/tx&#x27;\n \n// Create from serialized data\nconst tx = TransactionFactory.fromSerializedTx(serializedData)\n \n// Create from RPC data\nconst tx = await TransactionFactory.fromRPC(rpcTxData)\n \n// Create from block body data\nconst tx = TransactionFactory.fromBlockBodyData(blockData)\n","title":"TransactionFactory","titles":["@tevm/tx","Main Components"]},"510":{"href":"/reference/tx#impersonated-transactions","html":"\n<p>A unique feature of Tevm that allows simulating transactions as if they were sent from any address:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createImpersonatedTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/tx&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipient,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: value,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... other EIP-1559 transaction fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nA unique feature of Tevm that allows simulating transactions as if they were sent from any address:\nimport { createImpersonatedTx } from &#x27;@tevm/tx&#x27;\n \nconst tx = createImpersonatedTx({\n  impersonatedAddress: address,\n  to: recipient,\n  value: value,\n  data: data,\n  // ... other EIP-1559 transaction fields\n})\n","title":"Impersonated Transactions","titles":["@tevm/tx","Main Components"]},"511":{"href":"/reference/tx#transaction-types-1","html":"\n","isPage":false,"text":"\n","title":"Transaction Types","titles":["@tevm/tx"]},"512":{"href":"/reference/tx#legacy-transactions","html":"\n<p>Pre-EIP-2718 transactions with basic fields:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> LegacyTxData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasPrice</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasLimit</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  v</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  r</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  s</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPre-EIP-2718 transactions with basic fields:\ninterface LegacyTxData {\n  nonce: bigint\n  gasPrice: bigint\n  gasLimit: bigint\n  to?: Address\n  value: bigint\n  data: Uint8Array\n  v?: bigint\n  r?: bigint\n  s?: bigint\n}\n","title":"Legacy Transactions","titles":["@tevm/tx","Transaction Types"]},"513":{"href":"/reference/tx#eip-2930-transactions","html":"\n<p>Type 1 transactions with access lists:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AccessListEIP2930TxData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> LegacyTxData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  accessList</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AccessList</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nType 1 transactions with access lists:\ninterface AccessListEIP2930TxData extends LegacyTxData {\n  chainId: bigint\n  accessList: AccessList\n}\n","title":"EIP-2930 Transactions","titles":["@tevm/tx","Transaction Types"]},"514":{"href":"/reference/tx#eip-1559-transactions","html":"\n<p>Type 2 transactions with fee market:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FeeMarketEIP1559TxData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> AccessListEIP2930TxData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  maxFeePerGas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  maxPriorityFeePerGas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nType 2 transactions with fee market:\ninterface FeeMarketEIP1559TxData extends AccessListEIP2930TxData {\n  maxFeePerGas: bigint\n  maxPriorityFeePerGas: bigint\n}\n","title":"EIP-1559 Transactions","titles":["@tevm/tx","Transaction Types"]},"515":{"href":"/reference/tx#eip-4844-transactions","html":"\n<p>Type 3 transactions with blob data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BlobEIP4844TxData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> FeeMarketEIP1559TxData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  maxFeePerBlobGas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobVersionedHashes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  kzgCommitments</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  kzgProofs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nType 3 transactions with blob data:\ninterface BlobEIP4844TxData extends FeeMarketEIP1559TxData {\n  maxFeePerBlobGas: bigint\n  blobVersionedHashes: Uint8Array[]\n  blobs?: Uint8Array[]\n  kzgCommitments?: Uint8Array[]\n  kzgProofs?: Uint8Array[]\n}\n","title":"EIP-4844 Transactions","titles":["@tevm/tx","Transaction Types"]},"516":{"href":"/reference/tx#common-operations","html":"\n","isPage":false,"text":"\n","title":"Common Operations","titles":["@tevm/tx"]},"517":{"href":"/reference/tx#creating-transactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { TransactionFactory, LegacyTransaction } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/tx&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Using factory</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TransactionFactory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromTxData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasPrice: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Direct instantiation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> legacyTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> LegacyTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasPrice: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { TransactionFactory, LegacyTransaction } from &#x27;@tevm/tx&#x27;\n \n// Using factory\nconst tx = TransactionFactory.fromTxData({\n  nonce: 0n,\n  gasPrice: 20000000000n,\n  gasLimit: 21000n,\n  to: &#x27;0x...&#x27;,\n  value: 1000000000000000000n,\n  data: new Uint8Array()\n})\n \n// Direct instantiation\nconst legacyTx = new LegacyTransaction({\n  nonce: 0n,\n  gasPrice: 20000000000n,\n  gasLimit: 21000n,\n  to: &#x27;0x...&#x27;,\n  value: 1000000000000000000n,\n  data: new Uint8Array()\n})\n","title":"Creating Transactions","titles":["@tevm/tx","Common Operations"]},"518":{"href":"/reference/tx#signing-transactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signedTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sign</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(privateKey)</span></span></code></pre>\n","isPage":false,"text":"\nconst signedTx = tx.sign(privateKey)\n","title":"Signing Transactions","titles":["@tevm/tx","Common Operations"]},"519":{"href":"/reference/tx#transaction-methods","html":"\n<p>All transaction types provide common methods:</p>\n<ul>\n<li><code>hash()</code>: Get transaction hash</li>\n<li><code>getBaseFee()</code>: Get minimum required gas</li>\n<li><code>getDataFee()</code>: Get gas cost for data</li>\n<li><code>getUpfrontCost()</code>: Get total required balance</li>\n<li><code>isSigned()</code>: Check if transaction is signed</li>\n<li><code>serialize()</code>: Get RLP encoded transaction</li>\n<li><code>toJSON()</code>: Get JSON representation</li>\n</ul>\n","isPage":false,"text":"\nAll transaction types provide common methods:\n\nhash(): Get transaction hash\ngetBaseFee(): Get minimum required gas\ngetDataFee(): Get gas cost for data\ngetUpfrontCost(): Get total required balance\nisSigned(): Check if transaction is signed\nserialize(): Get RLP encoded transaction\ntoJSON(): Get JSON representation\n\n","title":"Transaction Methods","titles":["@tevm/tx","Common Operations"]},"520":{"href":"/reference/tx#error-handling","html":"\n<p>The package includes custom error types:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { InvalidGasLimitError } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/tx&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txData)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (e) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (e </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">instanceof</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> InvalidGasLimitError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Handle invalid gas limit</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe package includes custom error types:\nimport { InvalidGasLimitError } from &#x27;@tevm/tx&#x27;\n \ntry {\n  const tx = createImpersonatedTx(txData)\n} catch (e) {\n  if (e instanceof InvalidGasLimitError) {\n    // Handle invalid gas limit\n  }\n}\n","title":"Error Handling","titles":["@tevm/tx"]},"521":{"href":"/reference/tx#see-also","html":"\n<ul>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-2718\">EIP-2718: Typed Transaction Envelope</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-2930\">EIP-2930: Optional access lists</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-1559\">EIP-1559: Fee market change</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-4844\">EIP-4844: Shard Blob Transactions</a></li>\n</ul>","isPage":false,"text":"\n\nEIP-2718: Typed Transaction Envelope\nEIP-2930: Optional access lists\nEIP-1559: Fee market change\nEIP-4844: Shard Blob Transactions\n","title":"See Also","titles":["@tevm/tx"]},"522":{"href":"/reference/txpool#tevmtxpool","html":"</header>\n<p>The <code>@tevm/txpool</code> package provides a transaction pool (mempool) implementation for Tevm, managing pending transactions and their lifecycle within the Ethereum Virtual Machine.</p>\n","isPage":true,"text":"\nThe @tevm/txpool package provides a transaction pool (mempool) implementation for Tevm, managing pending transactions and their lifecycle within the Ethereum Virtual Machine.\n","title":"@tevm/txpool","titles":[]},"523":{"href":"/reference/txpool#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/txpool</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/txpool\n","title":"Installation","titles":["@tevm/txpool"]},"524":{"href":"/reference/txpool#overview","html":"\n<p>The transaction pool is responsible for:</p>\n<ul>\n<li>Managing pending transactions</li>\n<li>Validating transaction requirements</li>\n<li>Ordering transactions by price and nonce</li>\n<li>Handling transaction replacement</li>\n<li>Cleaning up stale transactions</li>\n<li>Supporting transaction lifecycle management</li>\n</ul>\n","isPage":false,"text":"\nThe transaction pool is responsible for:\n\nManaging pending transactions\nValidating transaction requirements\nOrdering transactions by price and nonce\nHandling transaction replacement\nCleaning up stale transactions\nSupporting transaction lifecycle management\n\n","title":"Overview","titles":["@tevm/txpool"]},"525":{"href":"/reference/txpool#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/txpool"]},"526":{"href":"/reference/txpool#core-class","html":"\n","isPage":false,"text":"\n","title":"Core Class","titles":["@tevm/txpool","API Reference"]},"527":{"href":"/reference/txpool#txpool","html":"\n<p><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/txpool/src/TxPool.ts\"><code>TxPool</code></a> - The main transaction pool class with the following key features:</p>\n","isPage":false,"text":"\nTxPool - The main transaction pool class with the following key features:\n","title":"TxPool","titles":["@tevm/txpool","API Reference","Core Class"]},"528":{"href":"/reference/txpool#constructor","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TxPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(options: TxPoolOptions)</span></span></code></pre>\n","isPage":false,"text":"\nnew TxPool(options: TxPoolOptions)\n","title":"Constructor","titles":["@tevm/txpool","API Reference","Core Class","TxPool"]},"529":{"href":"/reference/txpool#properties","html":"\n<ul>\n<li><code>BLOCKS_BEFORE_TARGET_HEIGHT_ACTIVATION</code>: Number of blocks before chain head to start tx pool preparation</li>\n<li><code>POOLED_STORAGE_TIME_LIMIT</code>: Number of minutes to keep txs in the pool</li>\n<li><code>HANDLED_CLEANUP_TIME_LIMIT</code>: Number of minutes to forget about handled txs</li>\n<li><code>pool</code>: The central pool dataset mapping addresses to transactions</li>\n<li><code>running</code>: Boolean indicating if the pool is running</li>\n<li><code>txsInPool</code>: Number of transactions currently in the pool</li>\n</ul>\n","isPage":false,"text":"\n\nBLOCKS_BEFORE_TARGET_HEIGHT_ACTIVATION: Number of blocks before chain head to start tx pool preparation\nPOOLED_STORAGE_TIME_LIMIT: Number of minutes to keep txs in the pool\nHANDLED_CLEANUP_TIME_LIMIT: Number of minutes to forget about handled txs\npool: The central pool dataset mapping addresses to transactions\nrunning: Boolean indicating if the pool is running\ntxsInPool: Number of transactions currently in the pool\n\n","title":"Properties","titles":["@tevm/txpool","API Reference","Core Class","TxPool"]},"530":{"href":"/reference/txpool#methods","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/txpool/src/TxPool.ts#L310\"><code>add</code></a> - Adds a transaction to the pool</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/txpool/src/TxPool.ts#L280\"><code>addUnverified</code></a> - Adds an unverified transaction to the pool</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/txpool/src/TxPool.ts#L320\"><code>getByHash</code></a> - Retrieves transactions by their hashes</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/txpool/src/TxPool.ts#L341\"><code>removeByHash</code></a> - Removes a transaction by its hash</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/txpool/src/TxPool.ts#L477\"><code>txsByPriceAndNonce</code></a> - Returns transactions sorted by price and nonce</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/txpool/src/TxPool.ts#L374\"><code>cleanup</code></a> - Performs pool cleanup</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/txpool/src/TxPool.ts#L141\"><code>open</code></a> - Opens the transaction pool</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/txpool/src/TxPool.ts#L581\"><code>close</code></a> - Closes the transaction pool</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/txpool/src/TxPool.ts#L153\"><code>start</code></a> - Starts transaction processing</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/txpool/src/TxPool.ts#L570\"><code>stop</code></a> - Stops transaction processing</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/txpool/src/TxPool.ts#L128\"><code>deepCopy</code></a> - Creates a deep copy of the pool</li>\n</ul>\n","isPage":false,"text":"\n\nadd - Adds a transaction to the pool\naddUnverified - Adds an unverified transaction to the pool\ngetByHash - Retrieves transactions by their hashes\nremoveByHash - Removes a transaction by its hash\ntxsByPriceAndNonce - Returns transactions sorted by price and nonce\ncleanup - Performs pool cleanup\nopen - Opens the transaction pool\nclose - Closes the transaction pool\nstart - Starts transaction processing\nstop - Stops transaction processing\ndeepCopy - Creates a deep copy of the pool\n\n","title":"Methods","titles":["@tevm/txpool","API Reference","Core Class","TxPool"]},"531":{"href":"/reference/txpool#usage-examples","html":"\n","isPage":false,"text":"\n","title":"Usage Examples","titles":["@tevm/txpool"]},"532":{"href":"/reference/txpool#creating-and-managing-a-transaction-pool","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { TxPool } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/txpool&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ chain: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mainnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TxPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxPoolSize: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  minGasPriceBump: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // 10% price bump for replacement</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Start the pool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">open</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">start</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nimport { TxPool } from &#x27;@tevm/txpool&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\n \nconst common = createCommon({ chain: &#x27;mainnet&#x27; })\nconst txPool = new TxPool({\n  common,\n  maxPoolSize: 5000,\n  minGasPriceBump: 10 // 10% price bump for replacement\n})\n \n// Start the pool\ntxPool.open()\ntxPool.start()\n","title":"Creating and Managing a Transaction Pool","titles":["@tevm/txpool","Usage Examples"]},"533":{"href":"/reference/txpool#adding-transactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add a new transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  requireSignature: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  skipBalance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add an unverified transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addUnverified</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span></code></pre>\n","isPage":false,"text":"\n// Add a new transaction\nawait txPool.add(transaction, {\n  requireSignature: true,\n  skipBalance: false\n})\n \n// Add an unverified transaction\nawait txPool.addUnverified(transaction)\n","title":"Adding Transactions","titles":["@tevm/txpool","Usage Examples"]},"534":{"href":"/reference/txpool#retrieving-transactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transactions by hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getByHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHashes)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transactions by sender</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> senderTxs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBySenderAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(senderAddress)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transactions ordered by price and nonce</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> orderedTxs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">txsByPriceAndNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  baseFee: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  allowedBlobs: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Get transactions by hash\nconst txs = txPool.getByHash(txHashes)\n \n// Get transactions by sender\nconst senderTxs = await txPool.getBySenderAddress(senderAddress)\n \n// Get transactions ordered by price and nonce\nconst orderedTxs = await txPool.txsByPriceAndNonce({\n  baseFee: 1000000000n,\n  allowedBlobs: 3\n})\n","title":"Retrieving Transactions","titles":["@tevm/txpool","Usage Examples"]},"535":{"href":"/reference/txpool#managing-transaction-lifecycle","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Remove a transaction</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeByHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Remove transactions included in new blocks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeNewBlockTxs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(newBlocks)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Perform cleanup of stale transactions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cleanup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\n// Remove a transaction\ntxPool.removeByHash(txHash)\n \n// Remove transactions included in new blocks\ntxPool.removeNewBlockTxs(newBlocks)\n \n// Perform cleanup of stale transactions\ntxPool.cleanup()\n","title":"Managing Transaction Lifecycle","titles":["@tevm/txpool","Usage Examples"]},"536":{"href":"/reference/txpool#pool-lifecycle-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Start the pool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">open</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">start</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Stop the pool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a copy of the pool</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> poolCopy</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deepCopy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(options)</span></span></code></pre>\n","isPage":false,"text":"\n// Start the pool\ntxPool.open()\ntxPool.start()\n \n// Stop the pool\ntxPool.stop()\ntxPool.close()\n \n// Create a copy of the pool\nconst poolCopy = txPool.deepCopy(options)\n","title":"Pool Lifecycle Management","titles":["@tevm/txpool","Usage Examples"]},"537":{"href":"/reference/txpool#configuration","html":"\n<p>The transaction pool can be configured with various options:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxPoolOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Common</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  maxPoolSize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  minGasPriceBump</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  minFeeBump</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  maxPendingTotal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  maxPendingPerAccount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  maxQueuedTotal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  maxQueuedPerAccount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  minPendingNodeBalance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  minRemainingGasLimit</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe transaction pool can be configured with various options:\ninterface TxPoolOptions {\n  common: Common\n  maxPoolSize?: number\n  minGasPriceBump?: number\n  minFeeBump?: number\n  maxPendingTotal?: number\n  maxPendingPerAccount?: number\n  maxQueuedTotal?: number\n  maxQueuedPerAccount?: number\n  minPendingNodeBalance?: bigint\n  minRemainingGasLimit?: bigint\n}\n","title":"Configuration","titles":["@tevm/txpool"]},"538":{"href":"/reference/txpool#configuration-options","html":"\n<ul>\n<li><code>maxPoolSize</code>: Maximum number of transactions in the pool</li>\n<li><code>minGasPriceBump</code>: Minimum price bump percentage for transaction replacement</li>\n<li><code>minFeeBump</code>: Minimum fee bump for transaction replacement</li>\n<li><code>maxPendingTotal</code>: Maximum number of pending transactions</li>\n<li><code>maxPendingPerAccount</code>: Maximum pending transactions per account</li>\n<li><code>maxQueuedTotal</code>: Maximum number of queued transactions</li>\n<li><code>maxQueuedPerAccount</code>: Maximum queued transactions per account</li>\n<li><code>minPendingNodeBalance</code>: Minimum balance required for pending transactions</li>\n<li><code>minRemainingGasLimit</code>: Minimum gas limit for remaining transactions</li>\n</ul>\n","isPage":false,"text":"\n\nmaxPoolSize: Maximum number of transactions in the pool\nminGasPriceBump: Minimum price bump percentage for transaction replacement\nminFeeBump: Minimum fee bump for transaction replacement\nmaxPendingTotal: Maximum number of pending transactions\nmaxPendingPerAccount: Maximum pending transactions per account\nmaxQueuedTotal: Maximum number of queued transactions\nmaxQueuedPerAccount: Maximum queued transactions per account\nminPendingNodeBalance: Minimum balance required for pending transactions\nminRemainingGasLimit: Minimum gas limit for remaining transactions\n\n","title":"Configuration Options","titles":["@tevm/txpool","Configuration"]},"539":{"href":"/reference/txpool#error-handling","html":"\n<p>The transaction pool throws specific errors for various failure scenarios:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;POOL_FULL&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction pool is full&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;UNDERPRICED&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction is underpriced&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;NONCE_TOO_LOW&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction nonce is too low&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe transaction pool throws specific errors for various failure scenarios:\ntry {\n  await txPool.add(transaction)\n} catch (error) {\n  if (error.code === &#x27;POOL_FULL&#x27;) {\n    console.error(&#x27;Transaction pool is full&#x27;)\n  } else if (error.code === &#x27;UNDERPRICED&#x27;) {\n    console.error(&#x27;Transaction is underpriced&#x27;)\n  } else if (error.code === &#x27;NONCE_TOO_LOW&#x27;) {\n    console.error(&#x27;Transaction nonce is too low&#x27;)\n  }\n}\n","title":"Error Handling","titles":["@tevm/txpool"]},"540":{"href":"/reference/txpool#best-practices","html":"\n<ol>\n<li><strong>Regular Cleanup</strong>: Call <code>cleanup()</code> periodically to remove stale transactions</li>\n<li><strong>Transaction Replacement</strong>: Use appropriate gas price bumps for replacement transactions</li>\n<li><strong>Pool Size Management</strong>: Monitor and adjust pool size limits based on network conditions</li>\n<li><strong>Error Handling</strong>: Implement proper error handling for transaction additions and removals</li>\n<li><strong>Lifecycle Management</strong>: Properly manage pool lifecycle with <code>open()</code>, <code>start()</code>, <code>stop()</code>, and <code>close()</code></li>\n</ol>\n","isPage":false,"text":"\n\nRegular Cleanup: Call cleanup() periodically to remove stale transactions\nTransaction Replacement: Use appropriate gas price bumps for replacement transactions\nPool Size Management: Monitor and adjust pool size limits based on network conditions\nError Handling: Implement proper error handling for transaction additions and removals\nLifecycle Management: Properly manage pool lifecycle with open(), start(), stop(), and close()\n\n","title":"Best Practices","titles":["@tevm/txpool"]},"541":{"href":"/reference/txpool#related-packages","html":"\n<ul>\n<li><a href=\"./vm\">@tevm/vm</a> - Virtual Machine implementation</li>\n<li><a href=\"./state\">@tevm/state</a> - State management</li>\n<li><a href=\"./common\">@tevm/common</a> - Chain configuration</li>\n</ul>\n","isPage":false,"text":"\n\n@tevm/vm - Virtual Machine implementation\n@tevm/state - State management\n@tevm/common - Chain configuration\n\n","title":"Related Packages","titles":["@tevm/txpool"]},"542":{"href":"/reference/txpool#license","html":"\n<p>MIT</p>","isPage":false,"text":"\nMIT","title":"License","titles":["@tevm/txpool"]},"543":{"href":"/reference/utils#utilities--addresses","html":"</header>\n<p>Tevm exports a set of lightweight utility functions and classes. Many of these build upon lower-level packages like <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/utils\"><code>tevm/utils</code></a> and <a href=\"https://viem.sh\"><code>viem</code></a> while standardizing usage for Tevm Node. Below are the most commonly used.</p>\n","isPage":true,"text":"\nTevm exports a set of lightweight utility functions and classes. Many of these build upon lower-level packages like tevm/utils and viem while standardizing usage for Tevm Node. Below are the most commonly used.\n","title":"Utilities &amp; Addresses","titles":[]},"544":{"href":"/reference/utils#createaddress","html":"\n<p>Creates an <a href=\"https://ethereum.org/en/developers/docs/accounts/#account-creation\">Ethereum address</a> from various input formats:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Creates a TEVM-style Address object from various input forms</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> addr </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`0x${&quot;00&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">repeat</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// from a hex string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">addr </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">420</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// from a bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">addr </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// from a 20-byte array</span></span></code></pre>\n","isPage":false,"text":"\nCreates an Ethereum address from various input formats:\nimport { createAddress } from &#x27;tevm/address&#x27;\n \n// Creates a TEVM-style Address object from various input forms\nlet addr = createAddress(`0x${&quot;00&quot;.repeat(20)}`)\n// from a hex string\naddr = createAddress(420n)\n// from a bigint\naddr = createAddress(new Uint8Array(20))\n// from a 20-byte array\n","title":"createAddress","titles":["Utilities &amp; Addresses"]},"545":{"href":"/reference/utils#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">declare</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthjsAddress</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span></code></pre>\n","isPage":false,"text":"\ndeclare function createAddress(\n  address: number | bigint | string | Uint8Array | EthjsAddress\n): Address\n","title":"Signature","titles":["Utilities &amp; Addresses","createAddress"]},"546":{"href":"/reference/utils#behavior--notes","html":"\n<ul>\n<li>Accepts various input types: <a href=\"https://ethereum.org/en/developers/docs/data-structures-and-encoding/hex/\"><code>0x</code>-prefixed hex strings</a>, unprefixed hex, numbers, bigints, <code>Uint8Array</code>s, or <code>EthjsAddress</code>.</li>\n<li>Throws <code>InvalidAddressError</code> if it can&#x27;t parse a valid 20-byte address from the input.</li>\n</ul>\n","isPage":false,"text":"\n\nAccepts various input types: 0x-prefixed hex strings, unprefixed hex, numbers, bigints, Uint8Arrays, or EthjsAddress.\nThrows InvalidAddressError if it can&#x27;t parse a valid 20-byte address from the input.\n\n","title":"Behavior &amp; Notes","titles":["Utilities &amp; Addresses","createAddress"]},"547":{"href":"/reference/utils#address-class","html":"\n<p>A thin wrapper around <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/util\"><code>EthjsAddress</code></a> offering a simple, consistent shape for Tevm Node. Created by <code>createAddress</code> or by forging your own:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Address } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> a</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Uint8Array.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* 20 bytes */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ]))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a.bytes)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// a raw 20-byte address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0x....</span></span></code></pre>\n","isPage":false,"text":"\nA thin wrapper around EthjsAddress offering a simple, consistent shape for Tevm Node. Created by createAddress or by forging your own:\nimport { Address } from &#x27;tevm/address&#x27;\n \nconst a = new Address(Uint8Array.from([ /* 20 bytes */ ]))\nconsole.log(a.bytes)  // a raw 20-byte address\nconsole.log(a.toString()) // 0x....\n","title":"Address Class","titles":["Utilities &amp; Addresses"]},"548":{"href":"/reference/utils#createcontractaddress","html":"\n<p>Creates a contract address following <a href=\"https://eips.ethereum.org/EIPS/eip-1014\">EIP-1014</a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createContractAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// from an existing address + nonce, produce the CREATE address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> from</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x1111...1111&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContractAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(from, nonce)</span></span></code></pre>\n","isPage":false,"text":"\nCreates a contract address following EIP-1014:\nimport { createContractAddress } from &#x27;tevm/address&#x27;\n \n// from an existing address + nonce, produce the CREATE address\nconst from = createAddress(&quot;0x1111...1111&quot;)\nconst nonce = 1n\nconst contractAddr = createContractAddress(from, nonce)\n","title":"createContractAddress","titles":["Utilities &amp; Addresses"]},"549":{"href":"/reference/utils#usage","html":"\n<ol>\n<li>Follows standard Ethereum&#x27;s <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/deploying/#how-to-deploy-a-smart-contract\"><code>keccak256(rlp([senderAddress, nonce]))[-20..]</code></a>.</li>\n<li>Ideal for simulating <code>CREATE</code> addresses in test or dev flows.</li>\n</ol>\n","isPage":false,"text":"\n\nFollows standard Ethereum&#x27;s keccak256(rlp([senderAddress, nonce]))[-20..].\nIdeal for simulating CREATE addresses in test or dev flows.\n\n","title":"Usage","titles":["Utilities &amp; Addresses","createContractAddress"]},"550":{"href":"/reference/utils#error-handling","html":"\n<ul>\n<li>Throws <code>InvalidAddressError</code> if the <code>from</code> address is invalid.</li>\n</ul>\n","isPage":false,"text":"\n\nThrows InvalidAddressError if the from address is invalid.\n\n","title":"Error Handling","titles":["Utilities &amp; Addresses","createContractAddress"]},"551":{"href":"/reference/utils#common-errors","html":"\n<ul>\n<li>\n<p><strong>InvalidAddressError</strong>\nThrown when a string/bytes input fails to parse as a valid 20-byte address.</p>\n</li>\n<li>\n<p><strong>UnreachableCodeError</strong>\nThrown internally if a code path was unexpectedly reached. Generally wrapped into a more descriptive error.</p>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\nInvalidAddressError\nThrown when a string/bytes input fails to parse as a valid 20-byte address.\n\n\nUnreachableCodeError\nThrown internally if a code path was unexpectedly reached. Generally wrapped into a more descriptive error.\n\n\n","title":"Common Errors","titles":["Utilities &amp; Addresses"]},"552":{"href":"/reference/utils#other-handy-utilities","html":"\n<p>Some additional lower-level utility re-exports from <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/utils\"><code>tevm/utils</code></a> or <a href=\"https://viem.sh\"><code>viem</code></a>:</p>\n<ul>\n<li><code>hexToBytes(hex: string): Uint8Array</code>\nConvert a hex string to raw bytes (with optional size checks).</li>\n<li><code>keccak256(data: Uint8Array | HexString, &#x27;bytes&#x27; | &#x27;hex&#x27;)</code>\nA standard <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/security/#keccak256-and-sha-3\">keccak256</a> hasher.</li>\n<li><code>encodeFunctionData(...)</code>, <code>toRlp(...)</code>, etc.\nVarious encoding helpers used by Tevm Node internally.</li>\n</ul>\n<blockquote>\n<p><strong>Tip:</strong> If you are building higher-level code in the browser or Node, you may prefer <a href=\"https://viem.sh\"><code>viem</code></a>&#x27;s standardized utilities for bytes conversions, hashing, and ABIs. Tevm re-exports many of these for convenience.</p>\n</blockquote>\n<header>","isPage":false,"text":"\nSome additional lower-level utility re-exports from tevm/utils or viem:\n\nhexToBytes(hex: string): Uint8Array\nConvert a hex string to raw bytes (with optional size checks).\nkeccak256(data: Uint8Array | HexString, &#x27;bytes&#x27; | &#x27;hex&#x27;)\nA standard keccak256 hasher.\nencodeFunctionData(...), toRlp(...), etc.\nVarious encoding helpers used by Tevm Node internally.\n\n\nTip: If you are building higher-level code in the browser or Node, you may prefer viem&#x27;s standardized utilities for bytes conversions, hashing, and ABIs. Tevm re-exports many of these for convenience.\n\n","title":"Other Handy Utilities","titles":["Utilities &amp; Addresses"]},"553":{"href":"/reference/utils#tevmutils","html":"</header>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/utils/docs\">evmts/tevm-monorepo/packages/utils/docs</a> folder.</p>\n</blockquote>\n<p>The <code>@tevm/utils</code> package provides a comprehensive collection of utility functions and types for working with Ethereum data structures, encoding/decoding, and common operations. It combines functionality from various Ethereum libraries and adds Tevm-specific utilities.</p>\n","isPage":false,"text":"\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/utils/docs folder.\n\nThe @tevm/utils package provides a comprehensive collection of utility functions and types for working with Ethereum data structures, encoding/decoding, and common operations. It combines functionality from various Ethereum libraries and adds Tevm-specific utilities.\n","title":"@tevm/utils","titles":[]},"554":{"href":"/reference/utils#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/utils</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/utils\n","title":"Installation","titles":["@tevm/utils"]},"555":{"href":"/reference/utils#main-components","html":"\n","isPage":false,"text":"\n","title":"Main Components","titles":["@tevm/utils"]},"556":{"href":"/reference/utils#data-types-and-encoding","html":"\n","isPage":false,"text":"\n","title":"Data Types and Encoding","titles":["@tevm/utils","Main Components"]},"557":{"href":"/reference/utils#hex-and-bytes-conversion","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytesToHex,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hexToBytes,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytesToBigInt,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytesToNumber,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hexToBigInt,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hexToNumber,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  numberToHex,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  stringToHex,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hexToString</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert bytes to hex</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hex</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> bytesToHex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">164</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;0x01a4&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert hex to bytes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x01a4&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Uint8Array([1, 164])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert to/from numbers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> num</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x01a4&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 420</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hex2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> numberToHex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">420</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;0x01a4&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// String conversion</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> str</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x48656c6c6f&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;Hello&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hex3</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> stringToHex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Hello&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;0x48656c6c6f&#x27;</span></span></code></pre>\n","isPage":false,"text":"\nimport {\n  bytesToHex,\n  hexToBytes,\n  bytesToBigInt,\n  bytesToNumber,\n  hexToBigInt,\n  hexToNumber,\n  numberToHex,\n  stringToHex,\n  hexToString\n} from &#x27;@tevm/utils&#x27;\n \n// Convert bytes to hex\nconst hex = bytesToHex(new Uint8Array([1, 164])) // &#x27;0x01a4&#x27;\n \n// Convert hex to bytes\nconst bytes = hexToBytes(&#x27;0x01a4&#x27;) // Uint8Array([1, 164])\n \n// Convert to/from numbers\nconst num = hexToNumber(&#x27;0x01a4&#x27;) // 420\nconst hex2 = numberToHex(420) // &#x27;0x01a4&#x27;\n \n// String conversion\nconst str = hexToString(&#x27;0x48656c6c6f&#x27;) // &#x27;Hello&#x27;\nconst hex3 = stringToHex(&#x27;Hello&#x27;) // &#x27;0x48656c6c6f&#x27;\n","title":"Hex and Bytes Conversion","titles":["@tevm/utils","Main Components","Data Types and Encoding"]},"558":{"href":"/reference/utils#type-checking","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { isHex, isBytes, isAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isHex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// true</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// true</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// true</span></span></code></pre>\n","isPage":false,"text":"\nimport { isHex, isBytes, isAddress } from &#x27;@tevm/utils&#x27;\n \nisHex(&#x27;0x123&#x27;) // true\nisBytes(new Uint8Array()) // true\nisAddress(&#x27;0x123...&#x27;) // true\n","title":"Type Checking","titles":["@tevm/utils","Main Components","Data Types and Encoding"]},"559":{"href":"/reference/utils#ethereum-specific","html":"\n","isPage":false,"text":"\n","title":"Ethereum Specific","titles":["@tevm/utils","Main Components"]},"560":{"href":"/reference/utils#unit-conversion","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  formatEther,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  parseEther,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  formatGwei,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  parseGwei</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert wei to ether</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">formatEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;1.0&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert ether to wei</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1.0&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1000000000000000000n</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Work with gwei</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">formatGwei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;1.0&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseGwei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1.0&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1000000000n</span></span></code></pre>\n","isPage":false,"text":"\nimport {\n  formatEther,\n  parseEther,\n  formatGwei,\n  parseGwei\n} from &#x27;@tevm/utils&#x27;\n \n// Convert wei to ether\nformatEther(1000000000000000000n) // &#x27;1.0&#x27;\n \n// Convert ether to wei\nparseEther(&#x27;1.0&#x27;) // 1000000000000000000n\n \n// Work with gwei\nformatGwei(1000000000n) // &#x27;1.0&#x27;\nparseGwei(&#x27;1.0&#x27;) // 1000000000n\n","title":"Unit Conversion","titles":["@tevm/utils","Main Components","Ethereum Specific"]},"561":{"href":"/reference/utils#cryptographic-functions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  keccak256,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ecrecover,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ecsign,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  randomBytes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Generate keccak256 hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Sign data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ecsign</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(messageHash, privateKey)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Recover address from signature</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ecrecover</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(messageHash, v, r, s)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Generate random bytes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> random</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> randomBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nimport {\n  keccak256,\n  ecrecover,\n  ecsign,\n  randomBytes\n} from &#x27;@tevm/utils&#x27;\n \n// Generate keccak256 hash\nconst hash = keccak256(&#x27;0x1234&#x27;)\n \n// Sign data\nconst signature = ecsign(messageHash, privateKey)\n \n// Recover address from signature\nconst address = ecrecover(messageHash, v, r, s)\n \n// Generate random bytes\nconst random = randomBytes(32)\n","title":"Cryptographic Functions","titles":["@tevm/utils","Main Components","Ethereum Specific"]},"562":{"href":"/reference/utils#abi-encodingdecoding","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  encodeAbiParameters,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  decodeAbiParameters,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  encodeFunctionData,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  decodeFunctionData,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  encodeEventTopics,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  decodeEventLog</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode function data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  functionName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [address, amount]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Decode function data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> decodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Work with events</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> topics</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> encodeEventTopics</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  eventName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [from, to, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport {\n  encodeAbiParameters,\n  decodeAbiParameters,\n  encodeFunctionData,\n  decodeFunctionData,\n  encodeEventTopics,\n  decodeEventLog\n} from &#x27;@tevm/utils&#x27;\n \n// Encode function data\nconst data = encodeFunctionData({\n  abi: [...],\n  functionName: &#x27;transfer&#x27;,\n  args: [address, amount]\n})\n \n// Decode function data\nconst result = decodeFunctionData({\n  abi: [...],\n  data: &#x27;0x...&#x27;\n})\n \n// Work with events\nconst topics = encodeEventTopics({\n  abi: [...],\n  eventName: &#x27;Transfer&#x27;,\n  args: [from, to, null]\n})\n","title":"ABI Encoding/Decoding","titles":["@tevm/utils","Main Components"]},"563":{"href":"/reference/utils#rlp-encodingdecoding","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { toRlp, fromRlp } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode to RLP</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rlp</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> toRlp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x456&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Decode from RLP</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> decoded</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fromRlp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rlp)</span></span></code></pre>\n","isPage":false,"text":"\nimport { toRlp, fromRlp } from &#x27;@tevm/utils&#x27;\n \n// Encode to RLP\nconst rlp = toRlp([&#x27;0x123&#x27;, &#x27;0x456&#x27;])\n \n// Decode from RLP\nconst decoded = fromRlp(rlp)\n","title":"RLP Encoding/Decoding","titles":["@tevm/utils","Main Components"]},"564":{"href":"/reference/utils#memory-database","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryDb } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create an in-memory database</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> db</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryDb</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Initialize with existing data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> initialData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> db2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryDb</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(initialData)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createMemoryDb } from &#x27;@tevm/utils&#x27;\n \n// Create an in-memory database\nconst db = createMemoryDb()\n \n// Initialize with existing data\nconst initialData = new Map()\nconst db2 = createMemoryDb(initialData)\n","title":"Memory Database","titles":["@tevm/utils","Main Components"]},"565":{"href":"/reference/utils#event-emitter","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { AsyncEventEmitter } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> emitter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> AsyncEventEmitter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add listener</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">emitter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;event&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Handle event</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Emit event</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> emitter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">emit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;event&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data)</span></span></code></pre>\n","isPage":false,"text":"\nimport { AsyncEventEmitter } from &#x27;@tevm/utils&#x27;\n \nconst emitter = new AsyncEventEmitter()\n \n// Add listener\nemitter.on(&#x27;event&#x27;, async (data) =&gt; {\n  // Handle event\n})\n \n// Emit event\nawait emitter.emit(&#x27;event&#x27;, data)\n","title":"Event Emitter","titles":["@tevm/utils","Main Components"]},"566":{"href":"/reference/utils#types","html":"\n","isPage":false,"text":"\n","title":"Types","titles":["@tevm/utils"]},"567":{"href":"/reference/utils#basic-types","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Hex,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  BlockTag,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  BlockNumber,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  BytesLike,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  BigIntLike</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example type usage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hex</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockTag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BlockTag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;latest&#x27;</span></span></code></pre>\n","isPage":false,"text":"\nimport type {\n  Address,\n  Hex,\n  BlockTag,\n  BlockNumber,\n  BytesLike,\n  BigIntLike\n} from &#x27;@tevm/utils&#x27;\n \n// Example type usage\nconst address: Address = &#x27;0x...&#x27;\nconst hex: Hex = &#x27;0x...&#x27;\nconst blockTag: BlockTag = &#x27;latest&#x27;\n","title":"Basic Types","titles":["@tevm/utils","Types"]},"568":{"href":"/reference/utils#abi-types","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Abi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  AbiFunction,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  AbiEvent,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  AbiConstructor,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ParseAbi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  FormatAbi</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Parse ABI</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ParsedAbi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ParseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> abiString&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Format ABI</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FormattedAbi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FormatAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> parsedAbi&gt;</span></span></code></pre>\n","isPage":false,"text":"\nimport type {\n  Abi,\n  AbiFunction,\n  AbiEvent,\n  AbiConstructor,\n  ParseAbi,\n  FormatAbi\n} from &#x27;@tevm/utils&#x27;\n \n// Parse ABI\ntype ParsedAbi = ParseAbi&lt;typeof abiString&gt;\n \n// Format ABI\ntype FormattedAbi = FormatAbi&lt;typeof parsedAbi&gt;\n","title":"ABI Types","titles":["@tevm/utils","Types"]},"569":{"href":"/reference/utils#contract-types","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ContractFunctionName,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ContractConstructorArgs,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ExtractAbiFunction,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ExtractAbiEvent</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Extract function from ABI</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransferFunction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ExtractAbiFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> abi, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Extract event from ABI</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransferEvent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ExtractAbiEvent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> abi, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\nimport type {\n  ContractFunctionName,\n  ContractConstructorArgs,\n  ExtractAbiFunction,\n  ExtractAbiEvent\n} from &#x27;@tevm/utils&#x27;\n \n// Extract function from ABI\ntype TransferFunction = ExtractAbiFunction&lt;typeof abi, &#x27;transfer&#x27;&gt;\n \n// Extract event from ABI\ntype TransferEvent = ExtractAbiEvent&lt;typeof abi, &#x27;Transfer&#x27;&gt;\n","title":"Contract Types","titles":["@tevm/utils","Types"]},"570":{"href":"/reference/utils#constants","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  GWEI_TO_WEI,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  KECCAK256_RLP,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  KECCAK256_RLP_ARRAY</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Common conversion factors and constants</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">GWEI_TO_WEI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1000000000n</span></span></code></pre>\n","isPage":false,"text":"\nimport {\n  GWEI_TO_WEI,\n  KECCAK256_RLP,\n  KECCAK256_RLP_ARRAY\n} from &#x27;@tevm/utils&#x27;\n \n// Common conversion factors and constants\nconsole.log(GWEI_TO_WEI) // 1000000000n\n","title":"Constants","titles":["@tevm/utils"]},"571":{"href":"/reference/utils#error-handling-1","html":"\n<p>The package uses the <code>@tevm/errors</code> package for standardized error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { invariant } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Assert conditions</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">invariant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(condition, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Error message&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nThe package uses the @tevm/errors package for standardized error handling:\nimport { invariant } from &#x27;@tevm/utils&#x27;\n \n// Assert conditions\ninvariant(condition, &#x27;Error message&#x27;)\n","title":"Error Handling","titles":["@tevm/utils"]},"572":{"href":"/reference/utils#see-also","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/utilities/fromBytes\">Viem Documentation</a></li>\n<li><a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/util\">EthereumJS Util Documentation</a></li>\n<li><a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html\">ABI Specification</a></li>\n</ul>","isPage":false,"text":"\n\nViem Documentation\nEthereumJS Util Documentation\nABI Specification\n","title":"See Also","titles":["@tevm/utils"]},"573":{"href":"/reference/vm#tevmvm","html":"</header>\n<p>The <code>@tevm/vm</code> package provides a high-performance Ethereum Virtual Machine (EVM) implementation specifically designed for Tevm. It extends the functionality of the base EVM with additional features for testing, debugging, and development purposes.</p>\n","isPage":true,"text":"\nThe @tevm/vm package provides a high-performance Ethereum Virtual Machine (EVM) implementation specifically designed for Tevm. It extends the functionality of the base EVM with additional features for testing, debugging, and development purposes.\n","title":"@tevm/vm","titles":[]},"574":{"href":"/reference/vm#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/vm</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/vm\n","title":"Installation","titles":["@tevm/vm"]},"575":{"href":"/reference/vm#overview","html":"\n<p>The VM package is a core component of Tevm that handles the execution of EVM bytecode, transaction processing, and block building. It provides a robust set of tools for:</p>\n<ul>\n<li>Executing EVM bytecode and smart contracts</li>\n<li>Processing transactions and blocks</li>\n<li>Managing state transitions</li>\n<li>Supporting various hardforks and EIPs</li>\n<li>Debugging and profiling execution</li>\n</ul>\n","isPage":false,"text":"\nThe VM package is a core component of Tevm that handles the execution of EVM bytecode, transaction processing, and block building. It provides a robust set of tools for:\n\nExecuting EVM bytecode and smart contracts\nProcessing transactions and blocks\nManaging state transitions\nSupporting various hardforks and EIPs\nDebugging and profiling execution\n\n","title":"Overview","titles":["@tevm/vm"]},"576":{"href":"/reference/vm#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["@tevm/vm"]},"577":{"href":"/reference/vm#core-types","html":"\n","isPage":false,"text":"\n","title":"Core Types","titles":["@tevm/vm","API Reference"]},"578":{"href":"/reference/vm#vm","html":"\n<p>The main VM type that extends the base VM with Tevm-specific functionality:</p>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/Vm.ts#L6\"><code>Vm</code></a> - Core VM type with methods for block building, transaction execution, and state management</li>\n</ul>\n","isPage":false,"text":"\nThe main VM type that extends the base VM with Tevm-specific functionality:\n\nVm - Core VM type with methods for block building, transaction execution, and state management\n\n","title":"Vm","titles":["@tevm/vm","API Reference","Core Types"]},"579":{"href":"/reference/vm#block-building","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/BlockBuilder.ts\"><code>BlockBuilder</code></a> - Class for building and managing blocks</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/buildBlock.ts#L5\"><code>BuildBlock</code></a> - Function type for block building operations</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/BuildBlockOpts.ts\"><code>BuildBlockOpts</code></a> - Options for block building</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/BuildStatus.ts\"><code>BuildStatus</code></a> - Enumeration of block building states</li>\n</ul>\n","isPage":false,"text":"\n\nBlockBuilder - Class for building and managing blocks\nBuildBlock - Function type for block building operations\nBuildBlockOpts - Options for block building\nBuildStatus - Enumeration of block building states\n\n","title":"Block Building","titles":["@tevm/vm","API Reference","Core Types"]},"580":{"href":"/reference/vm#transaction-processing","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/runTx.ts\"><code>RunTx</code></a> - Function type for transaction execution</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/RunTxOpts.ts\"><code>RunTxOpts</code></a> - Options for transaction execution</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/RunTxResult.ts\"><code>RunTxResult</code></a> - Result of transaction execution</li>\n</ul>\n","isPage":false,"text":"\n\nRunTx - Function type for transaction execution\nRunTxOpts - Options for transaction execution\nRunTxResult - Result of transaction execution\n\n","title":"Transaction Processing","titles":["@tevm/vm","API Reference","Core Types"]},"581":{"href":"/reference/vm#block-processing","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/runBlock.ts\"><code>RunBlock</code></a> - Function type for block execution</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/RunBlockOpts.ts\"><code>RunBlockOpts</code></a> - Options for block execution</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/RunBlockResult.ts\"><code>RunBlockResult</code></a> - Result of block execution</li>\n</ul>\n","isPage":false,"text":"\n\nRunBlock - Function type for block execution\nRunBlockOpts - Options for block execution\nRunBlockResult - Result of block execution\n\n","title":"Block Processing","titles":["@tevm/vm","API Reference","Core Types"]},"582":{"href":"/reference/vm#events","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/events/AfterTxEvent.ts\"><code>AfterTxEvent</code></a> - Event emitted after transaction execution</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/events/AfterBlockEvent.ts\"><code>AfterBlockEvent</code></a> - Event emitted after block execution</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/utils/VMEvents.ts\"><code>VMEvents</code></a> - VM event types and handlers</li>\n</ul>\n","isPage":false,"text":"\n\nAfterTxEvent - Event emitted after transaction execution\nAfterBlockEvent - Event emitted after block execution\nVMEvents - VM event types and handlers\n\n","title":"Events","titles":["@tevm/vm","API Reference","Core Types"]},"583":{"href":"/reference/vm#core-functions","html":"\n","isPage":false,"text":"\n","title":"Core Functions","titles":["@tevm/vm","API Reference"]},"584":{"href":"/reference/vm#vm-creation-and-management","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/createVm.js#L11\"><code>createVm</code></a> - Creates a new VM instance</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/deepCopy.js#L20\"><code>deepCopy</code></a> - Creates a deep copy of a VM instance</li>\n</ul>\n","isPage":false,"text":"\n\ncreateVm - Creates a new VM instance\ndeepCopy - Creates a deep copy of a VM instance\n\n","title":"VM Creation and Management","titles":["@tevm/vm","API Reference","Core Functions"]},"585":{"href":"/reference/vm#block-operations","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/applyBlock.ts#L24\"><code>applyBlock</code></a> - Applies a block to the current state</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/buildBlock.ts#L8\"><code>buildBlock</code></a> - Creates a new block builder instance</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/genTxTrie.ts#L6\"><code>genTxTrie</code></a> - Generates transaction trie for a block</li>\n</ul>\n","isPage":false,"text":"\n\napplyBlock - Applies a block to the current state\nbuildBlock - Creates a new block builder instance\ngenTxTrie - Generates transaction trie for a block\n\n","title":"Block Operations","titles":["@tevm/vm","API Reference","Core Functions"]},"586":{"href":"/reference/vm#transaction-operations","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/validateRunTx.js#L10\"><code>validateRunTx</code></a> - Validates transaction parameters before execution</li>\n</ul>\n","isPage":false,"text":"\n\nvalidateRunTx - Validates transaction parameters before execution\n\n","title":"Transaction Operations","titles":["@tevm/vm","API Reference","Core Functions"]},"587":{"href":"/reference/vm#state-management","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/applyDAOHardfork.js\"><code>applyDAOHardfork</code></a> - Applies the DAO hardfork state changes</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/vm/src/actions/execHardfork.js#L14\"><code>execHardfork</code></a> - Executes hardfork-specific operations</li>\n</ul>\n","isPage":false,"text":"\n\napplyDAOHardfork - Applies the DAO hardfork state changes\nexecHardfork - Executes hardfork-specific operations\n\n","title":"State Management","titles":["@tevm/vm","API Reference","Core Functions"]},"588":{"href":"/reference/vm#usage-examples","html":"\n","isPage":false,"text":"\n","title":"Usage Examples","titles":["@tevm/vm"]},"589":{"href":"/reference/vm#creating-a-vm-instance","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createVm } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/vm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Common } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Common</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ chain: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mainnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ common })</span></span></code></pre>\n","isPage":false,"text":"\nimport { createVm } from &#x27;@tevm/vm&#x27;\nimport { Common } from &#x27;@tevm/common&#x27;\n \nconst common = new Common({ chain: &#x27;mainnet&#x27; })\nconst vm = createVm({ common })\n","title":"Creating a VM Instance","titles":["@tevm/vm","Usage Examples"]},"590":{"href":"/reference/vm#building-and-executing-a-block","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createVm, BlockBuilder } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/vm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* options */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockBuilder</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">buildBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  parentBlock: block,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blockOpts: { </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* options */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add transactions to the block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> blockBuilder.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Build and execute the block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> blockBuilder.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">build</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ block })</span></span></code></pre>\n","isPage":false,"text":"\nimport { createVm, BlockBuilder } from &#x27;@tevm/vm&#x27;\n \nconst vm = createVm({ /* options */ })\nconst blockBuilder = await vm.buildBlock({\n  parentBlock: block,\n  blockOpts: { /* options */ }\n})\n \n// Add transactions to the block\nawait blockBuilder.addTransaction(tx)\n \n// Build and execute the block\nconst block = await blockBuilder.build()\nconst result = await vm.runBlock({ block })\n","title":"Building and Executing a Block","titles":["@tevm/vm","Usage Examples"]},"591":{"href":"/reference/vm#executing-a-transaction","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createVm } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/vm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* options */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Gas used:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, txResult.gasUsed.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Return value:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, txResult.execResult.returnValue)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createVm } from &#x27;@tevm/vm&#x27;\n \nconst vm = createVm({ /* options */ })\nconst txResult = await vm.runTx({ tx })\n \nconsole.log(&#x27;Gas used:&#x27;, txResult.gasUsed.toString())\nconsole.log(&#x27;Return value:&#x27;, txResult.execResult.returnValue)\n","title":"Executing a Transaction","titles":["@tevm/vm","Usage Examples"]},"592":{"href":"/reference/vm#error-handling","html":"\n<p>The VM package throws specific error types for different failure scenarios:</p>\n<ul>\n<li>Transaction execution errors (invalid nonce, insufficient balance, etc.)</li>\n<li>Block validation errors (invalid state root, gas limit, etc.)</li>\n<li>VM execution errors (out of gas, invalid opcode, etc.)</li>\n</ul>\n<p>Example error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;INVALID_OPCODE&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Invalid operation in contract code&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;OUT_OF_GAS&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction ran out of gas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe VM package throws specific error types for different failure scenarios:\n\nTransaction execution errors (invalid nonce, insufficient balance, etc.)\nBlock validation errors (invalid state root, gas limit, etc.)\nVM execution errors (out of gas, invalid opcode, etc.)\n\nExample error handling:\ntry {\n  await vm.runTx({ tx })\n} catch (error) {\n  if (error.code === &#x27;INVALID_OPCODE&#x27;) {\n    console.error(&#x27;Invalid operation in contract code&#x27;)\n  } else if (error.code === &#x27;OUT_OF_GAS&#x27;) {\n    console.error(&#x27;Transaction ran out of gas&#x27;)\n  }\n}\n","title":"Error Handling","titles":["@tevm/vm"]},"593":{"href":"/reference/vm#configuration","html":"\n<p>The VM can be configured with various options through the <code>VMOpts</code> interface:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Chain configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  stateManager, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Custom state manager</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blockchain, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Custom blockchain</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  activatePrecompiles: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Activate precompiled contracts</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... other options</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe VM can be configured with various options through the VMOpts interface:\nconst vm = createVm({\n  common, // Chain configuration\n  stateManager, // Custom state manager\n  blockchain, // Custom blockchain\n  activatePrecompiles: true, // Activate precompiled contracts\n  // ... other options\n})\n","title":"Configuration","titles":["@tevm/vm"]},"594":{"href":"/reference/vm#related-packages","html":"\n<ul>\n<li><a href=\"./state\">@tevm/state</a> - State management for the VM</li>\n<li><a href=\"./common\">@tevm/common</a> - Chain configuration and utilities</li>\n<li><a href=\"./blockchain\">@tevm/blockchain</a> - Blockchain management</li>\n</ul>\n","isPage":false,"text":"\n\n@tevm/state - State management for the VM\n@tevm/common - Chain configuration and utilities\n@tevm/blockchain - Blockchain management\n\n","title":"Related Packages","titles":["@tevm/vm"]},"595":{"href":"/reference/vm#license","html":"\n<p>MIT</p>","isPage":false,"text":"\nMIT","title":"License","titles":["@tevm/vm"]}},"dirtCount":0,"index":[["zkevm",{"2":{"357":1}}],["zksync",{"2":{"357":2}}],["zero",{"2":{"255":1,"298":1,"305":1}}],["kzgproofs",{"2":{"515":1}}],["kzgcommitments",{"2":{"515":1}}],["kzg",{"2":{"353":1,"354":1,"363":1}}],["keccak256",{"2":{"549":1,"552":2,"561":3,"570":2}}],["keep",{"2":{"47":1,"121":1,"529":1}}],["key",{"0":{"37":1,"126":1,"240":1,"255":1,"458":1},"1":{"241":1,"242":1,"243":1,"244":1},"2":{"5":2,"16":6,"57":1,"60":1,"63":1,"82":1,"130":2,"179":1,"185":1,"229":1,"241":1,"247":1,"340":1,"344":1,"488":1,"527":1}}],["└──",{"2":{"146":3}}],["│",{"2":{"146":9}}],["├──",{"2":{"146":5}}],["721",{"2":{"385":1}}],["718096",{"2":{"144":2,"145":1}}],["742a2a",{"2":{"141":1}}],["+",{"2":{"69":1,"144":2,"180":1,"183":1,"419":1,"548":1}}],["+=",{"2":{"16":2,"18":2,"22":1,"80":2,"144":1,"149":1}}],["8545",{"2":{"444":1}}],["8",{"2":{"53":1,"144":1}}],["55",{"2":{"298":1,"307":1}}],["5rem",{"2":{"141":4}}],["5n",{"2":{"68":1,"419":1}}],["5",{"0":{"234":1},"2":{"53":2,"124":1,"141":1,"192":1,"196":1,"218":1}}],["500000n",{"2":{"383":1}}],["5000",{"2":{"39":1,"218":1,"532":1}}],["60",{"2":{"53":1}}],["6",{"2":{"44":1,"155":1,"158":1,"162":1}}],["⚡",{"2":{"37":1}}],["🧹",{"2":{"37":1}}],["📊",{"2":{"37":1}}],["🔄",{"2":{"37":1}}],["🔍",{"2":{"37":1}}],["quantity",{"2":{"396":2}}],["quot",{"2":{"141":28,"142":2,"144":12,"145":12,"148":6,"149":4,"168":2,"261":2,"431":2,"435":2,"472":14,"544":2,"548":2}}],["queued",{"2":{"538":2}}],["queues",{"2":{"215":1}}],["queue",{"2":{"106":1}}],["queries",{"2":{"33":2,"110":1}}],["queryfilter",{"2":{"158":1}}],["query",{"2":{"32":1,"59":1,"134":1,"469":1}}],["querying",{"0":{"30":1,"44":1,"158":1},"2":{"30":1}}],["quickstart",{"0":{"250":1},"1":{"251":1,"252":1,"253":1},"2":{"249":1}}],["quick",{"0":{"36":1,"252":1,"256":1,"451":1,"475":1,"497":1},"2":{"214":1,"220":1}}],["||",{"2":{"16":1,"22":1,"80":1}}],["|",{"0":{"300":4},"2":{"14":3,"59":3,"141":1,"148":1,"328":2,"329":2,"432":1,"462":1,"472":9,"545":4,"552":2}}],["yarn",{"2":{"251":1}}],["y",{"2":{"141":1}}],["yellow",{"2":{"10":1,"137":1}}],["yourkey",{"2":{"167":1,"170":1}}],["your",{"2":{"11":1,"12":1,"97":1,"141":1,"146":1,"169":1,"179":1,"185":1,"228":1,"241":1,"247":1,"340":1,"344":1,"384":1,"547":1}}],["you",{"0":{"228":1},"2":{"0":1,"11":1,"23":1,"58":1,"62":1,"72":1,"79":1,"82":1,"95":2,"97":1,"121":1,"168":1,"196":1,"212":1,"216":1,"218":1,"226":2,"227":1,"239":1,"254":1,"261":1,"552":2}}],["jest",{"2":{"173":1}}],["js",{"0":{"151":1,"248":1},"1":{"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1},"2":{"151":1,"227":1,"248":1,"254":2,"264":2}}],["jsontx",{"2":{"504":1}}],["jsonheader",{"2":{"313":1}}],["jsonblock",{"2":{"313":1}}],["jsonrpctx",{"2":{"504":1}}],["jsonrpcschemawallet",{"2":{"394":1}}],["jsonrpcschematevm",{"2":{"394":1}}],["jsonrpcschemapublic",{"2":{"394":1}}],["jsonrpcblock",{"2":{"313":1}}],["jsonrpc",{"2":{"109":1}}],["jsonrpcerror",{"2":{"92":1}}],["json",{"0":{"84":1,"237":1,"276":1,"278":1,"290":1},"1":{"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"279":1,"280":1,"281":1},"2":{"10":1,"34":1,"56":1,"70":1,"71":2,"84":1,"85":1,"92":1,"94":1,"109":1,"137":2,"146":1,"165":1,"171":1,"175":1,"184":1,"227":1,"236":1,"237":1,"265":1,"267":1,"292":1,"310":1,"313":3,"315":1,"320":2,"322":1,"369":1,"386":1,"388":1,"393":1,"394":3,"404":1,"406":2,"504":2,"519":1}}],["justify",{"2":{"141":1}}],["just",{"2":{"23":1}}],["javascript",{"0":{"260":1},"1":{"261":1,"262":1,"263":1,"264":1},"2":{"0":1,"94":1,"227":2,"228":2,"243":1,"254":2,"255":1,"259":1}}],["`processing",{"2":{"345":1}}],["`precompile",{"2":{"9":1}}],["`0x$",{"2":{"298":1,"302":1,"306":1,"329":1,"466":1,"544":1}}],["`0x",{"2":{"227":1}}],["`$",{"2":{"80":1,"154":1}}],["```ts",{"2":{"77":1}}],["`transaction",{"2":{"33":1}}],["`",{"2":{"9":1,"33":1,"80":1,"154":1,"227":1,"298":1,"302":1,"306":1,"329":1,"345":1,"466":1,"544":1}}],["$transactions",{"2":{"148":1}}],["$",{"2":{"9":1,"33":1,"144":1,"154":1,"345":1}}],["420",{"2":{"557":2}}],["420n",{"2":{"544":1}}],["4788",{"2":{"446":1}}],["4895",{"2":{"446":1}}],["4844",{"0":{"515":1},"2":{"44":1,"48":1,"446":1,"504":1,"506":1,"508":1,"521":1}}],["4001",{"2":{"404":1}}],["4a5568",{"2":{"141":3}}],["4",{"0":{"8":1,"53":1,"233":1,"239":1,"244":1,"264":1},"2":{"124":1,"136":1}}],["human",{"2":{"369":1,"375":1}}],["humanreadableabi",{"2":{"239":1,"375":1,"381":1}}],["h1",{"2":{"142":3}}],["historicalbalance",{"2":{"170":1}}],["historical",{"2":{"158":1,"170":1}}],["history",{"0":{"148":1},"2":{"141":5,"148":1,"233":1}}],["highly",{"2":{"255":1}}],["high",{"0":{"236":1},"2":{"95":1,"110":1,"136":1,"222":1,"437":1,"440":1,"573":1}}],["higher",{"2":{"37":1,"43":2,"552":1}}],["h3",{"2":{"141":8,"148":2,"149":2}}],["http",{"0":{"444":1},"2":{"99":1,"109":2,"167":2,"170":1,"171":2,"179":1,"185":2,"241":1,"247":1,"256":2,"340":2,"344":2,"431":1,"435":2}}],["https",{"2":{"95":4,"167":1,"170":1,"171":2,"179":1,"185":1,"241":1,"247":1,"256":1,"340":1,"344":1,"405":1,"431":1,"435":1}}],["holesky",{"2":{"356":2}}],["hook",{"2":{"228":1}}],["hot",{"2":{"136":1}}],["hotspots",{"2":{"20":2}}],["how",{"2":{"29":1,"138":1,"151":1,"172":1,"187":1,"212":1,"242":1}}],["handy",{"0":{"552":1}}],["handled",{"2":{"529":2}}],["handlependingtransactionswarning",{"2":{"277":1}}],["handlers",{"2":{"236":1,"267":1,"423":1,"582":1}}],["handler",{"2":{"74":1,"75":1,"76":1,"77":1,"164":3,"272":1,"273":1,"274":1}}],["handles",{"2":{"35":1,"125":1,"126":1,"130":1,"134":1,"230":1,"233":1,"453":1,"457":1,"575":1}}],["handle",{"2":{"9":2,"31":2,"33":3,"51":4,"81":1,"82":1,"93":1,"136":2,"163":1,"164":1,"255":1,"277":1,"382":2,"401":1,"404":1,"471":2,"520":1,"565":1}}],["handling",{"0":{"7":1,"31":1,"51":1,"81":1,"92":1,"105":1,"156":1,"161":1,"291":1,"303":1,"341":1,"365":1,"379":1,"382":1,"401":1,"404":1,"420":1,"471":1,"520":1,"539":1,"550":1,"571":1,"592":1},"1":{"106":1,"107":1,"157":1,"158":1},"2":{"9":1,"31":1,"37":1,"51":1,"69":1,"92":2,"93":1,"102":1,"103":1,"104":1,"106":1,"109":2,"112":1,"115":1,"116":1,"119":1,"136":1,"157":1,"164":1,"215":1,"221":1,"291":1,"293":1,"295":1,"308":1,"323":1,"325":1,"369":1,"388":1,"411":2,"423":2,"455":1,"471":1,"477":1,"479":1,"524":1,"540":2,"571":1,"592":1}}],["have",{"2":{"223":1,"225":1,"381":1}}],["hardhat",{"2":{"163":1,"359":2}}],["hardforks",{"2":{"353":1,"575":1}}],["hardfork",{"2":{"27":1,"349":1,"353":1,"361":1,"364":2,"587":2}}],["hasstateroot",{"2":{"489":1}}],["has",{"2":{"42":1,"228":1}}],["hashing",{"2":{"552":1}}],["hasher",{"2":{"552":1}}],["hashes",{"2":{"55":1,"530":1}}],["hash2",{"2":{"44":1}}],["hash1",{"2":{"44":1}}],["hash",{"2":{"26":1,"44":1,"55":1,"60":1,"87":1,"96":1,"128":3,"131":1,"134":1,"148":5,"155":1,"161":2,"185":1,"191":1,"281":1,"320":3,"328":1,"334":1,"340":1,"396":2,"438":2,"458":2,"468":2,"519":2,"530":1,"534":1,"561":2}}],["hello",{"2":{"557":2}}],["helpers",{"0":{"114":1,"183":1},"1":{"115":1,"116":1,"117":1},"2":{"163":1,"552":1}}],["helper",{"2":{"50":1,"182":1,"183":2}}],["helps",{"2":{"11":1,"219":1}}],["head",{"0":{"339":1},"2":{"339":3,"343":1,"529":1}}],["headerdata",{"2":{"313":1}}],["headers",{"0":{"320":1},"2":{"308":1,"312":1,"343":1}}],["header",{"2":{"104":1,"128":3,"310":1,"313":2,"315":1,"316":1,"319":1,"328":2,"336":2,"338":1,"341":1,"343":1,"345":1}}],["height",{"2":{"141":1,"529":1}}],["hex3",{"2":{"557":1}}],["hex2",{"2":{"557":1}}],["hextostring",{"2":{"557":2}}],["hextonumber",{"2":{"557":2}}],["hextobigint",{"2":{"557":1}}],["hextobytes",{"2":{"5":2,"26":1,"30":1,"31":2,"552":1,"557":2}}],["hexstring",{"2":{"552":1}}],["hex",{"0":{"557":1},"2":{"60":5,"63":3,"77":1,"79":1,"81":1,"144":2,"148":1,"298":2,"300":2,"302":1,"544":1,"546":2,"552":3,"557":3,"567":3}}],["here",{"2":{"2":1,"29":1,"225":1}}],["30000",{"2":{"362":1}}],["30000000n",{"2":{"319":1}}],["30000000000n",{"2":{"43":1,"383":1}}],["3",{"0":{"7":1,"18":1,"22":1,"52":1,"68":1,"162":1,"180":1,"192":1,"196":1,"232":1,"238":1,"243":1,"253":1,"263":1,"383":1,"405":1},"2":{"124":1,"136":1,"503":1,"508":1,"515":1,"534":1}}],["32099",{"2":{"92":1}}],["32000",{"2":{"92":1,"401":1,"404":1}}],["32603",{"2":{"92":1}}],["32602",{"2":{"92":1}}],["32601",{"2":{"92":1}}],["32600",{"2":{"92":1}}],["32700",{"2":{"92":1}}],["32",{"2":{"5":2,"74":1,"144":1,"302":3,"306":1,"561":1}}],["less",{"2":{"226":1}}],["left",{"2":{"141":1}}],["letter",{"2":{"144":1}}],["let",{"2":{"141":6,"144":4,"145":3,"164":1,"180":3,"185":1,"544":1}}],["leverage",{"2":{"121":1,"403":1}}],["level",{"0":{"161":1,"236":1},"2":{"72":2,"74":1,"95":2,"103":1,"110":1,"136":1,"194":1,"221":1,"222":2,"225":1,"227":1,"238":1,"437":1,"440":2,"485":3,"543":1,"552":2}}],["levels",{"2":{"42":1,"119":1}}],["legacytx",{"2":{"517":1}}],["legacytxdata",{"2":{"512":1,"513":1}}],["legacytransaction",{"2":{"503":1,"508":1,"517":2}}],["legacy",{"0":{"512":1},"2":{"48":1,"503":1,"506":1}}],["least",{"2":{"43":2}}],["length",{"2":{"6":1,"7":1,"9":2,"31":1,"77":1,"79":1,"82":2,"141":1,"144":1,"176":1}}],["links",{"0":{"451":1,"475":1,"497":1}}],["licensed",{"2":{"448":1,"473":2}}],["license",{"0":{"448":1,"473":1,"542":1,"595":1},"2":{"448":1,"473":2}}],["light",{"2":{"263":1}}],["lightweight",{"2":{"257":1,"543":1}}],["like",{"2":{"225":1,"227":1,"228":1,"252":1,"543":1}}],["library",{"2":{"151":1,"423":1}}],["libraries",{"2":{"84":1,"553":1}}],["lib",{"2":{"142":1,"146":1}}],["live",{"2":{"138":1,"231":1,"241":1,"325":1,"340":1}}],["list",{"2":{"279":1,"505":2}}],["listeners",{"2":{"164":1}}],["listener",{"2":{"157":1,"565":1}}],["listening",{"0":{"157":1}}],["listen",{"2":{"77":4,"444":1}}],["lists",{"2":{"48":1,"508":1,"513":1,"521":1}}],["lifecycle",{"0":{"40":1,"535":1,"536":1},"2":{"35":1,"522":1,"524":1,"540":2}}],["limits",{"0":{"39":1,"470":1},"2":{"9":1,"32":2,"39":2,"136":1,"470":1,"540":1}}],["limit",{"2":{"9":1,"32":3,"33":1,"40":1,"76":1,"217":1,"255":1,"269":1,"383":1,"420":1,"470":5,"520":1,"529":2,"538":1,"592":1}}],["layer",{"0":{"356":1,"357":1},"2":{"427":1,"428":1}}],["layers",{"2":{"235":1}}],["lazy",{"2":{"231":1}}],["languages",{"2":{"224":1}}],["lang=",{"2":{"141":1,"142":1,"144":1,"145":1,"148":1,"149":1}}],["latency",{"2":{"257":1,"261":1}}],["later",{"2":{"164":1,"216":1}}],["latest",{"2":{"30":1,"59":1,"61":1,"95":1,"128":1,"134":1,"139":1,"158":1,"176":1,"190":1,"237":1,"241":1,"248":1,"252":1,"256":1,"270":1,"328":2,"331":1,"334":2,"340":1,"343":1,"379":1,"567":1}}],["large",{"2":{"23":1,"33":1,"37":1}}],["lookup",{"2":{"455":1}}],["lot",{"2":{"228":1}}],["locked",{"2":{"180":1}}],["localstorage",{"2":{"443":1}}],["localhost",{"2":{"359":1}}],["locally",{"2":{"167":1,"169":1,"190":1,"228":1,"245":1,"255":1,"261":1}}],["localblock",{"2":{"129":1}}],["local",{"0":{"172":1,"261":1},"1":{"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1},"2":{"102":1,"129":1,"165":1,"169":1,"172":1,"196":1,"245":1,"254":1,"257":1,"262":2,"359":1}}],["loadstate",{"2":{"205":1}}],["loadstorage",{"2":{"145":2}}],["loadfixture",{"2":{"163":2}}],["load",{"2":{"145":2,"196":1,"217":1,"275":1}}],["loading",{"2":{"145":6,"228":1,"231":1}}],["lower",{"2":{"95":1,"227":1,"543":1,"552":1}}],["low",{"0":{"161":1},"2":{"51":2,"72":1,"103":1,"194":1,"221":1,"222":1,"225":1,"238":1,"420":1,"440":1,"539":2}}],["long",{"2":{"23":1}}],["logtopic",{"2":{"396":1}}],["loglevel",{"2":{"329":1}}],["logic",{"2":{"215":1,"219":1,"243":1}}],["logindex",{"2":{"26":1,"135":2}}],["logger",{"2":{"119":1}}],["logginglevel",{"2":{"167":1,"329":1,"331":1,"417":1,"421":1}}],["logging",{"0":{"119":1},"2":{"107":1,"119":1,"329":1,"417":1,"421":1}}],["log",{"0":{"14":1},"2":{"16":7,"17":9,"18":9,"20":1,"22":5,"26":1,"27":2,"30":1,"31":3,"32":1,"33":2,"61":4,"77":5,"79":1,"80":1,"82":2,"127":7,"128":1,"135":8,"154":1,"155":1,"158":1,"160":1,"162":3,"185":1,"186":2,"252":1,"256":1,"305":3,"338":1,"345":2,"379":1,"396":1,"418":2,"420":1,"421":2,"460":1,"547":2,"570":1,"591":2}}],["logsbloom",{"2":{"319":1}}],["logs",{"0":{"25":1,"28":1,"30":1,"135":1,"469":1},"1":{"26":1,"27":1,"28":1,"29":2,"30":2,"31":2,"32":1,"33":1,"34":1},"2":{"13":3,"16":1,"17":1,"18":1,"20":3,"21":2,"22":1,"23":3,"25":1,"26":3,"27":2,"31":3,"32":4,"56":1,"77":2,"87":3,"94":1,"96":1,"124":1,"127":2,"134":3,"135":2,"137":1,"162":2,"176":6,"185":1,"234":1,"421":4,"453":1,"455":1,"458":1,"460":1,"469":2,"470":4}}],["lt",{"0":{"331":1},"2":{"2":1,"3":1,"5":1,"9":1,"55":3,"77":1,"141":50,"142":9,"144":16,"145":17,"148":15,"149":29,"164":1,"167":1,"170":1,"180":1,"185":1,"384":1,"432":1,"447":2,"466":1,"568":2,"569":2}}],["v",{"2":{"512":1,"561":1}}],["v3",{"2":{"167":1,"170":1,"179":1,"185":1,"241":1,"247":1,"340":1,"344":1}}],["vitest",{"2":{"173":1}}],["vite",{"2":{"139":1}}],["virtual",{"0":{"230":1},"2":{"103":1,"124":1,"227":1,"254":1,"407":1,"423":1,"522":1,"541":1,"573":1}}],["viemclient",{"2":{"225":1}}],["viem",{"0":{"90":1,"187":1,"189":1,"247":1,"441":1},"1":{"188":1,"189":1,"190":2,"191":2,"192":2,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1},"2":{"77":1,"90":2,"94":1,"102":1,"167":1,"184":1,"185":1,"186":1,"187":3,"188":10,"189":2,"190":1,"191":1,"192":2,"193":1,"196":1,"198":1,"202":1,"206":1,"222":1,"223":1,"225":2,"226":5,"228":2,"247":4,"249":1,"318":1,"319":1,"321":1,"340":1,"344":1,"347":1,"366":1,"423":1,"424":1,"427":1,"428":1,"429":1,"449":1,"543":1,"552":2,"572":1}}],["viewer",{"0":{"144":1,"145":1},"2":{"144":2}}],["view",{"2":{"76":1,"154":3,"160":1,"163":1,"164":1,"265":1,"308":1,"323":1,"347":1,"367":1,"375":1,"386":1,"407":1,"450":2,"474":2,"496":2,"499":1,"553":1}}],["via",{"2":{"40":1,"95":1,"189":1,"191":1,"227":1,"236":1}}],["void",{"2":{"55":6,"73":8}}],["volumes",{"2":{"37":1}}],["very",{"2":{"420":1}}],["verklestatediff",{"2":{"314":1}}],["verkleproof",{"2":{"314":1}}],["verkleexecutionwitness",{"2":{"314":1}}],["verkle",{"0":{"314":1},"2":{"310":1,"314":3}}],["version",{"2":{"121":2}}],["versions",{"2":{"37":1,"459":1}}],["verification",{"2":{"117":1}}],["verify",{"2":{"33":1,"175":1,"178":1}}],["varying",{"2":{"217":1}}],["variables",{"0":{"414":1},"2":{"93":1,"451":1,"475":1,"497":1}}],["various",{"2":{"14":1,"126":1,"212":1,"300":1,"499":1,"509":1,"537":1,"539":1,"544":2,"546":1,"552":1,"553":1,"575":1,"593":1}}],["validating",{"2":{"295":1,"524":1}}],["validation",{"0":{"133":1,"275":1,"305":1,"336":1},"2":{"35":1,"37":2,"40":1,"42":3,"104":1,"107":1,"258":1,"303":1,"325":1,"341":2,"592":1}}],["validateruntx",{"2":{"586":1}}],["validateheader",{"2":{"328":1,"336":1,"343":1}}],["validatemineparams",{"2":{"275":1}}],["validateloadstateparams",{"2":{"275":1}}],["validategetaccountparams",{"2":{"275":1}}],["validatecontractparams",{"2":{"275":1}}],["validatecallparams",{"2":{"275":1}}],["validatebasecallparams",{"2":{"275":1}}],["validatesetaccountparams",{"2":{"275":1}}],["validates",{"2":{"232":1,"328":1,"586":1}}],["validatetx",{"2":{"133":1}}],["validate",{"2":{"133":1,"136":1,"275":7,"336":1,"343":1}}],["valid",{"2":{"40":1,"300":1,"301":1,"546":1,"551":1}}],["validity",{"2":{"9":1}}],["valueof",{"2":{"371":1}}],["valuechanged",{"2":{"176":2}}],["value2",{"2":{"68":1}}],["value1",{"2":{"68":1}}],["valuesarraytoheaderdata",{"2":{"316":1}}],["values",{"2":{"50":1,"63":1,"67":1,"154":1}}],["value",{"2":{"5":2,"17":2,"26":1,"36":1,"50":1,"63":1,"76":2,"77":2,"82":1,"87":1,"88":1,"95":1,"125":1,"127":1,"130":2,"145":3,"157":1,"158":4,"161":1,"162":1,"164":1,"168":1,"173":1,"183":2,"191":1,"192":2,"287":1,"302":1,"371":1,"375":1,"379":2,"381":1,"403":1,"418":1,"510":2,"512":1,"517":2,"591":1}}],["vmopts",{"2":{"593":1}}],["vmevents",{"2":{"582":1}}],["vm",{"0":{"123":1,"238":1,"573":1,"578":1,"584":1,"589":1},"1":{"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"574":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"587":1,"588":1,"589":1,"590":1,"591":1,"592":1,"593":1,"594":1,"595":1},"2":{"1":2,"5":2,"9":1,"13":4,"20":5,"21":4,"23":3,"24":1,"26":3,"29":3,"30":2,"34":1,"55":2,"56":1,"95":1,"103":1,"125":3,"136":1,"141":6,"145":2,"146":2,"148":1,"149":1,"168":2,"173":3,"175":3,"176":1,"178":7,"179":1,"180":5,"182":2,"183":4,"184":1,"186":3,"230":2,"238":3,"244":2,"252":4,"255":1,"256":2,"338":1,"339":2,"345":1,"423":1,"541":1,"573":1,"574":1,"575":1,"578":4,"582":1,"584":2,"589":2,"590":4,"591":3,"592":3,"593":2,"594":1}}],["00",{"2":{"298":1,"302":1,"306":1,"544":1}}],["000n",{"2":{"167":1,"170":1,"179":1}}],["000",{"2":{"167":1,"170":1,"179":1}}],["0n",{"2":{"16":2,"18":2,"22":2,"36":1,"43":2,"50":1,"80":2,"95":2,"125":1,"134":1,"141":1,"149":1,"176":1,"182":1,"298":1,"301":1,"319":3,"419":1,"517":2}}],["0",{"2":{"5":1,"7":1,"9":1,"16":3,"18":1,"22":1,"27":1,"31":1,"39":1,"53":1,"74":1,"80":1,"141":12,"142":1,"144":7,"145":3,"149":1,"162":1,"176":2,"180":1,"185":1,"191":2,"419":1,"462":1,"473":1,"560":4}}],["0x48656c6c6f",{"2":{"557":2}}],["0x456",{"2":{"239":1,"287":1,"288":1,"290":1,"563":1}}],["0xa6a63cd70fbbe396321ca6fe79e1b6735760c03538208b50d7e3a5dac5226435",{"2":{"435":1}}],["0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",{"2":{"154":1,"169":1}}],["0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",{"2":{"319":2}}],["0x5678",{"2":{"155":1,"169":1,"418":1}}],["0x742d35cc6634c0532925a3b844bc454e4438f44e",{"2":{"305":3,"306":1}}],["0x789",{"2":{"239":1}}],["0x70997970c51812dc3a010c7d01b50e0d17dc79c8",{"2":{"173":1,"182":1}}],["0x608060405234801561001057600080fd5b506101",{"2":{"306":1}}],["0x60806040",{"2":{"230":1}}],["0x01a4",{"2":{"557":4}}],["0x0",{"2":{"195":1}}],["0x0000000000000000",{"2":{"319":1}}],["0x0000000000000000000000000000000000000000",{"2":{"319":1}}],["0x{"2":{"319":1}}],["0x0000000000000000000000000000000000000000000000000000000000000000",{"2":{"319":3}}],["0x000000000000000000000000000000000000000000000000000000000000abcd",{"2":{"30":1}}],["0x0000000000000000000000000000000000000128",{"2":{"8":1}}],["0x0000000000000000000000000000000000000127",{"2":{"8":1}}],["0x0000000000000000000000000000000000000126",{"2":{"7":1}}],["0x0000000000000000000000000000000000000125",{"2":{"6":1}}],["0x0000000000000000000000000000000000000124",{"2":{"5":1}}],["0x0000000000000000000000000000000000000123",{"2":{"1":1,"2":1,"9":2}}],["0x0000",{"2":{"31":1,"67":2}}],["0x00",{"2":{"1":1}}],["0x1111",{"2":{"548":1}}],["0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",{"2":{"319":1}}],["0x123",{"2":{"239":2,"243":1,"244":1,"287":1,"288":1,"290":1,"291":1,"558":2,"563":1}}],["0x1234",{"2":{"36":1,"141":1,"152":1,"154":1,"161":1,"162":1,"163":2,"168":1,"169":2,"190":2,"194":2,"195":2,"300":1,"301":1,"302":1,"376":1,"418":1,"420":1,"561":1}}],["0x1234567890123456789012345678901234567890123456789012345678901234",{"2":{"31":1}}],["0x1234567890123456789012345678901234567890",{"2":{"1":1,"26":1,"29":2,"191":1,"192":2}}],["0x1",{"2":{"176":1,"195":1,"405":1}}],["0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",{"2":{"173":1,"182":1}}],["0x28c6c06298d514db089934071355e5743bf21d60",{"2":{"168":1,"179":1}}],["0x2345",{"2":{"36":1}}],["0x2345678901234567890123456789012345678901",{"2":{"26":1}}],["0x",{"2":{"61":1,"66":1,"67":1,"68":1,"69":2,"79":1,"80":1,"81":1,"95":5,"125":3,"141":1,"146":3,"161":1,"185":2,"194":2,"195":1,"225":1,"226":1,"244":1,"247":1,"248":1,"289":1,"302":1,"319":1,"375":2,"376":1,"377":3,"378":1,"382":1,"383":1,"398":2,"399":2,"400":2,"401":2,"436":5,"517":2,"546":1,"547":1,"562":1,"567":2}}],["1111",{"2":{"548":1}}],["1193",{"0":{"85":1,"398":1},"2":{"71":1,"84":1,"85":1,"94":1,"152":1,"188":1,"331":1,"386":1,"388":1,"392":4,"398":1,"406":1}}],["18",{"2":{"405":1}}],["1337",{"2":{"362":2}}],["14",{"2":{"168":1}}],["17",{"2":{"167":1,"179":1}}],["1em",{"2":{"144":1}}],["12",{"2":{"215":1}}],["1234n",{"2":{"334":1}}],["123",{"2":{"176":1,"300":1}}],["12000",{"2":{"215":1,"220":1}}],["1200px",{"2":{"142":1}}],["120n",{"2":{"164":1}}],["126",{"2":{"144":1}}],["128kb",{"2":{"39":1}}],["128",{"2":{"39":1}}],["1px",{"2":{"141":1}}],["1fr",{"2":{"141":1}}],["1rem",{"2":{"141":4,"144":1,"145":3}}],["1n",{"2":{"131":1,"185":1,"306":1,"377":1,"436":1,"548":1}}],["164",{"2":{"557":2}}],["1695311333n",{"2":{"192":2}}],["16",{"2":{"79":1,"82":2,"141":1,"144":3,"185":1}}],["15",{"2":{"170":1,"362":1}}],["1559",{"0":{"514":1},"2":{"48":1,"446":1,"504":1,"506":1,"508":1,"510":1,"521":1}}],["15000000n",{"2":{"344":2}}],["15000000",{"2":{"217":1}}],["150",{"2":{"32":1,"470":1}}],["1014",{"2":{"302":1,"307":1,"548":1}}],["10n",{"2":{"132":1}}],["1024",{"2":{"39":1}}],["10",{"2":{"16":1,"43":2,"68":1,"182":1,"532":2}}],["1000n",{"2":{"287":1,"288":1,"375":1,"377":1,"382":1,"418":1}}],["1000",{"2":{"53":1,"158":1,"180":2,"319":1,"345":2}}],["10000",{"2":{"32":1,"191":1,"470":1}}],["100000n",{"2":{"29":1,"418":1}}],["1000000",{"2":{"169":1}}],["1000000000n",{"2":{"319":1,"534":1,"560":2,"570":1}}],["10000000000000000000n",{"2":{"182":1}}],["1000000000000000000n",{"2":{"26":1,"36":1,"168":1,"173":2,"517":2,"560":2}}],["100000000n",{"2":{"39":1}}],["1000000n",{"2":{"29":1,"378":1}}],["100n",{"2":{"9":1,"80":1,"95":1,"131":1,"164":1,"239":1,"243":1,"244":1,"420":1,"436":1}}],["100",{"2":{"6":2,"39":1,"66":1,"155":1,"162":1,"163":2,"180":1,"192":2,"195":1}}],["1",{"0":{"5":1,"16":1,"20":1,"50":1,"66":1,"141":1,"154":1,"157":1,"160":1,"175":1,"178":1,"182":1,"190":1,"194":1,"230":1,"236":1,"241":1,"251":1,"261":1,"356":1,"381":1,"403":1},"2":{"8":1,"27":1,"33":1,"36":1,"39":1,"42":1,"50":1,"82":1,"124":1,"136":1,"141":2,"161":1,"168":1,"169":1,"173":1,"176":1,"191":1,"192":1,"365":1,"462":1,"503":1,"508":1,"513":1,"557":2,"560":4}}],["own",{"2":{"384":1,"547":1}}],["ownerof",{"2":{"377":1}}],["owneraction",{"2":{"377":1}}],["owneraddress",{"2":{"186":1}}],["owns",{"2":{"74":1,"187":1}}],["our",{"2":{"96":2,"185":1}}],["outcomes",{"2":{"234":1,"245":1}}],["output",{"2":{"119":1,"298":1}}],["out",{"2":{"2":1,"5":1,"6":1,"9":2,"77":1,"81":2,"253":1,"420":1,"592":3}}],["other",{"0":{"196":1,"552":1},"2":{"76":1,"77":2,"224":1,"227":1,"445":1,"510":1,"593":1}}],["occurred",{"2":{"60":1,"64":1}}],["old",{"2":{"37":1,"40":1,"47":1}}],["overflow",{"2":{"141":1}}],["override",{"2":{"129":1,"245":1,"394":1}}],["overview",{"0":{"124":1,"222":1,"267":1,"295":1,"310":1,"325":1,"349":1,"369":1,"388":1,"429":1,"455":1,"479":1,"524":1,"575":1},"1":{"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1},"2":{"122":1,"259":1,"452":1,"476":1,"498":1}}],["overhead",{"2":{"23":1,"257":1}}],["over",{"2":{"18":1,"136":1,"216":2,"244":1}}],["objects",{"0":{"224":1},"2":{"223":1,"224":1,"225":3}}],["object",{"0":{"74":1,"75":1,"76":1,"77":1},"2":{"16":1,"22":1,"74":1,"75":1,"76":1,"77":1,"145":1,"224":1,"225":2,"544":1}}],["op",{"2":{"445":1}}],["opens",{"2":{"530":1}}],["open",{"2":{"530":1,"532":1,"536":1,"540":1}}],["openzeppelin",{"2":{"385":1}}],["opera",{"2":{"358":1}}],["operation",{"2":{"23":2,"39":1,"301":1,"592":1}}],["operations",{"0":{"127":1,"208":1,"209":1,"281":1,"333":1,"488":1,"493":1,"516":1,"585":1,"586":1},"1":{"334":1,"335":1,"336":1,"517":1,"518":1,"519":1},"2":{"9":1,"16":2,"23":3,"52":1,"74":1,"82":1,"103":1,"110":2,"119":1,"130":3,"136":1,"163":1,"180":1,"225":2,"239":2,"272":2,"308":1,"312":1,"383":1,"457":1,"483":1,"553":1,"579":1,"587":1}}],["opacity",{"2":{"141":1}}],["opname",{"2":{"80":3,"149":3}}],["opcodelog",{"2":{"14":1}}],["opcode",{"0":{"16":1},"2":{"14":3,"16":3,"74":5,"77":3,"79":3,"80":6,"81":2,"82":1,"103":1,"138":1,"141":3,"149":5,"307":1,"421":1,"592":2}}],["opcodestats",{"2":{"16":2}}],["opcodes",{"2":{"10":1,"80":4,"137":1,"421":1}}],["optimismcommon",{"2":{"364":1}}],["optimism",{"2":{"171":1,"256":2,"357":2,"364":3,"431":1,"435":3}}],["optimismnode",{"2":{"171":1}}],["optimistically",{"2":{"96":1}}],["optimistic",{"0":{"96":1},"2":{"96":2,"228":1,"234":1,"257":1,"262":1}}],["optimization",{"0":{"20":1,"22":1,"52":1},"2":{"23":1,"121":1,"136":1,"221":1}}],["optimized",{"2":{"37":1}}],["optimizedcode",{"2":{"23":1}}],["optimize",{"2":{"11":1,"121":1}}],["options",{"0":{"98":1,"331":1,"332":1,"432":1,"466":1,"538":1},"1":{"99":1,"100":1},"2":{"12":1,"30":1,"55":1,"313":1,"329":1,"345":1,"353":1,"392":1,"412":1,"413":2,"423":1,"427":1,"483":1,"484":1,"504":1,"528":1,"536":1,"537":1,"579":1,"580":1,"581":1,"590":2,"591":1,"593":2}}],["optionally",{"2":{"225":1}}],["optional",{"2":{"12":1,"40":1,"59":1,"195":2,"417":1,"521":1,"552":1}}],["origin",{"2":{"76":1}}],["originalstoragecache",{"2":{"491":1}}],["original",{"2":{"43":2,"185":1,"328":1,"491":1}}],["originaltx",{"2":{"43":3}}],["originalcode",{"2":{"23":1}}],["orders",{"2":{"232":1}}],["orderedtxs",{"2":{"44":1,"534":1}}],["ordered",{"2":{"40":1,"44":1,"132":2,"534":1}}],["ordering",{"2":{"35":1,"37":1,"106":1,"524":1}}],["or",{"2":{"9":1,"40":1,"97":1,"128":1,"131":1,"167":1,"173":1,"196":1,"219":1,"224":1,"227":1,"241":1,"242":1,"244":1,"251":3,"252":1,"254":1,"255":1,"258":1,"261":1,"262":1,"298":2,"300":1,"328":1,"340":1,"546":1,"547":1,"549":1,"552":2}}],["onblock",{"2":{"328":2}}],["onbeforemessage",{"2":{"77":1}}],["once",{"2":{"252":1}}],["ondestroy",{"2":{"141":2}}],["onmount",{"2":{"141":2}}],["only",{"2":{"82":1,"121":1,"169":1,"216":1}}],["onaftermessage",{"2":{"77":1,"79":1,"81":1}}],["onstep",{"2":{"77":1,"79":1,"80":1,"82":3}}],["onnewcontract",{"2":{"75":1,"77":1,"79":1}}],["one",{"2":{"43":1,"252":1,"357":1}}],["on",{"2":{"9":1,"14":1,"27":1,"73":1,"82":1,"96":4,"97":1,"121":1,"123":1,"125":1,"128":1,"130":1,"132":1,"141":3,"145":1,"148":1,"149":1,"157":1,"164":1,"169":1,"172":1,"173":1,"175":1,"176":1,"178":2,"179":1,"180":1,"182":1,"183":1,"222":1,"223":1,"224":1,"225":1,"226":3,"229":1,"230":1,"252":1,"257":1,"262":1,"450":2,"458":1,"474":2,"496":2,"540":1,"565":1}}],["officially",{"2":{"445":2}}],["offers",{"2":{"477":1}}],["offer",{"2":{"424":1}}],["offering",{"2":{"367":1,"547":1}}],["offline",{"2":{"254":1,"262":1}}],["off",{"2":{"157":1,"164":1}}],["offset",{"2":{"144":2}}],["of",{"2":{"2":2,"5":1,"6":1,"9":2,"14":1,"21":1,"23":1,"26":1,"32":1,"37":1,"47":1,"58":1,"59":1,"60":1,"74":4,"75":1,"76":2,"77":3,"80":1,"81":2,"95":1,"96":2,"97":1,"121":1,"127":1,"135":1,"158":1,"172":1,"182":1,"191":1,"192":1,"222":1,"227":1,"228":2,"235":1,"252":1,"261":1,"265":1,"272":1,"273":1,"274":1,"291":1,"295":1,"301":2,"303":1,"313":2,"323":2,"328":1,"347":1,"351":1,"407":2,"412":1,"420":1,"424":1,"439":1,"453":1,"470":1,"479":1,"481":1,"487":1,"499":2,"505":1,"510":1,"529":4,"530":1,"535":1,"536":1,"538":3,"543":2,"552":1,"553":1,"573":1,"575":3,"579":1,"580":1,"581":1,"584":1,"592":3}}],["mtk",{"2":{"378":1}}],["missing",{"2":{"471":1}}],["missingaccounterror",{"2":{"269":1}}],["mit",{"2":{"448":1,"473":1,"542":1,"595":1}}],["mixhash",{"2":{"319":1}}],["might",{"2":{"219":1}}],["minremaininggaslimit",{"2":{"537":1,"538":1}}],["minpendingnodebalance",{"2":{"537":1,"538":1}}],["minfeebump",{"2":{"537":1,"538":1}}],["mingaspricebump",{"2":{"532":1,"537":1,"538":1}}],["mineprocedure",{"2":{"276":1}}],["mineparams",{"2":{"95":1}}],["mined",{"2":{"220":1}}],["mines",{"2":{"214":1,"215":1,"216":1,"217":1,"220":2}}],["mine",{"2":{"45":1,"95":1,"96":1,"173":1,"192":4,"196":1,"203":1,"216":2,"220":2,"236":1,"242":1,"275":1,"276":1,"284":1,"428":1,"434":2}}],["minehandler",{"2":{"45":2,"95":1,"236":2}}],["minimal",{"2":{"138":1,"257":1}}],["minimum",{"2":{"39":1,"519":1,"538":4}}],["miningconfig",{"2":{"95":1,"173":1,"180":1,"214":1,"215":1,"216":1,"217":1,"220":3,"242":1}}],["mining",{"0":{"203":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1,"220":1,"242":1,"284":1,"434":1},"1":{"213":1,"214":2,"215":2,"216":2,"217":2,"218":1,"219":1,"220":1,"221":1},"2":{"44":1,"95":1,"102":1,"180":1,"196":1,"212":1,"218":3,"219":5,"220":3,"221":1,"233":1,"255":2,"429":1,"434":4,"440":1}}],["minutes",{"2":{"40":1,"53":1,"529":2}}],["min",{"2":{"39":1,"43":1}}],["md",{"2":{"95":4}}],["mymethod",{"2":{"437":1}}],["myabi",{"2":{"384":1}}],["mytoken",{"2":{"375":1,"378":1}}],["mycontractabi",{"2":{"194":2}}],["mycontract",{"2":{"175":1,"384":1,"419":3,"437":1}}],["myfunction",{"2":{"77":1,"438":1}}],["myprecompile",{"2":{"2":2}}],["multi",{"2":{"261":1}}],["multiple",{"0":{"8":1,"68":1,"171":1},"2":{"30":1,"154":1,"178":1,"459":1,"508":1}}],["must",{"2":{"43":1,"226":1}}],["mechanisms",{"2":{"351":1,"481":1}}],["metadbmanageroptions",{"2":{"466":1}}],["metering",{"2":{"126":1,"230":1}}],["methodnotfound",{"2":{"92":1}}],["method",{"2":{"42":2,"85":1,"92":1,"93":3,"96":3,"116":1,"175":1,"185":2,"194":1,"237":1,"252":1,"369":1,"388":1,"398":1,"401":1,"437":1}}],["methods",{"0":{"86":1,"87":1,"88":1,"458":1,"519":1,"530":1},"1":{"87":1,"88":1},"2":{"42":1,"77":1,"83":1,"85":1,"88":3,"109":2,"184":1,"265":1,"267":1,"298":1,"328":2,"377":1,"386":1,"399":1,"519":1,"578":1}}],["mempool",{"0":{"232":1},"2":{"124":1,"216":1,"522":1}}],["memoryclientoptions",{"2":{"427":1,"432":1,"447":1}}],["memoryclient",{"0":{"226":1,"431":1},"2":{"226":1,"427":1,"447":1}}],["memoryviewer",{"2":{"146":1}}],["memorywordcount",{"2":{"74":1}}],["memory",{"0":{"53":1,"144":1,"424":1,"564":1},"1":{"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1,"443":1,"444":1,"445":1,"446":1,"447":1,"448":1,"449":1},"2":{"23":1,"37":1,"74":3,"102":2,"138":1,"144":6,"187":1,"196":1,"225":1,"226":2,"423":1,"424":2,"425":1,"427":2,"428":1,"429":2,"431":2,"435":1,"443":1,"444":1,"564":1}}],["merkle",{"2":{"117":1}}],["megabytes",{"2":{"32":1,"470":1}}],["messagehash",{"2":{"561":2}}],["messages",{"2":{"116":1,"138":1}}],["message",{"0":{"76":1},"2":{"9":1,"42":1,"51":3,"73":3,"76":2,"77":7,"92":1,"141":1,"164":1,"382":1,"410":1,"411":1,"571":1}}],["mozilla",{"2":{"473":1}}],["mock",{"2":{"353":1,"354":1}}],["mockkzg",{"2":{"353":1}}],["mocha",{"2":{"173":1}}],["more",{"2":{"90":1,"91":1,"92":1,"93":1,"96":1,"172":1,"173":1,"176":1,"178":2,"179":1,"180":1,"182":1,"183":1,"188":1,"219":1,"226":2,"227":1,"228":1,"255":1,"298":1,"551":1}}],["modern",{"2":{"254":1,"264":1}}],["mode",{"2":{"218":1,"219":1,"434":1}}],["modes",{"0":{"212":1,"213":1,"218":1,"220":1,"242":1,"434":1},"1":{"213":1,"214":2,"215":2,"216":2,"217":2,"218":1,"219":1,"220":1,"221":1},"2":{"212":1,"429":1,"434":1}}],["model",{"2":{"173":1}}],["modifies",{"2":{"488":1}}],["modifiedbytecode",{"2":{"185":2}}],["modified",{"2":{"185":1}}],["modification",{"2":{"116":1,"440":1,"479":1,"483":1}}],["modifyaccountfields",{"2":{"488":1}}],["modifying",{"0":{"68":1},"2":{"69":1}}],["modify",{"2":{"62":1,"63":1,"169":1,"195":1,"244":1,"245":1}}],["modular",{"2":{"97":1,"123":1}}],["module",{"0":{"125":1,"128":1},"1":{"126":1,"127":1,"129":1},"2":{"25":1,"125":1,"128":1}}],["monospace",{"2":{"141":2,"144":1,"145":1}}],["monorepo",{"2":{"10":1,"95":4,"137":1,"265":1,"308":1,"323":1,"347":1,"367":1,"386":1,"407":1,"499":1,"553":1}}],["monitor",{"2":{"52":1,"53":1,"72":1,"136":1,"540":1}}],["most",{"2":{"16":1,"225":1,"226":1,"236":2,"543":1}}],["may",{"2":{"445":1,"552":1}}],["maybeextracteventargsfromabi",{"2":{"371":1}}],["make",{"2":{"398":1}}],["math",{"2":{"319":1}}],["margin",{"2":{"141":1,"142":2,"145":1}}],["market",{"2":{"48":1,"446":1,"508":1,"514":1,"521":1}}],["machine",{"0":{"230":1},"2":{"103":1,"124":1,"227":1,"254":1,"407":1,"423":1,"522":1,"541":1,"573":1}}],["maintaining",{"2":{"323":1}}],["maintain",{"2":{"224":1}}],["maintains",{"2":{"26":1,"37":1,"233":1}}],["main",{"0":{"507":1,"555":1},"1":{"508":1,"509":1,"510":1,"556":1,"557":1,"558":1,"559":1,"560":1,"561":1,"562":1,"563":1,"564":1,"565":1},"2":{"95":4,"99":1,"102":1,"124":1,"142":3,"146":1,"312":1,"328":1,"353":1,"411":1,"431":1,"457":1,"483":1,"527":1,"578":1}}],["mainnet",{"0":{"166":1},"1":{"167":1,"168":1,"169":1,"170":1,"171":1},"2":{"90":1,"165":1,"167":2,"169":2,"170":1,"171":1,"179":2,"185":2,"241":1,"245":1,"247":3,"255":1,"256":1,"258":1,"318":2,"319":2,"321":2,"331":2,"340":1,"344":1,"356":2,"361":2,"363":1,"405":1,"417":3,"431":1,"435":1,"445":1,"532":1,"589":1}}],["many",{"2":{"219":1,"228":1,"543":1,"552":1}}],["manipulating",{"2":{"192":1}}],["manipulation",{"0":{"283":1},"2":{"104":1,"110":1,"117":1,"196":1,"245":1,"310":1,"423":1}}],["manipulate",{"2":{"192":1}}],["manualnode",{"2":{"220":3}}],["manually",{"2":{"216":1,"434":1}}],["manual",{"0":{"216":2},"2":{"47":1,"95":1,"216":1,"218":2,"219":2,"220":3,"242":1,"255":1,"429":1,"434":2,"440":1}}],["managing",{"0":{"532":1,"535":1},"2":{"25":1,"57":1,"94":1,"102":1,"137":1,"267":1,"312":1,"323":1,"407":1,"455":1,"477":1,"479":1,"522":1,"524":1,"575":1,"579":1}}],["manage",{"2":{"255":1,"540":1}}],["manages",{"2":{"35":1,"128":1,"132":1,"231":1,"232":1,"233":1,"234":1,"491":1}}],["manager",{"0":{"96":1,"231":1,"234":1,"453":1,"495":1},"1":{"454":1,"455":1,"456":1,"457":1,"458":1,"459":1,"460":1,"461":1,"462":1,"463":1,"464":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1,"471":1,"472":1,"473":1},"2":{"9":1,"74":1,"107":1,"234":1,"352":1,"423":1,"453":1,"454":1,"455":1,"457":1,"465":1,"487":1,"593":1}}],["management",{"0":{"26":1,"47":1,"53":1,"57":1,"107":1,"113":1,"178":1,"182":1,"195":1,"205":1,"207":1,"210":1,"244":1,"339":1,"343":1,"383":1,"405":1,"436":1,"438":1,"464":1,"483":1,"487":1,"489":1,"491":1,"536":1,"584":1,"587":1},"1":{"27":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"465":1,"466":1},"2":{"9":1,"10":1,"23":1,"35":1,"69":1,"70":1,"102":3,"103":1,"104":2,"106":1,"107":1,"110":1,"120":1,"121":1,"124":2,"126":1,"136":1,"164":2,"171":1,"178":1,"184":1,"196":1,"221":1,"227":1,"238":1,"310":1,"325":2,"349":1,"423":2,"431":1,"453":2,"457":1,"477":1,"524":1,"540":2,"541":1,"578":1,"594":2}}],["maxqueuedperaccount",{"2":{"537":1,"538":1}}],["maxqueuedtotal",{"2":{"537":1,"538":1}}],["maxpendingperaccount",{"2":{"537":1,"538":1}}],["maxpendingtotal",{"2":{"537":1,"538":1}}],["maxpoolsize",{"2":{"532":1,"537":1,"538":1}}],["maxpriorityfeepergas",{"2":{"36":1,"50":1,"514":1}}],["maxfeeperblobgas",{"2":{"515":1}}],["maxfeepergas",{"2":{"36":1,"43":2,"50":1,"383":1,"514":1}}],["maxblocks",{"2":{"338":1}}],["max",{"2":{"39":4,"53":1,"142":1,"383":1}}],["maximum",{"2":{"32":3,"39":2,"470":1,"538":5}}],["mapping",{"2":{"483":1,"529":1}}],["mapdb",{"0":{"465":1},"2":{"457":1,"465":2}}],["map",{"2":{"1":1,"17":1,"18":1,"79":1,"80":1,"145":2,"149":1,"164":1,"465":1,"466":1,"564":1}}],["r",{"2":{"512":1,"561":1}}],["right",{"2":{"219":1}}],["riskyfunction",{"2":{"164":2}}],["rlp",{"0":{"321":1,"474":1,"563":1},"1":{"475":1,"476":1},"2":{"117":2,"310":1,"474":1,"519":1,"549":1,"563":4,"570":2}}],["round",{"2":{"261":1}}],["row",{"2":{"144":5}}],["rows",{"2":{"144":2}}],["roots",{"2":{"483":1}}],["root",{"0":{"489":1},"2":{"60":1,"131":1,"489":3,"592":1}}],["robust",{"2":{"25":1,"31":1,"453":1,"477":1,"575":1}}],["raw",{"2":{"161":1,"547":1,"552":1}}],["radius",{"2":{"141":4}}],["random",{"2":{"561":2}}],["randombytes",{"2":{"561":2}}],["ran",{"2":{"81":1,"592":1}}],["ranges",{"2":{"33":1,"93":1}}],["range",{"2":{"32":2,"352":1,"470":2,"493":1}}],["rather",{"2":{"23":1}}],["runblockresult",{"2":{"581":1}}],["runblockopts",{"2":{"581":1}}],["runblock",{"2":{"581":1,"590":1}}],["runcode",{"2":{"230":1}}],["runcall",{"2":{"95":1,"125":1,"418":1,"420":1}}],["runs",{"2":{"230":1}}],["runsampletx",{"2":{"141":2}}],["runtime",{"2":{"254":1}}],["runtimes",{"2":{"227":1,"255":1}}],["runtxresult",{"2":{"580":1}}],["runtxopts",{"2":{"580":1}}],["runtx",{"2":{"1":1,"13":1,"20":2,"21":1,"23":1,"26":2,"29":2,"125":1,"136":1,"141":1,"146":2,"168":1,"173":1,"175":2,"176":1,"179":1,"180":2,"183":2,"185":2,"186":2,"238":1,"580":1,"591":1,"592":1}}],["running",{"0":{"418":1},"2":{"23":1,"74":1,"141":1,"186":1,"190":1,"261":1,"412":1,"529":2}}],["run",{"0":{"260":1},"1":{"261":1,"262":1,"263":1,"264":1},"2":{"23":1,"141":1,"146":2,"168":1,"173":1,"185":1,"227":1,"245":1,"254":1,"261":1}}],["rpctxdata",{"2":{"509":1}}],["rpcurls",{"2":{"405":1}}],["rpcschemaoverride",{"2":{"394":1}}],["rpcschema",{"2":{"394":1}}],["rpc",{"0":{"84":1,"237":1,"276":1,"278":1,"290":1,"394":1},"1":{"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1,"279":1,"280":1,"281":1},"2":{"10":1,"34":1,"56":1,"70":1,"71":2,"84":1,"85":1,"92":1,"93":1,"94":1,"109":1,"137":2,"165":1,"171":2,"184":1,"227":1,"236":1,"237":1,"265":1,"267":1,"292":1,"310":1,"313":1,"316":1,"322":1,"386":1,"388":1,"393":1,"394":5,"404":1,"406":2,"427":1,"504":1,"509":1}}],["rejected",{"2":{"404":1}}],["reorg",{"2":{"338":1,"345":2}}],["reorganizations",{"2":{"233":1,"323":1}}],["reorganization",{"2":{"104":1,"325":1,"345":1}}],["reliance",{"2":{"262":1}}],["related",{"0":{"10":1,"24":1,"34":1,"56":1,"70":1,"83":1,"94":1,"122":1,"137":1,"150":1,"165":1,"184":1,"221":1,"541":1,"594":1},"2":{"171":1,"308":1,"414":1,"453":1}}],["reuse",{"2":{"164":1}}],["reached",{"2":{"551":1}}],["reaches",{"2":{"217":1}}],["reason",{"2":{"164":1}}],["readiness",{"2":{"428":1}}],["reading",{"0":{"154":1,"280":1}}],["readaction",{"2":{"375":1}}],["readactioncreator",{"2":{"371":1,"384":1}}],["readable",{"2":{"369":1,"375":1}}],["readcontract",{"2":{"199":1}}],["ready",{"2":{"167":1,"173":1,"175":1,"176":1,"178":1,"179":1,"180":1,"252":1}}],["read",{"2":{"154":1,"169":2,"175":2,"190":1,"236":1,"239":2,"369":1,"371":1,"375":2,"376":1,"377":5,"378":2}}],["realistic",{"2":{"215":1,"219":1,"220":1,"245":1}}],["realreceipt",{"2":{"96":3}}],["real",{"2":{"96":2,"215":1,"254":1,"257":1,"261":1}}],["rebased",{"2":{"96":1}}],["rebase",{"2":{"96":2}}],["requiresignature",{"2":{"533":1}}],["requirements",{"2":{"232":1,"524":1}}],["require",{"2":{"95":1}}],["required",{"2":{"59":1,"63":1,"269":1,"519":2,"538":1}}],["requestbulkprocedure",{"2":{"276":1}}],["requestprocedure",{"2":{"276":1}}],["requestpermissions",{"2":{"211":1}}],["requests",{"2":{"228":1,"312":1,"392":2,"393":1,"398":1}}],["requested",{"2":{"216":1,"341":1}}],["requesteip1193",{"2":{"85":2,"90":2,"91":2,"152":2,"188":2,"237":2,"398":2}}],["requestaddresses",{"2":{"207":1}}],["request",{"2":{"85":2,"90":1,"92":1,"93":3,"96":2,"109":1,"185":2,"237":1,"247":1,"276":2,"329":1,"331":1,"340":1,"344":1,"388":1,"392":1,"398":1,"401":1,"403":2,"404":2,"444":2}}],["reverts",{"2":{"136":1,"490":1}}],["reverted",{"2":{"81":1}}],["revert",{"2":{"77":1,"81":1,"130":1,"178":2,"205":1,"244":1,"490":1}}],["replay",{"2":{"185":1}}],["replaying",{"0":{"185":1}}],["replaces",{"2":{"43":1}}],["replace",{"2":{"37":1,"43":1}}],["replacementtx",{"2":{"43":2}}],["replacement",{"0":{"43":1},"2":{"35":1,"37":1,"43":1,"106":1,"258":1,"524":1,"532":1,"538":2,"540":2}}],["repeat",{"2":{"141":1,"298":2,"302":1,"306":1,"544":1}}],["repository",{"2":{"122":1,"249":1}}],["representation",{"2":{"74":1,"305":1,"313":2,"315":3,"483":1,"519":1}}],["refunded",{"2":{"77":2}}],["refund",{"2":{"74":1}}],["reference",{"0":{"54":1,"97":1,"197":1,"268":1,"296":1,"311":1,"326":1,"350":1,"370":1,"389":1,"409":1,"423":1,"426":1,"450":1,"474":1,"480":1,"496":1,"501":1,"525":1,"576":1},"1":{"55":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1,"269":1,"270":1,"271":1,"272":1,"273":1,"274":1,"275":1,"276":1,"277":1,"278":1,"279":1,"280":1,"281":1,"282":1,"283":1,"284":1,"285":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"312":1,"313":1,"314":1,"315":1,"316":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"371":1,"372":1,"373":1,"390":1,"391":1,"392":1,"393":1,"394":1,"395":1,"396":1,"410":1,"411":1,"412":1,"413":1,"414":1,"415":1,"427":1,"428":1,"451":1,"452":1,"475":1,"476":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"497":1,"498":1,"502":1,"503":1,"504":1,"505":1,"506":1,"526":1,"527":1,"528":1,"529":1,"530":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"587":1},"2":{"10":2,"71":1,"74":1,"93":1,"122":1,"137":1,"184":1,"249":1,"270":1,"292":1,"322":1,"346":1,"366":1,"385":1,"422":1,"423":2,"450":1,"474":1,"496":1}}],["removals",{"2":{"540":1}}],["removing",{"0":{"335":1}}],["removealllisteners",{"2":{"141":1}}],["removereceipt",{"2":{"96":1}}],["removebyhash",{"2":{"55":1,"132":1,"530":1,"535":1}}],["removenewblocktxs",{"2":{"45":1,"55":1,"535":1}}],["remove",{"2":{"45":1,"87":1,"132":1,"157":1,"535":2,"540":1}}],["removed",{"2":{"40":1}}],["removes",{"2":{"37":1,"261":1,"458":1,"488":1,"530":1}}],["remote",{"2":{"109":1,"261":1}}],["remaining",{"2":{"74":1,"77":2,"538":1}}],["retrieving",{"0":{"468":1,"534":1}}],["retrieval",{"2":{"440":1,"453":1,"455":1}}],["retrieves",{"2":{"458":1,"488":1,"530":1}}],["retrieve",{"2":{"58":1,"468":1}}],["returntype",{"2":{"141":1}}],["returndata",{"2":{"79":1}}],["returnvalue",{"2":{"1":1,"2":2,"3":1,"5":2,"6":1,"7":1,"8":2,"9":4,"77":3,"79":1,"81":1,"127":1,"243":1,"418":1,"419":1,"591":1}}],["return",{"0":{"60":1,"64":1,"452":1,"476":1,"498":1},"2":{"1":1,"2":2,"5":2,"6":1,"7":1,"9":5,"16":1,"18":1,"21":1,"22":1,"59":1,"74":1,"77":2,"127":1,"144":3,"163":1,"164":2,"182":1,"183":2,"243":1,"291":1,"403":1,"419":1,"470":1,"591":1}}],["returnsub",{"2":{"74":1}}],["returnstack",{"2":{"74":1}}],["returnstorage=true",{"2":{"60":1}}],["returnstorage",{"2":{"59":1,"61":1,"69":1,"436":1}}],["returns",{"2":{"1":1,"2":1,"8":2,"154":3,"155":1,"157":1,"160":1,"162":1,"163":2,"164":4,"225":1,"298":2,"300":1,"301":1,"302":1,"375":2,"381":1,"419":1,"458":1,"530":1}}],["regular",{"2":{"53":1,"295":1,"306":1,"540":1}}],["recover",{"2":{"561":1}}],["recovery",{"2":{"119":1}}],["recomended",{"2":{"188":1}}],["recommended",{"2":{"77":1,"125":1,"258":1}}],["record",{"2":{"77":1}}],["receives",{"2":{"74":1,"75":1,"76":1,"77":1}}],["receipttrie",{"2":{"319":1}}],["receiptresult",{"2":{"26":3,"33":2}}],["receipt",{"0":{"26":1,"27":1,"96":1,"107":1,"453":1,"459":1},"1":{"27":1,"454":1,"455":1,"456":1,"457":1,"458":1,"459":1,"460":2,"461":2,"462":2,"463":2,"464":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1,"471":1,"472":1,"473":1},"2":{"26":7,"27":1,"31":3,"33":6,"87":1,"93":2,"96":4,"106":1,"107":2,"134":1,"155":2,"161":1,"162":1,"185":6,"234":1,"423":2,"438":2,"453":2,"454":1,"455":3,"457":2,"458":1,"459":1,"465":2,"468":2,"471":3}}],["receiptsaredifferent",{"2":{"96":1}}],["receiptsmanager",{"0":{"134":1,"457":1},"1":{"135":1,"458":1},"2":{"25":1,"26":3,"30":4,"31":3,"32":1,"96":5,"124":1,"134":1,"457":3,"468":3,"469":1,"470":1,"471":1}}],["receipts",{"0":{"25":1,"234":1,"468":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1},"2":{"25":1,"26":1,"31":1,"56":1,"93":1,"94":1,"96":2,"107":1,"124":1,"134":6,"137":1,"176":2,"255":1,"453":1,"455":1,"458":4,"468":4,"472":1}}],["recipientaddress",{"2":{"186":1}}],["recipient",{"2":{"50":1,"164":2,"173":1,"510":1}}],["re",{"2":{"35":1,"552":2}}],["reduce",{"2":{"16":1,"18":1,"22":1}}],["responsible",{"2":{"323":1,"407":1,"455":1,"479":1,"524":1}}],["responses",{"2":{"403":1}}],["response",{"2":{"32":1,"316":1,"388":1,"470":1}}],["respective",{"2":{"225":1}}],["reset",{"2":{"205":1,"284":1}}],["resource",{"2":{"32":1,"219":1}}],["resources",{"2":{"9":1}}],["results",{"2":{"21":3,"33":2,"136":1}}],["result",{"2":{"1":1,"26":1,"69":3,"77":6,"79":5,"80":1,"81":5,"95":1,"96":2,"125":1,"127":6,"141":4,"148":5,"167":1,"173":2,"175":3,"179":2,"180":4,"183":2,"185":3,"186":2,"194":1,"230":1,"236":1,"238":1,"243":1,"272":1,"273":1,"274":1,"287":1,"288":1,"289":1,"290":1,"291":2,"382":1,"398":1,"400":1,"401":1,"412":2,"418":3,"420":1,"437":1,"562":1,"580":1,"581":1,"590":1}}],["guard",{"2":{"506":4}}],["guide",{"2":{"92":1,"123":1,"137":1,"151":1,"171":1,"172":2,"175":1,"176":1,"178":1,"179":1,"180":1,"182":1,"183":1,"184":1,"187":1,"226":1,"259":1,"406":1}}],["gnosis",{"2":{"358":2}}],["goerli",{"2":{"356":2}}],["go",{"2":{"222":2}}],["given",{"2":{"458":2}}],["giving",{"2":{"216":1}}],["github",{"2":{"95":4,"122":1,"249":1,"450":2,"474":2,"496":2}}],["gap",{"2":{"141":2,"144":1,"145":1}}],["gasestimate",{"2":{"93":1,"164":2}}],["gasefficiency",{"2":{"18":1}}],["gascost",{"2":{"79":1,"80":3,"149":2}}],["gasrefund",{"2":{"74":1,"77":2}}],["gasleft",{"2":{"74":1,"77":2,"141":2}}],["gaslimit",{"2":{"1":1,"2":3,"3":1,"5":3,"6":2,"9":6,"26":1,"29":2,"36":1,"50":1,"76":1,"164":1,"217":1,"230":1,"319":1,"418":1,"420":1,"512":1,"517":2}}],["gashotspots",{"2":{"22":1}}],["gastimeline",{"2":{"18":2}}],["gasprice",{"2":{"512":1,"517":2}}],["gasprofile",{"2":{"149":4}}],["gasprecompile",{"2":{"6":1}}],["gasperbyte",{"2":{"9":2}}],["gasused",{"2":{"6":3,"9":3,"14":1,"16":1,"17":2,"18":4,"20":2,"22":1,"26":1,"77":2,"141":3,"319":1,"591":1}}],["gas",{"0":{"6":1,"18":1,"22":1,"80":1,"149":1,"186":1,"217":2,"261":1,"383":1},"2":{"2":1,"5":1,"6":2,"9":7,"18":2,"22":2,"24":1,"37":2,"39":1,"40":1,"43":3,"51":2,"74":5,"76":2,"77":8,"80":3,"81":2,"83":1,"87":1,"93":2,"103":1,"106":1,"107":1,"112":1,"126":2,"127":1,"136":4,"138":1,"141":4,"149":3,"164":2,"186":3,"217":4,"219":2,"228":1,"230":1,"232":1,"242":1,"245":1,"255":1,"269":1,"279":1,"383":3,"420":2,"519":2,"520":1,"538":1,"540":1,"591":1,"592":4}}],["gentxtrie",{"2":{"585":1}}],["generally",{"2":{"551":1}}],["general",{"2":{"423":1}}],["generatecanonicalgenesis",{"2":{"492":1}}],["generate",{"2":{"306":2,"561":2}}],["generates",{"2":{"301":1,"302":1,"492":1,"585":1}}],["generated",{"2":{"239":1,"265":1,"301":1,"302":1,"308":1,"323":1,"347":1,"367":1,"386":1,"407":1,"450":1,"474":1,"496":1,"499":1,"553":1}}],["generating",{"2":{"295":1}}],["generation",{"0":{"306":1},"2":{"106":1}}],["genesisstateroot",{"2":{"329":1}}],["genesis",{"0":{"492":1},"2":{"329":2,"492":2}}],["genesisblock",{"2":{"329":1}}],["getupfrontcost",{"2":{"519":1}}],["getdatafee",{"2":{"519":1}}],["getdifficulty",{"2":{"316":1}}],["getproof",{"2":{"493":1}}],["getpermissions",{"2":{"211":1}}],["getperformancelogs",{"2":{"13":1,"20":1,"21":1,"23":1,"421":1}}],["getpendingtransactions",{"2":{"96":1,"132":1}}],["getforkclient",{"2":{"492":1}}],["getforkblocktag",{"2":{"492":1}}],["getfilterlogs",{"2":{"87":1}}],["getfilterchanges",{"2":{"87":1}}],["getiteratorhead",{"2":{"339":1}}],["getgasprice",{"2":{"201":1}}],["getcanonicalheadblock",{"2":{"328":1,"343":1}}],["getchainid",{"2":{"201":1}}],["getcontract",{"2":{"164":1}}],["getcontractstorage",{"2":{"130":1,"488":1}}],["getcontractcode",{"2":{"130":1,"226":1,"488":1}}],["getcode",{"2":{"87":1,"399":1}}],["geteventtopic",{"2":{"176":2}}],["getappliedkey",{"2":{"488":1}}],["getactiveprecompiles",{"2":{"415":1}}],["getaccountaddresses",{"2":{"488":1}}],["getaccountprocedure",{"2":{"276":1}}],["getaccountparams",{"2":{"59":1,"95":1}}],["getaccount",{"2":{"130":1,"173":1,"225":2,"227":2,"436":1,"488":1}}],["getaccountresult",{"2":{"60":1}}],["getaccounthandler",{"0":{"58":1},"1":{"59":1,"60":1,"61":1},"2":{"57":1,"58":1,"61":2,"69":2,"95":1,"225":3,"227":2,"236":2}}],["getaddresses",{"2":{"207":1}}],["getaddress",{"2":{"160":1}}],["getvalue",{"2":{"160":1,"175":2}}],["getvm",{"2":{"1":1,"5":1,"13":1,"20":1,"21":1,"26":1,"29":1,"125":1,"128":1,"130":1,"141":2,"145":1,"168":1,"173":1,"175":1,"178":1,"180":1,"185":2,"186":1,"230":1,"238":1,"252":1,"256":1}}],["gets",{"2":{"328":3,"458":1,"488":4,"489":1,"492":2,"493":1}}],["getstateroot",{"2":{"489":1}}],["getstate",{"2":{"178":1}}],["getstorageat",{"2":{"87":1,"201":1}}],["getsigner",{"2":{"155":1,"160":1,"161":1,"163":1}}],["getting",{"0":{"334":1},"2":{"225":1,"452":1,"476":1,"498":1}}],["gettransaction",{"2":{"200":1}}],["gettransactionreceipt",{"2":{"87":1,"93":2,"96":1,"185":1,"200":1}}],["gettransactionbyhash",{"2":{"87":1}}],["gettransactioncount",{"2":{"87":1,"190":1,"200":1}}],["gettxpool",{"2":{"36":1,"132":1}}],["getbasefee",{"2":{"519":1}}],["getbalance",{"2":{"87":1,"152":1,"170":1,"190":1,"201":1,"237":1,"247":1,"248":1,"399":1,"441":1}}],["getblocktransactioncount",{"2":{"200":1}}],["getblocknumber",{"2":{"152":1,"188":3,"200":1,"441":1}}],["getblock",{"2":{"128":2,"129":1,"190":1,"200":1,"248":1,"328":1,"334":2,"344":1}}],["getblockbynumber",{"2":{"87":1,"96":1,"185":1}}],["getblockbyhash",{"2":{"87":1}}],["getblockbytag",{"2":{"30":2,"252":1,"256":1,"328":1,"334":2}}],["getbytecode",{"2":{"199":1}}],["getbyhash",{"2":{"44":1,"55":1,"530":1,"534":1}}],["getbysenderaddress",{"2":{"44":1,"55":1,"534":1}}],["getlogs",{"2":{"30":3,"31":1,"87":1,"134":1,"176":1,"458":1,"469":1,"470":2}}],["getreceipts",{"2":{"134":1,"458":1,"468":1}}],["getreceiptsmanager",{"2":{"26":1,"96":1,"134":1,"176":1}}],["getreceiptbytxhash",{"2":{"26":1,"31":1,"96":1,"134":1,"458":1,"468":1,"471":1}}],["get",{"2":{"13":1,"26":1,"30":1,"32":3,"36":1,"44":3,"80":2,"87":13,"95":1,"96":3,"128":2,"132":2,"134":2,"149":1,"155":1,"158":1,"160":1,"164":1,"169":1,"176":1,"185":2,"190":3,"195":1,"275":1,"276":1,"279":4,"280":3,"281":2,"305":1,"320":1,"334":3,"339":1,"343":1,"381":1,"415":1,"421":1,"428":1,"436":1,"468":1,"470":3,"519":6,"534":3}}],["g",{"2":{"74":1,"77":1,"420":1,"441":3}}],["gweitowei",{"2":{"50":2}}],["gwei",{"2":{"39":1,"560":1,"570":2}}],["grid",{"2":{"141":3}}],["grained",{"2":{"196":1,"263":1}}],["granular",{"2":{"72":1}}],["gracefully",{"2":{"33":1,"82":1,"93":1,"136":1}}],["group",{"2":{"16":1}}],["gt",{"0":{"331":1},"2":{"1":2,"2":1,"3":2,"5":1,"6":2,"7":1,"8":2,"9":3,"16":3,"17":2,"18":3,"22":3,"53":2,"55":3,"73":8,"77":5,"79":4,"80":1,"81":1,"82":3,"96":1,"141":54,"142":9,"144":15,"145":18,"148":17,"149":30,"157":1,"163":2,"164":3,"167":1,"170":1,"173":1,"175":1,"176":1,"178":1,"179":1,"180":1,"243":1,"338":1,"345":1,"379":1,"384":1,"403":1,"419":1,"432":1,"447":2,"466":1,"565":1,"568":2,"569":2}}],["2718",{"2":{"508":1,"512":1,"521":1}}],["2424",{"2":{"419":1}}],["2rem",{"2":{"142":2}}],["2d3748",{"2":{"141":1,"142":1}}],["25rem",{"2":{"141":6,"144":1,"145":1}}],["2500",{"2":{"32":1,"470":1}}],["2930",{"0":{"513":1},"2":{"48":1,"506":1,"508":1,"521":1}}],["20",{"2":{"40":1,"50":1,"164":1,"298":3,"300":1,"385":1,"544":3,"546":1,"547":2,"549":1,"551":1}}],["200px",{"2":{"141":1}}],["20000000000n",{"2":{"36":2,"43":1,"517":2}}],["200n",{"2":{"1":1,"2":1,"5":1,"7":1,"8":2,"9":1}}],["21000n",{"2":{"1":1,"26":1,"36":1,"50":1,"230":1,"517":2}}],["2",{"0":{"6":1,"17":1,"21":1,"51":1,"67":1,"142":1,"155":1,"158":1,"161":1,"176":1,"179":1,"183":1,"191":1,"195":1,"231":1,"237":1,"242":1,"252":1,"262":1,"357":1,"382":1,"404":1},"2":{"1":1,"8":1,"42":1,"50":1,"82":1,"124":1,"136":1,"141":1,"144":1,"473":1,"503":1,"508":1,"514":1}}],["db2",{"2":{"564":1}}],["db",{"2":{"564":1}}],["dbtype",{"2":{"472":1}}],["dry",{"2":{"261":1}}],["dao",{"2":{"587":1}}],["dapp",{"2":{"245":1}}],["date",{"2":{"180":1,"319":1}}],["dataset",{"2":{"529":1}}],["datasets",{"2":{"23":1}}],["database",{"0":{"464":1,"564":1},"1":{"465":1,"466":1},"2":{"458":1,"564":1}}],["data",{"0":{"13":1,"117":1,"319":1,"321":1,"556":1},"1":{"557":1,"558":1},"2":{"1":3,"2":3,"3":1,"5":3,"6":2,"7":2,"9":7,"14":2,"26":1,"29":2,"39":1,"73":4,"76":3,"77":5,"79":4,"80":1,"81":1,"92":1,"95":1,"115":1,"117":1,"120":1,"125":1,"127":2,"135":2,"141":2,"146":2,"148":5,"161":1,"162":4,"167":1,"175":1,"183":1,"186":2,"194":1,"224":1,"236":1,"287":1,"290":1,"308":1,"313":2,"316":1,"398":1,"400":1,"401":1,"418":1,"423":1,"437":1,"453":1,"465":1,"479":1,"483":1,"487":1,"504":1,"508":1,"509":4,"510":2,"512":1,"515":1,"517":2,"519":1,"552":1,"553":1,"561":1,"562":4,"564":1,"565":2}}],["dumps",{"2":{"492":1,"493":2}}],["dumpstoragerange",{"2":{"493":1}}],["dumpstorage",{"2":{"145":1,"493":1}}],["dumpstate",{"2":{"88":1,"205":1,"400":1}}],["dumpcanonicalgenesis",{"2":{"130":1,"492":1}}],["dump",{"2":{"88":1,"145":2,"352":1}}],["during",{"2":{"77":3,"126":1}}],["dynamic",{"2":{"74":1}}],["dynamicfee",{"2":{"74":1}}],["difficulty",{"2":{"316":1,"319":1}}],["difference",{"2":{"314":1}}],["different",{"0":{"220":1},"2":{"27":1,"42":1,"171":1,"212":1,"235":1,"295":1,"303":1,"341":1,"455":1,"459":1,"592":1}}],["differs",{"2":{"74":1,"96":1}}],["div",{"2":{"141":34,"144":4,"145":6,"148":10,"149":2}}],["direction",{"2":{"141":1}}],["direct",{"0":{"238":1},"2":{"125":1,"136":1,"196":1,"244":1,"517":1}}],["directly",{"2":{"62":1,"100":1,"226":1,"228":1,"239":1}}],["disk",{"2":{"196":1}}],["display",{"2":{"141":3,"144":1,"145":1}}],["distinct",{"2":{"123":1}}],["disabled",{"2":{"141":1}}],["disabled=",{"2":{"141":1,"145":1}}],["disable",{"2":{"23":1,"417":1}}],["derived",{"2":{"394":1}}],["derivedrpcschema",{"2":{"394":1}}],["deep",{"2":{"328":1,"487":1,"530":1,"584":1}}],["deepcopy",{"2":{"328":1,"487":1,"530":1,"536":1,"584":1}}],["deno",{"2":{"254":1}}],["detected",{"2":{"345":1}}],["deterministic",{"2":{"219":1,"263":1}}],["details",{"2":{"87":1,"92":1,"128":1,"225":1,"412":1}}],["detailed",{"0":{"41":1},"1":{"42":1,"43":1,"44":1,"45":1},"2":{"74":1,"92":1,"93":1,"95":1,"423":1}}],["descriptive",{"2":{"551":1}}],["describe",{"2":{"163":1}}],["deserialization",{"2":{"310":1}}],["designed",{"2":{"258":1,"573":1}}],["destructed",{"2":{"77":1}}],["declare",{"2":{"545":1}}],["decimals",{"2":{"154":4,"405":1}}],["decoded",{"2":{"563":1}}],["decodedlog",{"2":{"162":1}}],["decodeeventlog",{"2":{"562":1}}],["decodefunctiondata",{"2":{"562":2}}],["decodeabiparameters",{"2":{"562":1}}],["decode",{"2":{"162":1,"562":1,"563":1}}],["decoding",{"0":{"162":1,"562":1,"563":1},"2":{"117":1,"553":1}}],["decorators",{"0":{"386":1},"1":{"387":1,"388":1,"389":1,"390":1,"391":1,"392":1,"393":1,"394":1,"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1},"2":{"85":1,"90":1,"91":1,"116":2,"152":1,"188":1,"237":1,"386":3,"387":1,"388":3,"398":1,"399":1,"400":1,"403":1,"423":2}}],["develop",{"2":{"257":1}}],["development",{"0":{"116":1,"118":1,"282":1,"359":1},"1":{"119":1,"120":1,"283":1,"284":1},"2":{"88":1,"121":1,"146":1,"151":1,"187":1,"214":1,"219":1,"245":1,"254":1,"258":1,"267":1,"384":1,"424":1,"573":1}}],["dev",{"2":{"146":1,"261":1,"549":1}}],["demonstrates",{"2":{"138":1,"151":1,"172":1,"187":1}}],["delay",{"2":{"219":1}}],["delblock",{"2":{"128":1,"328":1,"335":1}}],["deletereceipts",{"2":{"458":1}}],["deletes",{"2":{"328":1}}],["deleteaccount",{"2":{"131":1,"488":1}}],["delete",{"2":{"128":1,"131":1,"335":1}}],["delegatecall",{"2":{"74":1,"76":2,"77":2}}],["debugtracetransactionhandler",{"2":{"285":1}}],["debugtracecallhandler",{"2":{"285":1}}],["debugger",{"0":{"138":1},"1":{"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1},"2":{"138":2,"139":2,"141":2,"142":1,"146":2}}],["debugging",{"0":{"79":1,"118":1,"119":1,"263":1,"421":1},"1":{"119":1,"120":1},"2":{"192":2,"193":1,"257":1,"267":1,"573":1,"575":1}}],["debug",{"0":{"285":1},"2":{"72":1,"79":2,"88":3,"119":1,"167":1,"228":1,"245":1,"331":1,"421":1}}],["defi",{"2":{"179":1}}],["definecall",{"2":{"419":2}}],["defineprecompile",{"2":{"1":2,"2":2,"5":1,"6":1,"7":1,"8":2,"9":2,"243":1,"419":2}}],["definition",{"2":{"371":1,"413":1,"427":1,"505":1}}],["definitions",{"2":{"93":1,"120":2,"121":1,"347":1,"349":1,"353":1,"423":1}}],["defaulthardfork",{"2":{"362":1}}],["default",{"2":{"51":1,"69":1,"81":1,"95":1,"434":1}}],["dependent",{"2":{"180":1,"215":1,"217":1}}],["dependencies",{"2":{"139":1,"255":1}}],["deploys",{"2":{"378":1}}],["deployless",{"0":{"378":1}}],["deployparams",{"2":{"274":1}}],["deployhandler",{"2":{"274":1,"289":2}}],["deploycontract",{"2":{"176":1,"183":1,"191":1}}],["deploytimelock",{"2":{"180":1}}],["deploytokenfixture",{"2":{"163":2}}],["deploytx",{"2":{"20":1,"29":2,"175":2}}],["deploying",{"0":{"67":1}}],["deployedbytecode",{"2":{"60":1,"61":1,"63":1,"67":1,"95":1,"185":1,"436":1}}],["deployed",{"2":{"60":1,"63":1,"75":1,"77":1,"113":1,"160":1}}],["deployresult",{"2":{"29":2,"33":1,"194":1,"274":1,"437":1}}],["deployment",{"0":{"29":1,"160":1,"175":1,"289":1},"2":{"29":1,"33":3,"113":1,"146":1,"175":2,"196":1,"274":3,"367":1,"369":1,"440":1}}],["deploy",{"0":{"274":1},"2":{"20":1,"29":2,"160":2,"163":2,"175":2,"176":1,"180":1,"183":1,"185":1,"191":1,"194":1,"289":2,"428":1,"437":1}}],["depth",{"2":{"17":1,"74":2,"76":2,"77":3,"141":2}}],["doesn",{"2":{"269":1,"341":1}}],["do",{"0":{"228":1},"2":{"228":1,"261":1}}],["don",{"2":{"226":1}}],["done",{"2":{"13":1,"157":1,"236":1}}],["docs",{"2":{"95":4,"222":2,"226":1,"249":1,"265":1,"308":1,"323":1,"347":1,"367":1,"386":1,"407":1,"499":1,"553":1}}],["documentation",{"0":{"423":1,"452":1,"476":1,"498":1},"2":{"90":1,"91":1,"92":1,"93":2,"94":1,"95":1,"96":1,"120":1,"121":1,"265":2,"292":1,"307":1,"308":2,"323":2,"346":3,"347":2,"366":2,"367":2,"385":1,"386":2,"407":2,"422":3,"423":2,"449":1,"450":2,"474":2,"496":2,"499":2,"553":2,"572":2}}],["doubles",{"2":{"1":1}}],["double",{"2":{"1":1}}],["==",{"2":{"18":1}}],["===",{"2":{"7":1,"9":1,"16":1,"17":1,"22":1,"31":2,"33":1,"82":1,"148":1,"164":2,"365":1,"401":1,"404":2,"539":3,"592":2}}],["=",{"2":{"1":8,"2":6,"3":1,"5":7,"6":3,"7":2,"8":5,"9":8,"12":1,"13":2,"16":7,"17":3,"18":5,"20":3,"21":3,"22":7,"23":4,"26":7,"29":5,"30":6,"31":4,"32":3,"33":2,"36":3,"39":1,"43":2,"44":4,"50":1,"53":2,"59":1,"60":1,"61":2,"63":1,"64":1,"69":3,"73":9,"77":6,"79":7,"80":7,"81":4,"82":3,"85":2,"90":2,"91":2,"93":3,"95":3,"96":9,"125":4,"128":3,"129":1,"130":5,"131":1,"132":3,"134":4,"141":20,"144":7,"145":8,"146":1,"148":3,"149":5,"152":4,"154":4,"155":5,"157":5,"158":5,"160":4,"161":5,"162":5,"163":9,"164":17,"167":1,"168":2,"169":4,"170":2,"171":2,"173":6,"175":11,"176":6,"178":4,"179":5,"180":9,"182":1,"183":4,"185":7,"186":6,"188":3,"190":3,"191":3,"194":3,"195":1,"196":1,"214":1,"215":1,"216":1,"217":1,"220":3,"225":3,"226":2,"227":3,"230":2,"236":3,"237":2,"238":2,"239":4,"241":1,"242":1,"243":2,"247":3,"248":4,"252":2,"256":2,"287":3,"288":2,"289":2,"290":2,"291":1,"298":4,"300":3,"301":3,"302":4,"305":2,"306":6,"318":1,"319":3,"320":3,"321":3,"328":1,"329":1,"331":1,"334":4,"338":1,"339":1,"340":1,"343":2,"344":2,"345":2,"361":1,"362":1,"363":1,"364":2,"365":1,"375":3,"376":2,"377":7,"378":3,"379":2,"381":2,"382":1,"383":1,"384":1,"398":3,"399":4,"400":4,"401":1,"403":2,"405":1,"417":1,"418":1,"419":3,"420":1,"421":2,"431":1,"434":2,"435":1,"436":1,"437":3,"438":2,"443":1,"444":2,"457":1,"465":1,"468":2,"469":1,"470":3,"471":1,"472":3,"509":3,"510":1,"517":2,"518":1,"520":1,"532":2,"534":3,"536":1,"544":3,"547":1,"548":3,"557":6,"561":4,"562":3,"563":2,"564":3,"565":2,"567":3,"568":2,"569":2,"589":2,"590":4,"591":2,"593":1}}],["bnb",{"2":{"358":1}}],["bsc",{"2":{"358":1}}],["bitvector",{"2":{"460":1}}],["binance",{"2":{"168":1}}],["bigintlike",{"2":{"567":1}}],["bigints",{"2":{"546":1}}],["bigint",{"0":{"300":1,"301":1},"2":{"3":2,"6":1,"9":1,"14":1,"27":4,"60":2,"63":2,"74":5,"76":2,"77":5,"80":1,"149":2,"157":1,"298":1,"300":1,"319":1,"328":1,"329":1,"460":1,"463":2,"512":7,"513":1,"514":2,"515":1,"537":2,"544":1,"545":1}}],["browser",{"2":{"254":2,"257":1,"552":1}}],["browsers",{"2":{"227":1,"255":1,"264":1}}],["browserprovider",{"2":{"91":2,"152":2,"163":1,"248":2}}],["broken",{"2":{"223":1}}],["break",{"2":{"51":3,"81":3}}],["body",{"2":{"315":1,"509":1}}],["bool",{"2":{"155":1,"157":1,"162":1,"163":1,"164":2,"375":1,"381":1}}],["boolean",{"2":{"55":2,"59":1,"60":2,"74":1,"76":4,"529":1}}],["border",{"2":{"141":6}}],["bottom",{"2":{"141":1,"142":1}}],["bottlenecks",{"2":{"11":1}}],["both",{"2":{"30":1,"265":1,"295":1,"303":1,"404":1,"477":1}}],["bun",{"2":{"251":1,"254":1}}],["bundler",{"2":{"239":1}}],["bundle",{"2":{"121":2}}],["buffer",{"2":{"164":2}}],["builder",{"2":{"585":1}}],["buildstatus",{"2":{"579":1}}],["buildblockopts",{"2":{"579":1}}],["buildblock",{"2":{"579":1,"585":1,"590":1}}],["build",{"2":{"228":1,"543":1,"590":2}}],["building",{"0":{"138":1,"579":1,"590":1},"1":{"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1},"2":{"552":1,"575":1,"578":1,"579":4}}],["built",{"0":{"373":1},"2":{"0":1,"11":1,"32":1,"97":1,"123":1,"126":1,"229":1,"369":1}}],["bulk",{"2":{"52":1,"261":1,"276":1}}],["button",{"2":{"141":4,"145":2}}],["but",{"2":{"47":1,"167":1,"226":1,"269":1,"445":1}}],["bumps",{"2":{"540":1}}],["bump",{"2":{"43":1,"532":1,"538":2}}],["back",{"2":{"452":1,"476":1,"498":1}}],["background",{"2":{"141":4,"172":1,"175":1}}],["batteries",{"2":{"188":1,"423":1}}],["batching",{"2":{"109":1}}],["balanceaction",{"2":{"376":2}}],["balances",{"2":{"231":1,"245":1}}],["balanceof",{"2":{"154":2,"163":3,"164":1,"169":2,"194":1,"239":1,"375":2,"376":1}}],["balance",{"0":{"66":1},"2":{"37":1,"40":1,"42":1,"51":2,"60":2,"61":2,"63":2,"66":1,"68":1,"69":3,"87":1,"88":1,"95":1,"131":1,"152":1,"154":3,"169":1,"173":2,"182":1,"190":2,"192":1,"195":1,"237":1,"239":1,"244":1,"247":1,"248":1,"280":1,"283":1,"382":1,"399":1,"436":1,"479":1,"519":1,"538":1,"592":1}}],["basestate",{"2":{"483":1}}],["basetxreceipt",{"0":{"460":1},"2":{"460":1,"461":1,"462":1}}],["basechain",{"0":{"332":1}}],["basecallparams",{"2":{"272":1}}],["basefeepergas",{"2":{"319":1}}],["basefee",{"2":{"44":1,"132":1,"534":1}}],["base",{"0":{"271":1},"1":{"272":1,"273":1,"274":1},"2":{"43":1,"74":1,"275":1,"357":2,"394":1,"573":1,"578":1}}],["based",{"0":{"180":1,"217":1},"2":{"9":1,"14":1,"27":1,"97":1,"125":1,"128":1,"130":1,"132":1,"180":1,"230":1,"255":2,"458":1,"540":1}}],["basic",{"0":{"2":1,"152":1,"167":1,"173":1,"188":1,"287":1,"305":1,"343":1,"361":1,"567":1},"2":{"1":1,"152":1,"163":1,"173":1,"373":1,"512":1}}],["bloom",{"2":{"455":1}}],["blobs",{"2":{"515":1}}],["blobversionedhashes",{"2":{"515":1}}],["blobeip4844txdata",{"2":{"515":1}}],["blobeip4844transaction",{"2":{"503":1,"508":1}}],["blob",{"2":{"48":1,"95":4,"269":1,"446":1,"508":1,"515":1,"521":1}}],["blobgaslimitexceedederror",{"2":{"269":1}}],["blobgasprice",{"2":{"27":1,"463":1}}],["blobgasused",{"2":{"27":1,"463":1}}],["bloat",{"2":{"37":1}}],["blockopts",{"2":{"590":1}}],["blockoptions",{"2":{"313":1}}],["block2",{"2":{"343":1}}],["block1",{"2":{"343":1}}],["blocknotfounderror",{"2":{"341":1}}],["blocknumber",{"2":{"85":1,"87":1,"96":2,"129":1,"135":2,"185":1,"567":1}}],["blocknum",{"2":{"85":1}}],["blockid",{"2":{"328":1}}],["blockfromrpc",{"2":{"316":1}}],["blockbuilder",{"2":{"579":1,"590":4}}],["blockbytes",{"2":{"315":1}}],["blockbyhash",{"2":{"128":1}}],["blockbodybytes",{"2":{"315":1}}],["blockdata",{"2":{"313":1,"319":2,"509":1}}],["blockheaderbytes",{"2":{"315":1}}],["blockheader",{"2":{"312":1,"328":1}}],["blockhash",{"2":{"26":1,"128":2,"134":1,"328":1,"334":1,"335":1,"339":1,"458":1,"468":1}}],["blockreceipts",{"2":{"134":1}}],["blocktag",{"2":{"59":1,"61":1,"95":1,"96":1,"167":1,"170":1,"179":1,"241":1,"270":1,"328":2,"329":2,"331":1,"340":1,"344":1,"432":1,"435":1,"567":3}}],["block",{"0":{"45":1,"107":1,"170":1,"200":1,"203":1,"281":1,"308":1,"315":1,"318":1,"319":1,"320":1,"333":1,"336":1,"338":1,"579":1,"581":1,"585":1,"590":1},"1":{"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"334":1,"335":1,"336":1},"2":{"32":2,"33":1,"55":1,"59":1,"87":5,"93":1,"96":4,"102":1,"104":1,"107":4,"124":1,"125":2,"128":10,"134":1,"152":1,"170":1,"180":2,"185":4,"190":2,"192":1,"214":1,"215":1,"216":2,"217":3,"221":2,"233":2,"238":2,"248":1,"270":3,"277":1,"279":1,"281":2,"308":5,"309":1,"310":4,"312":3,"313":5,"315":3,"316":2,"318":5,"319":4,"320":5,"321":4,"322":1,"325":2,"328":8,"329":2,"334":2,"335":3,"336":1,"338":3,"340":1,"341":2,"343":3,"344":2,"345":4,"346":1,"423":2,"440":1,"458":4,"468":2,"470":2,"492":1,"509":1,"575":1,"578":1,"579":3,"581":3,"582":1,"585":3,"590":5,"592":1}}],["blockchain",{"0":{"128":1,"233":1,"323":1},"1":{"129":1,"324":1,"325":1,"326":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"342":1,"343":1,"344":1,"345":1,"346":1},"2":{"30":2,"102":1,"104":2,"124":1,"128":3,"180":1,"192":1,"225":1,"227":1,"233":1,"244":1,"252":2,"256":1,"267":1,"323":5,"324":1,"325":1,"328":5,"329":1,"331":2,"332":1,"340":2,"343":1,"344":1,"345":1,"346":1,"417":1,"423":2,"453":1,"593":2,"594":2}}],["blocks",{"0":{"334":1,"335":1},"2":{"30":1,"35":1,"45":2,"55":1,"93":1,"96":1,"128":1,"129":3,"173":1,"180":1,"192":4,"196":3,"212":1,"215":1,"216":2,"228":1,"284":1,"308":1,"323":1,"328":1,"338":1,"343":1,"345":2,"428":1,"434":1,"529":2,"535":1,"575":1,"579":1}}],["below",{"2":{"543":1}}],["bedrock",{"2":{"364":1}}],["beacon",{"2":{"315":1,"316":1}}],["beaconpayloadjson",{"2":{"315":1}}],["beyond",{"2":{"193":1}}],["between",{"2":{"141":1,"255":1,"295":1}}],["better",{"2":{"121":1,"221":1}}],["begin",{"2":{"121":1}}],["behavior",{"0":{"546":1},"2":{"116":1,"180":1,"216":1,"217":1}}],["being",{"2":{"74":1,"223":1}}],["be",{"2":{"59":1,"82":1,"85":1,"95":2,"219":1,"223":1,"225":4,"277":1,"340":1,"376":1,"537":1,"593":1}}],["beforemessage",{"2":{"73":1,"76":1}}],["beforelogs",{"2":{"23":2}}],["before",{"2":{"23":2,"35":1,"69":1,"73":1,"93":1,"133":1,"136":1,"185":1,"257":1,"529":2,"586":1}}],["best",{"0":{"9":1,"23":1,"33":1,"49":1,"69":1,"82":1,"93":1,"121":1,"136":1,"164":1,"219":1,"380":1,"402":1,"540":1},"1":{"50":1,"51":1,"52":1,"53":1,"381":1,"382":1,"383":1,"403":1,"404":1,"405":1},"2":{"92":1,"214":1,"215":1,"216":1,"217":1}}],["b",{"2":{"16":2,"22":2}}],["byzantium",{"2":{"455":2}}],["by",{"2":{"16":1,"22":1,"30":3,"40":1,"43":2,"44":2,"80":1,"87":2,"93":1,"95":1,"128":1,"132":1,"134":1,"180":1,"186":1,"228":1,"232":1,"254":1,"281":2,"328":2,"332":1,"334":3,"458":1,"468":2,"524":1,"530":3,"534":3,"547":2,"552":1}}],["bytecode",{"2":{"29":1,"60":1,"63":1,"73":1,"74":1,"75":1,"103":1,"125":1,"130":1,"146":3,"160":1,"163":1,"175":2,"183":2,"185":1,"191":1,"194":1,"195":1,"230":1,"289":1,"306":1,"378":2,"407":1,"418":1,"437":1,"488":2,"575":2}}],["byte",{"2":{"1":3,"6":1,"144":10,"302":1,"315":3,"544":1,"546":1,"547":1,"551":1}}],["byteslike",{"2":{"567":1}}],["bytestonumber",{"2":{"557":1}}],["bytestobigint",{"2":{"557":1}}],["bytestohex",{"2":{"557":2}}],["bytesperrow",{"2":{"144":3}}],["bytes32",{"2":{"5":2}}],["bytes",{"0":{"557":1},"2":{"1":2,"2":2,"6":1,"8":2,"9":2,"74":1,"298":1,"300":1,"302":1,"547":2,"551":1,"552":3,"557":3,"561":1}}],["immediately",{"2":{"220":1}}],["immediate",{"2":{"214":1}}],["improved",{"2":{"257":1}}],["improvement",{"2":{"23":1,"126":1}}],["impersonation",{"0":{"168":1}}],["impersonating",{"2":{"88":1,"508":1}}],["impersonate",{"2":{"88":1,"168":1,"179":1,"276":1}}],["impersonateaccount",{"2":{"88":1,"441":1}}],["impersonatedtx",{"2":{"504":1,"508":1}}],["impersonated",{"0":{"510":1},"2":{"48":1,"499":1,"504":1,"506":1}}],["impersonatedaddress",{"2":{"1":1,"26":1,"29":2,"36":1,"50":1,"510":1}}],["implementing",{"2":{"234":1}}],["implements",{"2":{"126":1,"231":1,"258":1}}],["implementation",{"2":{"102":1,"103":1,"104":1,"109":1,"227":1,"323":1,"332":1,"353":1,"354":1,"373":2,"407":1,"411":1,"423":2,"424":2,"429":1,"465":1,"499":1,"503":4,"522":1,"541":1,"573":1}}],["implementations",{"0":{"4":1},"1":{"5":1,"6":1,"7":1,"8":1},"2":{"21":2,"112":1,"126":1,"352":1,"388":1}}],["implement",{"2":{"51":1,"52":1,"540":1}}],["impl",{"2":{"21":2}}],["importing",{"2":{"188":1}}],["imports",{"2":{"121":1}}],["imported",{"2":{"95":1,"225":2}}],["important",{"0":{"258":1},"2":{"82":1,"196":1,"225":1,"447":1,"470":1,"472":1}}],["import",{"2":{"1":6,"2":6,"12":1,"26":4,"36":3,"45":1,"61":2,"66":1,"77":3,"79":2,"80":2,"81":2,"85":2,"90":3,"91":3,"95":2,"96":2,"99":4,"100":3,"121":1,"141":3,"142":1,"145":2,"148":1,"152":3,"154":2,"155":1,"160":1,"162":2,"163":3,"164":2,"167":2,"173":3,"175":2,"185":2,"186":2,"188":6,"191":2,"192":2,"194":1,"195":1,"196":1,"220":1,"225":2,"226":2,"227":4,"236":2,"237":1,"239":3,"247":2,"248":1,"252":1,"256":1,"287":2,"288":1,"289":1,"290":1,"298":1,"300":1,"301":1,"302":1,"305":1,"306":1,"318":3,"319":4,"321":3,"328":2,"331":3,"340":2,"343":3,"344":2,"345":1,"361":2,"362":1,"363":1,"364":1,"375":1,"377":1,"378":1,"384":1,"398":1,"399":1,"400":1,"403":1,"417":4,"419":2,"428":1,"431":1,"435":2,"440":1,"443":1,"444":2,"457":1,"465":1,"509":1,"510":1,"517":1,"520":1,"532":2,"544":1,"547":1,"548":1,"557":1,"558":1,"560":1,"561":1,"562":1,"563":1,"564":1,"565":1,"567":1,"568":1,"569":1,"570":1,"571":1,"589":2,"590":1,"591":1}}],["i++",{"2":{"180":1,"185":1}}],["io",{"2":{"167":1,"170":1,"171":2,"179":1,"185":1,"241":1,"247":1,"256":1,"340":1,"344":1,"431":1,"435":1}}],["i",{"2":{"144":7,"180":3,"185":3}}],["ideal",{"2":{"549":1}}],["identify",{"2":{"11":1,"22":1}}],["id",{"2":{"87":1,"176":1,"279":1,"284":1,"365":3}}],["iterate",{"2":{"338":1}}],["iterates",{"2":{"328":1}}],["iterator",{"0":{"338":1,"339":1},"2":{"328":1,"338":1,"339":2,"345":1}}],["iteration",{"0":{"345":1},"2":{"325":1}}],["items",{"2":{"141":3,"145":2}}],["item",{"2":{"79":2,"141":4,"145":2,"505":1}}],["it",{"2":{"35":1,"125":1,"128":1,"130":1,"132":1,"163":1,"227":1,"252":2,"254":1,"258":2,"265":1,"293":1,"298":1,"305":1,"308":1,"323":1,"347":1,"386":1,"407":1,"424":1,"453":1,"477":1,"499":1,"546":1,"553":1,"573":1,"575":1}}],["its",{"2":{"29":1,"185":2,"328":1,"335":1,"530":1}}],["itself",{"2":{"23":1}}],["isbytes",{"2":{"558":2}}],["isblobeip4844tx",{"2":{"506":1}}],["ishex",{"2":{"558":2}}],["islegacytx",{"2":{"506":1}}],["isfeemarketeip1559tx",{"2":{"506":1}}],["isaddress",{"2":{"558":2}}],["isaccesslisteip2930tx",{"2":{"506":1}}],["isasync",{"2":{"74":1}}],["isprecompileorsystemaddress",{"2":{"298":1}}],["iszero",{"2":{"298":1,"305":1}}],["isn",{"2":{"188":1}}],["isrunning",{"2":{"141":5}}],["issigned",{"2":{"519":1}}],["issues",{"2":{"121":1}}],["isstatic",{"2":{"76":1}}],["iscompiled",{"2":{"76":1}}],["iscontract",{"2":{"60":1,"61":1}}],["isempty",{"2":{"60":1,"69":1}}],["is",{"0":{"227":1,"254":1},"1":{"255":1,"256":1,"257":1,"258":1,"259":1},"2":{"35":1,"60":2,"73":3,"74":4,"76":4,"77":1,"97":1,"123":1,"125":1,"128":1,"130":1,"132":1,"187":1,"188":1,"196":1,"220":1,"223":1,"226":2,"227":1,"228":1,"229":1,"236":1,"239":1,"252":1,"254":1,"258":2,"269":2,"298":2,"300":1,"301":1,"302":1,"303":2,"341":1,"448":1,"449":1,"450":1,"455":1,"473":1,"474":1,"479":1,"496":1,"519":1,"524":1,"529":1,"539":3,"550":1,"575":1}}],["iface",{"2":{"162":3}}],["if",{"2":{"2":1,"5":1,"6":1,"7":1,"9":3,"26":1,"29":1,"31":2,"33":3,"42":1,"53":1,"60":2,"61":1,"69":2,"74":1,"77":1,"79":1,"81":1,"82":1,"95":1,"96":2,"121":1,"127":1,"141":5,"145":2,"164":3,"277":1,"298":3,"300":1,"301":1,"302":2,"305":1,"345":1,"365":1,"382":1,"401":1,"404":2,"420":1,"471":1,"489":1,"510":1,"519":1,"520":1,"529":1,"539":3,"546":1,"550":1,"551":1,"552":1,"592":2}}],["invariant",{"2":{"571":2}}],["invalidgaslimiterror",{"2":{"520":2}}],["invalidchainerror",{"2":{"341":1}}],["invalidheadererror",{"2":{"341":1}}],["invalidblockerror",{"2":{"341":1}}],["invalidsalterror",{"2":{"302":1,"303":1}}],["invalidparams",{"2":{"92":1}}],["invalidrequest",{"2":{"92":1}}],["invalidaddresserror",{"2":{"300":1,"301":1,"302":1,"303":1,"546":1,"550":1,"551":1}}],["invalidaddress",{"2":{"31":2}}],["invalid",{"2":{"31":2,"81":2,"92":2,"133":1,"302":1,"303":2,"341":1,"365":4,"520":1,"550":1,"592":5}}],["inference",{"2":{"381":1}}],["info",{"2":{"231":1,"232":1,"233":1,"234":1,"377":1}}],["information",{"2":{"74":3,"75":1,"76":2,"77":4,"82":1,"90":1,"91":1,"95":1,"96":1,"119":1,"173":1,"176":1,"178":1,"179":1,"180":1,"182":1,"183":1,"239":1,"412":1}}],["infura",{"2":{"167":1,"170":1,"179":1,"185":1,"241":1,"247":1,"340":1,"344":1}}],["indicating",{"2":{"529":1}}],["individually",{"2":{"225":1}}],["individual",{"0":{"100":1},"2":{"97":1,"121":1}}],["independent",{"2":{"257":1}}],["indexed",{"2":{"157":2,"158":2,"162":2,"164":2,"375":2}}],["index",{"2":{"26":1,"185":1}}],["introduces",{"2":{"499":1}}],["introspection",{"2":{"263":1}}],["intrinsic",{"2":{"77":1}}],["into",{"2":{"121":1,"123":1,"222":1,"223":1,"226":1,"228":1,"551":1}}],["integrates",{"2":{"264":1,"347":1}}],["integration",{"0":{"89":1,"108":1,"246":1,"444":1},"1":{"90":1,"91":1,"109":1,"110":1,"247":1,"248":1},"2":{"84":1,"151":1,"187":2,"245":1}}],["intensive",{"2":{"22":1,"219":1}}],["interpreter",{"2":{"412":1}}],["interpreterstep",{"0":{"74":1},"2":{"73":1,"74":2,"141":3,"412":1}}],["intervalnode",{"2":{"220":2}}],["intervals",{"2":{"215":1,"219":1}}],["interval",{"0":{"215":2},"2":{"180":2,"215":2,"218":3,"219":3,"220":4,"242":1,"255":1}}],["intermediatestate",{"2":{"178":2}}],["intermediate",{"2":{"178":1}}],["internally",{"2":{"551":1,"552":1}}],["internalerror",{"2":{"92":1}}],["internal",{"0":{"277":1},"2":{"92":1,"123":1,"252":1,"332":1}}],["interfaces",{"0":{"313":1,"352":1,"412":1,"504":1},"2":{"264":1}}],["interface",{"0":{"3":1,"162":1,"237":1},"2":{"3":3,"14":3,"27":3,"74":2,"75":1,"76":1,"77":1,"84":1,"85":1,"92":1,"102":1,"120":1,"138":1,"162":3,"176":2,"328":1,"352":1,"392":1,"432":1,"460":1,"461":1,"462":1,"463":1,"466":1,"483":1,"484":1,"504":5,"512":1,"513":1,"514":1,"515":1,"537":1,"593":1}}],["interacting",{"2":{"169":1,"188":1,"265":1,"328":1,"423":1}}],["interactions",{"0":{"194":1,"199":1,"437":1},"2":{"179":1,"192":1,"196":1,"239":1,"245":1,"267":1,"273":1,"367":1,"369":1}}],["interaction",{"0":{"112":1,"153":1,"175":1,"288":1},"1":{"154":1,"155":1},"2":{"110":1,"146":1,"175":1,"427":1,"428":1,"437":1,"440":1}}],["interacttx",{"2":{"29":2}}],["interact",{"2":{"1":1,"29":1,"175":1,"227":1}}],["initiated",{"2":{"76":1}}],["initialdata",{"2":{"564":2}}],["initialization",{"2":{"164":1}}],["initializes",{"2":{"378":1}}],["initialize",{"2":{"36":1,"564":1}}],["initialsupply",{"2":{"163":1}}],["initial",{"2":{"67":1,"163":1,"284":1}}],["instead",{"2":{"121":1,"291":1}}],["instantiation",{"2":{"517":1}}],["instant",{"2":{"214":1}}],["instanceof",{"2":{"420":1,"520":1}}],["instances",{"2":{"164":1}}],["instance",{"0":{"375":1,"417":1,"589":1},"2":{"74":1,"173":1,"175":1,"241":1,"252":1,"300":3,"329":1,"331":1,"354":1,"372":1,"415":1,"428":1,"487":1,"584":2,"585":1}}],["installation",{"0":{"98":1,"250":1,"266":1,"294":1,"309":1,"324":1,"348":1,"368":1,"387":1,"408":1,"425":1,"454":1,"478":1,"500":1,"523":1,"554":1,"574":1},"1":{"99":1,"100":1,"251":1,"252":1,"253":1},"2":{"249":1,"259":1}}],["install",{"0":{"251":1},"2":{"97":2,"99":1,"100":1,"139":2,"251":1,"266":1,"294":1,"309":1,"324":1,"348":1,"368":1,"387":1,"408":1,"425":1,"454":1,"478":1,"500":1,"523":1,"554":1,"574":1}}],["instruction",{"2":{"73":1}}],["insufficient",{"2":{"42":2,"51":1,"382":1,"592":1}}],["increase",{"2":{"43":1}}],["including",{"2":{"37":1,"77":1,"236":1,"295":1,"355":1}}],["include",{"2":{"185":1,"225":1}}],["included",{"2":{"35":1,"45":1,"188":1,"226":1,"423":1,"535":1}}],["includeprecompiles",{"2":{"12":1}}],["includeopcodes",{"2":{"12":1}}],["includes",{"2":{"11":1,"31":1,"32":1,"42":1,"51":3,"265":1,"308":1,"355":1,"376":1,"382":1,"386":1,"423":1,"439":1,"465":1,"470":1,"471":1,"499":1,"520":1}}],["inputs",{"2":{"136":1,"302":1}}],["input",{"2":{"1":2,"2":1,"3":1,"7":1,"9":3,"76":1,"243":1,"300":3,"412":1,"544":2,"546":2,"551":1}}],["in",{"0":{"260":1},"1":{"261":1,"262":1,"263":1,"264":1},"2":{"0":2,"11":1,"23":1,"26":1,"32":1,"33":1,"35":1,"60":1,"63":1,"74":3,"76":1,"77":1,"81":1,"88":1,"93":1,"102":1,"126":1,"136":1,"191":1,"219":1,"224":3,"225":3,"226":1,"227":2,"228":2,"236":1,"254":4,"255":1,"265":1,"291":1,"308":1,"323":1,"328":1,"347":1,"367":1,"376":1,"383":1,"386":1,"407":1,"423":1,"424":1,"429":1,"431":1,"499":1,"529":2,"535":1,"538":1,"549":1,"552":1,"553":1,"564":1,"592":1}}],["flows",{"2":{"549":1}}],["floor",{"2":{"319":1}}],["flexibility",{"2":{"212":1}}],["flexible",{"2":{"30":1,"255":1}}],["flex",{"2":{"141":3,"144":1,"145":1}}],["fc8181",{"2":{"141":1}}],["friendly",{"2":{"121":1,"298":1}}],["fromtxdata",{"2":{"517":1}}],["fromrlp",{"2":{"563":2}}],["fromrlpserializedblock",{"2":{"321":1}}],["fromrpc",{"2":{"509":1}}],["fromserializedtx",{"2":{"509":1}}],["fromstring",{"2":{"319":1}}],["fromcharcode",{"2":{"144":1}}],["fromblockbodydata",{"2":{"509":1}}],["fromblockdata",{"2":{"319":1}}],["fromblock",{"2":{"30":4,"31":1,"134":1,"176":1,"379":1,"469":1}}],["from",{"0":{"301":1,"302":1,"319":1,"321":1},"2":{"1":8,"2":6,"12":1,"17":2,"26":4,"36":3,"45":1,"59":1,"61":2,"66":1,"74":3,"77":4,"79":3,"80":2,"81":2,"85":2,"90":3,"91":3,"95":3,"96":2,"99":4,"100":3,"121":1,"127":1,"129":1,"141":3,"142":1,"145":2,"148":1,"152":3,"154":2,"155":1,"157":4,"158":3,"160":1,"162":3,"163":3,"164":3,"167":3,"169":1,"170":1,"171":1,"173":4,"175":2,"183":2,"185":3,"186":2,"188":7,"190":1,"191":2,"192":1,"194":1,"195":1,"196":2,"220":1,"225":4,"226":1,"227":3,"231":1,"236":2,"237":1,"239":2,"241":1,"247":2,"248":1,"252":1,"255":1,"256":2,"287":2,"288":1,"289":1,"290":1,"293":1,"298":5,"300":6,"301":5,"302":4,"305":1,"306":4,"316":1,"318":3,"319":4,"321":3,"325":1,"328":2,"331":3,"340":3,"343":3,"344":3,"345":1,"361":2,"362":1,"363":1,"364":1,"375":2,"377":1,"378":1,"379":2,"384":1,"398":1,"399":1,"400":1,"403":1,"417":4,"419":2,"431":1,"435":2,"443":1,"444":2,"450":1,"457":1,"458":1,"465":1,"473":1,"474":1,"496":1,"509":5,"510":2,"517":1,"520":1,"532":2,"544":6,"546":1,"547":2,"548":4,"550":1,"552":1,"553":1,"557":2,"558":1,"560":1,"561":2,"562":2,"563":2,"564":1,"565":1,"567":1,"568":1,"569":3,"570":1,"571":1,"589":2,"590":1,"591":1}}],["feature",{"2":{"510":1}}],["features",{"0":{"37":1,"46":1,"126":1,"143":1,"240":1,"255":1,"433":1,"442":1},"1":{"47":1,"48":1,"144":1,"145":1,"241":1,"242":1,"243":1,"244":1,"434":1,"435":1,"436":1,"437":1,"438":1,"443":1,"444":1},"2":{"527":1,"573":1}}],["fetch",{"2":{"167":1}}],["fetched",{"2":{"129":1}}],["fetching",{"2":{"69":1}}],["feemarketeip1559txdata",{"2":{"514":1,"515":1}}],["feemarketeip1559transaction",{"2":{"503":1,"508":1}}],["fee",{"2":{"48":1,"74":3,"79":1,"80":1,"149":1,"383":1,"446":1,"508":1,"514":1,"521":1,"538":1}}],["factors",{"2":{"570":1}}],["factory",{"2":{"160":3,"163":2,"503":1,"517":1}}],["fantom",{"2":{"358":2}}],["familiar",{"2":{"223":1}}],["family",{"2":{"77":2,"141":2,"144":1,"145":1}}],["false",{"2":{"69":2,"141":2,"145":2,"291":1,"305":1,"417":1,"533":1}}],["faster",{"2":{"42":1,"261":1}}],["fails",{"2":{"341":2,"551":1}}],["fail",{"2":{"180":1}}],["failed",{"2":{"29":1,"33":2,"69":1,"127":1,"145":1,"164":1,"245":1}}],["failure",{"2":{"27":1,"178":1,"539":1,"592":1}}],["funds",{"2":{"42":1}}],["functionname",{"2":{"77":1,"186":2,"194":1,"438":1,"562":1}}],["functions",{"0":{"275":1,"299":1,"316":1,"330":1,"354":1,"372":1,"390":1,"415":1,"486":1,"506":1,"561":1,"583":1},"1":{"300":1,"301":1,"302":1,"331":1,"332":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"584":1,"585":1,"586":1,"587":1},"2":{"50":1,"95":4,"110":1,"225":1,"243":1,"423":1,"451":1,"475":1,"497":1,"543":1,"553":1}}],["functionprofile",{"2":{"20":4}}],["functioncalltx",{"2":{"20":1}}],["function",{"2":{"1":1,"2":1,"5":1,"6":1,"7":1,"8":2,"9":2,"20":2,"21":1,"29":1,"93":1,"112":1,"116":1,"141":2,"144":3,"145":1,"146":1,"154":3,"155":1,"157":1,"160":1,"162":2,"163":3,"164":6,"182":1,"183":2,"225":1,"239":1,"288":1,"371":1,"375":2,"381":1,"392":1,"419":1,"427":1,"545":1,"562":2,"569":1,"579":1,"580":1,"581":1}}],["functionality",{"2":{"0":1,"193":1,"236":1,"248":1,"265":1,"267":1,"293":1,"308":1,"323":1,"347":1,"386":1,"407":1,"429":1,"431":1,"499":1,"553":1,"573":1,"578":1}}],["fullness",{"2":{"217":1}}],["fully",{"2":{"92":1}}],["full",{"2":{"42":1,"125":1,"136":1,"257":1,"258":2,"265":1,"292":1,"308":1,"315":1,"322":1,"323":1,"346":1,"347":1,"366":1,"367":1,"381":1,"385":1,"386":1,"407":1,"422":1,"429":1,"450":1,"474":1,"496":1,"499":1,"539":2,"553":1}}],["folder",{"2":{"265":1,"308":1,"323":1,"347":1,"367":1,"386":1,"407":1,"499":1,"553":1}}],["follows",{"2":{"549":1}}],["follow",{"2":{"92":1,"121":1}}],["following",{"2":{"74":1,"75":1,"76":1,"77":1,"527":1,"548":1}}],["footprint",{"2":{"263":1}}],["font",{"2":{"141":2,"144":1,"145":1}}],["focus",{"2":{"82":1,"222":1,"223":1}}],["foundry",{"2":{"88":1,"359":2}}],["found",{"2":{"31":2,"88":1,"92":1}}],["forging",{"2":{"547":1}}],["forget",{"2":{"529":1}}],["forms",{"2":{"224":1,"544":1}}],["formattedabi",{"2":{"568":1}}],["formatting",{"2":{"119":1,"310":1}}],["formatabi",{"2":{"568":2}}],["formatascii",{"2":{"144":2}}],["formatgwei",{"2":{"560":2}}],["formatether",{"2":{"560":2}}],["formats",{"2":{"183":1,"295":1,"509":1,"544":1}}],["formatunits",{"2":{"154":1,"158":1}}],["formatbyte",{"2":{"144":2}}],["format",{"2":{"92":1,"117":1,"307":1,"313":1,"352":1,"484":1,"504":2,"568":1}}],["forkoptions",{"2":{"484":1}}],["forkandcacheblock",{"2":{"277":1}}],["forks",{"2":{"185":1,"256":1}}],["forked",{"0":{"169":1},"2":{"129":1,"340":1,"344":1,"479":1}}],["forkedblock",{"2":{"129":1}}],["forking",{"0":{"166":1,"241":1,"340":1,"344":1,"435":1,"492":1},"1":{"167":1,"168":1,"169":1,"170":1,"171":1},"2":{"129":1,"165":1,"171":1,"179":2,"231":1,"255":1,"325":1,"429":1,"484":1}}],["fork",{"0":{"129":1,"167":1,"170":1,"179":1},"2":{"167":1,"169":1,"170":2,"171":3,"179":2,"185":1,"228":1,"241":2,"245":1,"247":1,"255":1,"256":1,"269":1,"277":1,"329":2,"331":1,"340":1,"344":2,"431":1,"432":2,"435":2,"492":2}}],["for",{"0":{"157":1,"186":1},"2":{"1":1,"9":2,"21":1,"23":1,"25":1,"27":2,"30":1,"31":1,"33":2,"40":1,"42":1,"44":2,"50":1,"52":1,"57":1,"74":2,"76":5,"77":4,"80":1,"88":1,"90":1,"91":1,"92":2,"93":4,"95":2,"96":3,"102":1,"121":2,"127":1,"134":1,"135":1,"136":2,"144":1,"155":1,"158":1,"161":1,"167":1,"172":2,"173":1,"175":1,"176":1,"178":1,"179":1,"180":2,"182":2,"183":1,"185":1,"188":2,"192":4,"193":1,"196":2,"214":1,"215":1,"216":1,"217":1,"219":4,"220":3,"221":1,"225":3,"226":1,"231":1,"232":1,"233":1,"234":2,"235":1,"239":1,"245":1,"254":2,"258":3,"259":1,"265":1,"267":1,"272":3,"273":2,"274":2,"293":1,"295":1,"298":1,"301":1,"302":1,"303":2,"308":2,"312":3,"313":1,"323":1,"325":1,"328":1,"329":1,"341":1,"347":1,"355":1,"365":1,"367":1,"369":1,"371":2,"373":1,"375":1,"384":1,"386":1,"392":3,"393":1,"395":2,"403":1,"407":1,"412":2,"413":1,"423":3,"424":1,"427":1,"429":1,"438":1,"453":1,"455":1,"458":2,"465":1,"470":2,"471":1,"477":2,"479":1,"483":2,"484":1,"499":1,"503":1,"506":4,"508":1,"509":1,"519":1,"522":1,"524":1,"532":1,"538":4,"539":1,"540":2,"543":1,"547":1,"549":1,"552":2,"553":1,"571":1,"573":2,"575":1,"578":1,"579":3,"580":2,"581":2,"585":1,"592":1,"594":1}}],["files",{"2":{"473":1}}],["filters",{"2":{"31":1,"33":1,"93":2,"158":1,"234":1,"455":1,"469":1}}],["filtering",{"2":{"30":1,"93":1,"369":1}}],["filter",{"2":{"16":1,"17":1,"18":1,"22":1,"25":1,"30":4,"87":5,"158":3,"176":1,"379":3,"458":1}}],["fields",{"2":{"488":1,"510":1,"512":1}}],["field",{"2":{"353":1}}],["fixed",{"2":{"215":1}}],["finality",{"2":{"214":1}}],["fine",{"2":{"196":1,"263":1}}],["find",{"2":{"16":1,"185":1}}],["first",{"2":{"139":1,"186":1,"191":1,"225":1,"262":1}}],["url",{"2":{"247":1,"269":1}}],["uint8",{"2":{"154":1}}],["uint8arrays",{"2":{"546":1}}],["uint8array",{"0":{"300":1},"2":{"1":1,"2":2,"3":2,"5":2,"6":1,"7":1,"8":2,"9":2,"27":1,"55":1,"73":1,"74":2,"75":1,"76":3,"77":1,"144":2,"298":2,"300":2,"321":1,"328":2,"329":1,"418":1,"460":1,"461":1,"466":1,"512":1,"515":4,"517":2,"544":1,"545":1,"547":1,"552":2,"557":2,"558":1}}],["uint256",{"2":{"154":1,"155":1,"157":2,"158":1,"160":1,"162":2,"163":2,"164":5,"239":1,"375":3,"381":1,"419":2}}],["ui",{"0":{"138":1},"1":{"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1},"2":{"96":1,"228":1,"262":1}}],["unexpectedly",{"2":{"551":1}}],["unreachablecodeerror",{"2":{"551":1}}],["unprefixed",{"2":{"546":1}}],["unverified",{"2":{"530":1,"533":1}}],["unclehash",{"2":{"319":1}}],["underpriced",{"2":{"539":2}}],["under",{"2":{"448":1,"473":2}}],["understanding",{"2":{"221":1}}],["undefined",{"2":{"18":1,"26":1,"30":2,"31":1,"33":1,"76":1}}],["until",{"2":{"220":1}}],["unique",{"2":{"499":1,"510":1}}],["union",{"2":{"303":1,"505":1}}],["unit",{"0":{"560":1},"2":{"245":1}}],["uniswap",{"2":{"179":4}}],["uninstallfilter",{"2":{"87":1,"93":1}}],["unused",{"2":{"93":1}}],["unless",{"2":{"69":1}}],["unknown",{"2":{"51":1,"81":1,"92":1,"167":1}}],["upon",{"2":{"543":1}}],["updatedvalue",{"2":{"175":2}}],["updateui",{"2":{"96":2}}],["updates",{"0":{"96":1},"2":{"87":1,"228":1,"234":1,"257":1,"262":1,"488":3}}],["update",{"2":{"45":1,"96":2,"121":1,"131":1,"148":1}}],["up",{"2":{"9":1,"93":1,"136":1,"137":1,"141":1,"164":1,"192":1,"223":1,"345":1,"524":1}}],["usdccontract",{"2":{"169":4}}],["usdc",{"2":{"154":1,"169":5}}],["uses",{"2":{"571":1}}],["user",{"0":{"262":1},"2":{"254":1,"298":1,"404":1}}],["useful",{"2":{"192":1,"234":1,"384":1}}],["used",{"2":{"77":2,"127":1,"141":1,"186":1,"223":1,"236":1,"332":1,"543":1,"552":1,"591":1}}],["use",{"0":{"19":1,"245":1},"1":{"20":1,"21":1,"22":1},"2":{"9":2,"23":1,"33":1,"50":2,"52":1,"85":1,"93":2,"95":1,"121":2,"136":3,"146":1,"151":1,"172":1,"187":1,"188":5,"189":1,"190":1,"196":1,"219":4,"225":1,"226":1,"227":2,"228":1,"235":1,"239":1,"247":1,"248":1,"375":1,"378":1,"381":1,"384":1,"399":1,"400":1,"405":1,"540":1}}],["usage",{"0":{"2":1,"18":1,"41":1,"146":1,"159":1,"286":1,"317":1,"360":1,"374":1,"397":1,"416":1,"467":1,"494":1,"531":1,"549":1,"588":1},"1":{"42":1,"43":1,"44":1,"45":1,"160":1,"161":1,"162":1,"287":1,"288":1,"289":1,"290":1,"318":1,"319":1,"320":1,"321":1,"361":1,"362":1,"363":1,"364":1,"375":1,"376":1,"377":1,"378":1,"379":1,"398":1,"399":1,"400":1,"401":1,"417":1,"418":1,"419":1,"420":1,"421":1,"468":1,"469":1,"495":1,"532":1,"533":1,"534":1,"535":1,"536":1,"589":1,"590":1,"591":1},"2":{"9":1,"18":1,"22":1,"32":1,"80":1,"87":1,"107":1,"136":1,"137":1,"138":1,"152":1,"217":1,"230":1,"423":1,"543":1,"567":1}}],["using",{"0":{"1":1,"90":1,"91":1,"95":1,"151":1,"187":1,"189":1,"363":1,"377":1,"399":1,"400":1},"1":{"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"188":1,"189":1,"190":2,"191":2,"192":2,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1},"2":{"2":1,"77":1,"93":2,"94":2,"138":1,"188":1,"191":2,"247":1,"301":1,"302":1,"375":1,"423":1,"517":1}}],["util",{"2":{"572":1}}],["utility",{"0":{"316":1,"396":1},"2":{"110":1,"116":1,"277":1,"298":1,"371":2,"423":1,"509":1,"543":1,"552":1,"553":1}}],["utilities",{"0":{"114":1,"115":1,"181":1,"239":1,"277":1,"543":1,"552":1},"1":{"115":1,"116":1,"117":1,"182":1,"183":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1},"2":{"1":1,"106":1,"107":1,"112":1,"115":1,"225":1,"267":1,"293":1,"295":1,"308":1,"347":1,"367":1,"369":1,"386":1,"388":1,"423":5,"552":1,"553":1,"594":1}}],["utils",{"0":{"553":1},"1":{"554":1,"555":1,"556":1,"557":1,"558":1,"559":1,"560":1,"561":1,"562":1,"563":1,"564":1,"565":1,"566":1,"567":1,"568":1,"569":1,"570":1,"571":1,"572":1},"2":{"1":1,"2":1,"26":1,"115":1,"145":1,"293":1,"307":1,"319":1,"419":1,"423":1,"543":1,"552":1,"553":2,"554":1,"557":1,"558":1,"560":1,"561":1,"562":1,"563":1,"564":1,"565":1,"567":1,"568":1,"569":1,"570":1,"571":1}}],["pnpm",{"2":{"251":1}}],["pieces",{"2":{"225":1}}],["pendingtxs",{"2":{"96":2}}],["pendingreceipt",{"2":{"96":3}}],["pending",{"2":{"35":1,"37":1,"43":1,"59":1,"95":1,"96":2,"106":1,"132":3,"215":1,"220":1,"221":1,"232":1,"236":1,"255":1,"277":1,"334":2,"522":1,"524":1,"538":3}}],["permission",{"2":{"395":2}}],["permissions",{"0":{"211":1}}],["period",{"2":{"362":1}}],["periodically",{"2":{"23":1,"540":1}}],["persist",{"2":{"196":1}}],["persistence",{"0":{"443":1},"2":{"120":2,"479":1}}],["persistent",{"2":{"9":1}}],["persister",{"2":{"120":1,"443":1}}],["percentage",{"2":{"538":1}}],["percentageoftotal",{"2":{"80":1}}],["percent",{"2":{"43":1}}],["performs",{"2":{"530":1}}],["performstatechanges",{"2":{"178":1}}],["performmorechanges",{"2":{"178":1}}],["perform",{"2":{"178":1,"225":1,"252":1,"535":1}}],["performancelog",{"2":{"14":3}}],["performance",{"0":{"11":1,"13":1,"15":1,"32":1,"52":1,"421":1},"1":{"12":1,"13":1,"14":1,"15":1,"16":2,"17":2,"18":2,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"33":1},"2":{"11":1,"13":1,"14":1,"20":2,"37":1,"83":1,"150":1,"217":1,"219":1,"221":2,"421":1,"573":1}}],["performed",{"2":{"9":1}}],["per",{"2":{"6":1,"37":1,"39":2,"538":2}}],["pollinginterval",{"2":{"432":1}}],["polygonzkevm",{"2":{"357":1}}],["polygon",{"2":{"357":3}}],["poa",{"2":{"362":1}}],["portable",{"2":{"264":1}}],["portability",{"0":{"264":1}}],["powered",{"2":{"254":1}}],["powerful",{"2":{"187":1,"196":1,"367":1,"424":1}}],["pointer",{"2":{"141":1}}],["point",{"2":{"102":1}}],["potential",{"2":{"93":1}}],["popular",{"2":{"84":1,"151":1,"226":1}}],["postbyzantiumtxreceiptwithtype",{"2":{"472":1}}],["postbyzantiumtxreceipt",{"0":{"462":1},"2":{"462":1,"463":1,"472":1}}],["postbyzantiumreceipt",{"2":{"27":2}}],["post",{"2":{"455":1}}],["pos",{"2":{"357":1}}],["possible",{"2":{"93":1}}],["position",{"2":{"74":1,"280":1,"283":1}}],["poolcopy",{"2":{"536":1}}],["poolsize",{"2":{"53":2}}],["pooled",{"2":{"40":1,"529":1}}],["pool",{"0":{"35":1,"39":1,"47":1,"132":1,"232":1,"532":1,"536":1},"1":{"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"133":1},"2":{"24":1,"34":1,"35":1,"39":1,"40":1,"45":1,"48":1,"52":1,"53":3,"106":1,"132":6,"133":2,"137":1,"221":1,"232":1,"255":1,"423":1,"522":1,"524":1,"527":1,"529":6,"530":6,"532":1,"536":3,"537":1,"538":1,"539":3,"540":3}}],["purposes",{"2":{"573":1}}],["purpose",{"2":{"225":1}}],["pure",{"2":{"225":1}}],["publicactions",{"2":{"428":1}}],["public",{"0":{"190":1,"198":1},"1":{"199":1,"200":1,"201":1},"2":{"190":1,"198":1,"394":1,"428":1,"441":1,"473":1}}],["putcontractcode",{"2":{"130":1,"488":1}}],["putcontractstorage",{"2":{"5":1,"130":1,"488":1}}],["putaccount",{"2":{"130":1,"131":1,"182":1,"238":1,"488":1}}],["putblock",{"2":{"128":1,"129":1,"180":1,"328":1,"335":1,"343":2}}],["putreceipt",{"2":{"96":1}}],["push",{"2":{"21":1,"79":2,"144":1,"157":1}}],["pc",{"2":{"14":1,"74":1,"77":2,"79":2,"141":2}}],["payload",{"2":{"315":2,"316":2}}],["pass",{"2":{"226":1}}],["passing",{"2":{"191":1}}],["past",{"0":{"158":1},"2":{"158":1}}],["padstart",{"2":{"144":2}}],["padding",{"2":{"141":6,"142":1,"144":1,"145":2}}],["path",{"2":{"551":1}}],["paths",{"2":{"136":1}}],["pattern",{"2":{"223":1}}],["patterns",{"0":{"18":1},"2":{"17":1}}],["patricia",{"2":{"117":1}}],["particularly",{"2":{"192":1}}],["parentblock",{"2":{"590":1}}],["parent",{"2":{"129":1}}],["parenthash",{"2":{"128":2,"319":1}}],["parsing",{"2":{"112":1}}],["parsedabi",{"2":{"568":2}}],["parsegwei",{"2":{"560":2}}],["parselog",{"2":{"162":1}}],["parseunits",{"2":{"155":1,"162":1}}],["parseerror",{"2":{"92":1}}],["parseether",{"2":{"50":1,"66":1,"68":1,"161":1,"191":1,"192":2,"195":1,"560":2}}],["parse",{"2":{"92":1,"546":1,"551":1,"568":1}}],["parseabi",{"2":{"1":2,"2":2,"5":1,"6":1,"7":1,"8":2,"9":2,"154":2,"155":1,"157":1,"158":1,"160":1,"162":2,"163":2,"164":5,"419":2,"568":2}}],["parameterizedaccountstorage",{"2":{"484":1}}],["parameterized",{"2":{"483":1,"484":1}}],["parameterizedtevmstate",{"2":{"483":1}}],["parameter",{"2":{"225":1,"291":1,"301":1}}],["parameters",{"0":{"59":1,"63":1},"2":{"40":1,"115":1,"272":2,"273":1,"274":1,"275":7,"300":1,"301":1,"302":1,"371":1,"392":1,"395":2,"403":2,"405":1,"586":1}}],["params",{"2":{"43":2,"85":1,"92":1,"93":3,"96":3,"185":2,"237":1,"398":1,"401":1,"403":1}}],["paper",{"2":{"10":1,"137":1}}],["packages",{"0":{"100":1,"101":1,"541":1,"594":1},"1":{"102":1,"103":1,"104":1},"2":{"95":4,"97":2,"100":1,"121":3,"188":1,"265":1,"308":1,"323":1,"347":1,"367":1,"386":1,"407":1,"423":1,"499":1,"543":1,"553":1}}],["package",{"0":{"97":1,"99":1,"423":1},"1":{"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1},"2":{"1":1,"99":1,"121":2,"146":1,"187":2,"265":1,"267":1,"293":1,"295":1,"303":1,"308":1,"310":1,"323":1,"325":1,"341":1,"346":2,"347":1,"349":1,"355":1,"365":1,"367":1,"369":1,"384":1,"386":1,"388":1,"407":1,"423":1,"424":1,"429":1,"447":1,"448":1,"452":1,"453":1,"455":1,"459":1,"465":1,"471":1,"472":1,"473":1,"476":1,"477":1,"479":1,"498":1,"499":1,"508":1,"520":1,"522":1,"553":1,"571":2,"573":1,"575":1,"592":1}}],["privatekey",{"2":{"518":1,"561":1}}],["primarily",{"2":{"258":1}}],["price",{"2":{"37":1,"39":1,"43":3,"51":2,"132":1,"232":1,"279":1,"524":1,"530":1,"532":1,"534":1,"538":1,"540":1}}],["pruning",{"2":{"33":1,"37":1,"40":1}}],["preparation",{"2":{"529":1}}],["preparetransactionrequest",{"2":{"208":1}}],["preimage",{"2":{"472":1}}],["prebyzantiumtxreceiptwithtype",{"2":{"472":1}}],["prebyzantiumtxreceipt",{"0":{"461":1},"2":{"461":1,"472":1}}],["prebyzantiumreceipt",{"2":{"27":1}}],["precise",{"2":{"216":1,"219":1}}],["precompilelog",{"2":{"14":1}}],["precompileb",{"2":{"8":2}}],["precompilea",{"2":{"8":2}}],["precompilecontract",{"2":{"3":1}}],["precompileoutput",{"2":{"3":2}}],["precompileinput",{"2":{"3":2,"412":1}}],["precompile",{"0":{"3":1,"5":1,"6":1,"7":1},"2":{"1":5,"2":2,"8":2,"9":2,"14":2,"243":1,"298":1,"413":1,"419":1,"421":1}}],["precompiled",{"2":{"0":1,"76":1,"112":1,"593":1}}],["precompiles",{"0":{"0":1,"1":1,"8":1,"243":1,"419":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"2":{"0":2,"1":2,"112":2,"126":1,"255":1,"412":1,"415":1,"417":1,"421":1,"422":1}}],["prefixed",{"2":{"196":1,"226":1,"546":1}}],["prefunded",{"2":{"191":8}}],["prefer",{"2":{"136":1,"552":1}}],["pre",{"0":{"373":1},"2":{"113":1,"144":1,"369":1,"455":1,"508":1,"512":1}}],["predeploys",{"2":{"113":1}}],["preview",{"2":{"245":1,"257":1}}],["previously",{"2":{"196":1}}],["previous",{"2":{"20":1,"490":1}}],["prevent",{"2":{"32":1,"37":1}}],["practices",{"0":{"9":1,"23":1,"33":1,"49":1,"69":1,"82":1,"93":1,"121":1,"136":1,"164":1,"219":1,"380":1,"402":1,"540":1},"1":{"50":1,"51":1,"52":1,"53":1,"381":1,"382":1,"383":1,"403":1,"404":1,"405":1},"2":{"92":1}}],["providing",{"2":{"455":1,"479":1}}],["providers",{"2":{"386":1}}],["provider",{"0":{"85":1,"392":1,"398":1},"2":{"91":1,"94":1,"152":5,"154":1,"155":1,"157":1,"158":1,"160":1,"161":3,"163":3,"164":4,"248":3,"331":1,"388":1,"392":1,"398":2}}],["provided",{"2":{"9":1,"121":1,"236":1,"303":2,"365":1}}],["provides",{"2":{"1":1,"25":1,"30":1,"57":1,"72":1,"84":1,"95":1,"193":1,"212":1,"227":1,"235":1,"254":1,"265":1,"267":1,"293":1,"295":1,"298":1,"303":1,"308":1,"310":1,"323":1,"325":1,"328":1,"347":1,"349":1,"367":1,"369":1,"386":1,"388":1,"407":1,"424":1,"429":1,"431":1,"453":1,"477":1,"499":1,"522":1,"553":1,"573":1,"575":1}}],["provide",{"2":{"0":1,"196":1,"519":1}}],["prototype",{"2":{"225":1,"226":1}}],["protocol",{"2":{"117":1,"459":1}}],["produce",{"2":{"548":1}}],["produced",{"2":{"212":1}}],["produces",{"2":{"188":1}}],["production",{"2":{"23":2,"102":1,"216":1,"233":1,"258":1}}],["project",{"0":{"139":1},"2":{"139":1,"146":1}}],["proposals",{"2":{"126":1}}],["properties",{"0":{"68":1,"529":1},"2":{"74":1,"75":1,"76":1,"77":1}}],["properly",{"2":{"9":1,"136":1,"540":1}}],["proper",{"2":{"9":2,"50":1,"52":1,"381":1,"405":1,"471":1,"540":1}}],["proof",{"2":{"117":1,"314":1,"493":1}}],["procedure",{"2":{"276":6}}],["procedures",{"0":{"110":1,"276":1},"2":{"110":1}}],["processed",{"2":{"73":2,"242":1}}],["processeddata",{"2":{"2":2}}],["processing",{"0":{"45":1,"106":1,"580":1,"581":1},"2":{"47":2,"82":1,"219":1,"220":1,"227":1,"530":2,"575":2}}],["processdata",{"2":{"9":2}}],["processb",{"2":{"8":1}}],["processa",{"2":{"8":1}}],["processwithgas",{"2":{"6":1}}],["process",{"2":{"2":2,"7":1,"9":3,"82":2,"135":1,"338":1,"345":3,"379":1}}],["program",{"2":{"74":1,"77":1}}],["profileoperation",{"2":{"23":2}}],["profile",{"2":{"20":2,"23":2,"80":6,"149":2}}],["profiler",{"0":{"11":1,"12":1},"1":{"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1},"2":{"11":1,"12":1,"14":1,"23":1,"80":2,"83":1,"150":1,"417":1}}],["profiling",{"0":{"80":1,"149":1},"2":{"12":2,"23":2,"80":1,"417":1,"575":1}}],["promise",{"0":{"331":1},"2":{"3":1,"55":3,"154":1}}],["x27",{"2":{"0":1,"1":20,"2":17,"5":4,"6":6,"7":6,"8":8,"9":10,"12":2,"14":12,"16":4,"17":4,"20":2,"22":2,"26":14,"29":7,"30":6,"31":8,"33":8,"35":1,"36":10,"42":4,"45":2,"50":6,"51":6,"53":2,"59":6,"61":16,"66":6,"67":6,"68":4,"69":6,"74":6,"77":22,"79":10,"80":6,"81":22,"82":6,"85":6,"90":6,"91":6,"93":6,"95":18,"96":14,"99":6,"100":4,"125":6,"127":8,"128":2,"133":2,"134":2,"141":18,"142":2,"144":6,"145":10,"146":6,"148":22,"149":2,"152":8,"154":14,"155":10,"157":8,"158":6,"160":6,"161":8,"162":14,"163":18,"164":26,"167":8,"168":4,"169":8,"170":2,"171":4,"173":14,"175":6,"176":10,"178":2,"179":6,"180":4,"182":4,"185":14,"186":12,"187":1,"188":13,"190":5,"191":7,"192":11,"194":12,"195":14,"196":2,"198":1,"202":1,"206":1,"214":2,"215":2,"216":2,"217":2,"218":4,"220":8,"225":7,"226":5,"227":4,"228":1,"230":2,"236":4,"237":6,"239":14,"241":4,"242":8,"243":2,"244":4,"247":8,"248":6,"252":5,"256":6,"269":1,"287":8,"288":8,"289":6,"290":6,"291":2,"298":6,"300":4,"301":6,"302":8,"305":9,"306":8,"318":6,"319":28,"321":6,"323":1,"328":4,"331":10,"334":4,"338":2,"339":4,"340":8,"341":1,"343":6,"344":6,"345":6,"347":1,"361":6,"362":10,"363":2,"364":6,"365":4,"375":14,"376":4,"377":8,"378":8,"379":4,"381":4,"382":4,"383":2,"384":2,"398":8,"399":6,"400":6,"401":6,"403":2,"405":10,"407":1,"417":10,"418":4,"419":6,"420":2,"421":2,"423":1,"424":1,"429":1,"431":2,"434":2,"435":6,"436":10,"437":6,"438":2,"443":2,"444":4,"457":2,"465":2,"509":2,"510":2,"517":6,"520":2,"532":6,"539":12,"544":2,"546":1,"547":2,"548":2,"549":1,"552":5,"557":18,"558":6,"560":10,"561":4,"562":8,"563":6,"564":2,"565":6,"567":8,"568":2,"569":6,"570":2,"571":4,"589":6,"590":2,"591":6,"592":8}}],["skipbalance",{"2":{"533":1}}],["skeletonunfinalizedblockbyhash",{"2":{"472":1}}],["skeletonstatus",{"2":{"472":1}}],["skeletonblockhashtonumber",{"2":{"472":1}}],["skeletonblock",{"2":{"472":1}}],["svvy",{"2":{"228":1}}],["svelte",{"0":{"141":1,"142":1},"2":{"138":1,"139":2,"141":1,"142":1,"146":4,"148":1}}],["swapexacttokensfortokens",{"2":{"179":1}}],["switchchain",{"2":{"210":1}}],["switch",{"2":{"51":1,"81":1,"218":2}}],["schema",{"0":{"394":1},"2":{"394":7,"427":1}}],["scenarios",{"0":{"177":1},"1":{"178":1,"179":1,"180":1},"2":{"192":2,"196":1,"212":1,"216":1,"217":1,"219":1,"220":1,"245":1,"303":1,"341":1,"471":1,"539":1,"592":1}}],["scripts",{"0":{"378":1}}],["script",{"2":{"141":2,"142":2,"144":2,"145":2,"148":2,"149":2,"378":5}}],["src",{"2":{"146":1}}],["sh",{"2":{"228":1}}],["shouldcreatetransaction",{"2":{"277":1}}],["should",{"2":{"163":1,"180":2,"277":1}}],["show",{"2":{"138":1}}],["shape",{"2":{"547":1}}],["shanghai",{"2":{"361":1,"362":1}}],["shard",{"2":{"521":1}}],["sharing",{"2":{"328":1}}],["shares",{"2":{"225":1}}],["shared",{"2":{"115":1,"423":1}}],["shallow",{"2":{"328":1,"487":1}}],["shallowcopy",{"2":{"328":1,"487":1}}],["shakable",{"2":{"188":1,"189":1,"223":1,"224":1,"225":2,"226":3,"227":1,"236":1,"423":1}}],["shaking",{"2":{"121":1,"188":1}}],["shadow",{"0":{"185":1},"2":{"185":1}}],["snapshot",{"2":{"130":1,"205":1}}],["snapshots",{"2":{"130":1}}],["specified",{"2":{"217":1}}],["specifically",{"2":{"573":1}}],["specification",{"2":{"71":1,"94":1,"258":1,"292":1,"322":1,"352":1,"406":1,"572":1}}],["specifictxs",{"2":{"44":1}}],["specific",{"0":{"170":1,"364":1,"559":1},"1":{"560":1,"561":1},"2":{"0":1,"9":1,"20":1,"23":2,"33":1,"93":1,"113":1,"121":1,"170":1,"192":1,"196":1,"225":1,"265":1,"303":1,"340":1,"341":1,"344":1,"347":1,"349":1,"365":1,"382":1,"386":1,"388":1,"393":1,"394":2,"400":1,"404":1,"427":1,"429":1,"483":1,"508":1,"539":1,"553":1,"578":1,"587":1,"592":1}}],["spenderaddress",{"2":{"186":1}}],["spacing",{"2":{"144":1}}],["space",{"2":{"141":1,"144":1}}],["span",{"2":{"144":6,"145":4}}],["split",{"2":{"121":1}}],["symbolaction",{"2":{"377":1}}],["symbol",{"2":{"154":4,"377":1,"378":2,"405":1}}],["synchronous",{"2":{"477":1}}],["synchronization",{"2":{"120":1}}],["sync",{"2":{"120":1,"396":1}}],["system",{"2":{"25":1,"119":2,"298":1,"453":1,"477":1}}],["sstore",{"2":{"74":1,"82":2}}],["slots",{"2":{"195":1}}],["slot",{"2":{"145":4}}],["slot2",{"2":{"68":1}}],["slot1",{"2":{"68":1}}],["slice",{"2":{"5":2,"16":1,"144":1}}],["sepolia",{"2":{"356":2}}],["separates",{"2":{"123":1}}],["sequentially",{"2":{"345":1}}],["sequence",{"2":{"37":1}}],["section",{"2":{"228":1,"423":1}}],["seconds",{"2":{"215":1,"218":1}}],["serializable",{"2":{"484":1}}],["serializabletevmstate",{"2":{"484":1}}],["serialization",{"2":{"117":1,"310":1}}],["serializeddata",{"2":{"509":1}}],["serializedblock",{"2":{"321":2}}],["serialized",{"2":{"320":1,"509":1}}],["serialize",{"2":{"320":2,"519":1}}],["serverless",{"2":{"264":1}}],["servererror",{"2":{"92":1}}],["server",{"0":{"444":1},"2":{"92":1,"146":1,"263":1,"444":3}}],["seamlessly",{"2":{"255":1}}],["seamless",{"2":{"84":1,"151":1,"187":1}}],["self",{"2":{"77":1}}],["selfdestruct",{"2":{"77":1}}],["selector",{"2":{"29":2}}],["sensitive",{"2":{"219":1}}],["sendeth",{"2":{"183":1}}],["senderaddress",{"2":{"44":1,"534":1,"549":1}}],["sendertxs",{"2":{"44":1,"534":1}}],["sender",{"2":{"44":1,"534":1}}],["sending",{"2":{"93":1,"393":1}}],["sendrawtransaction",{"2":{"87":1,"161":1,"208":1}}],["send",{"2":{"87":2,"155":1,"161":2,"175":1,"183":1,"191":1,"438":1}}],["sendtransaction",{"2":{"87":1,"93":1,"96":1,"191":1,"208":1,"220":3,"441":1}}],["sent",{"2":{"76":1,"228":1,"510":1}}],["see",{"0":{"71":1,"292":1,"307":1,"322":1,"346":1,"366":1,"385":1,"406":1,"422":1,"449":1,"521":1,"572":1},"2":{"90":1,"91":1,"92":3,"93":2,"95":6,"96":1,"172":1,"173":1,"175":1,"176":1,"178":1,"179":1,"180":1,"182":1,"183":1,"226":2,"231":1,"232":1,"233":1,"234":1}}],["setstateroot",{"2":{"489":1}}],["setstorageat",{"2":{"88":1,"204":1}}],["sets",{"2":{"439":1,"489":1}}],["setminingconfig",{"2":{"218":2}}],["setmingasprice",{"2":{"204":1}}],["setcoinbase",{"2":{"204":1}}],["setcode",{"2":{"88":1,"204":1}}],["setautomine",{"2":{"203":1}}],["setaccount",{"2":{"185":1,"244":1,"436":1}}],["setaccountresult",{"2":{"64":1}}],["setaccountparams",{"2":{"63":1,"95":1}}],["setaccounthandler",{"0":{"62":1},"1":{"63":1,"64":1,"65":1,"66":1,"67":1,"68":1},"2":{"57":1,"62":1,"66":2,"67":1,"68":1,"69":2,"95":1}}],["setblockgaslimit",{"2":{"203":1}}],["setblocktimestampinterval",{"2":{"203":1}}],["setblocktimestamp",{"2":{"192":2}}],["setbalance",{"2":{"88":1,"192":3,"204":1,"441":1}}],["setnextblockbasefeepergas",{"2":{"203":1}}],["setnextblocktimestamp",{"2":{"192":2,"203":1}}],["setnonce",{"2":{"88":1,"204":1}}],["setfilter",{"2":{"176":1}}],["setvalue",{"2":{"175":1,"176":1}}],["setiteratorhead",{"2":{"339":1}}],["setimpersonatedaccount",{"2":{"168":1,"179":1}}],["setintervalmining",{"2":{"203":1}}],["setinterval",{"2":{"53":1}}],["setupaccounts",{"2":{"182":1}}],["setupeventlisteners",{"2":{"141":2,"164":2,"228":1}}],["setup",{"0":{"139":1,"152":1,"167":1,"173":1,"188":1},"2":{"154":1,"163":1,"182":1}}],["set",{"2":{"69":1,"79":1,"80":1,"88":4,"95":2,"149":1,"164":1,"192":1,"265":1,"269":1,"275":1,"283":4,"284":1,"295":1,"339":1,"376":1,"383":2,"428":1,"436":1,"543":1,"575":1}}],["settings",{"2":{"349":2}}],["setting",{"0":{"66":1},"2":{"93":1,"192":1}}],["several",{"2":{"39":1,"212":1,"229":1,"235":1,"439":1,"447":1,"470":1,"472":1}}],["sessions",{"2":{"23":1}}],["supplyaction",{"2":{"377":1}}],["supporting",{"2":{"455":1,"479":1,"524":1,"575":1}}],["supported",{"0":{"86":1,"355":1},"1":{"87":1,"88":1,"356":1,"357":1,"358":1,"359":1},"2":{"198":1,"202":1,"206":1,"351":1,"353":1,"445":2,"502":1}}],["supports",{"2":{"27":1,"48":1,"88":1,"231":1,"434":1,"459":1,"508":1}}],["support",{"0":{"84":1,"129":1,"171":1,"445":1,"446":1},"1":{"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"96":1},"2":{"10":1,"25":1,"34":1,"56":1,"70":1,"84":1,"126":1,"136":1,"137":1,"152":1,"165":1,"171":1,"188":1,"227":1,"291":1,"310":1,"325":1,"349":1,"369":1,"429":1,"499":1}}],["such",{"2":{"225":2}}],["succeed",{"2":{"180":1}}],["succeeded",{"2":{"33":1,"173":1}}],["success",{"2":{"27":1,"33":2,"148":2}}],["subscription",{"2":{"369":1}}],["subcomponents",{"2":{"252":1}}],["subpaths",{"2":{"121":1}}],["submit",{"2":{"96":1}}],["submitting",{"2":{"43":1}}],["submodules",{"0":{"123":1},"1":{"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1},"2":{"24":1,"34":1,"56":1,"123":1,"124":1}}],["suite",{"2":{"97":1}}],["sufficient",{"2":{"93":1}}],["saving",{"0":{"468":1}}],["saves",{"2":{"458":1}}],["savereceipts",{"2":{"458":1,"468":1}}],["saved",{"2":{"196":1}}],["save",{"2":{"196":1,"468":1}}],["salt",{"0":{"302":1},"2":{"76":2,"302":5,"303":1,"306":2}}],["sample",{"2":{"141":1}}],["sampling",{"2":{"23":1}}],["same",{"2":{"43":3,"121":1}}],["safety",{"0":{"381":1,"403":1},"2":{"33":1,"121":1,"375":1}}],["safe",{"2":{"1":1,"157":1,"239":1,"367":1,"369":1,"375":2,"388":1,"403":1}}],["source",{"2":{"450":1,"474":1,"496":1}}],["sol",{"2":{"239":1}}],["solidity",{"2":{"239":1,"385":1}}],["solid",{"2":{"141":1}}],["so",{"2":{"226":1}}],["sorted",{"2":{"530":1}}],["sort",{"2":{"16":1,"22":1}}],["some",{"2":{"13":1,"473":1,"552":1}}],["smart",{"0":{"111":1},"1":{"112":1,"113":1},"2":{"11":1,"172":2,"192":1,"245":1,"358":1,"367":1,"575":1}}],["single",{"2":{"225":1}}],["side",{"2":{"119":1}}],["signtypeddata",{"2":{"209":1}}],["signtransaction",{"2":{"161":1,"208":1}}],["signmessage",{"2":{"209":1,"441":1}}],["signature",{"0":{"545":1},"2":{"168":1,"561":2}}],["sign",{"2":{"161":1,"518":1,"561":1}}],["signer",{"2":{"155":3,"160":3,"161":2,"163":5}}],["signedtx",{"2":{"161":2,"518":1}}],["signed",{"2":{"87":1,"519":1}}],["signing",{"0":{"209":1,"518":1},"2":{"106":1}}],["size",{"2":{"9":1,"32":1,"39":3,"52":1,"53":2,"74":1,"121":1,"144":3,"145":1,"470":1,"540":2,"552":1}}],["simplified",{"2":{"367":1}}],["simply",{"2":{"227":1}}],["simplecontract",{"2":{"373":1}}],["simple",{"2":{"1":1,"2":1,"121":1,"219":1,"547":1}}],["simulation",{"2":{"245":1,"254":1,"258":1,"261":2,"262":1}}],["simulating",{"2":{"214":1,"215":2,"217":1,"510":1,"549":1}}],["simulator",{"2":{"228":1}}],["simulate",{"2":{"212":1,"219":2,"228":1,"245":1}}],["simulatecontract",{"2":{"199":1}}],["similar",{"2":{"0":1,"215":1,"217":1,"224":1}}],["style",{"2":{"141":2,"142":2,"144":2,"145":2,"293":1,"544":1}}],["str",{"2":{"557":1}}],["structs",{"2":{"224":1}}],["structure",{"2":{"146":1,"313":2,"314":1,"315":1,"322":1,"483":1,"484":1,"485":1,"487":1}}],["structures",{"0":{"117":1},"2":{"423":1,"553":1}}],["straight",{"2":{"222":1}}],["stringtohex",{"2":{"557":2}}],["strings",{"2":{"546":1}}],["string",{"0":{"300":1,"302":2},"2":{"14":3,"21":1,"55":1,"74":1,"77":3,"92":1,"141":1,"144":1,"145":2,"148":3,"149":1,"154":1,"157":2,"164":2,"298":3,"300":2,"302":1,"305":1,"328":1,"329":1,"432":2,"466":1,"544":1,"545":1,"551":1,"552":2,"557":1}}],["stepcount",{"2":{"79":1}}],["steps",{"0":{"249":1,"253":1,"259":1},"2":{"77":2,"79":3,"141":10}}],["step",{"2":{"73":2,"74":1,"77":7,"79":6,"80":3,"82":11,"141":11,"149":4,"228":2,"412":1}}],["stops",{"2":{"530":1}}],["stopimpersonatingaccount",{"2":{"88":1}}],["stop",{"2":{"47":2,"55":1,"88":1,"530":1,"536":2,"540":1}}],["storing",{"2":{"465":1}}],["storagecache",{"2":{"485":1}}],["storagerange",{"2":{"352":1}}],["storageroot",{"2":{"60":1,"131":1}}],["storagedump",{"2":{"352":1}}],["storageviewer",{"2":{"146":1}}],["storage",{"0":{"104":1,"120":1,"145":1,"484":1,"493":1},"2":{"9":1,"33":1,"40":2,"59":1,"60":3,"61":2,"63":1,"67":1,"69":2,"82":1,"87":1,"88":1,"104":1,"107":1,"117":2,"120":2,"124":1,"126":1,"130":2,"145":12,"195":2,"196":1,"231":1,"244":1,"280":1,"283":1,"352":2,"443":1,"453":1,"455":1,"477":1,"479":1,"484":2,"485":1,"488":4,"491":1,"493":2,"529":1}}],["stored",{"2":{"40":1}}],["store",{"2":{"5":1,"141":1,"148":1,"167":1}}],["stale",{"2":{"524":1,"535":1,"540":1}}],["stays",{"2":{"220":1}}],["standardized",{"2":{"552":1,"571":1}}],["standardizing",{"2":{"543":1}}],["standard",{"0":{"377":1},"2":{"85":1,"92":1,"109":1,"112":1,"113":1,"193":1,"237":1,"264":1,"265":1,"267":1,"301":1,"373":2,"377":1,"385":2,"393":1,"399":1,"404":1,"445":1,"549":1,"552":1}}],["stack",{"2":{"74":3,"77":3,"79":2,"82":4,"103":1,"116":1,"138":1,"141":9,"445":1}}],["stable",{"2":{"39":1}}],["started",{"2":{"452":1,"476":1,"498":1}}],["startoffset",{"2":{"144":2}}],["starts",{"2":{"74":1,"530":1}}],["start",{"0":{"36":1,"252":1},"2":{"47":2,"55":1,"121":1,"529":1,"530":1,"532":2,"536":2,"540":1}}],["starttime",{"2":{"14":1,"18":1}}],["stats",{"2":{"80":8,"149":7,"421":2}}],["static",{"2":{"76":1}}],["status",{"2":{"26":3,"27":1,"33":2,"148":3,"396":1,"462":1}}],["statecache",{"2":{"485":1}}],["stateoptions",{"2":{"483":1}}],["stateaction",{"2":{"483":1}}],["states",{"2":{"477":1,"479":2,"579":1}}],["stateful",{"2":{"224":1}}],["stateroots",{"2":{"483":1}}],["stateroot",{"2":{"27":1,"128":2,"319":1,"461":1}}],["statemanager",{"0":{"130":1},"1":{"131":1},"2":{"5":1,"74":4,"124":1,"130":3,"145":1,"173":1,"178":3,"182":1,"227":1,"238":1,"244":2,"417":1,"483":1,"593":1}}],["stateprecompile",{"2":{"5":2}}],["state",{"0":{"5":1,"104":1,"154":1,"178":1,"204":1,"205":1,"231":1,"244":1,"280":1,"283":1,"436":1,"443":1,"477":1,"483":1,"487":1,"488":1,"489":1,"495":1,"587":1},"1":{"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"494":1,"495":1},"2":{"9":3,"10":1,"57":1,"58":1,"59":1,"62":1,"63":1,"67":1,"68":1,"69":1,"70":1,"74":3,"77":1,"87":1,"88":1,"93":1,"94":1,"95":2,"102":2,"103":1,"104":4,"110":2,"117":1,"120":1,"124":2,"125":1,"126":2,"128":1,"130":12,"131":2,"136":2,"137":1,"138":1,"141":1,"163":1,"169":2,"170":1,"171":1,"175":1,"178":5,"184":1,"192":1,"195":2,"196":8,"224":1,"226":1,"227":1,"230":1,"231":1,"233":1,"236":1,"238":1,"244":2,"245":2,"267":1,"275":1,"280":1,"284":1,"314":1,"323":1,"325":1,"328":1,"329":1,"352":1,"400":1,"417":1,"422":1,"423":2,"428":4,"431":1,"436":3,"440":4,"477":4,"478":1,"479":4,"483":7,"484":2,"485":1,"487":3,"488":2,"489":3,"490":2,"491":1,"492":1,"493":2,"541":2,"575":1,"578":1,"585":1,"587":1,"592":1,"593":1,"594":2}}],["s",{"2":{"0":1,"2":1,"29":1,"74":2,"187":1,"190":1,"191":1,"192":1,"198":1,"202":1,"206":1,"225":1,"228":1,"252":1,"305":1,"323":1,"347":1,"407":1,"423":1,"424":1,"429":1,"512":1,"549":1,"552":1,"561":1}}],["about",{"2":{"529":1}}],["above",{"2":{"303":1}}],["abiconstructor",{"2":{"568":1}}],["abievent",{"2":{"568":1}}],["abifunction",{"2":{"568":1}}],["abi",{"0":{"562":1,"568":1},"2":{"1":1,"2":1,"5":1,"6":1,"7":1,"8":2,"9":2,"77":1,"112":1,"154":2,"155":2,"157":2,"158":2,"160":2,"162":2,"163":2,"164":8,"169":1,"175":2,"179":1,"186":2,"191":1,"194":2,"239":2,"270":2,"288":1,"289":1,"375":1,"381":2,"419":2,"437":1,"438":1,"562":3,"568":3,"569":4,"572":1}}],["abistring",{"2":{"568":1}}],["abis",{"2":{"1":1,"369":1,"381":1,"552":1}}],["affect",{"2":{"169":1}}],["afterblockevent",{"2":{"582":1}}],["aftertxevent",{"2":{"582":1}}],["aftermessage",{"2":{"73":1,"77":1,"141":1,"148":1}}],["afterlogs",{"2":{"23":2}}],["after",{"2":{"23":1,"40":1,"73":1,"136":1,"214":1,"218":1,"220":1,"582":2}}],["autonode",{"2":{"220":2}}],["auto",{"0":{"214":2},"2":{"95":1,"141":1,"142":1,"173":1,"214":1,"219":2,"220":2,"242":1,"434":1}}],["automatically",{"2":{"95":1,"173":1,"214":1,"239":1}}],["automatic",{"2":{"37":1,"239":1,"255":1,"429":1}}],["auth",{"2":{"76":1}}],["authcallorigin",{"2":{"76":1}}],["avalanche",{"2":{"358":2}}],["available",{"0":{"73":1,"213":1,"235":1},"1":{"74":1,"75":1,"76":1,"77":1,"214":1,"215":1,"216":1,"217":1,"236":1,"237":1,"238":1,"239":1},"2":{"95":1,"189":1,"191":1,"192":1,"226":2,"279":1}}],["avoid",{"2":{"69":1,"121":1}}],["amount",{"2":{"69":1,"155":1,"157":4,"162":1,"163":1,"164":4,"186":2,"239":1,"375":1,"562":1}}],["amp",{"0":{"11":1,"25":1,"102":1,"103":1,"104":1,"107":1,"110":1,"114":1,"118":1,"119":1,"120":1,"123":1,"175":1,"200":1,"201":1,"203":1,"204":1,"211":1,"250":1,"261":1,"263":1,"264":1,"279":1,"282":1,"284":1,"335":1,"543":1,"546":1},"1":{"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"115":1,"116":1,"117":1,"119":1,"120":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"251":1,"252":1,"253":1,"283":1,"284":1,"544":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1},"2":{"24":1,"34":1,"56":2,"87":3,"94":1,"137":1,"144":2,"249":1,"254":1,"257":1}}],["applydaohardfork",{"2":{"587":1}}],["applyblock",{"2":{"585":1}}],["applies",{"2":{"585":1,"587":1}}],["applied",{"2":{"95":1,"488":1}}],["applications",{"2":{"172":1}}],["applicable",{"2":{"74":1}}],["app",{"0":{"142":1},"2":{"146":1}}],["approvetx",{"2":{"186":2}}],["approve",{"2":{"186":2}}],["approval",{"0":{"186":1}}],["appropriate",{"2":{"93":1,"136":1,"219":1,"540":1}}],["appropriately",{"2":{"33":1,"382":1}}],["approaching",{"2":{"53":1}}],["apis",{"0":{"235":1},"1":{"236":1,"237":1,"238":1,"239":1},"2":{"123":1,"136":1,"227":1,"235":1,"477":1}}],["api",{"0":{"54":1,"223":1,"268":1,"296":1,"311":1,"326":1,"350":1,"370":1,"389":1,"409":1,"426":1,"439":1,"450":1,"474":1,"480":1,"496":1,"501":1,"525":1,"576":1},"1":{"55":1,"224":1,"225":1,"269":1,"270":1,"271":1,"272":1,"273":1,"274":1,"275":1,"276":1,"277":1,"278":1,"279":1,"280":1,"281":1,"282":1,"283":1,"284":1,"285":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"312":1,"313":1,"314":1,"315":1,"316":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"371":1,"372":1,"373":1,"390":1,"391":1,"392":1,"393":1,"394":1,"395":1,"396":1,"410":1,"411":1,"412":1,"413":1,"414":1,"415":1,"427":1,"428":1,"440":1,"441":1,"451":1,"452":1,"475":1,"476":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"497":1,"498":1,"502":1,"503":1,"504":1,"505":1,"506":1,"526":1,"527":1,"528":1,"529":1,"530":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"587":1},"2":{"70":1,"71":1,"83":1,"93":1,"94":2,"95":1,"120":1,"122":1,"188":3,"222":1,"231":1,"232":1,"233":1,"234":1,"249":1,"265":2,"292":1,"293":1,"298":1,"308":2,"322":1,"323":2,"346":1,"347":2,"366":1,"367":2,"385":1,"386":2,"393":1,"406":1,"407":2,"422":1,"423":2,"427":1,"437":1,"450":2,"474":2,"496":2,"499":2,"553":2}}],["again",{"2":{"180":1}}],["against",{"2":{"9":1,"228":1}}],["age",{"2":{"52":1}}],["adjust",{"2":{"540":1}}],["adapted",{"2":{"473":1}}],["advance",{"2":{"180":1}}],["advanced",{"0":{"46":1,"78":1,"143":1,"159":1,"261":1,"442":1},"1":{"47":1,"48":1,"79":1,"80":1,"81":1,"144":1,"145":1,"160":1,"161":1,"162":1,"443":1,"444":1},"2":{"96":1,"137":1,"196":1,"227":1,"254":1,"257":1}}],["addtransaction",{"2":{"590":1}}],["addtwo",{"2":{"419":2}}],["addr",{"2":{"544":3}}],["address4",{"2":{"298":1}}],["address3",{"2":{"298":1,"300":1}}],["address2",{"2":{"298":1,"300":1,"305":2}}],["addresslogs",{"2":{"30":1}}],["address",{"0":{"293":1,"298":1,"300":3,"301":2,"302":2,"305":1,"306":1,"376":1,"547":1},"1":{"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"306":1,"307":1},"2":{"1":3,"2":2,"5":2,"6":1,"7":1,"8":2,"9":2,"14":1,"30":2,"31":1,"33":1,"36":1,"50":1,"55":2,"59":3,"60":3,"61":1,"63":3,"66":1,"67":1,"68":1,"69":4,"73":3,"74":9,"75":3,"76":8,"77":4,"79":1,"95":2,"115":1,"127":2,"130":6,"131":2,"134":1,"135":2,"145":4,"146":1,"154":1,"155":1,"157":3,"158":2,"162":3,"163":3,"164":12,"168":1,"169":2,"170":1,"176":4,"179":1,"182":2,"185":1,"190":2,"192":2,"195":2,"225":1,"226":1,"227":1,"236":1,"237":1,"238":1,"239":3,"243":1,"244":1,"247":1,"270":2,"279":1,"293":2,"294":1,"295":1,"298":10,"300":8,"301":5,"302":4,"303":1,"305":7,"306":3,"307":1,"375":4,"376":2,"399":2,"419":1,"423":2,"436":2,"438":1,"510":2,"512":1,"544":3,"545":2,"546":1,"547":4,"548":4,"550":1,"551":1,"561":2,"562":1,"567":3}}],["addresses",{"0":{"543":1},"1":{"544":1,"545":1,"546":1,"547":1,"548":1,"549":1,"550":1,"551":1,"552":1},"2":{"0":1,"77":1,"293":1,"295":4,"298":2,"305":1,"458":1,"469":1,"488":1,"529":1,"549":1}}],["addcustomprecompile",{"2":{"419":1}}],["addchain",{"2":{"210":1}}],["addethereumchainparameter",{"2":{"395":1,"405":1}}],["added",{"2":{"45":1}}],["adds",{"2":{"328":1,"530":2,"553":1}}],["adding",{"0":{"42":1,"148":1,"149":1,"335":1,"533":1},"2":{"42":1,"133":1,"395":1,"405":1}}],["additions",{"2":{"540":1}}],["addition",{"2":{"40":1}}],["additional",{"2":{"14":1,"74":1,"77":1,"88":1,"193":1,"386":1,"552":1,"573":1}}],["addunverified",{"2":{"36":1,"40":1,"42":1,"43":2,"52":1,"55":1,"530":1,"533":1}}],["add",{"2":{"36":1,"40":1,"42":1,"51":1,"55":1,"79":1,"128":1,"132":2,"133":1,"251":3,"255":1,"335":1,"343":1,"530":1,"533":3,"539":1,"565":1,"590":1}}],["activate",{"2":{"593":1}}],["activateprecompiles",{"2":{"593":1}}],["activation",{"2":{"529":1}}],["active",{"2":{"415":1}}],["action",{"0":{"197":1,"393":1},"1":{"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1},"2":{"58":1,"62":1,"188":1,"196":1,"225":2,"226":1,"239":1,"371":3,"386":1,"388":1,"423":1,"428":4}}],["actions",{"0":{"95":1,"110":1,"190":1,"191":1,"192":1,"193":1,"196":1,"198":1,"202":1,"206":1,"223":1,"225":1,"236":1,"265":1,"271":1,"272":1,"273":1,"274":1,"278":1,"282":1,"285":1,"399":1,"400":1,"428":1,"439":1,"440":1,"441":1},"1":{"194":1,"195":1,"196":1,"199":1,"200":1,"201":1,"203":1,"204":1,"205":1,"207":1,"208":1,"209":1,"210":1,"211":1,"224":1,"225":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1,"272":2,"273":2,"274":2,"275":1,"276":1,"277":1,"278":1,"279":2,"280":2,"281":2,"282":1,"283":2,"284":2,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"440":1,"441":1},"2":{"45":1,"57":1,"61":1,"66":1,"71":1,"77":1,"79":1,"80":1,"81":1,"93":1,"95":10,"96":1,"99":1,"100":2,"110":2,"121":2,"188":6,"189":3,"190":1,"191":1,"192":4,"193":1,"194":1,"195":1,"196":2,"198":1,"202":1,"206":1,"223":1,"224":1,"225":8,"226":5,"227":4,"236":4,"247":1,"265":3,"266":1,"267":1,"287":1,"288":1,"289":1,"290":1,"291":1,"375":2,"376":1,"386":1,"393":2,"400":1,"406":1,"423":2,"427":2,"429":2,"439":1,"441":3,"483":1}}],["across",{"2":{"264":1}}],["accepts",{"2":{"546":1}}],["accesslisteip2930txdata",{"2":{"513":1,"514":1}}],["accesslisteip2930transaction",{"2":{"503":1,"508":1}}],["accesslistitem",{"2":{"505":1}}],["accesslist",{"2":{"505":1,"513":2}}],["access",{"0":{"5":1,"238":1},"2":{"9":1,"26":1,"48":1,"72":1,"77":1,"127":1,"252":1,"479":1,"505":2,"508":1,"513":1,"521":1}}],["accommodate",{"2":{"459":1}}],["accountcache",{"2":{"485":1}}],["accountfields",{"2":{"353":1}}],["accountaddress",{"2":{"236":1}}],["accountstorage",{"2":{"484":1}}],["accounts",{"0":{"131":1},"2":{"182":6,"191":4,"267":1,"279":1,"508":1}}],["account",{"0":{"57":1,"66":1,"168":1,"182":1,"195":1,"201":1,"204":1,"207":1,"279":1},"1":{"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1},"2":{"37":1,"39":2,"42":1,"57":1,"58":1,"59":1,"60":2,"61":6,"62":1,"69":6,"74":7,"76":1,"87":3,"88":3,"95":3,"104":1,"110":1,"124":1,"126":1,"130":4,"131":4,"167":1,"168":1,"173":2,"179":1,"191":7,"192":1,"195":3,"196":1,"225":2,"227":1,"231":1,"236":2,"238":1,"244":1,"245":1,"269":1,"275":2,"276":2,"280":1,"283":2,"301":2,"353":1,"428":2,"432":1,"436":3,"440":2,"477":1,"479":1,"484":2,"485":1,"488":5,"538":2}}],["accumulated",{"2":{"217":1}}],["accumulator",{"2":{"74":1}}],["accurately",{"2":{"245":1}}],["accurate",{"2":{"9":1}}],["acc",{"2":{"16":7,"18":4,"22":6}}],["around",{"2":{"547":1}}],["arbitrumcommon",{"2":{"364":1}}],["arbitrum",{"2":{"171":1,"357":2,"364":3}}],["arbitrumnode",{"2":{"171":1}}],["arb1",{"2":{"171":1}}],["architecture",{"0":{"222":1,"229":1},"1":{"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":2,"231":2,"232":2,"233":2,"234":2,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"249":1},"2":{"122":1,"123":1,"222":1,"259":1}}],["arg",{"2":{"289":1}}],["arg2",{"2":{"77":1,"437":1,"438":1}}],["arg1",{"2":{"77":1,"437":1,"438":1}}],["args",{"2":{"77":1,"158":1,"164":1,"183":2,"186":2,"194":1,"288":1,"289":1,"371":1,"378":2,"379":3,"419":2,"437":3,"438":1,"562":2}}],["are",{"2":{"40":2,"45":1,"92":1,"124":1,"129":1,"189":1,"191":1,"192":2,"196":1,"198":1,"202":1,"206":1,"212":1,"224":1,"225":3,"226":2,"228":2,"236":1,"242":1,"298":1,"302":1,"445":1,"473":2,"543":1,"552":1}}],["array",{"2":{"1":1,"79":1,"144":3,"316":1,"544":1,"570":1}}],["assets",{"0":{"211":1},"2":{"395":1}}],["assert",{"2":{"173":1,"571":1}}],["associated",{"2":{"26":1}}],["ascii",{"2":{"144":2}}],["as",{"2":{"43":2,"97":1,"141":3,"144":3,"145":1,"148":1,"149":1,"155":1,"168":1,"188":1,"189":1,"225":3,"226":1,"228":1,"236":1,"258":1,"298":2,"302":1,"375":2,"381":2,"510":1,"551":1}}],["asynceventemitter",{"2":{"565":2}}],["asynchronous",{"2":{"74":1,"477":1}}],["async",{"2":{"1":1,"2":1,"5":1,"6":1,"7":1,"8":2,"9":2,"21":1,"55":3,"96":1,"119":1,"141":2,"145":1,"163":2,"173":1,"175":1,"176":1,"178":1,"179":1,"180":1,"182":1,"183":2,"243":1,"338":1,"345":1,"403":1,"419":1,"565":1}}],["another",{"2":{"241":1}}],["anvilresethandler",{"2":{"284":1}}],["anvilminehandler",{"2":{"284":1}}],["anvilsetchainidhandler",{"2":{"284":1}}],["anvilsetcodehandler",{"2":{"283":1}}],["anvilsetstorageathandler",{"2":{"283":1}}],["anvilsetnoncehandler",{"2":{"283":1}}],["anvilsetbalancehandler",{"2":{"283":1}}],["anvilimpersonateaccountjsonrpcprocedure",{"2":{"276":1}}],["anvil",{"0":{"282":1},"1":{"283":1,"284":1},"2":{"88":7,"228":1,"267":1,"292":1,"359":2}}],["anything",{"2":{"228":1}}],["any",{"2":{"60":1,"64":1,"77":1,"157":1,"167":1,"227":1,"241":1,"254":1,"255":1,"378":1,"435":1,"510":1}}],["an",{"0":{"398":1,"417":1},"2":{"26":1,"58":1,"77":1,"84":1,"85":1,"167":1,"191":1,"196":1,"225":3,"227":1,"228":3,"252":2,"254":1,"269":1,"300":3,"301":1,"302":1,"303":2,"305":1,"413":1,"488":1,"506":1,"530":1,"533":1,"544":1,"548":1,"564":1}}],["analysis",{"0":{"16":1,"17":1,"21":1},"2":{"23":1}}],["analyzing",{"0":{"15":1},"1":{"16":1,"17":1,"18":1}}],["analyzeperformance",{"2":{"21":1}}],["analyzelogs",{"2":{"20":1}}],["analyze",{"2":{"11":1,"17":1,"20":1,"23":2,"80":1}}],["and",{"0":{"29":1,"305":1,"421":1,"468":1,"470":1,"487":1,"490":1,"492":1,"532":1,"556":1,"557":1,"584":1,"590":1},"1":{"557":1,"558":1},"2":{"2":1,"9":1,"11":1,"17":1,"20":1,"23":1,"25":2,"26":2,"29":1,"30":1,"33":1,"35":1,"36":2,"37":1,"40":2,"43":1,"52":1,"57":1,"72":1,"76":1,"77":1,"84":1,"92":2,"93":2,"96":1,"102":4,"123":1,"124":3,"125":1,"126":1,"128":1,"130":1,"134":1,"138":1,"139":1,"172":1,"173":1,"175":2,"176":2,"180":1,"183":1,"185":1,"188":3,"189":1,"192":1,"193":1,"196":4,"212":2,"214":1,"219":1,"223":1,"224":1,"225":2,"226":2,"227":2,"228":3,"230":1,"231":2,"233":1,"234":1,"254":1,"255":3,"257":2,"258":1,"264":1,"265":1,"267":4,"277":1,"295":2,"298":1,"308":2,"310":1,"323":1,"325":2,"328":1,"335":1,"347":2,"349":1,"367":1,"369":3,"378":1,"386":2,"388":2,"403":2,"404":1,"407":1,"423":3,"424":1,"429":1,"453":2,"455":3,"473":1,"477":2,"479":3,"499":1,"522":1,"524":1,"530":1,"534":1,"540":3,"543":2,"552":1,"553":3,"570":1,"573":1,"575":5,"578":1,"579":1,"582":1,"590":1,"594":1}}],["along",{"2":{"423":1}}],["alternative",{"0":{"358":1}}],["aliases",{"0":{"353":1,"371":1,"413":1,"427":1,"505":1},"2":{"451":1,"475":1,"497":1}}],["align",{"2":{"141":1}}],["algorithms",{"2":{"351":1}}],["algorithm",{"2":{"349":1,"362":1}}],["also",{"0":{"71":1,"292":1,"307":1,"322":1,"346":1,"366":1,"385":1,"406":1,"422":1,"449":1,"521":1,"572":1},"2":{"88":1,"225":2,"227":1,"239":1}}],["all",{"2":{"26":1,"47":1,"48":1,"87":1,"93":1,"95":1,"121":1,"154":1,"185":1,"189":1,"191":1,"192":1,"198":1,"202":1,"206":1,"226":1,"272":1,"291":1,"376":1,"377":1,"423":1,"491":1,"505":1,"519":1}}],["allowing",{"2":{"72":1}}],["allowedblobs",{"2":{"44":1,"534":1}}],["allowed",{"2":{"7":1,"9":1,"141":1}}],["allows",{"2":{"0":1,"58":1,"62":1,"84":1,"212":1,"510":1}}],["always",{"2":{"9":1,"33":1,"50":1,"82":1,"93":1,"381":1,"403":1,"446":1}}],["awaited",{"2":{"141":1}}],["await",{"2":{"1":2,"5":2,"13":2,"20":3,"21":2,"23":3,"26":4,"29":3,"30":5,"31":2,"36":2,"42":2,"43":2,"44":2,"45":1,"51":1,"61":1,"66":1,"67":1,"68":1,"69":4,"77":1,"79":1,"80":1,"81":1,"85":1,"93":3,"95":4,"96":10,"125":4,"128":5,"129":2,"130":10,"131":2,"132":5,"133":2,"134":4,"141":2,"145":2,"146":2,"152":2,"154":1,"155":3,"158":1,"160":4,"161":4,"163":7,"164":4,"167":1,"168":2,"169":3,"170":1,"173":4,"175":7,"176":6,"178":8,"179":3,"180":8,"182":1,"183":1,"185":5,"186":3,"188":4,"190":3,"191":2,"192":6,"194":3,"195":2,"196":3,"216":1,"218":2,"220":4,"225":1,"226":2,"230":2,"236":3,"237":1,"238":3,"239":1,"244":3,"247":1,"248":2,"252":2,"256":2,"287":1,"288":1,"289":1,"290":1,"291":1,"328":1,"331":1,"334":4,"335":2,"336":1,"338":1,"339":2,"340":1,"343":5,"344":2,"345":2,"378":2,"382":1,"398":1,"399":2,"400":2,"401":1,"404":1,"417":2,"418":1,"420":1,"421":1,"434":1,"436":2,"437":3,"438":2,"468":3,"469":1,"471":1,"509":1,"533":2,"534":2,"539":1,"565":1,"590":4,"591":1,"592":1}}],["a",{"0":{"138":1,"318":1,"319":1,"375":1,"495":1,"532":1,"589":1,"590":1,"591":1},"1":{"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1},"2":{"1":2,"2":2,"11":1,"16":2,"22":2,"26":1,"29":1,"35":1,"36":1,"43":2,"60":1,"72":1,"73":3,"74":1,"75":1,"76":3,"79":2,"80":2,"95":2,"97":1,"123":1,"138":1,"139":1,"168":1,"170":1,"173":2,"179":1,"185":1,"188":3,"194":2,"214":1,"217":2,"225":2,"226":2,"227":3,"228":1,"236":1,"245":1,"247":2,"254":1,"256":1,"258":1,"261":1,"265":1,"285":2,"291":1,"293":1,"295":1,"298":5,"300":1,"301":2,"302":3,"305":1,"313":2,"318":1,"323":1,"328":7,"329":1,"331":1,"335":2,"336":1,"340":1,"341":1,"354":2,"372":1,"378":2,"395":1,"407":1,"415":1,"424":2,"428":2,"429":1,"449":1,"453":1,"458":3,"465":1,"477":1,"487":1,"490":1,"499":1,"509":1,"510":1,"522":1,"530":3,"533":1,"535":1,"536":1,"543":1,"544":4,"546":1,"547":6,"548":1,"551":4,"552":2,"553":1,"573":1,"575":2,"584":3,"585":3}}],["attatched",{"2":{"188":1}}],["atomic",{"2":{"136":1}}],["at",{"0":{"170":1},"2":{"0":1,"43":2,"72":1,"74":1,"215":1,"280":1,"283":1}}],["nft",{"2":{"373":1,"377":3,"385":1}}],["nitro",{"2":{"364":1}}],["npm",{"2":{"97":1,"99":1,"100":1,"139":2,"146":1,"251":1,"266":1,"294":1,"309":1,"324":1,"348":1,"368":1,"387":1,"408":1,"425":1,"454":1,"478":1,"500":1,"523":1,"554":1,"574":1}}],["num",{"2":{"557":1}}],["numerous",{"2":{"355":1}}],["numbertohex",{"2":{"557":2}}],["numbers",{"2":{"546":1,"557":1}}],["number",{"0":{"300":1},"2":{"1":1,"14":4,"22":1,"27":1,"32":1,"59":1,"74":3,"76":1,"80":1,"87":2,"92":1,"128":3,"144":3,"149":1,"279":1,"281":1,"298":1,"300":2,"319":1,"328":2,"334":1,"338":1,"340":1,"345":1,"432":3,"470":1,"529":4,"537":7,"538":3,"545":1}}],["null",{"2":{"31":1,"33":2,"141":2,"562":1}}],["nameaction",{"2":{"377":1}}],["name",{"2":{"14":1,"74":2,"79":1,"80":1,"82":1,"141":2,"149":1,"328":1,"362":1,"375":1,"377":1,"378":2,"381":1,"405":1,"432":1}}],["nativecurrency",{"2":{"405":1}}],["native",{"2":{"0":1,"255":1}}],["networkid",{"2":{"362":1}}],["networksync",{"2":{"396":1}}],["networks",{"0":{"355":1,"356":1,"357":1,"358":1,"359":1},"1":{"356":1,"357":1,"358":1,"359":1},"2":{"171":1,"231":1,"245":1,"262":1,"325":1,"355":1,"429":1,"445":1}}],["network",{"0":{"171":1,"279":1,"364":1,"435":1,"445":1},"2":{"113":1,"115":1,"117":1,"163":1,"164":2,"179":1,"212":1,"215":2,"219":2,"228":1,"241":1,"255":1,"257":2,"340":1,"349":1,"359":4,"388":1,"396":1,"435":1,"540":1}}],["needs",{"2":{"97":1}}],["need",{"2":{"82":1,"121":1,"226":1}}],["needed",{"2":{"9":1,"69":1,"168":1,"263":1}}],["next",{"0":{"249":1,"253":1,"259":1},"2":{"73":4,"77":8,"79":6,"80":2,"81":2,"82":8,"137":1,"141":4,"148":2,"149":2}}],["newvalue",{"2":{"175":2}}],["newfilter",{"2":{"87":1}}],["newly",{"2":{"75":1,"301":1}}],["newcontractevent",{"0":{"75":1},"2":{"75":2}}],["newcontract",{"2":{"73":1}}],["newblock",{"2":{"343":1}}],["newblockfilter",{"2":{"87":1}}],["newblocks",{"2":{"45":1,"535":1}}],["newbalance",{"2":{"69":1,"169":1}}],["new",{"0":{"318":1},"2":{"1":1,"2":3,"5":3,"6":2,"7":2,"8":2,"9":6,"29":1,"33":1,"43":1,"45":2,"63":4,"73":1,"77":1,"79":1,"80":1,"87":1,"91":1,"96":3,"128":1,"139":1,"145":2,"149":1,"152":1,"154":1,"155":1,"157":1,"158":1,"160":1,"162":1,"163":2,"164":5,"169":1,"173":1,"175":1,"179":1,"185":3,"196":1,"214":1,"217":1,"248":1,"298":1,"300":1,"318":2,"321":1,"331":1,"354":1,"372":1,"405":1,"415":1,"418":1,"428":1,"457":1,"465":1,"487":1,"489":1,"517":3,"528":1,"532":1,"533":1,"535":1,"544":1,"547":1,"557":1,"558":1,"564":1,"565":1,"584":1,"585":1,"589":1}}],["noforkurlseterror",{"2":{"269":1}}],["now",{"2":{"167":1,"168":1,"180":1,"185":1,"186":1,"220":1,"319":1,"376":1}}],["nomicfoundation",{"2":{"163":1}}],["no",{"2":{"31":1,"168":1,"228":2,"262":1,"263":1}}],["none",{"2":{"141":1}}],["nonexistenthash",{"2":{"31":2}}],["nonce",{"0":{"301":1},"2":{"36":1,"37":2,"40":2,"43":4,"50":1,"51":2,"60":2,"61":2,"63":2,"68":1,"87":1,"88":1,"95":1,"131":1,"182":1,"190":1,"283":1,"301":4,"306":2,"319":1,"436":1,"479":1,"512":1,"517":2,"524":1,"530":1,"534":1,"539":2,"548":3,"549":1,"592":1}}],["non",{"2":{"31":1,"298":1}}],["notes",{"0":{"546":1}}],["note",{"0":{"258":1},"2":{"43":1,"95":1,"187":1}}],["not",{"2":{"7":1,"9":1,"31":1,"92":1,"141":1,"258":1,"269":1,"300":1,"301":1,"302":1,"445":1}}],["nodes",{"2":{"102":1,"257":1,"258":1}}],["node",{"0":{"102":1,"227":1,"228":1,"254":1,"257":1,"450":1},"1":{"255":1,"256":1,"257":1,"258":1,"259":1,"451":1,"452":1},"2":{"0":1,"1":3,"2":1,"5":1,"8":1,"11":1,"12":2,"13":1,"20":1,"21":1,"25":1,"26":3,"29":1,"36":3,"45":1,"61":2,"66":1,"67":1,"68":1,"69":4,"72":1,"84":1,"85":3,"90":2,"91":2,"93":3,"95":5,"96":8,"97":1,"100":2,"102":2,"109":1,"123":1,"125":1,"128":1,"130":1,"132":1,"134":1,"138":1,"141":5,"145":3,"151":1,"152":3,"163":3,"167":2,"168":2,"170":1,"172":1,"173":4,"175":3,"176":5,"178":3,"179":3,"180":3,"185":7,"186":3,"187":1,"188":5,"190":1,"212":1,"214":1,"215":1,"216":2,"217":1,"218":3,"225":3,"227":7,"230":1,"235":1,"236":5,"237":2,"238":1,"241":1,"242":1,"244":1,"247":3,"248":2,"252":2,"254":3,"256":3,"258":1,"261":1,"264":1,"287":1,"449":2,"450":1,"543":1,"547":1,"552":2}}],["were",{"2":{"510":1}}],["well",{"2":{"264":1}}],["we",{"2":{"186":1}}],["wei",{"2":{"60":1,"63":1,"76":1,"560":2,"570":2}}],["witness",{"2":{"314":1}}],["within",{"2":{"522":1}}],["withaddress",{"2":{"376":1,"377":2}}],["withdraw",{"2":{"180":4}}],["without",{"2":{"42":1,"245":1,"257":1,"280":1}}],["with",{"0":{"90":1,"91":1,"96":1,"131":1,"135":1,"151":1,"163":1,"169":1,"185":1,"187":1,"228":1,"247":1,"248":1,"320":1,"363":1,"376":1,"469":1},"1":{"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1,"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1},"2":{"0":1,"1":2,"29":1,"30":1,"37":1,"42":2,"43":1,"50":1,"74":1,"75":1,"76":2,"77":2,"79":1,"80":1,"84":1,"93":1,"94":2,"95":1,"97":1,"121":1,"151":2,"152":1,"164":1,"169":1,"175":1,"185":2,"187":2,"188":3,"191":2,"196":2,"217":1,"219":3,"224":1,"225":1,"226":2,"227":3,"228":1,"243":1,"255":1,"262":1,"264":2,"265":1,"293":1,"295":1,"308":1,"328":2,"344":1,"347":1,"367":1,"377":1,"378":1,"381":1,"384":1,"386":1,"423":2,"424":1,"429":1,"431":1,"437":1,"469":1,"508":3,"512":1,"513":1,"514":1,"515":1,"527":1,"537":1,"540":1,"552":1,"553":1,"560":1,"562":1,"564":1,"573":1,"578":2,"593":1}}],["width",{"2":{"142":1}}],["will",{"2":{"138":1,"167":1,"185":1,"222":1,"223":1,"376":1,"381":1}}],["works",{"2":{"255":1,"264":1}}],["work",{"2":{"229":1,"344":1,"445":1,"560":1,"562":1}}],["working",{"0":{"131":1,"135":1,"169":1,"320":1,"469":1},"2":{"295":1,"308":1,"367":1,"553":1}}],["workflows",{"2":{"367":1}}],["workflow",{"2":{"121":1}}],["words",{"2":{"74":1}}],["wrapped",{"2":{"551":1}}],["wrapper",{"2":{"547":1}}],["wrappers",{"2":{"116":1}}],["wraps",{"2":{"293":1}}],["wrap",{"2":{"93":1}}],["writing",{"0":{"155":1}}],["writable",{"2":{"148":2}}],["writecontract",{"2":{"438":1}}],["writeaction",{"2":{"375":1}}],["writeactioncreator",{"2":{"371":1,"384":1}}],["write",{"2":{"82":1,"169":1,"175":1,"176":1,"179":1,"180":2,"239":2,"369":1,"371":1,"375":2,"377":1,"381":1,"382":1,"383":2}}],["written",{"2":{"0":1}}],["why",{"0":{"257":1,"260":1},"1":{"261":1,"262":1,"263":1,"264":1},"2":{"259":1}}],["what",{"0":{"227":1,"228":1,"254":1},"1":{"255":1,"256":1,"257":1,"258":1,"259":1},"2":{"449":1}}],["whale",{"2":{"168":1,"179":1}}],["who",{"2":{"223":1}}],["while",{"2":{"258":1,"543":1}}],["white",{"2":{"141":1,"144":1}}],["which",{"2":{"74":1,"188":1,"228":1}}],["where",{"2":{"74":1}}],["whether",{"2":{"59":1,"60":2,"74":1,"76":4}}],["when",{"2":{"9":1,"12":1,"13":1,"45":1,"73":1,"129":1,"157":1,"188":1,"212":1,"216":1,"217":1,"228":1,"269":3,"303":2,"341":4,"405":1,"551":1}}],["was",{"2":{"551":1}}],["watching",{"2":{"395":1}}],["watchevent",{"2":{"379":1}}],["watchassetparams",{"2":{"395":1}}],["watchasset",{"2":{"211":1}}],["walletactions",{"2":{"428":1}}],["walletpermissioncaveat",{"2":{"395":1}}],["walletpermission",{"2":{"395":1}}],["wallet",{"0":{"191":1,"206":1},"1":{"207":1,"208":1,"209":1,"210":1,"211":1},"2":{"191":1,"206":1,"394":1,"395":2,"428":1,"441":1}}],["waitfortransactionreceipt",{"2":{"200":1,"438":1}}],["waitfortransaction",{"2":{"161":1}}],["waitfordeployment",{"2":{"160":1,"163":1}}],["wait",{"2":{"93":1,"96":1,"155":2,"161":1,"164":1,"438":1}}],["way",{"2":{"77":1,"226":1,"227":1,"423":1}}],["warning",{"2":{"277":1}}],["warn",{"2":{"53":1,"417":1}}],["want",{"2":{"23":1,"95":1}}],["central",{"2":{"529":1}}],["center",{"2":{"141":1}}],["c",{"2":{"358":1}}],["cd",{"2":{"139":1}}],["cycle",{"2":{"53":1}}],["cycles",{"2":{"52":1,"261":1}}],["clrequest",{"2":{"312":1}}],["clique",{"2":{"353":1,"362":2}}],["cliqueconfig",{"2":{"353":1}}],["click=",{"2":{"141":1,"145":1}}],["clients",{"2":{"347":1,"386":1,"427":1}}],["client",{"0":{"89":1,"102":1,"108":1,"424":1,"432":1},"1":{"90":1,"91":1,"109":1,"110":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1,"443":1,"444":1,"445":1,"446":1,"447":1,"448":1,"449":1},"2":{"71":1,"77":2,"79":2,"80":2,"81":2,"90":1,"95":1,"102":3,"109":2,"120":1,"187":1,"188":11,"190":3,"191":4,"192":6,"194":3,"195":2,"196":4,"225":1,"226":6,"247":3,"265":1,"287":2,"288":1,"289":1,"290":1,"312":1,"378":3,"379":1,"382":1,"398":2,"399":3,"400":3,"401":1,"404":1,"423":2,"424":2,"425":1,"427":1,"428":3,"429":2,"431":4,"432":1,"434":4,"435":2,"436":2,"437":3,"438":2,"439":1,"443":2,"444":3,"492":1}}],["classes",{"0":{"269":1,"297":1,"312":1,"411":1,"503":1},"1":{"298":1},"2":{"308":1,"451":1,"475":1,"497":1,"543":1}}],["class=",{"2":{"141":13,"144":5,"145":5,"148":2,"149":1}}],["class",{"0":{"55":1,"526":1,"547":1},"1":{"527":1,"528":1,"529":1,"530":1},"2":{"55":1,"148":1,"298":1,"312":3,"411":1,"431":1,"457":1,"509":1,"527":1,"579":1}}],["closes",{"2":{"530":1}}],["close",{"2":{"47":1,"55":1,"530":1,"536":1,"540":1}}],["clearcaches",{"2":{"491":1}}],["clearcontractstorage",{"2":{"488":1}}],["clears",{"2":{"488":1,"491":1}}],["clearperformancelogs",{"2":{"13":1,"20":1,"21":1,"23":1}}],["clear",{"2":{"13":1,"20":1,"23":2,"47":1}}],["cleaning",{"2":{"93":1,"524":1}}],["cleanup",{"2":{"47":2,"52":1,"53":2,"55":1,"164":2,"529":1,"530":2,"535":2,"540":2}}],["clean",{"2":{"9":1,"136":1,"141":1,"164":1}}],["criteria",{"2":{"458":1}}],["crypto",{"0":{"363":1}}],["cryptographic",{"0":{"561":1},"2":{"352":1}}],["crucial",{"2":{"35":1}}],["creators",{"2":{"428":4}}],["creator",{"2":{"371":3}}],["creation",{"0":{"50":1,"305":1,"487":1,"584":1},"2":{"76":1,"77":1,"79":1,"107":1,"218":1,"302":2,"310":1,"313":1,"371":2,"423":1}}],["creating",{"0":{"318":1,"319":1,"321":1,"375":1,"398":1,"417":1,"495":1,"517":1,"532":1,"589":1},"2":{"1":1,"2":1,"12":1,"102":1,"295":1,"301":2,"302":1,"329":1,"413":1,"427":1,"449":1,"503":1,"509":1}}],["createvm",{"2":{"584":1,"589":2,"590":2,"591":2,"593":1}}],["createevm",{"2":{"415":1,"417":2,"421":1}}],["createevmoptions",{"2":{"413":1}}],["creatememorydb",{"2":{"564":3}}],["creatememoryclientfn",{"2":{"427":1}}],["creatememoryclient",{"2":{"77":2,"79":2,"80":2,"81":2,"188":3,"191":1,"226":2,"428":1,"431":2,"434":2,"435":2,"443":2,"444":2}}],["createmapdb",{"2":{"465":2}}],["createmockkzg",{"2":{"354":1,"363":2}}],["createbasestate",{"2":{"487":1}}],["createbasechain",{"0":{"332":1}}],["createblock",{"2":{"180":1}}],["createserver",{"2":{"444":2}}],["createsyncpersister",{"2":{"443":2}}],["createstatemanager",{"2":{"417":2,"487":1}}],["creates",{"2":{"300":1,"328":2,"331":1,"332":1,"487":4,"490":1,"530":1,"544":2,"548":1,"584":2,"585":1}}],["createtevmtransport",{"2":{"428":1}}],["createtevmnode",{"2":{"1":2,"2":2,"8":1,"12":2,"26":2,"36":2,"61":2,"85":2,"90":2,"91":2,"95":2,"96":2,"99":1,"100":1,"141":2,"145":2,"152":2,"163":1,"167":2,"170":1,"171":2,"173":2,"175":1,"176":1,"178":1,"179":1,"180":1,"185":2,"186":2,"188":2,"214":1,"215":1,"216":1,"217":1,"220":4,"225":2,"227":2,"236":2,"237":1,"241":1,"242":1,"247":1,"248":1,"252":2,"256":2,"287":2}}],["createtransaction",{"2":{"95":1,"96":1}}],["createpublicclient",{"2":{"90":2,"247":2}}],["create2address",{"2":{"306":1}}],["create2contractaddresserror",{"2":{"303":1}}],["create2contractaddress",{"0":{"302":1},"2":{"302":2,"306":2}}],["create2",{"2":{"76":1,"295":1,"302":1,"303":1,"306":1,"307":1}}],["created",{"2":{"73":1,"75":1,"77":1,"277":1,"301":1,"302":1,"547":1}}],["createdaddress",{"2":{"29":1,"33":1,"77":1,"175":1,"183":1}}],["createchain",{"0":{"331":1},"2":{"328":2,"331":2,"332":1,"340":2,"343":2,"344":2,"345":2,"417":2}}],["createcommon",{"2":{"318":2,"319":2,"321":2,"328":2,"331":2,"340":1,"343":2,"344":1,"354":1,"361":2,"362":2,"363":2,"364":3,"365":1,"532":2}}],["createcontractparams",{"2":{"371":1,"384":1}}],["createcontractfn",{"2":{"371":1,"384":1}}],["createcontractaddress",{"0":{"301":1,"548":1},"1":{"549":1,"550":1},"2":{"301":2,"306":2,"548":2}}],["createcontract",{"2":{"1":2,"2":2,"5":1,"6":1,"7":1,"8":2,"9":2,"239":3,"372":1,"375":2,"381":1,"419":2}}],["createclient",{"2":{"188":3,"226":1,"398":1,"399":1,"400":1,"428":1}}],["createcalltx",{"2":{"21":1}}],["create",{"2":{"1":3,"14":1,"36":1,"79":2,"80":2,"87":2,"131":1,"138":1,"139":2,"141":1,"146":1,"152":2,"158":1,"160":1,"161":1,"162":1,"173":2,"175":1,"176":1,"178":1,"185":1,"188":3,"191":1,"226":1,"227":1,"236":1,"244":1,"247":2,"252":1,"256":1,"298":4,"300":1,"301":1,"305":1,"316":1,"318":1,"343":1,"354":2,"372":1,"378":1,"379":1,"415":1,"428":3,"506":1,"509":3,"536":1,"548":1,"549":1,"564":1}}],["createimpersonatedtx",{"2":{"1":2,"2":1,"26":2,"29":2,"36":2,"43":2,"50":2,"168":1,"173":2,"175":1,"183":2,"506":1,"510":2,"520":1}}],["createaddress",{"0":{"300":1,"544":1},"1":{"545":1,"546":1},"2":{"1":2,"2":1,"5":1,"9":2,"26":3,"29":2,"36":3,"50":2,"298":5,"300":4,"301":2,"302":2,"305":3,"306":2,"419":2,"544":4,"545":1,"547":1,"548":1}}],["cursor",{"2":{"141":2}}],["currently",{"2":{"529":1}}],["currentstep",{"2":{"141":9}}],["current",{"2":{"58":1,"60":1,"74":7,"77":1,"87":2,"88":1,"141":1,"196":1,"279":3,"489":1,"585":1}}],["currentbasefee",{"2":{"44":1}}],["cumulativeblockgasused",{"2":{"26":1,"27":2,"460":1}}],["customcrypto",{"2":{"352":1,"363":1}}],["customize",{"2":{"255":1}}],["customization",{"0":{"147":1},"1":{"148":1,"149":1}}],["customprecompiles",{"2":{"1":1,"2":1,"8":1,"417":1}}],["customprecompile",{"2":{"1":3,"413":1,"419":2}}],["custom",{"0":{"0":1,"243":1,"362":1,"363":1,"419":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1},"2":{"0":1,"90":2,"109":1,"112":1,"188":3,"226":1,"243":1,"247":2,"323":1,"329":2,"352":1,"362":1,"407":1,"413":1,"417":1,"424":1,"499":1,"520":1,"593":2}}],["cost",{"2":{"519":1}}],["costs",{"2":{"77":1,"80":1,"245":1,"383":1}}],["copy",{"2":{"328":2,"487":2,"530":1,"536":1,"584":1}}],["coinbase",{"2":{"279":1,"319":1}}],["covered",{"2":{"228":1}}],["covers",{"2":{"123":1}}],["color",{"2":{"141":3,"142":1,"144":2,"145":1}}],["column",{"2":{"141":2}}],["columns",{"2":{"141":1}}],["collection",{"2":{"97":1,"553":1}}],["collecting",{"0":{"13":1}}],["collect",{"2":{"79":1}}],["collects",{"2":{"14":1}}],["codes",{"2":{"92":1}}],["codesize",{"2":{"77":1}}],["codeaddress",{"2":{"74":1,"76":1}}],["codehash",{"2":{"60":1,"131":1}}],["code",{"0":{"67":1,"302":1},"2":{"60":1,"61":1,"73":1,"74":2,"75":1,"76":5,"77":1,"87":1,"88":1,"92":1,"126":1,"130":1,"164":2,"195":1,"230":1,"231":1,"244":1,"280":1,"283":1,"302":5,"306":2,"365":1,"399":1,"401":1,"404":2,"450":1,"474":1,"479":1,"496":1,"539":3,"551":1,"552":1,"592":3}}],["corresponding",{"2":{"226":1}}],["correct",{"2":{"37":1}}],["core",{"0":{"38":1,"87":1,"101":1,"115":1,"229":1,"270":1,"312":1,"327":1,"390":1,"391":1,"411":1,"430":1,"456":1,"482":1,"486":1,"526":1,"577":1,"583":1},"1":{"39":1,"40":1,"102":1,"103":1,"104":1,"230":1,"231":1,"232":1,"233":1,"234":1,"328":1,"329":1,"392":1,"393":1,"394":1,"395":1,"396":1,"431":1,"432":1,"457":1,"458":1,"459":1,"460":1,"461":1,"462":1,"463":1,"483":1,"484":1,"485":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"527":1,"528":1,"529":1,"530":1,"578":1,"579":1,"580":1,"581":1,"582":1,"584":1,"585":1,"586":1,"587":1},"2":{"102":1,"124":1,"230":1,"249":1,"253":1,"371":1,"423":2,"427":1,"483":1,"487":1,"575":1,"578":1}}],["come",{"2":{"224":1}}],["combines",{"2":{"424":1,"553":1}}],["combined",{"2":{"225":1}}],["combinedlogs",{"2":{"30":1}}],["combine",{"2":{"192":1}}],["commits",{"2":{"490":1}}],["committing",{"0":{"490":1}}],["commit",{"2":{"130":1,"178":2,"244":1,"490":1}}],["communication",{"0":{"109":1},"2":{"109":1}}],["commonoptions",{"2":{"353":1}}],["common",{"0":{"127":1,"245":1,"347":1,"516":1,"551":1},"1":{"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1,"361":1,"362":1,"363":1,"364":1,"365":1,"366":1,"517":1,"518":1,"519":1},"2":{"92":1,"110":1,"115":3,"272":1,"318":2,"319":3,"321":3,"328":2,"329":2,"331":3,"340":1,"343":2,"344":1,"346":1,"347":3,"348":1,"349":1,"353":1,"354":1,"361":3,"362":2,"363":2,"364":1,"365":1,"366":1,"417":3,"423":1,"432":1,"435":2,"471":1,"519":1,"532":3,"537":2,"541":1,"553":1,"570":1,"589":5,"593":1,"594":1}}],["commonly",{"2":{"88":1,"236":1,"543":1}}],["com",{"2":{"95":4}}],["compilation",{"2":{"239":1}}],["composable",{"2":{"225":1}}],["components",{"0":{"140":1,"430":1,"456":1,"507":1,"555":1},"1":{"141":1,"142":1,"431":1,"432":1,"457":1,"458":1,"459":1,"460":1,"461":1,"462":1,"463":1,"508":1,"509":1,"510":1,"556":1,"557":1,"558":1,"559":1,"560":1,"561":1,"562":1,"563":1,"564":1,"565":1},"2":{"123":1,"224":1,"225":1,"227":1,"229":1}}],["component",{"0":{"144":1,"145":1},"2":{"35":1,"575":1}}],["complexoperation",{"2":{"383":1}}],["complex",{"0":{"177":1},"1":{"178":1,"179":1,"180":1},"2":{"178":1,"216":1,"225":1,"245":1}}],["complete",{"0":{"99":1,"197":1},"1":{"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1,"208":1,"209":1,"210":1,"211":1},"2":{"93":1,"95":1,"97":1,"121":1,"196":1,"216":1,"227":1,"245":1,"254":1,"423":1,"424":1,"429":1}}],["compatabile",{"2":{"236":1}}],["compatibility",{"2":{"88":1,"121":1,"429":1}}],["compatible",{"2":{"84":1,"85":1,"102":1,"228":1,"254":1,"255":1,"267":1,"378":1,"386":1,"388":1,"392":1,"435":1,"445":1}}],["compared",{"2":{"257":1}}],["compareprofiles",{"2":{"23":1}}],["compare",{"2":{"23":1,"305":1}}],["compareresults",{"2":{"21":1}}],["compareimplementations",{"2":{"21":1}}],["comparative",{"0":{"21":1},"2":{"23":1}}],["comprehensive",{"2":{"37":1,"51":1,"79":1,"84":1,"265":1,"553":1}}],["counter",{"2":{"74":1,"77":1}}],["count++",{"2":{"16":1,"80":1,"149":1}}],["count",{"2":{"16":1,"80":3,"149":4,"190":1}}],["condition",{"2":{"571":1}}],["conditions",{"2":{"212":1,"215":1,"219":1,"540":1,"571":1}}],["congestion",{"2":{"219":1}}],["convenience",{"2":{"552":1}}],["convenient",{"2":{"188":1,"226":1}}],["convert",{"2":{"316":2,"320":1,"552":1,"557":3,"560":2}}],["converting",{"2":{"295":1}}],["conversions",{"2":{"552":1}}],["conversion",{"0":{"557":1,"560":1},"2":{"115":1,"557":1,"570":1}}],["concern",{"2":{"188":1}}],["concerns",{"2":{"123":1}}],["concepts",{"0":{"38":1},"1":{"39":1,"40":1},"2":{"249":1,"253":1}}],["config",{"2":{"328":1,"340":1,"343":1,"344":1}}],["configuration",{"0":{"361":1,"362":1,"364":1,"466":1,"537":1,"538":1,"593":1},"1":{"538":1},"2":{"329":4,"341":1,"347":1,"349":2,"353":3,"364":2,"413":1,"417":1,"423":1,"427":1,"432":3,"483":1,"541":1,"593":1,"594":1}}],["configurations",{"2":{"115":1,"355":1,"365":1}}],["configurable",{"2":{"119":1}}],["configured",{"2":{"537":1,"593":1}}],["configure",{"2":{"12":1,"95":1,"242":1}}],["confirmed",{"2":{"155":1}}],["confirm",{"2":{"93":1}}],["confirmation",{"2":{"93":1,"155":1,"161":1,"214":1,"257":1}}],["contains",{"2":{"423":1}}],["controlled",{"2":{"220":1}}],["control",{"0":{"284":1},"2":{"212":1,"216":2,"219":1,"221":1,"244":1,"291":1}}],["controls",{"2":{"141":2}}],["contractconstructorargs",{"2":{"569":1}}],["contractcache",{"2":{"485":1}}],["contractfunctionname",{"2":{"569":1}}],["contractfactory",{"2":{"160":2,"163":1}}],["contractbytecode",{"2":{"437":1}}],["contractaddr",{"2":{"548":1}}],["contractaddress",{"2":{"29":3,"30":2,"33":2,"67":1,"77":1,"79":1,"80":1,"81":1,"134":1,"175":3,"185":1,"191":1,"236":1,"301":1,"302":1,"306":1,"437":1,"438":1}}],["contractabi",{"2":{"437":1,"438":1}}],["contractresult",{"2":{"273":1,"437":1}}],["contractparams",{"2":{"273":1}}],["contracthandler",{"2":{"273":1,"288":2}}],["contracttransactionresponse",{"2":{"155":2}}],["contractgasusage",{"2":{"22":2}}],["contract",{"0":{"20":1,"29":1,"67":1,"111":1,"112":1,"113":1,"153":1,"154":1,"160":1,"174":1,"194":1,"199":1,"239":1,"273":1,"288":1,"306":1,"367":1,"375":1,"376":1,"384":1,"437":1,"569":1},"1":{"112":1,"113":1,"154":1,"155":1,"175":1,"176":1,"368":1,"369":1,"370":1,"371":1,"372":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1},"2":{"1":4,"2":2,"3":2,"5":2,"6":1,"7":1,"8":2,"9":2,"10":1,"20":1,"22":6,"29":5,"30":1,"33":3,"60":2,"72":1,"73":3,"75":3,"76":4,"77":3,"79":1,"87":2,"88":1,"95":1,"110":1,"112":2,"113":1,"126":1,"130":1,"139":1,"146":4,"154":7,"155":3,"157":4,"158":4,"160":5,"163":2,"164":26,"167":1,"169":2,"172":1,"175":14,"176":8,"179":1,"180":4,"183":1,"184":1,"185":2,"191":1,"192":1,"194":3,"195":1,"196":1,"231":1,"236":1,"239":8,"245":1,"267":1,"270":1,"273":3,"274":1,"275":1,"280":1,"283":1,"288":2,"295":1,"301":4,"302":5,"306":3,"367":3,"368":1,"369":4,"371":4,"372":1,"373":1,"375":4,"376":1,"377":2,"378":4,"379":1,"381":2,"382":3,"383":1,"384":4,"419":1,"423":1,"427":1,"428":2,"437":4,"440":2,"477":1,"485":1,"488":5,"548":1,"592":1}}],["contracts",{"0":{"155":1,"169":1,"185":1,"373":1,"377":1},"2":{"0":1,"11":1,"22":1,"79":4,"112":1,"113":3,"164":3,"172":1,"239":1,"245":2,"367":1,"384":1,"385":1,"423":1,"575":1,"593":1}}],["continue",{"2":{"82":1}}],["content",{"2":{"141":1}}],["contents",{"2":{"74":2,"77":1,"138":1}}],["context",{"2":{"74":1}}],["consensustype",{"2":{"351":1}}],["consensusalgorithm",{"2":{"351":1}}],["consensus",{"2":{"258":1,"349":1,"351":2,"353":1,"362":1}}],["consumption",{"2":{"126":1}}],["consistent",{"2":{"547":1}}],["consistency",{"2":{"69":1}}],["consider",{"2":{"23":1,"219":1,"383":1}}],["considerations",{"0":{"32":1},"1":{"33":1},"2":{"23":1,"219":1}}],["console",{"2":{"16":1,"17":1,"20":1,"26":1,"31":2,"33":1,"42":1,"53":1,"61":4,"69":1,"77":4,"79":1,"80":1,"81":4,"82":2,"127":4,"128":1,"133":1,"135":1,"145":1,"154":1,"155":1,"158":1,"160":1,"164":2,"185":1,"186":2,"252":1,"256":1,"305":3,"338":1,"345":2,"365":1,"379":1,"418":2,"420":1,"421":2,"539":3,"547":2,"570":1,"591":2,"592":2}}],["constraints",{"2":{"257":1}}],["constructor",{"0":{"528":1},"2":{"55":1,"289":1,"378":1,"437":1}}],["constants",{"0":{"470":1,"570":1},"2":{"93":1,"115":1,"414":1,"423":1,"570":1}}],["const",{"2":{"1":6,"2":4,"5":5,"6":2,"7":1,"8":3,"9":5,"12":1,"13":2,"16":3,"17":1,"18":2,"20":3,"21":4,"22":3,"23":4,"26":7,"29":5,"30":6,"31":4,"32":3,"33":2,"36":3,"39":1,"43":2,"44":4,"50":1,"53":1,"61":2,"69":3,"77":2,"79":3,"80":7,"81":3,"85":2,"90":2,"91":2,"93":3,"95":3,"96":9,"125":4,"127":1,"128":3,"129":1,"130":5,"131":1,"132":3,"134":4,"135":1,"141":1,"144":1,"145":3,"146":1,"148":1,"149":4,"152":4,"154":4,"155":5,"157":3,"158":6,"160":4,"161":5,"162":5,"163":7,"164":13,"167":1,"168":2,"169":4,"170":2,"171":2,"173":5,"175":10,"176":5,"178":3,"179":4,"180":3,"182":2,"183":3,"185":6,"186":6,"188":3,"190":3,"191":3,"194":3,"195":1,"196":1,"214":1,"215":1,"216":1,"217":1,"220":3,"225":3,"226":2,"227":3,"230":2,"236":3,"237":2,"238":2,"239":4,"241":1,"242":1,"243":1,"247":3,"248":4,"252":2,"256":2,"287":3,"288":2,"289":2,"290":2,"291":1,"298":4,"300":3,"301":3,"302":4,"305":2,"306":6,"318":1,"319":3,"320":3,"321":3,"328":1,"331":1,"334":4,"339":1,"340":1,"343":2,"344":2,"345":1,"361":1,"362":1,"363":1,"364":2,"365":1,"375":5,"376":2,"377":7,"378":3,"379":1,"381":4,"382":1,"383":1,"398":3,"399":4,"400":4,"401":1,"403":1,"405":1,"417":1,"418":1,"419":2,"420":1,"421":2,"431":1,"434":2,"435":1,"436":1,"437":3,"438":2,"443":1,"444":2,"457":1,"465":1,"468":2,"469":1,"471":1,"509":3,"510":1,"517":2,"518":1,"520":1,"532":2,"534":3,"536":1,"547":1,"548":3,"557":6,"561":4,"562":3,"563":2,"564":3,"565":1,"567":3,"589":2,"590":4,"591":2,"593":1}}],["children",{"2":{"328":1,"335":1}}],["choose",{"2":{"219":1,"255":1}}],["chunks",{"2":{"144":3}}],["chunk",{"2":{"144":2}}],["changing",{"0":{"218":1}}],["change",{"2":{"175":1,"218":1,"521":1}}],["changes",{"2":{"93":1,"169":1,"178":4,"280":1,"490":1,"587":1}}],["chai",{"2":{"163":1}}],["chainname",{"2":{"405":1}}],["chainparams",{"2":{"405":1}}],["chainoptions",{"0":{"329":1,"331":1,"332":1},"2":{"329":1}}],["chains",{"2":{"247":1,"318":1,"319":1,"321":1,"366":1,"405":1,"445":2}}],["chainid",{"2":{"87":1,"362":1,"365":1,"405":1,"513":1}}],["chain",{"0":{"201":1,"210":1,"284":1,"328":1,"331":1,"337":1,"343":1,"344":1,"345":1,"362":1,"405":1},"1":{"338":1,"339":1},"2":{"87":2,"90":1,"104":1,"107":1,"110":1,"115":1,"124":1,"128":6,"129":3,"233":2,"247":1,"257":1,"279":1,"284":1,"315":1,"323":1,"325":2,"328":3,"329":1,"331":1,"334":4,"335":2,"336":1,"338":1,"339":2,"340":2,"341":1,"343":7,"344":4,"345":3,"347":2,"349":2,"353":1,"358":3,"362":1,"365":3,"388":1,"395":1,"405":1,"417":1,"432":1,"457":1,"479":1,"529":1,"532":1,"541":1,"589":1,"593":1,"594":1}}],["charge",{"2":{"6":1}}],["checking",{"0":{"558":1}}],["checkpointing",{"0":{"490":1}}],["checkpoint",{"2":{"178":2,"244":1,"490":3}}],["checkpoints",{"2":{"136":1,"244":1,"479":1}}],["checksummed",{"2":{"295":1,"298":2,"305":1}}],["checks",{"2":{"37":1,"40":1,"298":3,"489":1,"552":1}}],["check",{"2":{"9":2,"33":1,"69":1,"127":1,"136":1,"173":1,"253":1,"277":1,"305":1,"428":1,"519":1}}],["caveat",{"2":{"395":1}}],["caching",{"0":{"485":1},"2":{"167":1,"231":1,"255":1,"479":1,"481":1,"485":1}}],["cachetype",{"2":{"481":1}}],["cachetime",{"2":{"432":1}}],["caches",{"2":{"234":1,"491":1}}],["cache",{"0":{"491":1},"2":{"120":1,"277":1,"465":1,"466":1,"485":3,"491":1}}],["capability",{"2":{"502":1}}],["capabilities",{"2":{"193":1,"196":1,"228":1,"257":1,"262":1,"424":1,"502":1}}],["capacity",{"2":{"53":1}}],["capture",{"2":{"29":1}}],["case",{"2":{"51":3,"81":3,"382":1}}],["cases",{"0":{"19":1,"245":1},"1":{"20":1,"21":1,"22":1},"2":{"219":1,"228":1,"235":1,"245":1}}],["catch",{"2":{"9":1,"42":1,"51":1,"82":1,"93":1,"133":1,"141":1,"145":1,"164":1,"178":1,"365":1,"382":1,"401":1,"404":1,"420":1,"471":1,"520":1,"539":1,"592":1}}],["calculate",{"2":{"9":1,"18":1,"316":1}}],["calculation",{"0":{"6":1},"2":{"9":1,"103":1,"112":1}}],["callprocedure",{"2":{"276":1}}],["callparams",{"2":{"95":1,"272":1}}],["calldata",{"2":{"236":1}}],["callresult",{"2":{"175":2,"194":1,"272":1}}],["callhandler",{"2":{"95":1,"99":1,"100":1,"236":2,"272":1,"287":2}}],["caller",{"2":{"76":1,"125":1,"418":1}}],["callcode",{"2":{"74":1,"76":2}}],["calls++",{"2":{"22":1}}],["calls",{"0":{"418":1},"2":{"22":1,"76":2,"93":1,"167":1,"236":1,"237":1,"267":1,"272":1,"273":1,"412":1}}],["calltree",{"2":{"17":2}}],["call",{"0":{"17":1,"272":1,"287":1},"2":{"1":1,"2":1,"3":1,"5":1,"6":1,"7":1,"8":2,"9":2,"14":1,"17":3,"22":1,"70":1,"73":2,"74":3,"76":9,"77":2,"82":2,"83":1,"87":2,"95":1,"146":1,"164":2,"175":1,"194":2,"199":1,"243":1,"272":3,"275":2,"276":1,"280":1,"285":1,"287":2,"291":1,"398":1,"400":1,"401":1,"419":1,"428":1,"437":1,"440":1,"540":1}}],["canonical",{"2":{"328":1,"492":2}}],["can",{"0":{"228":1},"2":{"0":1,"59":1,"79":1,"85":1,"95":2,"97":1,"168":1,"186":1,"196":1,"218":1,"219":1,"225":4,"227":2,"228":1,"239":1,"254":1,"261":1,"340":1,"537":1,"546":1,"593":1}}],["ecsign",{"2":{"561":2}}],["ecrecover",{"2":{"561":2}}],["ecosystem",{"0":{"264":1}}],["eof",{"2":{"414":2}}],["epoch",{"2":{"362":1}}],["ephemeral",{"2":{"262":1}}],["edge",{"2":{"245":1}}],["erc",{"2":{"385":2}}],["erc721",{"2":{"369":1,"373":2,"377":3}}],["erc20",{"2":{"239":3,"369":1,"373":2,"377":3,"378":2}}],["erc20abi",{"2":{"186":2}}],["era",{"2":{"357":1}}],["error=",{"2":{"148":1}}],["errortype",{"2":{"77":1}}],["errors",{"0":{"551":1},"2":{"9":2,"51":1,"60":2,"64":2,"69":2,"79":5,"81":1,"82":1,"92":1,"93":2,"116":1,"141":11,"291":1,"365":1,"382":1,"404":2,"471":1,"539":1,"571":1,"592":3}}],["errorprecompile",{"2":{"7":1}}],["error",{"0":{"7":1,"31":1,"51":1,"81":1,"92":1,"269":1,"291":1,"303":1,"341":1,"365":1,"382":1,"401":1,"404":1,"420":1,"471":1,"520":1,"539":1,"550":1,"571":1,"592":1},"2":{"6":1,"7":1,"9":7,"29":1,"31":1,"33":1,"42":3,"51":8,"69":2,"77":7,"79":2,"81":9,"82":4,"92":8,"93":2,"109":2,"116":3,"119":1,"127":1,"133":3,"136":1,"138":1,"141":7,"145":3,"148":3,"164":11,"178":2,"269":3,"291":1,"303":2,"341":1,"365":3,"382":1,"401":4,"404":4,"410":1,"411":1,"420":4,"471":2,"520":1,"539":7,"540":2,"551":1,"571":2,"592":7}}],["etc",{"2":{"173":1,"270":1,"328":1,"552":1,"592":3}}],["ethjsmessage",{"2":{"411":1}}],["ethjsaddress",{"2":{"298":1,"319":2,"545":1,"546":1,"547":1}}],["ethactions",{"2":{"399":2}}],["ethactionsapi",{"2":{"393":1}}],["ethaccountshandler",{"2":{"279":1}}],["ethgetblockbynumberhandler",{"2":{"281":1}}],["ethgetblockbyhashhandler",{"2":{"281":1}}],["ethgetbalancehandler",{"2":{"280":1}}],["ethgetstorageathandler",{"2":{"280":1}}],["ethgetcodehandler",{"2":{"280":1}}],["ethgaspricehandler",{"2":{"279":1}}],["ethblocknumberhandler",{"2":{"279":1}}],["ethcall",{"2":{"290":2}}],["ethcallhandler",{"2":{"280":1,"290":2}}],["ethcoinbasehandler",{"2":{"279":1}}],["ethchainidhandler",{"2":{"279":1}}],["ether",{"2":{"405":1,"560":2}}],["ethers",{"0":{"91":1,"151":1,"163":1,"248":1},"1":{"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"161":1,"162":1,"163":1,"164":1,"165":1},"2":{"91":2,"94":1,"151":1,"152":2,"154":1,"155":1,"160":1,"162":1,"164":1,"248":2}}],["ethereumjs",{"2":{"10":2,"125":1,"128":1,"130":1,"132":1,"137":2,"184":1,"230":1,"293":1,"323":1,"346":1,"347":1,"366":1,"407":1,"422":1,"473":1,"499":1,"572":1}}],["ethereum",{"0":{"87":1,"260":1,"278":1,"395":1,"399":1,"559":1},"1":{"261":1,"262":1,"263":1,"264":1,"279":1,"280":1,"281":1,"560":1,"561":1},"2":{"0":1,"10":1,"27":1,"48":1,"71":1,"84":1,"94":2,"96":1,"102":1,"109":1,"124":1,"126":1,"137":1,"151":1,"172":1,"178":1,"182":1,"187":1,"215":1,"217":1,"227":2,"237":1,"245":1,"254":2,"257":1,"259":1,"265":1,"267":1,"270":2,"292":1,"293":1,"295":1,"298":1,"307":1,"308":1,"312":1,"322":1,"323":1,"356":1,"367":1,"386":1,"388":1,"393":1,"396":2,"399":1,"405":1,"406":1,"407":2,"423":1,"424":1,"429":1,"431":1,"445":1,"459":1,"477":1,"499":1,"522":1,"544":1,"549":1,"553":2,"573":1}}],["eth",{"2":{"36":1,"85":1,"87":20,"93":6,"96":3,"161":1,"168":1,"173":2,"182":1,"183":1,"185":2,"191":1,"237":1,"398":1,"399":4,"401":1,"405":1}}],["equals",{"2":{"298":1,"305":1}}],["equal",{"2":{"163":2,"298":1}}],["e2e8f0",{"2":{"141":1}}],["else",{"2":{"127":1,"164":1,"404":1,"539":2,"592":1}}],["effects",{"2":{"257":1}}],["effect",{"2":{"119":3}}],["efficiently",{"2":{"93":1}}],["efficient",{"2":{"33":1,"37":1,"82":1,"255":1,"455":1,"479":1}}],["efficiency",{"2":{"18":1}}],["eject",{"2":{"96":1}}],["either",{"2":{"95":1}}],["eip1559compatibletx",{"2":{"504":1}}],["eip1193parameters",{"2":{"392":1}}],["eip1193requestoptions",{"2":{"392":1}}],["eip1193requestprovider",{"2":{"392":1}}],["eip1193requestfn",{"2":{"329":1,"392":1,"403":2}}],["eip4844compatibletx",{"2":{"504":1}}],["eip4844blobtxreceipt",{"0":{"463":1},"2":{"463":1,"472":1}}],["eip4844",{"2":{"455":1}}],["eip4844receipt",{"2":{"27":1}}],["eips",{"2":{"446":1,"575":1}}],["eip",{"0":{"85":1,"398":1,"446":1,"513":1,"514":1,"515":1},"2":{"44":1,"48":3,"71":1,"84":1,"85":1,"94":1,"126":1,"152":1,"188":1,"302":1,"307":2,"331":1,"349":1,"386":1,"388":1,"392":4,"398":1,"406":1,"446":4,"504":2,"506":3,"508":4,"510":1,"512":1,"521":4,"548":1}}],["estimating",{"0":{"186":1}}],["estimation",{"0":{"261":1},"2":{"24":1,"83":1,"93":1,"106":1}}],["estimatefeespergas",{"2":{"201":1}}],["estimatecontractgas",{"2":{"199":1}}],["estimate",{"2":{"87":1,"136":1,"164":1,"186":2,"228":1,"245":1}}],["estimategas",{"2":{"87":1,"93":2,"164":1,"199":1}}],["e",{"2":{"74":1,"77":1,"382":3,"420":1,"441":3,"520":2}}],["earliest",{"2":{"30":1,"59":1,"270":1,"328":1}}],["each",{"2":{"1":1,"42":1,"73":1,"79":1,"121":1,"141":6,"144":6,"145":2,"148":2,"149":2,"214":1,"338":1,"423":1}}],["emitter",{"0":{"565":1},"2":{"565":3}}],["emitted",{"2":{"73":4,"77":1,"582":2}}],["emits",{"2":{"29":1}}],["emit",{"2":{"29":2,"565":2}}],["emission",{"0":{"29":1}}],["empty",{"2":{"7":1,"9":1,"60":1,"131":2}}],["every",{"2":{"53":1,"188":1,"226":1,"242":1}}],["eventname",{"2":{"562":1}}],["eventactioncreator",{"2":{"371":1,"384":1}}],["eventtopic",{"2":{"30":3}}],["eventsignature",{"2":{"134":1}}],["events",{"0":{"72":1,"73":1,"157":1,"158":1,"185":1,"582":1},"1":{"73":1,"74":2,"75":2,"76":2,"77":2,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1},"2":{"29":3,"72":1,"77":2,"87":1,"141":3,"148":1,"149":1,"150":1,"157":2,"158":3,"176":3,"379":2,"562":1}}],["event",{"0":{"28":1,"29":1,"156":1,"176":1,"379":1,"565":1},"1":{"29":1,"30":1,"31":1,"157":1,"158":1},"2":{"25":1,"29":1,"30":1,"74":1,"75":1,"76":1,"77":1,"87":1,"93":1,"107":1,"112":1,"127":1,"134":1,"135":1,"157":5,"158":3,"162":2,"164":3,"176":3,"185":3,"234":1,"369":1,"371":2,"375":1,"379":5,"565":4,"569":1,"582":3}}],["evmopts",{"2":{"413":1}}],["evmruncallopts",{"2":{"412":1}}],["evmresult",{"0":{"77":1},"2":{"73":1,"77":2,"412":1}}],["evmstatemanagerinterface",{"2":{"352":1}}],["evmdebugger",{"0":{"141":1},"2":{"142":3,"146":1}}],["evmts",{"2":{"95":4,"265":1,"308":1,"323":1,"347":1,"367":1,"386":1,"407":1,"499":1,"553":1}}],["evmevent",{"2":{"73":1}}],["evmerrormessage",{"2":{"1":1,"2":2,"5":1,"9":2,"410":1,"420":1}}],["evmerror",{"2":{"1":1,"2":2,"5":1,"9":3,"411":1,"420":1}}],["evm",{"0":{"72":1,"103":1,"125":1,"230":1,"407":1,"417":1,"418":1},"1":{"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"126":1,"127":1,"408":1,"409":1,"410":1,"411":1,"412":1,"413":1,"414":1,"415":1,"416":1,"417":1,"418":1,"419":1,"420":1,"421":1,"422":1},"2":{"0":1,"1":1,"2":1,"9":1,"10":1,"11":1,"13":2,"20":2,"21":2,"23":2,"72":1,"73":1,"74":3,"77":4,"79":1,"103":3,"124":1,"125":6,"136":1,"137":1,"138":1,"141":4,"148":1,"149":1,"150":1,"173":1,"190":1,"196":1,"225":1,"227":2,"228":3,"230":2,"238":1,"243":1,"254":1,"255":1,"258":1,"261":1,"263":1,"264":1,"267":1,"272":1,"352":1,"407":4,"408":1,"410":1,"411":4,"412":1,"413":2,"415":1,"417":2,"418":1,"419":2,"420":1,"421":2,"422":1,"423":3,"424":1,"428":1,"435":1,"440":1,"445":1,"477":1,"573":2,"575":2}}],["enumeration",{"2":{"579":1}}],["enumerations",{"0":{"351":1,"410":1,"481":1,"502":1}}],["envelope",{"2":{"521":1}}],["environment",{"2":{"103":1,"227":1,"245":1,"254":2,"263":1,"407":1,"424":1}}],["environments",{"2":{"88":1}}],["enhancements",{"0":{"262":1}}],["enhanced",{"2":{"193":1}}],["engine",{"2":{"124":1,"230":1}}],["encodeeventtopics",{"2":{"562":2}}],["encodeabiparameters",{"2":{"562":1}}],["encodeconstructor",{"2":{"183":1}}],["encode",{"2":{"162":1,"562":1,"563":1}}],["encoded",{"2":{"146":1,"519":1}}],["encodefunctiondata",{"2":{"77":2,"162":1,"186":3,"437":1,"552":1,"562":2}}],["encoding",{"0":{"162":1,"556":1,"562":1,"563":1},"1":{"557":1,"558":1},"2":{"112":1,"115":1,"117":1,"552":1,"553":1}}],["encountered",{"2":{"77":1,"81":1}}],["enforces",{"2":{"39":1}}],["ensures",{"2":{"298":1}}],["ensure",{"2":{"33":1,"39":1,"93":1}}],["entry",{"2":{"102":1}}],["entries",{"2":{"16":1,"22":1,"145":1}}],["enter",{"2":{"40":1}}],["entire",{"2":{"23":1}}],["endtime",{"2":{"14":1}}],["enabled",{"2":{"12":1,"446":1}}],["enable",{"2":{"12":1,"417":1,"421":1}}],["enabling",{"0":{"12":1},"2":{"151":1,"187":1}}],["extract",{"2":{"569":2}}],["extractabievent",{"2":{"569":2}}],["extractabifunction",{"2":{"569":2}}],["extraction",{"2":{"371":2}}],["extradata",{"2":{"319":1}}],["external",{"2":{"245":1,"263":1}}],["externally",{"2":{"23":1}}],["extensive",{"2":{"349":1}}],["extensible",{"2":{"255":1}}],["extension",{"2":{"116":1,"228":1,"423":1}}],["extending",{"2":{"323":1,"386":1,"407":1,"499":1}}],["extended",{"0":{"88":1},"2":{"85":1,"429":1}}],["extends",{"2":{"14":2,"27":1,"298":1,"347":1,"461":1,"462":1,"463":1,"513":1,"514":1,"515":1,"573":1,"578":1}}],["extend",{"2":{"0":1,"85":1,"90":1,"91":1,"152":1,"188":1,"237":1,"243":1}}],["exechardfork",{"2":{"587":1}}],["execresult",{"2":{"77":4,"79":3,"81":3,"127":5,"141":3,"148":4,"173":1,"175":2,"179":1,"180":2,"185":1,"186":2,"412":1,"418":2,"591":1}}],["executing",{"0":{"590":1,"591":1},"2":{"77":1,"267":1,"272":1,"407":1,"575":1}}],["executionpayloadfrombeaconpayload",{"2":{"316":1}}],["executionpayload",{"2":{"315":1}}],["executiontime",{"2":{"14":1,"16":1,"17":2,"18":1,"20":1}}],["execution",{"0":{"103":1,"261":1},"2":{"11":1,"72":1,"73":1,"74":1,"77":5,"79":2,"81":1,"82":1,"88":1,"103":2,"124":1,"125":3,"126":2,"127":3,"136":3,"138":1,"141":5,"173":2,"228":1,"230":1,"238":1,"254":1,"257":1,"272":1,"273":1,"285":2,"314":1,"315":1,"316":1,"401":1,"404":1,"407":1,"412":2,"421":2,"440":1,"575":2,"578":1,"580":3,"581":3,"582":2,"586":1,"592":2}}],["executiongasused",{"2":{"1":1,"2":4,"3":1,"5":4,"6":1,"7":1,"8":2,"9":6,"77":2,"127":1,"141":1,"186":2,"243":1,"418":1,"419":1}}],["executes",{"2":{"587":1}}],["executed",{"2":{"74":1}}],["execute",{"2":{"1":1,"13":1,"26":1,"79":1,"80":1,"87":1,"141":1,"236":1,"280":1,"428":1,"590":1}}],["existing",{"2":{"429":1,"548":1,"564":1}}],["exist",{"2":{"269":1,"341":1}}],["exists",{"2":{"69":1,"489":1}}],["existent",{"2":{"31":1}}],["exceeded",{"2":{"269":1}}],["exception",{"2":{"164":1}}],["exceptions",{"2":{"136":1}}],["exceptionerror",{"2":{"2":1,"5":1,"9":2,"77":2,"79":2,"81":2,"127":2,"141":2,"148":1,"173":1,"175":2,"179":1,"180":2}}],["excessive",{"2":{"32":1}}],["explore",{"2":{"253":1}}],["explicitly",{"2":{"216":1}}],["experience",{"0":{"262":1}}],["experiences",{"2":{"254":1}}],["expectedvalue",{"2":{"175":1}}],["expect",{"2":{"163":3,"173":3,"175":5,"176":2,"178":1,"179":1,"180":2}}],["expensiveops",{"2":{"16":2}}],["expensive",{"2":{"16":2,"59":1}}],["expose",{"2":{"85":1}}],["exported",{"2":{"196":1}}],["exports",{"2":{"120":1,"384":1,"447":1,"472":1,"543":1,"552":2}}],["export",{"2":{"23":1,"144":3,"145":1,"428":1,"440":1}}],["examples",{"0":{"65":1,"78":1,"246":1,"286":1,"304":1,"317":1,"342":1,"360":1,"374":1,"397":1,"416":1,"467":1,"494":1,"531":1,"588":1},"1":{"66":1,"67":1,"68":1,"79":1,"80":1,"81":1,"247":1,"248":1,"287":1,"288":1,"289":1,"290":1,"305":1,"306":1,"318":1,"319":1,"320":1,"321":1,"343":1,"344":1,"345":1,"361":1,"362":1,"363":1,"364":1,"375":1,"376":1,"377":1,"378":1,"379":1,"398":1,"399":1,"400":1,"401":1,"417":1,"418":1,"419":1,"420":1,"421":1,"468":1,"469":1,"495":1,"532":1,"533":1,"534":1,"535":1,"536":1,"589":1,"590":1,"591":1},"2":{"92":1,"93":1,"228":1,"249":1,"253":1,"423":1}}],["example",{"0":{"4":1,"61":1,"166":1,"220":1,"256":1,"287":1,"288":1,"289":1,"290":1},"1":{"5":1,"6":1,"7":1,"8":1,"167":1,"168":1,"169":1,"170":1,"171":1},"2":{"2":1,"138":1,"146":2,"169":1,"225":2,"230":1,"381":3,"567":1,"592":1}}],["tip",{"2":{"552":1}}],["timing",{"2":{"216":1}}],["times",{"2":{"215":1}}],["timestamps",{"2":{"180":1,"192":1}}],["timestamp",{"2":{"18":1,"180":1,"319":1}}],["time",{"0":{"180":1},"2":{"18":1,"40":1,"180":5,"192":1,"215":2,"219":1,"254":1,"261":1,"529":2}}],["tchain",{"2":{"447":1}}],["tcommon",{"2":{"432":2,"447":1}}],["tuning",{"2":{"221":1}}],["t",{"2":{"188":1,"226":1,"269":1,"341":1,"546":1}}],["td",{"2":{"149":6}}],["tbody",{"2":{"149":2}}],["ts",{"2":{"139":1,"141":1,"142":1,"144":1,"145":1,"146":1,"148":1,"149":1,"264":1}}],["testactions",{"2":{"428":1}}],["testrpcschema",{"2":{"394":1}}],["testnet",{"2":{"255":1,"356":3}}],["test",{"0":{"173":1,"192":1,"202":1},"1":{"203":1,"204":1,"205":1},"2":{"163":2,"170":1,"173":2,"175":1,"176":1,"178":1,"179":2,"180":1,"182":1,"191":1,"192":6,"202":1,"212":1,"216":1,"219":2,"220":1,"228":1,"245":4,"257":1,"261":1,"262":1,"394":1,"428":1,"441":1,"549":1}}],["testing",{"0":{"163":1,"172":1,"174":1,"176":1,"177":1,"179":1,"180":1,"181":1,"220":1,"263":1,"282":1},"1":{"173":1,"174":1,"175":2,"176":2,"177":1,"178":2,"179":2,"180":2,"181":1,"182":2,"183":2,"184":1,"185":1,"186":1,"283":1,"284":1},"2":{"165":1,"172":3,"179":1,"184":1,"192":2,"193":1,"196":1,"214":1,"215":1,"216":1,"217":2,"219":2,"245":1,"254":2,"258":1,"267":1,"373":1,"424":1,"573":1}}],["tests",{"2":{"136":1,"219":1,"220":2,"245":1}}],["templates",{"2":{"369":1}}],["template",{"2":{"139":1,"141":1}}],["tevmstate",{"2":{"483":1}}],["tevmsendapi",{"2":{"393":1}}],["tevmsetaccount",{"2":{"95":2,"195":2,"428":1,"440":1}}],["tevmsetaccounterror",{"2":{"64":1}}],["tevmviemactions",{"2":{"428":1}}],["tevmviemactionsapi",{"2":{"427":1}}],["tevmready",{"2":{"428":1}}],["tevmrpcschema",{"2":{"427":1,"447":1}}],["tevmactions",{"2":{"400":2,"427":1,"447":1}}],["tevmactionsapi",{"2":{"393":1}}],["tevmtransport",{"2":{"226":1,"427":1,"447":1}}],["tevmnode",{"2":{"222":1,"225":3,"226":1,"229":1}}],["tevmloadstate",{"2":{"196":3,"428":1,"440":1}}],["tevmdeploy",{"2":{"194":2,"428":1,"437":1,"440":1}}],["tevmdumpstate",{"2":{"188":3,"196":3,"226":1,"428":1,"440":1}}],["tevmcontract",{"2":{"194":2,"427":1,"428":1,"437":1,"440":1,"447":1}}],["tevmcall",{"2":{"77":4,"79":2,"80":2,"81":2,"95":2,"96":3,"194":2,"428":1,"437":1,"440":1}}],["tevmgetaccount",{"2":{"95":2,"195":2,"428":1,"440":1}}],["tevmgetaccounterror",{"2":{"60":1}}],["tevmmine",{"2":{"95":3,"96":2,"196":3,"428":1,"440":1}}],["tevm",{"0":{"1":1,"95":1,"193":1,"196":1,"227":1,"228":1,"254":1,"257":1,"265":1,"293":1,"308":1,"323":1,"347":1,"367":1,"386":1,"400":1,"407":1,"424":1,"440":1,"450":1,"453":1,"474":1,"477":1,"496":1,"499":1,"522":1,"553":1,"573":1},"1":{"194":1,"195":1,"196":1,"255":1,"256":1,"257":1,"258":1,"259":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1,"272":1,"273":1,"274":1,"275":1,"276":1,"277":1,"278":1,"279":1,"280":1,"281":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"294":1,"295":1,"296":1,"297":1,"298":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"306":1,"307":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"324":1,"325":1,"326":1,"327":1,"328":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"342":1,"343":1,"344":1,"345":1,"346":1,"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1,"361":1,"362":1,"363":1,"364":1,"365":1,"366":1,"368":1,"369":1,"370":1,"371":1,"372":1,"373":1,"374":1,"375":1,"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"387":1,"388":1,"389":1,"390":1,"391":1,"392":1,"393":1,"394":1,"395":1,"396":1,"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"408":1,"409":1,"410":1,"411":1,"412":1,"413":1,"414":1,"415":1,"416":1,"417":1,"418":1,"419":1,"420":1,"421":1,"422":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1,"436":1,"437":1,"438":1,"439":1,"440":1,"441":1,"442":1,"443":1,"444":1,"445":1,"446":1,"447":1,"448":1,"449":1,"451":1,"452":1,"454":1,"455":1,"456":1,"457":1,"458":1,"459":1,"460":1,"461":1,"462":1,"463":1,"464":1,"465":1,"466":1,"467":1,"468":1,"469":1,"470":1,"471":1,"472":1,"473":1,"475":1,"476":1,"478":1,"479":1,"480":1,"481":1,"482":1,"483":1,"484":1,"485":1,"486":1,"487":1,"488":1,"489":1,"490":1,"491":1,"492":1,"493":1,"494":1,"495":1,"497":1,"498":1,"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"507":1,"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"515":1,"516":1,"517":1,"518":1,"519":1,"520":1,"521":1,"523":1,"524":1,"525":1,"526":1,"527":1,"528":1,"529":1,"530":1,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1,"554":1,"555":1,"556":1,"557":1,"558":1,"559":1,"560":1,"561":1,"562":1,"563":1,"564":1,"565":1,"566":1,"567":1,"568":1,"569":1,"570":1,"571":1,"572":1,"574":1,"575":1,"576":1,"577":1,"578":1,"579":1,"580":1,"581":1,"582":1,"583":1,"584":1,"585":1,"586":1,"587":1,"588":1,"589":1,"590":1,"591":1,"592":1,"593":1,"594":1,"595":1},"2":{"0":1,"1":7,"2":6,"11":1,"12":1,"25":1,"26":4,"27":1,"36":3,"45":1,"48":1,"57":1,"61":2,"66":1,"72":1,"74":4,"77":2,"79":2,"80":2,"81":2,"83":1,"84":1,"85":2,"88":1,"90":2,"91":2,"94":1,"95":9,"96":2,"97":2,"99":4,"100":4,"102":3,"103":2,"104":2,"106":2,"107":2,"109":3,"110":2,"112":2,"113":1,"115":2,"116":2,"117":2,"119":2,"120":2,"121":4,"123":1,"138":1,"139":4,"141":3,"142":1,"145":2,"146":1,"151":1,"152":3,"154":2,"162":1,"163":2,"164":2,"167":1,"172":1,"173":2,"175":1,"185":1,"186":1,"187":2,"188":9,"189":1,"191":2,"193":1,"194":1,"195":1,"196":6,"212":1,"220":1,"223":1,"224":1,"225":7,"226":5,"227":6,"228":2,"235":1,"236":4,"237":1,"239":2,"241":1,"247":2,"251":4,"252":1,"254":1,"256":1,"258":1,"265":4,"266":1,"267":1,"287":2,"288":1,"289":1,"290":1,"293":2,"294":1,"298":1,"300":1,"301":1,"302":1,"305":1,"306":1,"307":1,"308":2,"309":1,"310":1,"318":2,"319":3,"321":2,"323":2,"324":1,"328":2,"331":3,"340":1,"343":3,"344":1,"345":1,"347":3,"348":1,"349":1,"361":2,"362":1,"363":1,"364":1,"367":2,"368":1,"375":1,"377":1,"378":1,"384":1,"386":4,"387":1,"388":2,"393":2,"394":1,"398":1,"399":1,"400":6,"403":1,"404":1,"407":2,"408":1,"417":4,"419":2,"422":2,"423":16,"424":3,"425":1,"427":1,"429":1,"431":1,"435":2,"443":1,"444":2,"449":1,"450":1,"453":2,"454":1,"457":1,"465":1,"474":1,"477":2,"478":1,"483":1,"496":1,"499":3,"500":1,"508":1,"509":1,"510":2,"517":1,"520":1,"522":2,"523":1,"532":2,"541":3,"543":3,"544":2,"547":2,"548":1,"552":3,"553":3,"554":1,"557":1,"558":1,"560":1,"561":1,"562":1,"563":1,"564":1,"565":1,"567":1,"568":1,"569":1,"570":1,"571":2,"573":2,"574":1,"575":1,"578":1,"589":2,"590":1,"591":1,"594":3}}],["taccountoraddress",{"2":{"432":2,"447":2}}],["tasks",{"2":{"225":1}}],["takes",{"2":{"225":1}}],["take",{"2":{"225":1}}],["table",{"2":{"149":2}}],["target",{"2":{"76":1,"185":2,"529":1}}],["targeted",{"2":{"23":1}}],["tag",{"2":{"59":1,"270":1,"328":1,"334":1,"492":1}}],["two",{"2":{"42":1,"57":1,"298":1,"434":1}}],["trpcschema",{"2":{"432":1,"447":1}}],["trip",{"2":{"261":1}}],["trigger",{"2":{"176":1}}],["trie",{"0":{"496":1},"1":{"497":1,"498":1},"2":{"117":1,"496":1,"585":1}}],["tr",{"2":{"149":4}}],["traversal",{"0":{"337":1},"1":{"338":1,"339":1},"2":{"325":1}}],["traveling",{"2":{"192":1}}],["transferfunction",{"2":{"569":1}}],["transferfromtx",{"2":{"186":2}}],["transferfrom",{"2":{"186":3}}],["transferaction",{"2":{"377":1}}],["transferresult",{"2":{"186":2}}],["transferevent",{"2":{"157":2,"569":1}}],["transfer",{"2":{"155":2,"157":4,"158":3,"162":3,"163":3,"164":7,"169":1,"173":1,"239":2,"288":1,"375":3,"377":2,"379":2,"382":1,"562":2,"569":2}}],["transitions",{"2":{"103":1,"104":1,"125":1,"230":1,"477":1,"479":1,"575":1}}],["transport",{"2":{"90":1,"99":1,"167":1,"170":1,"171":2,"179":1,"185":1,"188":2,"241":1,"247":1,"256":1,"329":1,"331":1,"340":1,"344":1,"398":1,"399":1,"400":1,"427":1,"428":1,"431":1,"432":2,"435":1}}],["transactionfactory",{"0":{"509":1},"2":{"503":1,"509":4,"517":2}}],["transactiontype",{"2":{"502":1}}],["transactionindex",{"2":{"185":2}}],["transactionhash",{"2":{"135":2}}],["transactionstrie",{"2":{"319":1}}],["transactions",{"0":{"42":1,"44":1,"510":1,"512":1,"513":1,"514":1,"515":1,"517":1,"518":1,"533":1,"534":1},"2":{"13":1,"35":1,"37":2,"39":1,"40":3,"42":1,"43":1,"44":3,"45":1,"47":3,"48":3,"93":1,"95":2,"96":3,"132":3,"148":3,"168":1,"172":1,"185":4,"219":1,"228":1,"232":2,"236":1,"242":1,"245":1,"255":1,"261":1,"277":1,"446":1,"499":2,"503":1,"506":4,"508":4,"509":1,"510":1,"512":1,"513":1,"514":1,"515":1,"521":1,"522":1,"524":3,"529":2,"530":2,"534":3,"535":2,"538":7,"540":2,"575":1,"590":1}}],["transaction",{"0":{"35":1,"40":1,"43":1,"48":1,"50":1,"105":1,"106":1,"132":1,"133":1,"148":1,"161":1,"183":1,"200":1,"208":1,"232":1,"438":1,"508":1,"511":1,"519":1,"532":1,"535":1,"580":1,"586":1,"591":1},"1":{"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"106":1,"107":1,"133":1,"512":1,"513":1,"514":1,"515":1},"2":{"1":2,"24":1,"25":1,"26":2,"34":1,"35":2,"36":1,"37":4,"39":1,"43":2,"47":1,"48":1,"52":1,"55":3,"81":2,"87":5,"88":1,"93":1,"96":2,"102":1,"106":5,"107":1,"124":2,"125":2,"132":3,"133":4,"134":2,"136":1,"137":1,"141":3,"148":2,"155":2,"161":3,"173":3,"175":1,"183":2,"185":2,"190":1,"191":1,"214":2,"215":1,"219":1,"220":2,"221":2,"227":1,"232":2,"234":1,"238":1,"242":1,"245":2,"255":1,"257":1,"277":1,"285":1,"423":3,"438":1,"453":2,"455":2,"458":1,"468":1,"499":1,"502":2,"503":4,"504":7,"505":1,"506":1,"508":2,"510":1,"519":4,"521":1,"522":1,"524":4,"527":1,"530":7,"533":4,"535":1,"537":1,"538":2,"539":5,"540":2,"575":1,"578":1,"580":3,"582":1,"585":1,"586":1,"592":2}}],["tracing",{"2":{"79":1,"267":1}}],["traces",{"2":{"116":1}}],["tracetransaction",{"2":{"88":1}}],["trace",{"2":{"79":8,"88":1,"285":2,"421":1}}],["tracer",{"2":{"79":2}}],["tracks",{"2":{"126":1}}],["tracking",{"2":{"107":1}}],["track",{"2":{"18":1,"22":1,"79":3,"141":2,"255":1}}],["tree",{"0":{"17":1,"314":1},"2":{"17":1,"117":2,"121":1,"188":2,"189":1,"223":1,"224":1,"225":2,"226":3,"227":1,"236":1,"310":1,"423":1}}],["true",{"2":{"12":3,"51":1,"61":1,"77":1,"95":1,"96":2,"141":1,"145":1,"185":1,"305":1,"436":1,"533":1,"558":3,"593":1}}],["try",{"2":{"9":1,"42":1,"51":1,"82":1,"93":1,"133":1,"141":1,"145":1,"164":1,"178":1,"180":2,"365":1,"382":1,"401":1,"404":1,"420":1,"471":1,"520":1,"539":1,"592":1}}],["thin",{"2":{"547":1}}],["this",{"2":{"60":1,"76":5,"84":1,"123":1,"138":1,"151":1,"172":1,"187":1,"212":1,"223":1,"226":1,"295":1,"423":1,"448":1,"450":1,"473":1,"474":1,"496":1}}],["those",{"2":{"223":1}}],["threshold",{"2":{"217":1}}],["through",{"2":{"25":1,"77":1,"84":1,"192":1,"328":1,"338":1,"429":1,"593":1}}],["throws",{"2":{"300":1,"301":1,"302":1,"341":1,"365":1,"539":1,"546":1,"550":1,"592":1}}],["throwing",{"2":{"291":1}}],["thrown",{"2":{"269":3,"303":2,"551":2}}],["throwonfail",{"2":{"69":1,"291":2}}],["throw",{"2":{"6":1,"7":1,"9":2,"29":1,"33":1,"164":1,"178":1,"382":1,"401":1}}],["th",{"2":{"149":6}}],["than",{"2":{"23":1}}],["that",{"2":{"1":1,"11":1,"23":1,"29":1,"35":1,"60":1,"64":1,"76":1,"95":1,"123":1,"168":1,"185":1,"187":1,"224":1,"225":5,"226":1,"227":1,"229":1,"230":1,"254":1,"256":1,"298":1,"328":1,"378":1,"431":1,"457":1,"510":1,"575":1,"578":1}}],["them",{"2":{"226":1}}],["there",{"2":{"225":1}}],["thead",{"2":{"149":2}}],["they",{"2":{"35":1,"510":1}}],["their",{"2":{"26":1,"123":1,"225":2,"455":1,"522":1,"530":1}}],["these",{"2":{"0":1,"192":1,"196":1,"222":1,"225":1,"543":1,"552":1}}],["the",{"0":{"12":1,"74":1,"75":1,"76":1,"77":1},"2":{"0":1,"1":3,"14":1,"23":2,"25":1,"26":1,"27":1,"30":1,"31":1,"32":1,"35":1,"39":1,"40":1,"43":1,"45":1,"48":1,"58":2,"59":1,"60":1,"62":1,"74":9,"75":3,"76":7,"77":5,"85":1,"90":1,"91":1,"92":3,"95":3,"96":1,"97":1,"99":1,"121":3,"123":1,"124":1,"125":1,"128":1,"129":1,"130":1,"132":1,"134":1,"138":1,"146":3,"151":1,"167":2,"169":1,"172":1,"173":1,"175":1,"176":1,"178":1,"179":1,"180":1,"182":1,"183":1,"185":5,"186":2,"187":3,"188":3,"196":1,"217":1,"218":1,"219":1,"220":1,"222":3,"224":1,"225":4,"226":1,"228":1,"236":1,"239":1,"243":1,"252":2,"253":1,"254":1,"255":1,"258":1,"261":1,"265":4,"267":1,"293":2,"298":4,"300":2,"301":9,"302":5,"303":1,"308":3,"310":1,"323":6,"325":1,"328":6,"332":1,"340":1,"341":1,"347":4,"349":1,"355":1,"365":1,"367":3,"369":1,"376":1,"384":1,"386":3,"388":1,"407":6,"423":1,"424":2,"429":1,"431":1,"434":1,"439":1,"447":1,"448":1,"450":2,"453":3,"455":1,"457":1,"458":1,"459":1,"465":1,"470":1,"471":1,"472":1,"473":2,"474":2,"477":2,"479":1,"487":1,"496":2,"499":4,"508":1,"520":1,"522":2,"524":1,"527":2,"529":4,"530":5,"532":1,"536":3,"537":1,"538":1,"539":1,"543":1,"546":1,"548":1,"550":1,"552":1,"553":3,"571":2,"573":3,"575":2,"578":2,"585":1,"587":1,"590":2,"592":1,"593":2,"594":1}}],["txoptions",{"2":{"504":1}}],["txdata",{"2":{"504":1,"520":1}}],["txreceiptwithtype",{"2":{"472":1}}],["txreceipt",{"2":{"134":1,"472":1}}],["txresult",{"2":{"125":1,"175":2,"591":3}}],["txhash",{"2":{"93":2,"96":4,"132":1,"134":1,"458":1,"468":1,"471":1,"472":1,"535":1}}],["txhashes",{"2":{"44":2,"534":1}}],["txsinpool",{"2":{"53":1,"529":1}}],["txsbypriceandnonce",{"2":{"44":1,"132":1,"530":1,"534":1}}],["txs",{"2":{"39":1,"148":2,"529":2,"534":1}}],["txpooloptions",{"2":{"528":1,"537":1}}],["txpoolobject",{"2":{"55":1}}],["txpool",{"0":{"55":1,"522":1,"527":1},"1":{"523":1,"524":1,"525":1,"526":1,"527":1,"528":2,"529":2,"530":2,"531":1,"532":1,"533":1,"534":1,"535":1,"536":1,"537":1,"538":1,"539":1,"540":1,"541":1,"542":1},"2":{"35":1,"36":3,"39":1,"42":2,"43":2,"44":3,"45":1,"47":4,"51":1,"53":2,"55":1,"106":1,"124":1,"132":1,"423":1,"522":1,"523":1,"527":1,"528":1,"532":6,"533":2,"534":3,"535":3,"536":5,"539":1}}],["txindex",{"2":{"26":1}}],["tx",{"0":{"499":1},"1":{"500":1,"501":1,"502":1,"503":1,"504":1,"505":1,"506":1,"507":1,"508":1,"509":1,"510":1,"511":1,"512":1,"513":1,"514":1,"515":1,"516":1,"517":1,"518":1,"519":1,"520":1,"521":1},"2":{"1":3,"2":1,"20":2,"21":1,"26":4,"29":2,"36":3,"39":1,"42":2,"50":1,"51":1,"55":2,"93":2,"96":5,"106":1,"125":1,"132":1,"141":1,"146":2,"148":5,"155":2,"161":2,"164":3,"168":2,"173":4,"175":3,"176":2,"179":2,"180":4,"183":4,"185":5,"186":3,"228":2,"238":1,"261":1,"383":1,"423":1,"499":3,"500":1,"509":4,"510":2,"517":2,"518":1,"520":2,"529":1,"590":1,"591":1,"592":1}}],["typeof",{"2":{"141":1,"384":1,"568":2,"569":2}}],["typedtransaction",{"2":{"505":1}}],["typed",{"2":{"92":1,"521":1}}],["typesafe",{"2":{"423":1}}],["typescript",{"2":{"121":1,"403":1}}],["types",{"0":{"14":1,"27":1,"48":1,"120":1,"270":1,"314":1,"315":1,"327":1,"384":1,"391":1,"392":1,"393":1,"394":1,"395":1,"396":1,"447":1,"459":1,"472":1,"482":1,"484":1,"508":1,"511":1,"556":1,"566":1,"567":1,"568":1,"569":1,"577":1},"1":{"328":1,"329":1,"392":1,"393":1,"394":1,"395":1,"396":1,"460":1,"461":1,"462":1,"463":1,"483":1,"484":1,"485":1,"512":1,"513":1,"514":1,"515":1,"557":1,"558":1,"567":1,"568":1,"569":1,"578":1,"579":1,"580":1,"581":1,"582":1},"2":{"9":2,"14":1,"27":1,"33":1,"48":1,"50":1,"71":1,"92":2,"93":1,"115":1,"116":1,"120":1,"183":2,"300":1,"303":2,"341":1,"351":1,"381":1,"384":1,"403":1,"410":1,"447":1,"455":1,"459":1,"472":1,"481":1,"499":1,"502":1,"505":1,"508":1,"519":1,"520":1,"546":1,"553":1,"582":1,"592":1}}],["type",{"0":{"60":1,"64":1,"353":1,"371":1,"381":1,"403":1,"413":1,"427":1,"505":1,"558":1},"2":{"1":1,"14":4,"16":1,"17":1,"18":2,"22":1,"33":1,"59":1,"60":1,"63":1,"64":1,"73":1,"74":1,"76":1,"77":2,"93":1,"95":2,"115":1,"120":2,"121":2,"141":1,"145":1,"157":2,"173":1,"180":1,"214":1,"215":1,"216":1,"217":1,"218":2,"220":3,"239":2,"242":1,"270":3,"303":1,"329":1,"353":1,"362":1,"367":1,"369":1,"371":6,"375":3,"381":1,"384":2,"388":1,"392":1,"394":3,"395":2,"396":4,"403":2,"423":1,"427":4,"447":6,"451":1,"472":3,"475":1,"483":2,"497":1,"503":3,"505":3,"506":4,"508":4,"513":1,"514":1,"515":1,"567":2,"568":3,"569":3,"578":2,"579":1,"580":1,"581":1}}],["torlp",{"2":{"552":1,"563":2}}],["tojson",{"2":{"320":1,"519":1}}],["tomatchsnapshot",{"2":{"178":1}}],["tokens",{"2":{"377":1}}],["token",{"0":{"186":1},"2":{"163":8,"186":1,"373":1,"376":3,"377":7,"378":1,"385":1}}],["tokenaddress",{"2":{"154":2,"155":1,"157":1,"158":1,"186":2}}],["together",{"2":{"121":1,"229":1}}],["tostring",{"2":{"77":5,"79":3,"80":1,"81":1,"82":2,"141":4,"144":2,"148":3,"149":1,"185":1,"298":1,"305":1,"419":1,"547":1,"591":1}}],["top",{"2":{"74":1,"96":1,"145":1}}],["topiclogs",{"2":{"30":1}}],["topic",{"2":{"30":2,"33":1,"396":1}}],["topics",{"0":{"10":1,"24":1,"34":1,"56":1,"70":1,"83":1,"94":1,"122":1,"137":1,"150":1,"165":1,"184":1,"221":1},"2":{"93":1,"127":2,"134":1,"135":2,"162":2,"176":2,"458":1,"469":1,"562":1}}],["tooling",{"2":{"264":1}}],["tools",{"0":{"111":1,"116":1},"1":{"112":1,"113":1},"2":{"84":1,"187":1,"575":1}}],["too",{"2":{"51":2,"188":1,"539":2}}],["tobedefined",{"2":{"175":1,"180":1}}],["tobe",{"2":{"173":1,"175":2,"176":2}}],["tobeundefined",{"2":{"173":1,"175":2,"179":1,"180":1}}],["tobytes",{"2":{"30":2,"298":1}}],["toblock",{"2":{"30":4,"31":1,"134":1,"176":1,"469":1}}],["totalsupply",{"2":{"377":1}}],["total",{"2":{"39":1,"77":2,"149":1,"519":1}}],["totalgas",{"2":{"16":2,"18":2,"22":4,"80":8,"149":4}}],["totaltime",{"2":{"16":4,"18":2,"20":1}}],["to",{"0":{"155":1,"452":1,"476":1,"498":1},"2":{"0":2,"1":2,"17":2,"22":1,"23":1,"26":1,"29":3,"32":1,"36":1,"37":1,"39":1,"50":1,"58":1,"59":2,"62":1,"63":1,"69":1,"72":2,"74":1,"76":2,"77":4,"79":2,"80":2,"81":1,"82":1,"85":1,"92":1,"93":3,"95":2,"121":2,"125":1,"138":1,"141":1,"145":1,"146":1,"148":5,"151":1,"155":1,"157":5,"158":3,"160":1,"161":1,"162":2,"163":3,"164":3,"167":1,"168":1,"172":1,"173":2,"175":1,"180":1,"182":1,"183":4,"185":1,"186":2,"187":1,"190":1,"191":1,"194":1,"196":2,"212":2,"215":1,"217":1,"218":2,"222":2,"223":2,"224":1,"226":3,"227":2,"236":1,"239":1,"257":1,"261":1,"284":1,"287":1,"288":1,"290":1,"291":2,"300":1,"316":2,"320":1,"328":1,"345":1,"375":2,"376":2,"379":2,"381":1,"398":1,"400":1,"401":1,"418":1,"420":1,"424":1,"437":1,"452":1,"458":2,"459":1,"470":1,"476":1,"490":1,"498":1,"499":1,"510":1,"512":1,"517":2,"529":4,"530":2,"540":1,"551":1,"552":1,"557":3,"560":2,"562":1,"563":1,"570":2,"585":1,"590":1}}]],"serializationVersion":2}
